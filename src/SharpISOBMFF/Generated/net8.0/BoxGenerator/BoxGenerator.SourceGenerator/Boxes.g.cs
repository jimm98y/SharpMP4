using System;
using System.Linq;
using System.Collections.Generic;

namespace SharpISOBMFF
{
    public class BoxFactory
    {
        public static Func<string, string, byte[], Box> CreateBox = DefaultCreateBox;
        public static Func<string, SampleGroupDescriptionEntry> CreateEntry = DefaultCreateEntry;
        public static Func<byte, Descriptor> CreateDescriptor = DefaultCreateDescriptor;

        public static Box DefaultCreateBox(string fourCC, string parent, byte[] uuid = null)
        {
            if (uuid != null) fourCC = $"{fourCC} {Convert.ToHexString(uuid).ToLowerInvariant()}";

            switch(fourCC)
            {
               case "----":  return new CustomBox();
               case ".mp3": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC(".mp3"));break;
               case "@day":  return new RicohAppleRecordingYear2Box();
               case "@mak":  return new RicohAppleMakBox();
               case "@mod":  return new RicohAppleCameraModelBox();
               case "@ppi":  return new ParentProductIDBox();
               case "@PRM":  return new AdobePremiereVersionBox();
               case "@PRQ":  return new AdobePremiereQuickTimeVersionBox();
               case "@PST":  return new ParentShortTitleBox();
               case "@pti":  return new ParentTitleBox();
               case "@sec":  return new SamsungSecBox();
               case "@sti":  return new ShortTitleBox();
               case "@swr":  return new RicohAppleSoftwareBox();
               case "@xyz":  return new RicohAppleGPSCoordinatesBox();
               case "\0\0\0\0": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("\0\0\0\0"));break;
               case "\x6D\x73\x00\x02": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("\x6D\x73\x00\x02"));break;
               case "\x6D\x73\x00\x11": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("\x6D\x73\x00\x11"));break;
               case "\x6D\x73\x00\x55": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("\x6D\x73\x00\x55"));break;
               case "_htc":  return new HTCInfoBox();
               case "©alb":  return new AppleAlbumBox();
               case "©ard":  return new AppleArtDirectorBox();
               case "©arg":  return new AppleArgBox();
               case "©ark":  return new AppleArkBox();
               case "©art":  return new AppleArtist3Box();
               case "©ART":  return new AppleArtistBox();
               case "©aut":  return new AppleAuthorBox();
               case "©cmt":  return new AppleCommentBox();
               case "©cok":  return new AppleCokBox();
               case "©com":  return new AppleComBox();
               case "©con":  return new AppleConductorBox();
               case "©cpy":  return new AppleCopyright2Box();
               case "©day":  return new AppleRecordingYear2Box();
               case "©des":  return new AppleDescriptionBox();
               case "©dir":  return new AppleDirBox();
               case "©ed1":  return new AppleEd1Box();
               case "©ed2":  return new AppleEd2Box();
               case "©ed3":  return new AppleEd3Box();
               case "©ed4":  return new AppleEd4Box();
               case "©ed5":  return new AppleEd5Box();
               case "©ed6":  return new AppleEd6Box();
               case "©ed7":  return new AppleEd7Box();
               case "©ed8":  return new AppleEd8Box();
               case "©ed9":  return new AppleEd9Box();
               case "©enc":  return new AppleEncoderNameBox();
               case "©fmt":  return new AppleFmtBox();
               case "©fpt":  return new ApplePitchBox();
               case "©frl":  return new AppleRollBox();
               case "©fyw":  return new AppleYawBox();
               case "©gen":  return new AppleGenreBox();
               case "©gpt":  return new AppleCameraPitchBox();
               case "©grl":  return new AppleCameraRollBox();
               case "©grp":  return new AppleGroupingBox();
               case "©gyw":  return new AppleCameraYawBox();
               case "©hst":  return new AppleHostComputerBox();
               case "©inf":  return new AppleInfBox();
               case "©isr":  return new AppleIsrBox();
               case "©lab":  return new AppleLabBox();
               case "©lal":  return new AppleLalBox();
               case "©lyr":  return new AppleLyricsBox();
               case "©mak":  return new AppleMakBox();
               case "©mal":  return new AppleMakerUrlBox();
               case "©mdl":  return new AppleModelBox();
               case "©mod":  return new AppleCameraModelBox();
               case "©mvc":  return new AppleMovementCountBox();
               case "©mvi":  return new AppleMovementNumberBox();
               case "©mvn":  return new AppleMovementNameBox();
               case "©nak":  return new AppleNakBox();
               case "©nam":  return new AppleNameBox();
               case "©nrt":  return new AppleNarratorBox();
               case "©ope":  return new AppleComposerBox();
               case "©pdk":  return new ApplePdkBox();
               case "©phg":  return new ApplePhgBox();
               case "©prd":  return new AppleProducerBox();
               case "©PRD":  return new AppleProductBox();
               case "©prf":  return new ApplePrfBox();
               case "©prk":  return new ApplePrkBox();
               case "©prl":  return new ApplePrlBox();
               case "©pub":  return new ApplePublisherBox();
               case "©req":  return new AppleRequirementsBox();
               case "©sne":  return new AppleSoundEngineerBox();
               case "©snk":  return new AppleSnkBox();
               case "©snm":  return new AppleSnmBox();
               case "©sol":  return new AppleSoloistBox();
               case "©src":  return new AppleSrcBox();
               case "©st3":  return new AppleSubtitleBox();
               case "©swf":  return new AppleCreatorBox();
               case "©swk":  return new AppleSwkBox();
               case "©swr":  return new AppleSoftwareBox();
               case "©TIM":  return new AppleStartTimecode();
               case "©too":  return new AppleEncoderToolBox();
               case "©trk":  return new AppleTrackBox();
               case "©TSC":  return new AppleStartTimeScale();
               case "©TSZ":  return new AppleStartTimeSampleSize();
               case "©url":  return new AppleUrlBox();
               case "©wrk":  return new AppleWorkBox();
               case "©wrn":  return new AppleWarningBox();
               case "©wrt":  return new AppleComposersBox();
               case "©xpd":  return new AppleExecutiveProducerBox();
               case "©xsp":  return new AppleSpeedXBox();
               case "©xyz":  return new AppleGPSCoordinatesBox();
               case "©ysp":  return new AppleSpeedYBox();
               case "©zsp":  return new AppleSpeedZBox();
               case "0000":  return new ZeroBox();
               case "2vuY": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("2vuY"));break;
               case "3dpr":  return new MVDDepthResolutionBox();
               case "3sib":  return new MVDScalabilityInformationSEIBox();
               case "a1lx":  return new AV1LayeredImageIndexingProperty();
               case "a1op":  return new OperatingPointSelectorProperty();
               case "a3d1": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("a3d1"));break;
               case "a3d2": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("a3d2"));break;
               case "a3d3": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("a3d3"));break;
               case "a3d4": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("a3d4"));break;
               case "a3dC":  return new A3DConfigurationBox();
               case "aART":  return new AppleArtist2Box();
               case "ac-3": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("ac-3"));break;
               case "acgl":  return new SubpicCommonGroupBox();
               case "ainf":  return new AssetInformationBox();
               case "akID":  return new ITunesAccountTypeBox();
               case "alac": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("alac"));break;
               case "alaw": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("alaw"));break;
               case "albm":  return new ThreeGPPAlbumBox();
               case "alis":  return new AppleDataReferenceAliasBox();
               case "AllF":  return new PlayAllFramesBox();
               case "alou":  return new AlbumLoudnessInfo();
               case "alte":  return new AlteTrackGroupTypeBox();
               case "altr":  return new AlternativesEntityGroupBox();
               case "altt":  return new AccessibilityTextProperty();
               case "amf0":  return new Amf0Box();
               case "amgl":  return new SubpicMultipleGroupsBox();
               case "amve":  return new AmbientViewingEnvironmentBox();
               case "apcn": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("apcn"));break;
               case "apID":  return new ITunesPurchaseAccountBox();
               case "apmd":  return new AppleApertureModeBox();
               case "APRF":  return new PspAprfBox();
               case "ardt":  return new ARDroneFileBox();
               case "assp":  return new AlternativeStartupSequencePropertiesBox();
               case "atID":  return new AppleAtIDBox();
               case "auth":  return new ThreeGPPAuthorBox();
               case "auxC":  return new AuxiliaryTypeProperty();
               case "auxi":  return new AuxiliaryTypeInfoBox();
               case "auxl":  return new AuxiliaryImageReferenceBox();
               case "av01": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("av01"));break;
               case "av1C":  return new AV1CodecConfigurationBox();
               case "avc1": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("avc1"));break;
               case "avc2": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("avc2"));break;
               case "avc3": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("avc3"));break;
               case "avc4": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("avc4"));break;
               case "avcC":  return new AVCConfigurationBox();
               case "avcn":  return new AvcNalUnitStorageBox();
               case "avcp": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("avcp"));break;
               case "bloc":  return new BaseLocationBox();
               case "brnd":  return new BrandProperty();
               case "btrt":  return new BitRateBox();
               case "buff":  return new BufferingBox();
               case "bxml":  return new BinaryXMLBox();
               case "c608":  return new C608Box();
               case "CAME":  return new CameraFirmwareBox();
               case "catg":  return new CategoryBox();
               case "cbmp":  return new CubemapProjection();
               case "ccid":  return new OMAContentIDBox();
               case "cclv":  return new ContentColourVolumeBox();
               case "ccst":  return new CodingConstraintsBox();
               case "cdef":  return new J2kChannelDefinitionBox();
               case "CDI1":  return new CanonCDI1TagsBox();
               case "cdsc":  return new TrackReferenceTypeBox(IsoStream.FromFourCC("cdsc"));
               case "cert":  return new CertificateBox();
               case "chan":  return new AudioChannelLayoutBox();
               case "chap":  return new AppleChapterListBox();
               case "chnl":  return new ChannelLayout();
               case "chpl":  return new AdobeChapterBox();
               case "cinf":  return new CompleteTrackInfoBox();
               case "clap":  return new CleanApertureBox();
               case "clcp":  return new ClosedCaptionTrackBox();
               case "clef":  return new AppleCleanApertureDimensionsBox();
               case "clfn":  return new ClfnBox();
               case "clip":  return new AppleClippingBox();
               case "clli":  return new ContentLightLevelBox();
               case "clsf":  return new ThreeGPPClassificationBox();
               case "cmap":  return new J2kComponentMappingBox();
               case "cmex":  return new CameraExtrinsicMatrixBox();
               case "cmID":  return new CmIDBox();
               case "cmin":  return new CameraIntrinsicMatrixBox();
               case "cmov":  return new AppleCompressedMoovBox();
               case "CMP1":  return new CanonCMP1TagsBox();
               case "cmpC":  return new GenericCompressionConfigurationBox();
               case "cmpd":  return new ComponentDefinitionBox();
               case "cmvd":  return new AppleCompressedMoovDataBox();
               case "CNCV":  return new CanonCompressorVersionBox();
               case "cnID":  return new AppleStoreCatalogIDBox();
               case "co64":  return new ChunkLargeOffsetBox();
               case "CoLL":  return new ContentLightLevelBoxCoLLDup(); // TODO: fix duplicate
               case "colr":  return new ColourInformationBox();
               case "covr":  return new AppleCoverArtBox();
               case "cpat":  return new ComponentPatternDefinitionBox();
               case "cpil":  return new AppleCompilationBox();
               case "cprt": if(parent == "ilst") return new AppleCopyrightBox(); else return new CopyrightBox();
               case "crgn":  return new AppleClippingRegionBox();
               case "crtt":  return new CreationTimeProperty();
               case "csch":  return new CompatibleSchemeTypeBox();
               case "csgp":  return new CompactSampleToGroupBox();
               case "cslg":  return new CompositionToDecodeBox();
               case "cstg":  return new CstgTrackGroupTypeBox();
               case "ctab":  return new AppleColorTableBox();
               case "ctim":  return new CueTimeBox();
               case "ctry":  return new AppleCountryListBox();
               case "ctts":  return new CompositionOffsetBox();
               case "ctyp":  return new ControllerTypeBox();
               case "cust":  return new CustomInfoBox();
               case "cvid": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("cvid"));break;
               case "cvru":  return new OMACoverURLBox();
               case "d263":  return new H263SpecificBox();
               case "dac3":  return new AC3SpecificBox();
               case "damr":  return new AmrSpecificBox();
               case "data":  return new DataBox();
               case "dcom":  return new AppleDecompressorBox();
               case "ddts":  return new DTSSpecificBox();
               case "dec3":  return new EC3SpecificBox();
               case "desc":  return new AppleDescriptionBoxdescDup(); // TODO: fix duplicate
               case "devc":  return new EVRCSpecificBox();
               case "dfxp":  return new DfxpSampleEntry();
               case "dhec":  return new DefaultHevcExtractorConstructorBox();
               case "dimg":  return new SingleItemTypeReferenceBox(IsoStream.FromFourCC("dimg"));
               case "dimm":  return new hintimmediateBytesSent();
               case "dinf":  return new DataInformationBox();
               case "disk":  return new DiskNumberBox();
               case "dmax":  return new HintLongestPacket();
               case "dmed":  return new hintmediaBytesSent();
               case "dmix":  return new DownMixInstructions();
               case "dmlp":  return new MLPSpecificBox();
               case "dOps":  return new OpusSpecificBox();
               case "dpnd":  return new DpndBox();
               case "dqcp":  return new QCELPSpecificBox();
               case "dref":  return new DataReferenceBox();
               case "drep":  return new hintrepeatedBytesSent();
               case "drmi": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("drmi"));break;
               case "drms": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("drms"));break;
               case "dscp":  return new ThreeGPPDescriptionBox();
               case "dsmv":  return new SMVSpecificBox();
               case "dtsc": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("dtsc"));break;
               case "dtse": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("dtse"));break;
               case "dtsh": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("dtsh"));break;
               case "dtsl": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("dtsl"));break;
               case "dvav": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("dvav"));break;
               case "dvc ": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("dvc "));break;
               case "dvca": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("dvca"));break;
               case "dvcC":  return new DoViConfigurationBox();
               case "dvcp": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("dvcp"));break;
               case "dvhe": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("dvhe"));break;
               case "ec-3": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("ec-3"));break;
               case "ecam":  return new ExtrinsicCameraParametersBox();
               case "edts":  return new EditBox();
               case "egid":  return new EpisodeGlobalUniqueIdBox();
               case "elng":  return new ExtendedLanguageBox();
               case "elst":  return new EditListBox();
               case "emsg":  return new EventMessageBox();
               case "enca": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("enca"));break;
               case "enct":  return new TextSampleEntry();
               case "encv": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("encv"));break;
               case "enda":  return new AppleEndiannessBox();
               case "enof":  return new AppleEncodedPixelsDimensionsBox();
               case "equi":  return new EquirectangularProjection();
               case "esds":  return new ESDBox();
               case "etyp":  return new ExtendedTypeBox();
               case "evc1": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("evc1"));break;
               case "evcC":  return new EVCConfigurationBox();
               case "evs1": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("evs1"));break;
               case "evs2": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("evs2"));break;
               case "evsC":  return new EVCSliceComponentTrackConfigurationBox();
               case "exte":  return new MetaDataExtensionsBox();
               case "fade":  return new FadeTransitionEffectProperty();
               case "fall":  return new AlternateFormatTrackBox();
               case "fdp ":  return new FDHintSampleEntry();
               case "fecr":  return new FECReservoirBox();
               case "fiel":  return new FielBox();
               case "fiin":  return new FDItemInformationBox();
               case "fire":  return new FileReservoirBox();
               case "FIRM":  return new FirmwareBox();
               case "fl32": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("fl32"));break;
               case "fl64": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("fl64"));break;
               case "flvr":  return new AppleFlvrBox();
               case "folw":  return new SubtitleTrackBox();
               case "forc":  return new ForcedSubtitleTrackBox();
               case "fpar":  return new FilePartitionBox();
               case "fpcm":  return new FpcmBox();
               case "FPRF":  return new PspFprfBox();
               case "frea":  return new KodakFreaBox();
               case "free":  return new FreeSpaceBox();
               case "frma":  return new OriginalFormatBox();
               case "ftab":  return new FontTableBox();
               case "ftyp":  return new FileTypeBox();
               case "gama":  return new GammaBox();
               case "gdat":  return new GPSDataBox();
               case "geID":  return new AppleGeIDBox();
               case "gif ": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("gif "));break;
               case "gitn":  return new GroupIdToNameBox();
               case "gmhd":  return new GenericMediaHeaderAtom();
               case "gmin":  return new BaseMediaInfoAtom();
               case "gnre":  return new GenreBox();
               case "gps ":  return new GpsBox();
               case "GPS ":  return new GPSDataList2Box();
               case "gps0":  return new GPSTrackBox();
               case "grpl":  return new GroupsListBox();
               case "grup":  return new GroupingBox();
               case "gsen":  return new GSensorBox();
               case "gshh":  return new GooglesHostHeaderBox();
               case "gspm":  return new GooglePingMessageBox();
               case "gspu":  return new GooglePingUrlBox();
               case "gssd":  return new GoogleSourceDataBox();
               case "gsst":  return new GoogleStartTimeBox();
               case "gstd":  return new GoogleTrackDurationBox();
               case "GUID":  return new GUIDBox();
               case "h263": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("h263"));break;
               case "hdlr":  return new HandlerBox();
               case "hdvd":  return new HdvdBox();
               case "hev1": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("hev1"));break;
               case "hev2": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("hev2"));break;
               case "hev3": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("hev3"));break;
               case "hind":  return new TrackReferenceTypeBoxhindDup(); // TODO: fix duplicate
               case "hinf":  return new HintStatisticsBox();
               case "hint":  return new HintBox();
               case "hinv":  return new AppleHintVersionBox();
               case "hmhd":  return new HintMediaHeaderBox();
               case "hnti": return new TrackHintInformation(); // TODO: box is ambiguous in between TrackHintInformation and MovieHintInformation
               case "href":  return new HrefBox();
               case "htka":  return new HTCTrackBox();
               case "hvc1": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("hvc1"));break;
               case "hvc2": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("hvc2"));break;
               case "hvc3": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("hvc3"));break;
               case "hvcC":  return new HEVCConfigurationBox();
               case "hvt1": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("hvt1"));break;
               case "hvt2": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("hvt2"));break;
               case "hvt3": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("hvt3"));break;
               case "hvtC":  return new HEVCTileConfigurationBox();
               case "icam":  return new IntrinsicCameraParametersBox();
               case "icef":  return new GenericCompressedUnitsItemInfoBox();
               case "icnu":  return new OMAIconURLBox();
               case "icpv": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("icpv"));break;
               case "ID32":  return new ID3TagBox();
               case "idat":  return new ItemDataBox();
               case "iden":  return new CueIDBox();
               case "IDIT":  return new DateTimeOriginalBox();
               case "idsc":  return new AppleImageDescriptionBox();
               case "ienc":  return new ItemEncryptionBox();
               case "iicc":  return new AppleICCProfileBox();
               case "iinf":  return new ItemInfoBox();
               case "iloc":  return new ItemLocationBox();
               case "ilst":  return new AppleItemListBox();
               case "ima4": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("ima4"));break;
               case "imda":  return new IdentifiedMediaDataBox();
               case "imdt":  return new DataEntryImdaBox();
               case "imgt":  return new ImageTrackReferenceBox();
               case "imif":  return new IPMPInfoBox();
               case "imir":  return new ImageMirror();
               case "in24": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("in24"));break;
               case "in32": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("in32"));break;
               case "infe":  return new ItemInfoEntry();
               case "infu":  return new OMAInfoURLBox();
               case "inst":  return new Insta360InfoBox();
               case "iods":  return new AppleInitialObjectDescriptorBox();
               case "ipcm":  return new IpcmBox();
               case "ipco":  return new ItemPropertyContainerBox();
               case "ipir":  return new IpirBox();
               case "ipma":  return new ItemPropertyAssociationBox();
               case "ipmc":  return new IPMPControlBox();
               case "ipro":  return new ItemProtectionBox();
               case "iprp":  return new ItemPropertiesBox();
               case "iref":  return new ItemReferenceBox();
               case "iroi":  return new IroiInfoBox();
               case "irot":  return new ImageRotation();
               case "iscl":  return new ImageScaling();
               case "ispe":  return new ImageSpatialExtentsProperty();
               case "itai":  return new ItaiBox();
               case "itnu":  return new ITunesUBox();
               case "iviv":  return new FairPlayIvBox();
               case "j2kH":  return new J2kHBox();
               case "j2ki": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("j2ki"));break;
               case "j2kL":  return new J2kLayersBox();
               case "jpeg": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("jpeg"));break;
               case "JPEG":  return new JPEGInfoBox();
               case "jpgC":  return new JPEGConfigurationBox();
               case "junk":  return new AppleJunkBox();
               case "key ":  return new FairPlayUserKeyBox();
               case "keyd":  return new MetaDataKeyDeclarationBox();
               case "keyi":  return new MetaDataInlineKeysPresentBox();
               case "keys":  return new MetaDataKeyTableBox();
               case "keyw":  return new AppleKeywordBox();
               case "kind":  return new KindBox();
               case "kmat":  return new AppleCompressedMatteBox();
               case "kpcd": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("kpcd"));break;
               case "kywd":  return new ThreeGPPKeywordsBox();
               case "ldep":  return new TierDependencyBox();
               case "ldes":  return new AppleLongDescriptionBox();
               case "leva":  return new LevelAssignmentBox();
               case "lhe1": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("lhe1"));break;
               case "lht1": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("lht1"));break;
               case "lhv1": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("lhv1"));break;
               case "lhvC":  return new LHEVCConfigurationBox();
               case "load":  return new LoadBox();
               case "loca":  return new MetaDataLocaleBox();
               case "loci":  return new ThreeGPPLocationInformationBox();
               case "LOOP":  return new AppleLoopingBox();
               case "lpcm": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("lpcm"));break;
               case "lrcu":  return new OMALyricsURLBox();
               case "lsel":  return new LayerSelectorProperty();
               case "ludt":  return new LoudnessBox();
               case "m4ds":  return new MPEG4ExtensionDescriptorsBox();
               case "MAC3": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("MAC3"));break;
               case "MAC6": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("MAC6"));break;
               case "matt":  return new AppleTrackMatteBox();
               case "maxr":  return new HintMaxRate();
               case "MCPS":  return new MediaCleanerProBox();
               case "md5i":  return new MD5IntegrityBox();
               case "mdat":  return new MediaDataBox();
               case "mdcv":  return new MasteringDisplayColourVolumeBox();
               case "mdft":  return new ModificationTimeProperty();
               case "mdhd":  return new MediaHeaderBox();
               case "mdia":  return new MediaBox();
               case "mdri":  return new OMAMutableDRMBox();
               case "mdta":  return new MdtaBox();
               case "mean":  return new ITunesMetadataMeanBox();
               case "mebx":  return new BoxedMetaDataSampleEntry();
               case "meco":  return new AdditionalMetadataContainerBox();
               case "mehd":  return new MovieExtendsHeaderBox();
               case "mere":  return new MetaBoxRelationBox();
               case "mesh":  return new Mesh();
               case "meta":  return new MetaBox();
               case "mett":  return new TextMetaDataSampleEntry();
               case "metx":  return new XMLMetaDataSampleEntry();
               case "mfhd":  return new MovieFragmentHeaderBox();
               case "mfra":  return new MovieFragmentRandomAccessBox();
               case "mfro":  return new MovieFragmentRandomAccessOffsetBox();
               case "minf":  return new MediaInformationBox();
               case "mini":  return new MiniBox();
               case "mjpa": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("mjpa"));break;
               case "mjpb": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("mjpb"));break;
               case "mjpg": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("mjpg"));break;
               case "mlpa": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("mlpa"));break;
               case "moat":  return new MoatBox();
               case "moof": return new MovieFragmentBox(); // TODO: box is ambiguous in between MovieFragmentBox and CompressedMovieFragmentBox
               case "moov": return new MovieBox(); // TODO: box is ambiguous in between MovieBox and CompressedMovieBox
               case "mp4a": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("mp4a"));break;
               case "mp4s": if(parent == "stsd")  return new MpegSampleEntry();break;
               case "mp4v": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("mp4v"));break;
               case "mpod":  return new MpodBox();
               case "mpvd":  return new MotionPhotoVideoBox();
               case "mrld":  return new MarlinDictionaryBox();
               case "mrlh":  return new MarlinHeaderBox();
               case "mrlv":  return new MarlinValuesBox();
               case "mshp":  return new MeshProjection();
               case "mskC":  return new MaskConfigurationProperty();
               case "mstv":  return new MVCSubTrackViewBox();
               case "MTDT":  return new PspMtdtBox();
               case "mvc1": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("mvc1"));break;
               case "mvc2": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("mvc2"));break;
               case "mvc3": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("mvc3"));break;
               case "mvc4": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("mvc4"));break;
               case "mvcC":  return new MVCConfigurationBox();
               case "mvcg":  return new MultiviewGroupBox();
               case "mvci":  return new MultiviewInformationBox();
               case "mvcP":  return new MVCViewPriorityAssignmentBox();
               case "mvd1": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("mvd1"));break;
               case "mvd2": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("mvd2"));break;
               case "mvd3": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("mvd3"));break;
               case "mvd4": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("mvd4"));break;
               case "mvdC":  return new MVCDConfigurationBox();
               case "mvex":  return new MovieExtendsBox();
               case "mvhd":  return new MovieHeaderBox();
               case "mvra":  return new MultiviewRelationAttributeBox();
               case "name": return new AppleName2Box(); // TODO: box is ambiguous in between AppleName2Box and FairPlayUserNameBox
               case "nbmt":  return new NextbaseMetaBox();
               case "NCDB":  return new NikonNCDBBox();
               case "NCDT":  return new NikonNCDTBox();
               case "NCHD":  return new NikonMakerNoteVersionBox();
               case "NCM1":  return new NikonCameraPreviewImage1Box();
               case "NCM2":  return new NikonCameraPreviewImage2Box();
               case "NCTG":  return new NikonExifBox();
               case "NCTH":  return new NikonCameraThumbnailImageBox();
               case "NCVW":  return new NikonCameraPreviewImageBox();
               case "nmhd":  return new NullMediaHeaderBox();
               case "NONE": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("NONE"));break;
               case "npck":  return new hintPacketsSentnpckDup(); // TODO: fix duplicate
               case "nsav":  return new AppleNoSaveBox();
               case "nump":  return new hintPacketsSent();
               case "odaf":  return new OMAAccessUnitFormatBox();
               case "odda":  return new OMAContentObjectBox();
               case "odhe":  return new OMADiscreteMediaHeadersBox();
               case "odkm":  return new OMAKeyManagementBox();
               case "odrb":  return new OMARightsObjectBox();
               case "odrm":  return new OMADrmContainerBox();
               case "odtt":  return new OMATransactionTrackingBox();
               case "ohdr":  return new OMACommonHeadersBox();
               case "oinf":  return new OperatingPointsInformationProperty();
               case "opeg":  return new OperatingPointGroupBox();
               case "Opus": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("Opus"));break;
               case "orie":  return new OrieBox();
               case "otyp":  return new OriginalFileTypeBox();
               case "ovc1":  return new Ovc1VisualSampleEntryImpl();
               case "owma": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("owma"));break;
               case "padb":  return new PaddingBitsBox();
               case "pads":  return new PadsBox();
               case "paen":  return new PartitionEntry();
               case "pasp":  return new PixelAspectRatioBox();
               case "payl":  return new CuePayloadBox();
               case "payt":  return new HintPayloadID();
               case "pclr":  return new J2kPaletteBox();
               case "pcmC":  return new PcmCBox();
               case "pcst":  return new PodcastBox();
               case "pdin":  return new ProgressiveDownloadInfoBox();
               case "perf":  return new ThreeGPPPerformerBox();
               case "pgap":  return new ApplePlayGapBox();
               case "pict":  return new ApplePreviewPictureBox();
               case "PICT":  return new PreviewPICTBox();
               case "pinf":  return new PurchaseInfoBox();
               case "pitm":  return new PrimaryItemBox();
               case "pixi":  return new PixelInformationProperty();
               case "play":  return new AppleAutoPlayBox();
               case "plID":  return new PlIDBox();
               case "pm2t":  return new ProtectedMPEG2TransportStreamSampleEntry();
               case "pmax":  return new HintLargestPacket();
               case "png ": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("png "));break;
               case "pnot":  return new AppleImagePreviewBox();
               case "prft":  return new ProducerReferenceTimeBox();
               case "prhd":  return new ProjectionHeader();
               case "prID":  return new ProductIDBox();
               case "priv":  return new FairPlayPrivateKeyBox();
               case "prof":  return new AppleProductionApertureDimensionsBox();
               case "proj":  return new ProjectionBox();
               case "prrt":  return new ARDroneTelemetryBox();
               case "pssh":  return new ProtectionSystemSpecificHeaderBox();
               case "ptv ":  return new ApplePtvBox();
               case "purd":  return new PurchaseDateBox();
               case "purl":  return new PodcastUrlBox();
               case "pymd":  return new ImagePyramidEntityGroupBox();
               case "Qclp": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("Qclp"));break;
               case "QDM2": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("QDM2"));break;
               case "QDMC": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("QDMC"));break;
               case "qlif":  return new SVCPriorityLayerInfoBox();
               case "qtvr":  return new AppleQTVRTrackBox();
               case "rate":  return new RatingPercentBox();
               case "rati":  return new AppleRating2Box();
               case "raw ": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("raw "));break;
               case "rcif":  return new AppleOrientationBox();
               case "rdrf":  return new AppleDataReferenceBox();
               case "resa": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("resa"));break;
               case "resv": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("resv"));break;
               case "righ":  return new RightsBox();
               case "rinf":  return new RestrictedSchemeInfoBox();
               case "rldt":  return new ReleaseDateBox();
               case "rle ": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("rle "));break;
               case "rloc":  return new RelativeLocationProperty();
               case "rm2t":  return new MPEG2TSReceptionSampleEntry();
               case "rmcd":  return new AppleComponentDetectBox();
               case "rmcs":  return new AppleCpuSpeedBox();
               case "rmda":  return new AppleReferenceMovieDescriptorBox();
               case "rmdr":  return new AppleDataRateBox();
               case "rmla":  return new ReferenceMovieLanguageBox();
               case "rmqu":  return new AppleQualityBox();
               case "rmra":  return new AppleReferenceMovieBox();
               case "rmvc":  return new AppleVersionCheckBox();
               case "rndu":  return new RnduBox();
               case "rpdu":  return new RpduBox();
               case "rpza": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("rpza"));break;
               case "rref":  return new RequiredReferenceTypesProperty();
               case "rrgn":  return new RectRegionBox();
               case "rrtp":  return new ReceivedRtpHintSampleEntry();
               case "rsrc":  return new AppleDataReferenceResourceBox();
               case "rsrp":  return new ReceivedSrtpHintSampleEntry();
               case "rssr":  return new ReceivedSsrcBox();
               case "rtng":  return new AppleRatingBox();
               case "rtp ": return new RtpMovieHintInformation(); // TODO: box is ambiguous in between RtpMovieHintInformation and RtpHintSampleEntry
               case "s263": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("s263"));break;
               case "SA3D":  return new SpatialAudioBox();
               case "saio":  return new SampleAuxiliaryInformationOffsetsBox();
               case "saiz":  return new SampleAuxiliaryInformationSizesBox();
               case "samr": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("samr"));break;
               case "sawb": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("sawb"));break;
               case "sbgp":  return new SampleToGroupBox();
               case "sbtt":  return new TextSubtitleSampleEntry();
               case "schi":  return new SchemeInformationBox();
               case "schm":  return new SchemeTypeBox();
               case "scpt":  return new TranscriptBox();
               case "scra":  return new KodakPreviewImageBox();
               case "scrb":  return new ScrambleSchemeInfoBox();
               case "sdep":  return new SampleDependencyBox();
               case "sdes":  return new AppleShortDescriptionBox();
               case "SDLN":  return new SDLNBox();
               case "sdp ":  return new RtpTrackSdpHintInformation();
               case "sdtp":  return new SampleDependencyTypeBox();
               case "SEAL":  return new SEALBox();
               case "sefd":  return new SamsungTrailerBox();
               case "segr":  return new FDSessionGroupBox();
               case "seib":  return new ScalabilityInformationSEIBox();
               case "seig":  return new SeigBox();
               case "seii":  return new SeiInformationBox();
               case "SelO":  return new AppleSelectionOnlyBox();
               case "senc":  return new SampleEncryptionBox();
               case "setu":  return new MetaDataSetupBox();
               case "sevc": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("sevc"));break;
               case "sfID":  return new ITunesCountryCodeBox();
               case "sgpd":  return new SampleGroupDescriptionBox();
               case "shwm":  return new ShowMovementBox();
               case "sidx": return new SegmentIndexBox(); // TODO: box is ambiguous in between SegmentIndexBox and CompressedSegmentIndexBox
               case "sinf":  return new ProtectionSchemeInfoBox();
               case "skip":  return new FreeSpaceBoxskipDup(); // TODO: fix duplicate
               case "sm2t":  return new MPEG2TSServerSampleEntry();
               case "smc ": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("smc "));break;
               case "SmDm":  return new SMPTE2086MasteringDisplayMetadataBox();
               case "smhd":  return new SoundMediaHeaderBox();
               case "SMI ":  return new SMIBox();
               case "smrd":  return new SmrdBox();
               case "smta":  return new SmtaBox();
               case "snal":  return new PreviewImageBox();
               case "snim":  return new DataEntrySeqNumImdaBox();
               case "snro":  return new SequenceOffset();
               case "snut":  return new SnutTrackGroupTypeBox();
               case "soaa":  return new AlbumArtistSortBox();
               case "soal":  return new AlbumSortBox();
               case "soar":  return new ArtistSortBox();
               case "soco":  return new ComposerSortBox();
               case "sonm":  return new TrackSortBox();
               case "sosn":  return new TVShowSortBox();
               case "sowt": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("sowt"));break;
               case "spid":  return new VvcSubpicIDProperty();
               case "splt":  return new SplitTransitionEffectProperty();
               case "spor":  return new VvcSubpicOrderProperty();
               case "sqcp": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("sqcp"));break;
               case "srat":  return new SamplingRateBox();
               case "srpp":  return new SRTPProcessBox();
               case "srtp":  return new SrtpHintSampleEntry();
               case "ssix":  return new CompressedSubsegmentIndexBox();
               case "ssld":  return new SuggestedTimeDisplayDurationProperty();
               case "ssmv": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("ssmv"));break;
               case "ssrc":  return new NonPrimarySourceBox();
               case "sstl":  return new SVCSubTrackLayerBox();
               case "st3d":  return new Stereoscopic3D();
               case "stbl":  return new SampleTableBox();
               case "stco":  return new ChunkOffsetBox();
               case "stdp":  return new DegradationPriorityBox();
               case "ster": if(parent == "grpl") return new StereoEntityGroupBox(); else return new StereoVideoGroupBox();
               case "sthd":  return new SubtitleMediaHeaderBox();
               case "stik":  return new AppleMediaTypeBox();
               case "stmg":  return new MVCSubTrackMultiviewGroupBox();
               case "stpe":  return new SuggestedTransitionPeriodProperty();
               case "stpp":  return new XMLSubtitleSampleEntry();
               case "stps":  return new ApplePartialSyncSamplesBox();
               case "strd":  return new SubTrackDefinitionBox();
               case "stri":  return new SubTrackInformationBox();
               case "strk":  return new SubTrackBox();
               case "stsc":  return new SampleToChunkBox();
               case "stsd":  return new SampleDescriptionBox();
               case "stsg":  return new SubTrackSampleGroupBox();
               case "stsh":  return new ShadowSyncSampleBox();
               case "stsl":  return new SampleScaleBox();
               case "stss":  return new SyncSampleBox();
               case "stsz":  return new SampleSizeBox();
               case "sttg":  return new CueSettingsBox();
               case "stti":  return new SubTrackTierBox();
               case "stts":  return new TimeToSampleBox();
               case "stvi":  return new StereoVideoBox();
               case "stxt":  return new SimpleTextSampleEntry();
               case "styp":  return new SegmentTypeBox();
               case "stz2":  return new CompactSampleSizeBox();
               case "subs":  return new SubSampleInformationBox();
               case "sv3d":  return new SphericalVideoBox();
               case "svc1": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("svc1"));break;
               case "svc2": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("svc2"));break;
               case "svcC":  return new SVCConfigurationBox();
               case "svcM":  return new SVCMetaDataSampleEntry();
               case "svcP":  return new SVCPriorityAssignmentBox();
               case "svdr":  return new SVCDependencyRangeBox();
               case "svhd":  return new SphericalVideoHeader();
               case "svip":  return new InitialParameterSetBox();
               case "svmC":  return new SVCMetadataSampleConfigBox();
               case "svpr":  return new PriorityRangeBox();
               case "SVQ1": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("SVQ1"));break;
               case "SVQ3": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("SVQ3"));break;
               case "swtc":  return new MultiviewGroupRelationBox();
               case "swtk":  return new SwitchableTracksGroupBox();
               case "sync":  return new SynchronizedTrackBox();
               case "tags":  return new NeroMetadataTagsBox();
               case "taic":  return new TaicBox();
               case "tapt":  return new AppleTrackApertureBox();
               case "tcmi":  return new TCMediaInfoBox();
               case "tenc":  return new TrackEncryptionBox();
               case "text": if(parent == "gmhd") return new TextGmhdMediaBox(); else if(parent == "stsd") return new TextMediaBox(); break;
               case "tfdt":  return new TrackFragmentBaseMediaDecodeTimeBox();
               case "tfhd":  return new TrackFragmentHeaderBox();
               case "tfra":  return new TrackFragmentRandomAccessBox();
               case "thm ":  return new ThumbnailImageBox();
               case "thma":  return new KodakThumbnailImageBox();
               case "thmb":  return new AppleThumbnailReferenceBox();
               case "thum":  return new ThumbnailImage2Box();
               case "tibr":  return new TierBitRateBox();
               case "tiff": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("tiff"));break;
               case "tilC":  return new TiledImageBox();
               case "tima":  return new KodakDurationBox();
               case "tims":  return new TimeScaleEntry();
               case "tiri":  return new TierInfoBox();
               case "titl":  return new ThreeGPPTitleBox();
               case "tkhd":  return new TrackHeaderBox();
               case "tlou":  return new TrackLoudnessInfo();
               case "tmax":  return new HintMaxRelativeTime();
               case "tmcd":  return new TimeCodeTrackBox();
               case "tmin":  return new HintMinRelativeTime();
               case "tmpo":  return new AppleBeatsPerMinuteBox();
               case "tnal":  return new ThumbnailImageBoxtnalDup(); // TODO: fix duplicate
               case "tols":  return new TargetOlsProperty();
               case "totl":  return new HintBytesSenttotlDup(); // TODO: fix duplicate
               case "tpay":  return new HintBytesSenttpayDup(); // TODO: fix duplicate
               case "tpyl":  return new HintBytesSenttpylDup(); // TODO: fix duplicate
               case "traf":  return new TrackFragmentBox();
               case "trak":  return new TrackBox();
               case "tran":  return new TranscodingInfoBox();
               case "tref":  return new TrackReferenceBox();
               case "trep":  return new TrackExtensionPropertiesBox();
               case "trex":  return new TrackExtendsBox();
               case "trgr":  return new TrackGroupBox();
               case "trik":  return new TrickPlayBox();
               case "trkn":  return new TrackNumberBox();
               case "trpy":  return new HintBytesSent();
               case "trun":  return new TrackRunBox();
               case "tsel":  return new TrackSelectionBox();
               case "tsro":  return new TimeOffset();
               case "tssy":  return new TimestampSynchrony();
               case "tstb":  return new TileSubTrackGroupBox();
               case "tsyn":  return new TimeSynchronizedCaptureEntityGroupBox();
               case "ttyp":  return new TrackTypeBox();
               case "tven":  return new TVEpisodeIDBox();
               case "tves":  return new AppleTVEpisodeBox();
               case "tvnn":  return new TVNetworkNameBox();
               case "tvsh":  return new TVShowBox();
               case "tvsn":  return new AppleTVSeasonBox();
               case "twos": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("twos"));break;
               case "tx3g":  return new TextSampleEntrytx3gDup(); // TODO: fix duplicate
               case "txtC":  return new TextConfigBox();
               case "tyco":  return new TypeCombinationBox();
               case "udat":  return new GPSLogBox();
               case "udes":  return new UserDescriptionProperty();
               case "udta":  return new UserDataBox();
               case "ulaw": if(parent == "stsd")  return new AudioSampleEntry(IsoStream.FromFourCC("ulaw"));break;
               case "uncC":  return new UncompressedFrameConfigurationBox();
               case "uncv": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("uncv"));break;
               case "urat":  return new UserRatingBox();
               case "uri ":  return new URIBox();
               case "uriI":  return new URIInitBox();
               case "urim":  return new URIMetaSampleEntry();
               case "url ":  return new DataEntryUrlBox();
               case "url\0":  return new Url0Box();
               case "urn ":  return new DataEntryUrnBox();
               case "user":  return new FairPlayUserIDBox();
               case "uuid": return new UserBox(uuid);
               case "uuid 22cc04c7d6d94e079d904eb6ecbaf3a3":  return new UuidCameraIntrinsicMatrixBox();
               case "uuid 4363e9145b7d4aab97aebea69803b434":  return new UuidCameraExtrinsicMatrixBox();
               case "uuid 50524f4621d24fcebb88695cfac9c740":  return new PspProfExtensionBox();
               case "uuid 55534d5421d24fcebb88695cfac9c740":  return new PspUsmtExtensionBox();
               case "uuid 5ca708fb328e4205a861650eca0a9596":  return new MicrosoftWindowsVersionBox();
               case "uuid 6d1d9b0542d544e680e2141daff757b2":  return new TfxdBox();
               case "uuid 8974dbce7be74c5184f97148f9882554":  return new PiffTrackEncryptionBox();
               case "uuid a2394f525a9b4f14a2446c427c648df4":  return new PiffSampleEncryptionBox();
               case "uuid be7acfcb97a942e89c71999491e3afac":  return new XMPBox();
               case "uuid d08a4f1810f34a82b6c832d8aba183d3":  return new UuidBasedProtectionSystemSpecificHeaderBox();
               case "uuid d4807ef2ca3946958e5426cb9e46a79f":  return new TfrfBox();
               case "v210": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("v210"));break;
               case "v216": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("v216"));break;
               case "v308": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("v308"));break;
               case "v408": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("v408"));break;
               case "v410": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("v410"));break;
               case "vdep":  return new TrackReferenceTypeBoxvdepDup(); // TODO: fix duplicate
               case "ver ":  return new KodakVersionBox();
               case "VERS":  return new ProductVersionBox();
               case "vipr":  return new ViewPriorityBox();
               case "vlab":  return new WebVTTSourceLabelBox();
               case "vmhd":  return new VideoMediaHeaderBox();
               case "vp08": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("vp08"));break;
               case "vp09": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("vp09"));break;
               case "vp10": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("vp10"));break;
               case "vpcC":  return new VPCodecConfigurationBox();
               case "vplx":  return new TrackReferenceTypeBoxvplxDup(); // TODO: fix duplicate
               case "VPRF":  return new PspVprfBox();
               case "vsib":  return new ViewScalabilityInformationSEIBox();
               case "vsid":  return new CueSourceIDBox();
               case "vtta":  return new VTTAdditionalBox();
               case "vttC":  return new WebVTTConfigurationBox();
               case "vtte":  return new VTTEmptyBox();
               case "vvc1": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("vvc1"));break;
               case "vvcb":  return new EntityToGroupBoxvvcbDup(); // TODO: fix duplicate
               case "vvcC":  return new VvcConfigurationBox();
               case "vvcN": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("vvcN"));break;
               case "vvi1": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("vvi1"));break;
               case "vvnC":  return new VvcNALUConfigBox();
               case "vvs1": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("vvs1"));break;
               case "vwdi":  return new MultiviewSceneInfoBox();
               case "vwid":  return new ViewIdentifierBox();
               case "wave":  return new AppleWaveBox();
               case "wfex":  return new MicrosoftWaveFormatExBox();
               case "wide":  return new FreeSpaceBoxwideDup(); // TODO: fix duplicate
               case "wipe":  return new WipeTransitionEffectProperty();
               case "WLOC":  return new AppleWindowLocationBox();
               case "wvtt":  return new WVTTSampleEntry();
               case "xid ":  return new AppleXidBox();
               case "xml ":  return new XMLBox();
               case "Xtra":  return new WindowsMediaXtraBox();
               case "yrrc":  return new ThreeGPPRecordingYearBox();
               case "yuv2": if(parent == "stsd")  return new VisualSampleEntry(IsoStream.FromFourCC("yuv2"));break;
               case "zoom":  return new ZoomTransitionEffectProperty();
            }

            if(parent == "ilst")
            {
                if (fourCC[0] == '\0') return new IlstKey(IsoStream.FromFourCC(fourCC));
            }
            else if(uuid != null)
            {
                Log.Debug($"Unknown 'uuid' box: '{fourCC}'");
                return new UserBox(uuid);
            }

            //throw new NotImplementedException(fourCC);
            Log.Debug($"Unknown box: '{fourCC}'");
            return new UnknownBox(IsoStream.FromFourCC(fourCC));
        }

        public static SampleGroupDescriptionEntry DefaultCreateEntry(string fourCC)
        {
            switch(fourCC)
            {
               case "aebr": return new AutoExposureBracketingEntry();
               case "afbr": return new FlashExposureBracketingEntry();
               case "alst": return new AlternativeStartupEntry();
               case "aud ": return new AUDSampleEntry();
               case "av1f": return new AV1ForwardKeyFrameSampleGroupEntry();
               case "av1M": return new AV1MetadataSampleGroupEntry();
               case "av1s": return new AV1SwitchFrameSampleGroupEntry();
               case "avll": return new AVCLayerEntry();
               case "avss": return new AVCSubSequenceEntry();
               case "casg": return new CleanApertureEntry();
               case "dcfi": return new DecodingCapabilityInformation();
               case "dobr": return new DepthOfFieldBracketingEntry();
               case "drap": return new VisualDRAPEntry();
               case "dtrt": return new DecodeRetimingEntry();
               case "eob ": return new EndOfBitstreamSampleEntry();
               case "eos ": return new EndOfSequenceSampleEntry();
               case "eqiv": return new VisualEquivalenceEntry();
               case "fobr": return new FocusBracketingEntry();
               case "lbli": return new LhvcExternalBaseLayerInfo();
               case "linf": return new LayerInfoGroupEntry();
               case "minp": return new VvcMixedNALUnitTypePicEntry();
               case "mvif": return new MultiviewGroupEntry();
               case "nalm": return new NALUMapEntry();
               case "oinf": return new OperatingPointsInformation();
               case "opth": return new OperatingPointDecodeTimeHint();
               case "pano": return new PanoramaEntry();
               case "pase": return new ParameterSetNALUEntry();
               case "pasr": return new PixelAspectRatioEntry();
               case "prol": return new AudioPreRollEntry();
               case "pss1": return new PSSampleGroupEntry();
               case "rap ": return new VisualRandomAccessEntry();
               case "rash": return new RateShareEntry();
               case "refs": return new DirectReferenceSamplesList();
               case "roll": return new AudioRollRecoveryEntry();
               case "rror": return new VvcRectRegionOrderEntry();
               case "sap ": return new SAPEntry();
               case "scif": return new ScalableGroupEntry();
               case "scnm": return new ScalableNALUMapEntry();
               case "spid": return new VvcSubpicIDEntry();
               case "spli": return new SubpicLevelInfoEntry();
               case "spor": return new VvcSubpicOrderEntry();
               case "stmi": return new SampleToMetadataItemEntry();
               case "stsa": return new StepwiseTemporalLayerEntry();
               case "sulm": return new VvcSubpicLayoutMapEntry();
               case "sync": return new SyncSampleEntry();
               case "tele": return new TemporalLevelEntry();
               case "trif": return new RectangularRegionGroupEntry();
               case "tsas": return new TemporalSubLayerEntry();
               case "tscl": return new TemporalLayerEntry();
               case "vipr": return new ViewPriorityEntry();
               case "vopi": return new VvcOperatingPointsInformation();
               case "wbbr": return new WhiteBalanceBracketingEntry();
            }

            //throw new NotImplementedException(fourCC);
            Log.Debug($"Unknown entry: '{fourCC}'");
            return new UnknownEntry(IsoStream.FromFourCC(fourCC));
        }

        public static Descriptor DefaultCreateDescriptor(byte tag)
        {
            switch (tag)
            {
               case DescriptorTags.DecoderConfigDescrTag: return new DecoderConfigDescriptor();
               case DescriptorTags.DecSpecificInfoTag: return new GenericDecoderSpecificInfo(); // TODO: choose the specific descriptor
               case DescriptorTags.ES_DescrTag: return new ES_Descriptor();
               case DescriptorTags.IPI_DescrPointerTag: return new IPI_DescrPointer();
               case DescriptorTags.IPMP_DescrPointerTag: return new IPMP_DescriptorPointer();
               case DescriptorTags.IPMP_DescrTag: return new IPMP_Descriptor();
               case DescriptorTags.LanguageDescrTag: return new LanguageDescriptor();
               case DescriptorTags.MP4_IOD_Tag: return new IOD_Descriptor();
               case DescriptorTags.ProfileLevelIndicationIndexDescrTag: return new ProfileLevelIndicationIndexDescriptor();
               case DescriptorTags.QoS_DescrTag: return new QoS_Descriptor();
               case DescriptorTags.RegistrationDescrTag: return new RegistrationDescriptor();
               case DescriptorTags.SLConfigDescrTag: return new SLConfigDescriptor();
          }

            //throw new NotImplementedException($"Unknown descriptor: 'tag'");
            Log.Debug($"Unknown descriptor: '{tag}'");
            return new UnknownDescriptor(tag);
        }

    }

/*
abstract aligned(8) expandable(228-1) class BaseDescriptor : bit(8) tag=0 {
 // empty. To be filled by classes extending this class.
 }
*/
public abstract partial class BaseDescriptor : Descriptor
{
	public override string DisplayName { get { return "BaseDescriptor"; } }

	public BaseDescriptor(byte tag): base(tag)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		/*  empty. To be filled by classes extending this class. */
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		/*  empty. To be filled by classes extending this class. */
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		/*  empty. To be filled by classes extending this class. */
		return boxSize;
	}
}


/*
abstract class DecoderSpecificInfo extends BaseDescriptor : bit(8) tag=DecSpecificInfoTag
 {
 // empty. To be filled by classes extending this class.
 }
*/
public abstract partial class DecoderSpecificInfo : BaseDescriptor
{
	public override string DisplayName { get { return "DecoderSpecificInfo"; } }

	public DecoderSpecificInfo(): base(DescriptorTags.DecSpecificInfoTag)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		/*  empty. To be filled by classes extending this class. */
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		/*  empty. To be filled by classes extending this class. */
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		/*  empty. To be filled by classes extending this class. */
		return boxSize;
	}
}


/*
class ES_Descriptor extends BaseDescriptor : bit(8) tag=ES_DescrTag {
 bit(16) ES_ID;
 bit(1) streamDependenceFlag;
 bit(1) URL_Flag;
 bit(1) OCRstreamFlag;
 bit(5) streamPriority;
 if (streamDependenceFlag)
 bit(16) dependsOn_ES_ID;
 if (URL_Flag) {
 bit(8) URLlength;
 bit(8) URLstring[URLlength];
 }
 if (OCRstreamFlag)
 bit(16) OCR_ES_Id;
 DecoderConfigDescriptor decConfigDescr;
 SLConfigDescriptor slConfigDescr;
 IPI_DescrPointer ipiPtr[0 .. 1];
 IP_IdentificationDataSet ipIDS[0 .. 255];
 IPMP_DescriptorPointer ipmpDescrPtr[0 .. 255];
 LanguageDescriptor langDescr[0 .. 255];
 QoS_Descriptor qosDescr[0 .. 1];
 RegistrationDescriptor regDescr[0 .. 1];
 ExtensionDescriptor extDescr[0 .. 255];
 }
*/
public partial class ES_Descriptor : BaseDescriptor
{
	public const byte TYPE = DescriptorTags.ES_DescrTag;
	public override string DisplayName { get { return "ES_Descriptor"; } }

	protected ushort ES_ID; 
	public ushort ESID { get { return this.ES_ID; } set { this.ES_ID = value; } }

	protected bool streamDependenceFlag; 
	public bool StreamDependenceFlag { get { return this.streamDependenceFlag; } set { this.streamDependenceFlag = value; } }

	protected bool URL_Flag; 
	public bool URLFlag { get { return this.URL_Flag; } set { this.URL_Flag = value; } }

	protected bool OCRstreamFlag; 
	public bool _OCRstreamFlag { get { return this.OCRstreamFlag; } set { this.OCRstreamFlag = value; } }

	protected byte streamPriority; 
	public byte StreamPriority { get { return this.streamPriority; } set { this.streamPriority = value; } }

	protected ushort dependsOn_ES_ID; 
	public ushort DependsOnESID { get { return this.dependsOn_ES_ID; } set { this.dependsOn_ES_ID = value; } }

	protected byte URLlength; 
	public byte _URLlength { get { return this.URLlength; } set { this.URLlength = value; } }

	protected byte[] URLstring; 
	public byte[] _URLstring { get { return this.URLstring; } set { this.URLstring = value; } }

	protected ushort OCR_ES_Id; 
	public ushort OCRESId { get { return this.OCR_ES_Id; } set { this.OCR_ES_Id = value; } }
	public DecoderConfigDescriptor DecConfigDescr { get { return this.children.OfType<DecoderConfigDescriptor>().FirstOrDefault(); } }
	public SLConfigDescriptor SlConfigDescr { get { return this.children.OfType<SLConfigDescriptor>().FirstOrDefault(); } }
	public IEnumerable<IPI_DescrPointer> IpiPtr { get { return this.children.OfType<IPI_DescrPointer>(); } }
	public IEnumerable<IP_IdentificationDataSet> IpIDS { get { return this.children.OfType<IP_IdentificationDataSet>(); } }
	public IEnumerable<IPMP_DescriptorPointer> IpmpDescrPtr { get { return this.children.OfType<IPMP_DescriptorPointer>(); } }
	public IEnumerable<LanguageDescriptor> LangDescr { get { return this.children.OfType<LanguageDescriptor>(); } }
	public IEnumerable<QoS_Descriptor> QosDescr { get { return this.children.OfType<QoS_Descriptor>(); } }
	public IEnumerable<RegistrationDescriptor> RegDescr { get { return this.children.OfType<RegistrationDescriptor>(); } }
	public IEnumerable<ExtensionDescriptor> ExtDescr { get { return this.children.OfType<ExtensionDescriptor>(); } }

	public ES_Descriptor(): base(DescriptorTags.ES_DescrTag)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.ES_ID, "ES_ID"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.streamDependenceFlag, "streamDependenceFlag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.URL_Flag, "URL_Flag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.OCRstreamFlag, "OCRstreamFlag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.streamPriority, "streamPriority"); 

		if (streamDependenceFlag)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.dependsOn_ES_ID, "dependsOn_ES_ID"); 
		}

		if (URL_Flag)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.URLlength, "URLlength"); 
			boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(URLlength),  out this.URLstring, "URLstring"); 
		}

		if (OCRstreamFlag)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.OCR_ES_Id, "OCR_ES_Id"); 
		}
		// boxSize += stream.ReadDescriptor(boxSize, readSize, this,  out this.decConfigDescr, "decConfigDescr"); 
		// boxSize += stream.ReadDescriptor(boxSize, readSize, this,  out this.slConfigDescr, "slConfigDescr"); 
		// boxSize += stream.ReadDescriptor(boxSize, readSize, this,  out this.ipiPtr, "ipiPtr"); 
		// boxSize += stream.ReadDescriptor(boxSize, readSize, this,  out this.ipIDS, "ipIDS"); 
		// boxSize += stream.ReadDescriptor(boxSize, readSize, this,  out this.ipmpDescrPtr, "ipmpDescrPtr"); 
		// boxSize += stream.ReadDescriptor(boxSize, readSize, this,  out this.langDescr, "langDescr"); 
		// boxSize += stream.ReadDescriptor(boxSize, readSize, this,  out this.qosDescr, "qosDescr"); 
		// boxSize += stream.ReadDescriptor(boxSize, readSize, this,  out this.regDescr, "regDescr"); 
		// boxSize += stream.ReadDescriptor(boxSize, readSize, this,  out this.extDescr, "extDescr"); 
		boxSize += stream.ReadDescriptorsTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.ES_ID, "ES_ID"); 
		boxSize += stream.WriteBit( this.streamDependenceFlag, "streamDependenceFlag"); 
		boxSize += stream.WriteBit( this.URL_Flag, "URL_Flag"); 
		boxSize += stream.WriteBit( this.OCRstreamFlag, "OCRstreamFlag"); 
		boxSize += stream.WriteBits(5,  this.streamPriority, "streamPriority"); 

		if (streamDependenceFlag)
		{
			boxSize += stream.WriteUInt16( this.dependsOn_ES_ID, "dependsOn_ES_ID"); 
		}

		if (URL_Flag)
		{
			boxSize += stream.WriteUInt8( this.URLlength, "URLlength"); 
			boxSize += stream.WriteUInt8Array((uint)(URLlength),  this.URLstring, "URLstring"); 
		}

		if (OCRstreamFlag)
		{
			boxSize += stream.WriteUInt16( this.OCR_ES_Id, "OCR_ES_Id"); 
		}
		// boxSize += stream.WriteDescriptor( this.decConfigDescr, "decConfigDescr"); 
		// boxSize += stream.WriteDescriptor( this.slConfigDescr, "slConfigDescr"); 
		// boxSize += stream.WriteDescriptor( this.ipiPtr, "ipiPtr"); 
		// boxSize += stream.WriteDescriptor( this.ipIDS, "ipIDS"); 
		// boxSize += stream.WriteDescriptor( this.ipmpDescrPtr, "ipmpDescrPtr"); 
		// boxSize += stream.WriteDescriptor( this.langDescr, "langDescr"); 
		// boxSize += stream.WriteDescriptor( this.qosDescr, "qosDescr"); 
		// boxSize += stream.WriteDescriptor( this.regDescr, "regDescr"); 
		// boxSize += stream.WriteDescriptor( this.extDescr, "extDescr"); 
		boxSize += stream.WriteDescriptorsTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // ES_ID
		boxSize += 1; // streamDependenceFlag
		boxSize += 1; // URL_Flag
		boxSize += 1; // OCRstreamFlag
		boxSize += 5; // streamPriority

		if (streamDependenceFlag)
		{
			boxSize += 16; // dependsOn_ES_ID
		}

		if (URL_Flag)
		{
			boxSize += 8; // URLlength
			boxSize += ((ulong)(URLlength) * 8); // URLstring
		}

		if (OCRstreamFlag)
		{
			boxSize += 16; // OCR_ES_Id
		}
		// boxSize += IsoStream.CalculateDescriptorSize(decConfigDescr); // decConfigDescr
		// boxSize += IsoStream.CalculateDescriptorSize(slConfigDescr); // slConfigDescr
		// boxSize += IsoStream.CalculateDescriptorSize(ipiPtr); // ipiPtr
		// boxSize += IsoStream.CalculateDescriptorSize(ipIDS); // ipIDS
		// boxSize += IsoStream.CalculateDescriptorSize(ipmpDescrPtr); // ipmpDescrPtr
		// boxSize += IsoStream.CalculateDescriptorSize(langDescr); // langDescr
		// boxSize += IsoStream.CalculateDescriptorSize(qosDescr); // qosDescr
		// boxSize += IsoStream.CalculateDescriptorSize(regDescr); // regDescr
		// boxSize += IsoStream.CalculateDescriptorSize(extDescr); // extDescr
		boxSize += IsoStream.CalculateDescriptors(this);
		return boxSize;
	}
}


/*
class SLConfigDescriptor extends BaseDescriptor : bit(8) tag=SLConfigDescrTag {
 bit(8) predefined;
 if (predefined==0) {
 bit(1) useAccessUnitStartFlag;
 bit(1) useAccessUnitEndFlag;
 bit(1) useRandomAccessPointFlag;
 bit(1) hasRandomAccessUnitsOnlyFlag;
 bit(1) usePaddingFlag;
 bit(1) useTimeStampsFlag;
 bit(1) useIdleFlag;
 bit(1) durationFlag;
 bit(32) timeStampResolution;
 bit(32) OCRResolution;
 bit(8) timeStampLength; // must be <= 64
 bit(8) OCRLength; // must be <= 64
 bit(8) AU_Length; // must be <= 32
 bit(8) instantBitrateLength;
 bit(4) degradationPriorityLength;
 bit(5) AU_seqNumLength; // must be <= 16
 bit(5) packetSeqNumLength; // must be <= 16
 bit(2) reserved=0b11;
 }
 if (durationFlag) {
 bit(32) timeScale;
 bit(16) accessUnitDuration;
 bit(16) compositionUnitDuration;
 }
 if (!useTimeStampsFlag) {
 bit(timeStampLength) startDecodingTimeStamp;
 bit(timeStampLength) startCompositionTimeStamp;
 }
 bit(8) ocr[]; // OCR stream flag, reserved, OCR_ES_id 
 }
*/
public partial class SLConfigDescriptor : BaseDescriptor
{
	public const byte TYPE = DescriptorTags.SLConfigDescrTag;
	public override string DisplayName { get { return "SLConfigDescriptor"; } }

	protected byte predefined; 
	public byte Predefined { get { return this.predefined; } set { this.predefined = value; } }

	protected bool useAccessUnitStartFlag; 
	public bool UseAccessUnitStartFlag { get { return this.useAccessUnitStartFlag; } set { this.useAccessUnitStartFlag = value; } }

	protected bool useAccessUnitEndFlag; 
	public bool UseAccessUnitEndFlag { get { return this.useAccessUnitEndFlag; } set { this.useAccessUnitEndFlag = value; } }

	protected bool useRandomAccessPointFlag; 
	public bool UseRandomAccessPointFlag { get { return this.useRandomAccessPointFlag; } set { this.useRandomAccessPointFlag = value; } }

	protected bool hasRandomAccessUnitsOnlyFlag; 
	public bool HasRandomAccessUnitsOnlyFlag { get { return this.hasRandomAccessUnitsOnlyFlag; } set { this.hasRandomAccessUnitsOnlyFlag = value; } }

	protected bool usePaddingFlag; 
	public bool UsePaddingFlag { get { return this.usePaddingFlag; } set { this.usePaddingFlag = value; } }

	protected bool useTimeStampsFlag; 
	public bool UseTimeStampsFlag { get { return this.useTimeStampsFlag; } set { this.useTimeStampsFlag = value; } }

	protected bool useIdleFlag; 
	public bool UseIdleFlag { get { return this.useIdleFlag; } set { this.useIdleFlag = value; } }

	protected bool durationFlag; 
	public bool DurationFlag { get { return this.durationFlag; } set { this.durationFlag = value; } }

	protected uint timeStampResolution; 
	public uint TimeStampResolution { get { return this.timeStampResolution; } set { this.timeStampResolution = value; } }

	protected uint OCRResolution; 
	public uint _OCRResolution { get { return this.OCRResolution; } set { this.OCRResolution = value; } }

	protected byte timeStampLength;  //  must be <= 64
	public byte TimeStampLength { get { return this.timeStampLength; } set { this.timeStampLength = value; } }

	protected byte OCRLength;  //  must be <= 64
	public byte _OCRLength { get { return this.OCRLength; } set { this.OCRLength = value; } }

	protected byte AU_Length;  //  must be <= 32
	public byte AULength { get { return this.AU_Length; } set { this.AU_Length = value; } }

	protected byte instantBitrateLength; 
	public byte InstantBitrateLength { get { return this.instantBitrateLength; } set { this.instantBitrateLength = value; } }

	protected byte degradationPriorityLength; 
	public byte DegradationPriorityLength { get { return this.degradationPriorityLength; } set { this.degradationPriorityLength = value; } }

	protected byte AU_seqNumLength;  //  must be <= 16
	public byte AUSeqNumLength { get { return this.AU_seqNumLength; } set { this.AU_seqNumLength = value; } }

	protected byte packetSeqNumLength;  //  must be <= 16
	public byte PacketSeqNumLength { get { return this.packetSeqNumLength; } set { this.packetSeqNumLength = value; } }

	protected byte reserved =0b11; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected uint timeScale; 
	public uint TimeScale { get { return this.timeScale; } set { this.timeScale = value; } }

	protected ushort accessUnitDuration; 
	public ushort AccessUnitDuration { get { return this.accessUnitDuration; } set { this.accessUnitDuration = value; } }

	protected ushort compositionUnitDuration; 
	public ushort CompositionUnitDuration { get { return this.compositionUnitDuration; } set { this.compositionUnitDuration = value; } }

	protected byte[] startDecodingTimeStamp; 
	public byte[] StartDecodingTimeStamp { get { return this.startDecodingTimeStamp; } set { this.startDecodingTimeStamp = value; } }

	protected byte[] startCompositionTimeStamp; 
	public byte[] StartCompositionTimeStamp { get { return this.startCompositionTimeStamp; } set { this.startCompositionTimeStamp = value; } }

	protected byte[] ocr;  //  OCR stream flag, reserved, OCR_ES_id 
	public byte[] Ocr { get { return this.ocr; } set { this.ocr = value; } }

	public SLConfigDescriptor(): base(DescriptorTags.SLConfigDescrTag)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.predefined, "predefined"); 

		if (predefined==0)
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.useAccessUnitStartFlag, "useAccessUnitStartFlag"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.useAccessUnitEndFlag, "useAccessUnitEndFlag"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.useRandomAccessPointFlag, "useRandomAccessPointFlag"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.hasRandomAccessUnitsOnlyFlag, "hasRandomAccessUnitsOnlyFlag"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.usePaddingFlag, "usePaddingFlag"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.useTimeStampsFlag, "useTimeStampsFlag"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.useIdleFlag, "useIdleFlag"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.durationFlag, "durationFlag"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.timeStampResolution, "timeStampResolution"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.OCRResolution, "OCRResolution"); 
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.timeStampLength, "timeStampLength"); // must be <= 64
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.OCRLength, "OCRLength"); // must be <= 64
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.AU_Length, "AU_Length"); // must be <= 32
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.instantBitrateLength, "instantBitrateLength"); 
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.degradationPriorityLength, "degradationPriorityLength"); 
			boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.AU_seqNumLength, "AU_seqNumLength"); // must be <= 16
			boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.packetSeqNumLength, "packetSeqNumLength"); // must be <= 16
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.reserved, "reserved"); 
		}

		if (durationFlag)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.timeScale, "timeScale"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.accessUnitDuration, "accessUnitDuration"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.compositionUnitDuration, "compositionUnitDuration"); 
		}

		if (!useTimeStampsFlag)
		{
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(timeStampLength ),  out this.startDecodingTimeStamp, "startDecodingTimeStamp"); 
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(timeStampLength ),  out this.startCompositionTimeStamp, "startCompositionTimeStamp"); 
		}
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.ocr, "ocr"); // OCR stream flag, reserved, OCR_ES_id 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.predefined, "predefined"); 

		if (predefined==0)
		{
			boxSize += stream.WriteBit( this.useAccessUnitStartFlag, "useAccessUnitStartFlag"); 
			boxSize += stream.WriteBit( this.useAccessUnitEndFlag, "useAccessUnitEndFlag"); 
			boxSize += stream.WriteBit( this.useRandomAccessPointFlag, "useRandomAccessPointFlag"); 
			boxSize += stream.WriteBit( this.hasRandomAccessUnitsOnlyFlag, "hasRandomAccessUnitsOnlyFlag"); 
			boxSize += stream.WriteBit( this.usePaddingFlag, "usePaddingFlag"); 
			boxSize += stream.WriteBit( this.useTimeStampsFlag, "useTimeStampsFlag"); 
			boxSize += stream.WriteBit( this.useIdleFlag, "useIdleFlag"); 
			boxSize += stream.WriteBit( this.durationFlag, "durationFlag"); 
			boxSize += stream.WriteUInt32( this.timeStampResolution, "timeStampResolution"); 
			boxSize += stream.WriteUInt32( this.OCRResolution, "OCRResolution"); 
			boxSize += stream.WriteUInt8( this.timeStampLength, "timeStampLength"); // must be <= 64
			boxSize += stream.WriteUInt8( this.OCRLength, "OCRLength"); // must be <= 64
			boxSize += stream.WriteUInt8( this.AU_Length, "AU_Length"); // must be <= 32
			boxSize += stream.WriteUInt8( this.instantBitrateLength, "instantBitrateLength"); 
			boxSize += stream.WriteBits(4,  this.degradationPriorityLength, "degradationPriorityLength"); 
			boxSize += stream.WriteBits(5,  this.AU_seqNumLength, "AU_seqNumLength"); // must be <= 16
			boxSize += stream.WriteBits(5,  this.packetSeqNumLength, "packetSeqNumLength"); // must be <= 16
			boxSize += stream.WriteBits(2,  this.reserved, "reserved"); 
		}

		if (durationFlag)
		{
			boxSize += stream.WriteUInt32( this.timeScale, "timeScale"); 
			boxSize += stream.WriteUInt16( this.accessUnitDuration, "accessUnitDuration"); 
			boxSize += stream.WriteUInt16( this.compositionUnitDuration, "compositionUnitDuration"); 
		}

		if (!useTimeStampsFlag)
		{
			boxSize += stream.WriteBits((uint)(timeStampLength ),  this.startDecodingTimeStamp, "startDecodingTimeStamp"); 
			boxSize += stream.WriteBits((uint)(timeStampLength ),  this.startCompositionTimeStamp, "startCompositionTimeStamp"); 
		}
		boxSize += stream.WriteUInt8ArrayTillEnd( this.ocr, "ocr"); // OCR stream flag, reserved, OCR_ES_id 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // predefined

		if (predefined==0)
		{
			boxSize += 1; // useAccessUnitStartFlag
			boxSize += 1; // useAccessUnitEndFlag
			boxSize += 1; // useRandomAccessPointFlag
			boxSize += 1; // hasRandomAccessUnitsOnlyFlag
			boxSize += 1; // usePaddingFlag
			boxSize += 1; // useTimeStampsFlag
			boxSize += 1; // useIdleFlag
			boxSize += 1; // durationFlag
			boxSize += 32; // timeStampResolution
			boxSize += 32; // OCRResolution
			boxSize += 8; // timeStampLength
			boxSize += 8; // OCRLength
			boxSize += 8; // AU_Length
			boxSize += 8; // instantBitrateLength
			boxSize += 4; // degradationPriorityLength
			boxSize += 5; // AU_seqNumLength
			boxSize += 5; // packetSeqNumLength
			boxSize += 2; // reserved
		}

		if (durationFlag)
		{
			boxSize += 32; // timeScale
			boxSize += 16; // accessUnitDuration
			boxSize += 16; // compositionUnitDuration
		}

		if (!useTimeStampsFlag)
		{
			boxSize += (ulong)(timeStampLength ); // startDecodingTimeStamp
			boxSize += (ulong)(timeStampLength ); // startCompositionTimeStamp
		}
		boxSize += ((ulong)ocr.Length * 8); // ocr
		return boxSize;
	}
}


/*
class DecoderConfigDescriptor extends BaseDescriptor : bit(8) tag=DecoderConfigDescrTag {
 bit(8) objectTypeIndication;
 bit(6) streamType;
 bit(1) upStream;
 const bit(1) reserved=1;
 bit(24) bufferSizeDB;
 bit(32) maxBitrate;
 bit(32) avgBitrate;
 DecoderSpecificInfo decSpecificInfo[0 .. 1];
 ProfileLevelIndicationIndexDescriptor profileLevelIndicationIndexDescr [0..255];
 }
*/
public partial class DecoderConfigDescriptor : BaseDescriptor
{
	public const byte TYPE = DescriptorTags.DecoderConfigDescrTag;
	public override string DisplayName { get { return "DecoderConfigDescriptor"; } }

	protected byte objectTypeIndication; 
	public byte ObjectTypeIndication { get { return this.objectTypeIndication; } set { this.objectTypeIndication = value; } }

	protected byte streamType; 
	public byte StreamType { get { return this.streamType; } set { this.streamType = value; } }

	protected bool upStream; 
	public bool UpStream { get { return this.upStream; } set { this.upStream = value; } }

	protected bool reserved = true; 
	public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected uint bufferSizeDB; 
	public uint BufferSizeDB { get { return this.bufferSizeDB; } set { this.bufferSizeDB = value; } }

	protected uint maxBitrate; 
	public uint MaxBitrate { get { return this.maxBitrate; } set { this.maxBitrate = value; } }

	protected uint avgBitrate; 
	public uint AvgBitrate { get { return this.avgBitrate; } set { this.avgBitrate = value; } }
	public IEnumerable<DecoderSpecificInfo> DecSpecificInfo { get { return this.children.OfType<DecoderSpecificInfo>(); } }
	public IEnumerable<ProfileLevelIndicationIndexDescriptor> ProfileLevelIndicationIndexDescr { get { return this.children.OfType<ProfileLevelIndicationIndexDescriptor>(); } }

	public DecoderConfigDescriptor(): base(DescriptorTags.DecoderConfigDescrTag)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.objectTypeIndication, "objectTypeIndication"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.streamType, "streamType"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.upStream, "upStream"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadUInt24(boxSize, readSize,  out this.bufferSizeDB, "bufferSizeDB"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.maxBitrate, "maxBitrate"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.avgBitrate, "avgBitrate"); 
		// boxSize += stream.ReadDescriptor(boxSize, readSize, this,  out this.decSpecificInfo, "decSpecificInfo"); 
		// boxSize += stream.ReadDescriptor(boxSize, readSize, this,  out this.profileLevelIndicationIndexDescr, "profileLevelIndicationIndexDescr"); 
		boxSize += stream.ReadDescriptorsTillEnd(boxSize, readSize, this, objectTypeIndication);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.objectTypeIndication, "objectTypeIndication"); 
		boxSize += stream.WriteBits(6,  this.streamType, "streamType"); 
		boxSize += stream.WriteBit( this.upStream, "upStream"); 
		boxSize += stream.WriteBit( this.reserved, "reserved"); 
		boxSize += stream.WriteUInt24( this.bufferSizeDB, "bufferSizeDB"); 
		boxSize += stream.WriteUInt32( this.maxBitrate, "maxBitrate"); 
		boxSize += stream.WriteUInt32( this.avgBitrate, "avgBitrate"); 
		// boxSize += stream.WriteDescriptor( this.decSpecificInfo, "decSpecificInfo"); 
		// boxSize += stream.WriteDescriptor( this.profileLevelIndicationIndexDescr, "profileLevelIndicationIndexDescr"); 
		boxSize += stream.WriteDescriptorsTillEnd(this, objectTypeIndication);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // objectTypeIndication
		boxSize += 6; // streamType
		boxSize += 1; // upStream
		boxSize += 1; // reserved
		boxSize += 24; // bufferSizeDB
		boxSize += 32; // maxBitrate
		boxSize += 32; // avgBitrate
		// boxSize += IsoStream.CalculateDescriptorSize(decSpecificInfo); // decSpecificInfo
		// boxSize += IsoStream.CalculateDescriptorSize(profileLevelIndicationIndexDescr); // profileLevelIndicationIndexDescr
		boxSize += IsoStream.CalculateDescriptors(this, objectTypeIndication);
		return boxSize;
	}
}


/*
class ProfileLevelIndicationIndexDescriptor () extends BaseDescriptor
 : bit(8) ProfileLevelIndicationIndexDescrTag {
 bit(8) profileLevelIndicationIndex;
 }
*/
public partial class ProfileLevelIndicationIndexDescriptor : BaseDescriptor
{
	public const byte TYPE = DescriptorTags.ProfileLevelIndicationIndexDescrTag;
	public override string DisplayName { get { return "ProfileLevelIndicationIndexDescriptor"; } }

	protected byte profileLevelIndicationIndex; 
	public byte ProfileLevelIndicationIndex { get { return this.profileLevelIndicationIndex; } set { this.profileLevelIndicationIndex = value; } }

	public ProfileLevelIndicationIndexDescriptor(): base(DescriptorTags.ProfileLevelIndicationIndexDescrTag)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.profileLevelIndicationIndex, "profileLevelIndicationIndex"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.profileLevelIndicationIndex, "profileLevelIndicationIndex"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // profileLevelIndicationIndex
		return boxSize;
	}
}


/*
class IPI_DescrPointer extends BaseDescriptor : bit(8) tag=IPI_DescrPointerTag {
 bit(16) IPI_ES_Id;
 }
*/
public partial class IPI_DescrPointer : BaseDescriptor
{
	public const byte TYPE = DescriptorTags.IPI_DescrPointerTag;
	public override string DisplayName { get { return "IPI_DescrPointer"; } }

	protected ushort IPI_ES_Id; 
	public ushort IPIESId { get { return this.IPI_ES_Id; } set { this.IPI_ES_Id = value; } }

	public IPI_DescrPointer(): base(DescriptorTags.IPI_DescrPointerTag)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.IPI_ES_Id, "IPI_ES_Id"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.IPI_ES_Id, "IPI_ES_Id"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // IPI_ES_Id
		return boxSize;
	}
}


/*
abstract class IP_IdentificationDataSet extends BaseDescriptor
 : bit(8) tag=ContentIdentDescrTag..SupplContentIdentDescrTag
 {
 // empty. To be filled by classes extending this class.
 }
*/
public abstract partial class IP_IdentificationDataSet : BaseDescriptor
{
	public byte TagMin { get; set; } = DescriptorTags.ContentIdentDescrTag;
	public byte TagMax { get; set; } = DescriptorTags.SupplContentIdentDescrTag;	public override string DisplayName { get { return "IP_IdentificationDataSet"; } }

	public IP_IdentificationDataSet(byte tag): base(tag)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		/*  empty. To be filled by classes extending this class. */
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		/*  empty. To be filled by classes extending this class. */
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		/*  empty. To be filled by classes extending this class. */
		return boxSize;
	}
}


/*
class IPMP_DescriptorPointer extends BaseDescriptor : bit(8) tag=IPMP_DescrPointerTag {
 bit(8) IPMP_DescriptorID;
 }
*/
public partial class IPMP_DescriptorPointer : BaseDescriptor
{
	public const byte TYPE = DescriptorTags.IPMP_DescrPointerTag;
	public override string DisplayName { get { return "IPMP_DescriptorPointer"; } }

	protected byte IPMP_DescriptorID; 
	public byte IPMPDescriptorID { get { return this.IPMP_DescriptorID; } set { this.IPMP_DescriptorID = value; } }

	public IPMP_DescriptorPointer(): base(DescriptorTags.IPMP_DescrPointerTag)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.IPMP_DescriptorID, "IPMP_DescriptorID"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.IPMP_DescriptorID, "IPMP_DescriptorID"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // IPMP_DescriptorID
		return boxSize;
	}
}


/*
abstract class OCI_Descriptor extends BaseDescriptor : bit(8) tag=OCIDescrTagStartRange..OCIDescrTagEndRange
{
 // empty. To be filled by classes extending this class.
}
*/
public abstract partial class OCI_Descriptor : BaseDescriptor
{
	public byte TagMin { get; set; } = DescriptorTags.OCIDescrTagStartRange;
	public byte TagMax { get; set; } = DescriptorTags.OCIDescrTagEndRange;	public override string DisplayName { get { return "OCI_Descriptor"; } }

	public OCI_Descriptor(byte tag): base(tag)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		/*  empty. To be filled by classes extending this class. */
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		/*  empty. To be filled by classes extending this class. */
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		/*  empty. To be filled by classes extending this class. */
		return boxSize;
	}
}


/*
class LanguageDescriptor extends OCI_Descriptor : bit(8) tag=LanguageDescrTag {
 bit(24) languageCode;
 }
*/
public partial class LanguageDescriptor : OCI_Descriptor
{
	public const byte TYPE = DescriptorTags.LanguageDescrTag;
	public override string DisplayName { get { return "LanguageDescriptor"; } }

	protected uint languageCode; 
	public uint LanguageCode { get { return this.languageCode; } set { this.languageCode = value; } }

	public LanguageDescriptor(): base(DescriptorTags.LanguageDescrTag)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt24(boxSize, readSize,  out this.languageCode, "languageCode"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt24( this.languageCode, "languageCode"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 24; // languageCode
		return boxSize;
	}
}


/*
class IPMPDecoderConfiguration extends DecoderSpecificInfo : bit(8) tag=DecSpecificInfoTag {
 // IPMP system specific configuration information
 }
*/
public partial class IPMPDecoderConfiguration : DecoderSpecificInfo
{
	public const byte TYPE = DescriptorTags.DecSpecificInfoTag;
	public override string DisplayName { get { return "IPMPDecoderConfiguration"; } }

	public IPMPDecoderConfiguration(): base()
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		/*  IPMP system specific configuration information */
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		/*  IPMP system specific configuration information */
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		/*  IPMP system specific configuration information */
		return boxSize;
	}
}


/*
class OCIDecoderConfiguration extends DecoderSpecificInfo : bit(8) tag=DecSpecificInfoTag {
 bit(8) versionLabel = 0x01;
 }
*/
public partial class OCIDecoderConfiguration : DecoderSpecificInfo
{
	public const byte TYPE = DescriptorTags.DecSpecificInfoTag;
	public override string DisplayName { get { return "OCIDecoderConfiguration"; } }

	protected byte versionLabel = 0x01; 
	public byte VersionLabel { get { return this.versionLabel; } set { this.versionLabel = value; } }

	public OCIDecoderConfiguration(): base()
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.versionLabel, "versionLabel"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.versionLabel, "versionLabel"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // versionLabel
		return boxSize;
	}
}


/*
class JPEG_DecoderConfig extends DecoderSpecificInfo : bit(8) tag=DecSpecificInfoTag {
 int(16) headerLength;
 int(16) Xdensity;
 int(16) Ydensity;
 int(8) numComponents;
 }
*/
public partial class JPEG_DecoderConfig : DecoderSpecificInfo
{
	public const byte TYPE = DescriptorTags.DecSpecificInfoTag;
	public override string DisplayName { get { return "JPEG_DecoderConfig"; } }

	protected short headerLength; 
	public short HeaderLength { get { return this.headerLength; } set { this.headerLength = value; } }

	protected short Xdensity; 
	public short _Xdensity { get { return this.Xdensity; } set { this.Xdensity = value; } }

	protected short Ydensity; 
	public short _Ydensity { get { return this.Ydensity; } set { this.Ydensity = value; } }

	protected sbyte numComponents; 
	public sbyte NumComponents { get { return this.numComponents; } set { this.numComponents = value; } }

	public JPEG_DecoderConfig(): base()
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.headerLength, "headerLength"); 
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.Xdensity, "Xdensity"); 
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.Ydensity, "Ydensity"); 
		boxSize += stream.ReadInt8(boxSize, readSize,  out this.numComponents, "numComponents"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt16( this.headerLength, "headerLength"); 
		boxSize += stream.WriteInt16( this.Xdensity, "Xdensity"); 
		boxSize += stream.WriteInt16( this.Ydensity, "Ydensity"); 
		boxSize += stream.WriteInt8( this.numComponents, "numComponents"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // headerLength
		boxSize += 16; // Xdensity
		boxSize += 16; // Ydensity
		boxSize += 8; // numComponents
		return boxSize;
	}
}


/*
class GenericDecoderSpecificInfo extends DecoderSpecificInfo : bit(8) tag=DecSpecificInfoTag {
 bit(8) data[];
 }
*/
public partial class GenericDecoderSpecificInfo : DecoderSpecificInfo
{
	public const byte TYPE = DescriptorTags.DecSpecificInfoTag;
	public override string DisplayName { get { return "GenericDecoderSpecificInfo"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public GenericDecoderSpecificInfo(): base()
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class QoS_Descriptor extends BaseDescriptor : bit(8) tag=QoS_DescrTag {
 bit(8) predefined;
 if (predefined==0) {
 QoS_Qualifier qualifiers[];
 }
 }
*/
public partial class QoS_Descriptor : BaseDescriptor
{
	public const byte TYPE = DescriptorTags.QoS_DescrTag;
	public override string DisplayName { get { return "QoS_Descriptor"; } }

	protected byte predefined; 
	public byte Predefined { get { return this.predefined; } set { this.predefined = value; } }
	public IEnumerable<QoS_Qualifier> Qualifiers { get { return this.children.OfType<QoS_Qualifier>(); } }

	public QoS_Descriptor(): base(DescriptorTags.QoS_DescrTag)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.predefined, "predefined"); 

		if (predefined==0)
		{
			// boxSize += stream.ReadDescriptor(boxSize, readSize, this,  out this.qualifiers, "qualifiers"); 
		}
		boxSize += stream.ReadDescriptorsTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.predefined, "predefined"); 

		if (predefined==0)
		{
			// boxSize += stream.WriteDescriptor( this.qualifiers, "qualifiers"); 
		}
		boxSize += stream.WriteDescriptorsTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // predefined

		if (predefined==0)
		{
			// boxSize += IsoStream.CalculateDescriptorSize(qualifiers); // qualifiers
		}
		boxSize += IsoStream.CalculateDescriptors(this);
		return boxSize;
	}
}


/*
abstract aligned(8) expandable(228-1) class QoS_Qualifier : bit(8) tag=0x01..0xff {
 // empty. To be filled by classes extending this class.
 }
 
*/
public abstract partial class QoS_Qualifier : Descriptor
{
	public byte TagMin { get; set; } = 0x01;
	public byte TagMax { get; set; } = 0xff;	public override string DisplayName { get { return "QoS_Qualifier"; } }

	public QoS_Qualifier(byte tag): base(tag)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		/*  empty. To be filled by classes extending this class. */
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		/*  empty. To be filled by classes extending this class. */
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		/*  empty. To be filled by classes extending this class. */
		return boxSize;
	}
}


/*
class QoS_Qualifier_MAX_DELAY extends QoS_Qualifier : bit(8) tag=0x01 {
 unsigned int(32) MAX_DELAY;
 }
 
*/
public partial class QoS_Qualifier_MAX_DELAY : QoS_Qualifier
{
	public const byte TYPE = 0x01;
	public override string DisplayName { get { return "QoS_Qualifier_MAX_DELAY"; } }

	protected uint MAX_DELAY; 
	public uint MAXDELAY { get { return this.MAX_DELAY; } set { this.MAX_DELAY = value; } }

	public QoS_Qualifier_MAX_DELAY(): base(0x01)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.MAX_DELAY, "MAX_DELAY"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.MAX_DELAY, "MAX_DELAY"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // MAX_DELAY
		return boxSize;
	}
}


/*
class QoS_Qualifier_PREF_MAX_DELAY extends QoS_Qualifier : bit(8) tag=0x02 {
 unsigned int(32) PREF_MAX_DELAY;
 }
 
*/
public partial class QoS_Qualifier_PREF_MAX_DELAY : QoS_Qualifier
{
	public const byte TYPE = 0x02;
	public override string DisplayName { get { return "QoS_Qualifier_PREF_MAX_DELAY"; } }

	protected uint PREF_MAX_DELAY; 
	public uint PREFMAXDELAY { get { return this.PREF_MAX_DELAY; } set { this.PREF_MAX_DELAY = value; } }

	public QoS_Qualifier_PREF_MAX_DELAY(): base(0x02)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.PREF_MAX_DELAY, "PREF_MAX_DELAY"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.PREF_MAX_DELAY, "PREF_MAX_DELAY"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // PREF_MAX_DELAY
		return boxSize;
	}
}


/*
class QoS_Qualifier_LOSS_PROB extends QoS_Qualifier : bit(8) tag=0x03 {
 double(32) LOSS_PROB;
 }
 
*/
public partial class QoS_Qualifier_LOSS_PROB : QoS_Qualifier
{
	public const byte TYPE = 0x03;
	public override string DisplayName { get { return "QoS_Qualifier_LOSS_PROB"; } }

	protected double LOSS_PROB; 
	public double LOSSPROB { get { return this.LOSS_PROB; } set { this.LOSS_PROB = value; } }

	public QoS_Qualifier_LOSS_PROB(): base(0x03)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadDouble32(boxSize, readSize,  out this.LOSS_PROB, "LOSS_PROB"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteDouble32( this.LOSS_PROB, "LOSS_PROB"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // LOSS_PROB
		return boxSize;
	}
}


/*
class QoS_Qualifier_MAX_GAP_LOSS extends QoS_Qualifier : bit(8) tag=0x04 {
 unsigned int(32) MAX_GAP_LOSS;
 }
 
*/
public partial class QoS_Qualifier_MAX_GAP_LOSS : QoS_Qualifier
{
	public const byte TYPE = 0x04;
	public override string DisplayName { get { return "QoS_Qualifier_MAX_GAP_LOSS"; } }

	protected uint MAX_GAP_LOSS; 
	public uint MAXGAPLOSS { get { return this.MAX_GAP_LOSS; } set { this.MAX_GAP_LOSS = value; } }

	public QoS_Qualifier_MAX_GAP_LOSS(): base(0x04)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.MAX_GAP_LOSS, "MAX_GAP_LOSS"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.MAX_GAP_LOSS, "MAX_GAP_LOSS"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // MAX_GAP_LOSS
		return boxSize;
	}
}


/*
class QoS_Qualifier_MAX_AU_SIZE extends QoS_Qualifier : bit(8) tag=0x41 {
 unsigned int(32) MAX_AU_SIZE;
 }
 
*/
public partial class QoS_Qualifier_MAX_AU_SIZE : QoS_Qualifier
{
	public const byte TYPE = 0x41;
	public override string DisplayName { get { return "QoS_Qualifier_MAX_AU_SIZE"; } }

	protected uint MAX_AU_SIZE; 
	public uint MAXAUSIZE { get { return this.MAX_AU_SIZE; } set { this.MAX_AU_SIZE = value; } }

	public QoS_Qualifier_MAX_AU_SIZE(): base(0x41)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.MAX_AU_SIZE, "MAX_AU_SIZE"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.MAX_AU_SIZE, "MAX_AU_SIZE"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // MAX_AU_SIZE
		return boxSize;
	}
}


/*
class QoS_Qualifier_AVG_AU_SIZE extends QoS_Qualifier : bit(8) tag=0x42 {
 unsigned int(32) AVG_AU_SIZE;
 }
 
*/
public partial class QoS_Qualifier_AVG_AU_SIZE : QoS_Qualifier
{
	public const byte TYPE = 0x42;
	public override string DisplayName { get { return "QoS_Qualifier_AVG_AU_SIZE"; } }

	protected uint AVG_AU_SIZE; 
	public uint AVGAUSIZE { get { return this.AVG_AU_SIZE; } set { this.AVG_AU_SIZE = value; } }

	public QoS_Qualifier_AVG_AU_SIZE(): base(0x42)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.AVG_AU_SIZE, "AVG_AU_SIZE"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.AVG_AU_SIZE, "AVG_AU_SIZE"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // AVG_AU_SIZE
		return boxSize;
	}
}


/*
class QoS_Qualifier_MAX_AU_RATE extends QoS_Qualifier : bit(8) tag=0x43 {
 unsigned int(32) MAX_AU_RATE;
 }
*/
public partial class QoS_Qualifier_MAX_AU_RATE : QoS_Qualifier
{
	public const byte TYPE = 0x43;
	public override string DisplayName { get { return "QoS_Qualifier_MAX_AU_RATE"; } }

	protected uint MAX_AU_RATE; 
	public uint MAXAURATE { get { return this.MAX_AU_RATE; } set { this.MAX_AU_RATE = value; } }

	public QoS_Qualifier_MAX_AU_RATE(): base(0x43)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.MAX_AU_RATE, "MAX_AU_RATE"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.MAX_AU_RATE, "MAX_AU_RATE"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // MAX_AU_RATE
		return boxSize;
	}
}


/*
class RegistrationDescriptor extends BaseDescriptor : bit(8) tag=RegistrationDescrTag {
 bit(32) formatIdentifier;
 bit(8) additionalIdentificationInfo[sizeOfInstance-4];
 }
*/
public partial class RegistrationDescriptor : BaseDescriptor
{
	public const byte TYPE = DescriptorTags.RegistrationDescrTag;
	public override string DisplayName { get { return "RegistrationDescriptor"; } }

	protected uint formatIdentifier; 
	public uint FormatIdentifier { get { return this.formatIdentifier; } set { this.formatIdentifier = value; } }

	protected byte[] additionalIdentificationInfo; 
	public byte[] AdditionalIdentificationInfo { get { return this.additionalIdentificationInfo; } set { this.additionalIdentificationInfo = value; } }

	public RegistrationDescriptor(): base(DescriptorTags.RegistrationDescrTag)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.formatIdentifier, "formatIdentifier"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(sizeOfInstance-4),  out this.additionalIdentificationInfo, "additionalIdentificationInfo"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.formatIdentifier, "formatIdentifier"); 
		boxSize += stream.WriteUInt8Array((uint)(sizeOfInstance-4),  this.additionalIdentificationInfo, "additionalIdentificationInfo"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // formatIdentifier
		boxSize += ((ulong)(sizeOfInstance-4) * 8); // additionalIdentificationInfo
		return boxSize;
	}
}


/*
abstract class ExtensionDescriptor extends BaseDescriptor : bit(8) tag=ExtDescrTagStartRange..ExtDescrTagEndRange {
 // empty. To be filled by classes extending this class.
 }
*/
public abstract partial class ExtensionDescriptor : BaseDescriptor
{
	public byte TagMin { get; set; } = DescriptorTags.ExtDescrTagStartRange;
	public byte TagMax { get; set; } = DescriptorTags.ExtDescrTagEndRange;	public override string DisplayName { get { return "ExtensionDescriptor"; } }

	public ExtensionDescriptor(byte tag): base(tag)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		/*  empty. To be filled by classes extending this class. */
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		/*  empty. To be filled by classes extending this class. */
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		/*  empty. To be filled by classes extending this class. */
		return boxSize;
	}
}


/*
aligned(8) class ESDBox
 extends FullBox('esds', version = 0, 0) {
 ES_Descriptor ES;
 }
*/
public partial class ESDBox : FullBox
{
	public const string TYPE = "esds";
	public override string DisplayName { get { return "ESDBox"; } }

	protected ES_Descriptor ES; 
	public ES_Descriptor _ES { get { return this.ES; } set { this.ES = value; } }

	public ESDBox(): base(IsoStream.FromFourCC("esds"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadDescriptor(boxSize, readSize, this,  out this.ES, "ES"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteDescriptor( this.ES, "ES"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateDescriptorSize(ES); // ES
		return boxSize;
	}
}


/*
class MpegSampleEntry() extends SampleEntry ('mp4s') {
 Box ES;
 }
*/
public partial class MpegSampleEntry : SampleEntry
{
	public const string TYPE = "mp4s";
	public override string DisplayName { get { return "MpegSampleEntry"; } }
	public Box _ES { get { return this.children.OfType<Box>().FirstOrDefault(); } }

	public MpegSampleEntry(): base(IsoStream.FromFourCC("mp4s"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.ES, "ES"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.ES, "ES"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(ES); // ES
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class FullBox(unsigned int(32) boxtype, unsigned int(8) v, bit(24) f)
extends Box(boxtype) { 
unsigned int(8) version = v;
bit(24) flags = f;
 }
*/
public partial class FullBox : Box
{
	public override string DisplayName { get { return "FullBox"; } }

	protected byte version; // = v
	public byte Version { get { return this.version; } set { this.version = value; } }

	protected uint flags; // = f
	public uint Flags { get { return this.flags; } set { this.flags = value; } }
public FullBox(uint boxtype, byte[] uuid) : base(boxtype, uuid) { }


	public FullBox(uint boxtype, byte v = 0, uint f = 0): base(boxtype)
	{
		this.version = v;
		 this.flags = f;	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.version, "version"); 
		boxSize += stream.ReadUInt24(boxSize, readSize,  out this.flags, "flags"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.version, "version"); 
		boxSize += stream.WriteUInt24( this.flags, "flags"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // version
		boxSize += 24; // flags
		return boxSize;
	}
}


/*
// Sequence Entry  
abstract class SampleGroupDescriptionEntry (unsigned int(32) grouping_type) 
{ 
} 


*/
public abstract partial class SampleGroupDescriptionEntry : IHasBoxChildren
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "SampleGroupDescriptionEntry"; } }

	protected List<Box> children= new List<Box>(); 
	public List<Box> Children { get { return this.children; } set { this.children = value; } }

	public SampleGroupDescriptionEntry(uint grouping_type): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		return boxSize;
	}
}


/*
abstract class VisualSampleGroupEntry (unsigned int(32) grouping_type) extends 
SampleGroupDescriptionEntry (grouping_type) 
{ 
} 


*/
public abstract partial class VisualSampleGroupEntry : SampleGroupDescriptionEntry
{
	public override string DisplayName { get { return "VisualSampleGroupEntry"; } }

	public VisualSampleGroupEntry(uint grouping_type): base(grouping_type)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
abstract class AudioSampleGroupEntry (unsigned int(32) grouping_type) extends 
SampleGroupDescriptionEntry (grouping_type) 
{ 
} 


*/
public abstract partial class AudioSampleGroupEntry : SampleGroupDescriptionEntry
{
	public override string DisplayName { get { return "AudioSampleGroupEntry"; } }

	public AudioSampleGroupEntry(uint grouping_type): base(grouping_type)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
abstract class HintSampleGroupEntry (unsigned int(32) grouping_type) extends 
SampleGroupDescriptionEntry (grouping_type) 
{ 
} 


*/
public abstract partial class HintSampleGroupEntry : SampleGroupDescriptionEntry
{
	public override string DisplayName { get { return "HintSampleGroupEntry"; } }

	public HintSampleGroupEntry(uint grouping_type): base(grouping_type)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
abstract class SubtitleSampleGroupEntry (unsigned int(32) grouping_type) extends 
SampleGroupDescriptionEntry (grouping_type) 
{ 
} 


*/
public abstract partial class SubtitleSampleGroupEntry : SampleGroupDescriptionEntry
{
	public override string DisplayName { get { return "SubtitleSampleGroupEntry"; } }

	public SubtitleSampleGroupEntry(uint grouping_type): base(grouping_type)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
abstract class TextSampleGroupEntry (unsigned int(32) grouping_type) extends 
SampleGroupDescriptionEntry (grouping_type) 
{ 
}
*/
public abstract partial class TextSampleGroupEntry : SampleGroupDescriptionEntry
{
	public override string DisplayName { get { return "TextSampleGroupEntry"; } }

	public TextSampleGroupEntry(uint grouping_type): base(grouping_type)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
class SubtitleSampleEntry(codingname) extends SampleEntry (codingname) { 
} 


*/
public partial class SubtitleSampleEntry : SampleEntry
{
	public override string DisplayName { get { return "SubtitleSampleEntry"; } }

	public SubtitleSampleEntry(uint codingname = 0): base(codingname)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
class XMLSubtitleSampleEntry() extends SubtitleSampleEntry ('stpp') { 
 string namespace; 
 string schema_location;  // optional 
 string auxiliary_mime_types; // optional, required if auxiliary resources are present 
 BitRateBox (); 
} 


*/
public partial class XMLSubtitleSampleEntry : SubtitleSampleEntry
{
	public const string TYPE = "stpp";
	public override string DisplayName { get { return "XMLSubtitleSampleEntry"; } }

	protected BinaryUTF8String ns; 
	public BinaryUTF8String Ns { get { return this.ns; } set { this.ns = value; } }

	protected BinaryUTF8String schema_location;  //  optional 
	public BinaryUTF8String SchemaLocation { get { return this.schema_location; } set { this.schema_location = value; } }

	protected BinaryUTF8String auxiliary_mime_types;  //  optional, required if auxiliary resources are present 
	public BinaryUTF8String AuxiliaryMimeTypes { get { return this.auxiliary_mime_types; } set { this.auxiliary_mime_types = value; } }
	public BitRateBox _BitRateBox { get { return this.children.OfType<BitRateBox>().FirstOrDefault(); } }

	public XMLSubtitleSampleEntry(): base(IsoStream.FromFourCC("stpp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.ns, "ns"); 
		if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.schema_location, "schema_location"); // optional 
		if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.auxiliary_mime_types, "auxiliary_mime_types"); // optional, required if auxiliary resources are present 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.BitRateBox, "BitRateBox"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.ns, "ns"); 
		boxSize += stream.WriteStringZeroTerminated( this.schema_location, "schema_location"); // optional 
		boxSize += stream.WriteStringZeroTerminated( this.auxiliary_mime_types, "auxiliary_mime_types"); // optional, required if auxiliary resources are present 
		// boxSize += stream.WriteBox( this.BitRateBox, "BitRateBox"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(ns); // ns
		boxSize += IsoStream.CalculateStringSize(schema_location); // schema_location
		boxSize += IsoStream.CalculateStringSize(auxiliary_mime_types); // auxiliary_mime_types
		// boxSize += IsoStream.CalculateBoxSize(BitRateBox); // BitRateBox
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class TextSubtitleSampleEntry() extends SubtitleSampleEntry ('sbtt') { 
 string content_encoding; // optional 
 string mime_format; 
 BitRateBox (); // optional 
 TextConfigBox (); // optional 
}
*/
public partial class TextSubtitleSampleEntry : SubtitleSampleEntry
{
	public const string TYPE = "sbtt";
	public override string DisplayName { get { return "TextSubtitleSampleEntry"; } }

	protected BinaryUTF8String content_encoding;  //  optional 
	public BinaryUTF8String ContentEncoding { get { return this.content_encoding; } set { this.content_encoding = value; } }

	protected BinaryUTF8String mime_format; 
	public BinaryUTF8String MimeFormat { get { return this.mime_format; } set { this.mime_format = value; } }
	public BitRateBox _BitRateBox { get { return this.children.OfType<BitRateBox>().FirstOrDefault(); } }
	public TextConfigBox _TextConfigBox { get { return this.children.OfType<TextConfigBox>().FirstOrDefault(); } }

	public TextSubtitleSampleEntry(): base(IsoStream.FromFourCC("sbtt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.content_encoding, "content_encoding"); // optional 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.mime_format, "mime_format"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.BitRateBox, "BitRateBox"); // optional 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.TextConfigBox, "TextConfigBox"); // optional 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.content_encoding, "content_encoding"); // optional 
		boxSize += stream.WriteStringZeroTerminated( this.mime_format, "mime_format"); 
		// boxSize += stream.WriteBox( this.BitRateBox, "BitRateBox"); // optional 
		// boxSize += stream.WriteBox( this.TextConfigBox, "TextConfigBox"); // optional 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(content_encoding); // content_encoding
		boxSize += IsoStream.CalculateStringSize(mime_format); // mime_format
		// boxSize += IsoStream.CalculateBoxSize(BitRateBox); // BitRateBox
		// boxSize += IsoStream.CalculateBoxSize(TextConfigBox); // TextConfigBox
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class LoudnessBaseBox extends FullBox(loudnessType) { 
unsigned int(3) reserved = 0; 
unsigned int(7) downmix_ID;  // matching downmix 
unsigned int(6) DRC_set_ID;  // to match a DRC box 
signed int(12)  bs_sample_peak_level; 
signed int(12)  bs_true_peak_level; 
unsigned int(4) measurement_system_for_TP; 
unsigned int(4) reliability_for_TP; 
unsigned int(8) measurement_count; 
int i; 
for (i = 1 ; i <= measurement_count; i++){ 
  unsigned int(8) method_definition; 
  unsigned int(8) method_value; 
  unsigned int(4) measurement_system; 
  unsigned int(4) reliability; 
 } 
} 

*/
public partial class LoudnessBaseBox : FullBox
{
	public override string DisplayName { get { return "LoudnessBaseBox"; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte downmix_ID;  //  matching downmix 
	public byte DownmixID { get { return this.downmix_ID; } set { this.downmix_ID = value; } }

	protected byte DRC_set_ID;  //  to match a DRC box 
	public byte DRCSetID { get { return this.DRC_set_ID; } set { this.DRC_set_ID = value; } }

	protected short bs_sample_peak_level; 
	public short BsSamplePeakLevel { get { return this.bs_sample_peak_level; } set { this.bs_sample_peak_level = value; } }

	protected short bs_true_peak_level; 
	public short BsTruePeakLevel { get { return this.bs_true_peak_level; } set { this.bs_true_peak_level = value; } }

	protected byte measurement_system_for_TP; 
	public byte MeasurementSystemForTP { get { return this.measurement_system_for_TP; } set { this.measurement_system_for_TP = value; } }

	protected byte reliability_for_TP; 
	public byte ReliabilityForTP { get { return this.reliability_for_TP; } set { this.reliability_for_TP = value; } }

	protected byte measurement_count; 
	public byte MeasurementCount { get { return this.measurement_count; } set { this.measurement_count = value; } }

	protected byte[] method_definition; 
	public byte[] MethodDefinition { get { return this.method_definition; } set { this.method_definition = value; } }

	protected byte[] method_value; 
	public byte[] MethodValue { get { return this.method_value; } set { this.method_value = value; } }

	protected byte[] measurement_system; 
	public byte[] MeasurementSystem { get { return this.measurement_system; } set { this.measurement_system = value; } }

	protected byte[] reliability; 
	public byte[] Reliability { get { return this.reliability; } set { this.reliability = value; } }

	public LoudnessBaseBox(uint loudnessType): base(loudnessType)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.downmix_ID, "downmix_ID"); // matching downmix 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.DRC_set_ID, "DRC_set_ID"); // to match a DRC box 
		boxSize += stream.ReadBits(boxSize, readSize, 12,  out this.bs_sample_peak_level, "bs_sample_peak_level"); 
		boxSize += stream.ReadBits(boxSize, readSize, 12,  out this.bs_true_peak_level, "bs_true_peak_level"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.measurement_system_for_TP, "measurement_system_for_TP"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.reliability_for_TP, "reliability_for_TP"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.measurement_count, "measurement_count"); 
		

		this.method_definition = new byte[IsoStream.GetInt( measurement_count)];
		this.method_value = new byte[IsoStream.GetInt( measurement_count)];
		this.measurement_system = new byte[IsoStream.GetInt( measurement_count)];
		this.reliability = new byte[IsoStream.GetInt( measurement_count)];
		for (int i = 0 ; i < measurement_count; i++)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.method_definition[i], "method_definition"); 
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.method_value[i], "method_value"); 
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.measurement_system[i], "measurement_system"); 
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.reliability[i], "reliability"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(3,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(7,  this.downmix_ID, "downmix_ID"); // matching downmix 
		boxSize += stream.WriteBits(6,  this.DRC_set_ID, "DRC_set_ID"); // to match a DRC box 
		boxSize += stream.WriteBits(12,  this.bs_sample_peak_level, "bs_sample_peak_level"); 
		boxSize += stream.WriteBits(12,  this.bs_true_peak_level, "bs_true_peak_level"); 
		boxSize += stream.WriteBits(4,  this.measurement_system_for_TP, "measurement_system_for_TP"); 
		boxSize += stream.WriteBits(4,  this.reliability_for_TP, "reliability_for_TP"); 
		boxSize += stream.WriteUInt8( this.measurement_count, "measurement_count"); 
		

		for (int i = 0 ; i < measurement_count; i++)
		{
			boxSize += stream.WriteUInt8( this.method_definition[i], "method_definition"); 
			boxSize += stream.WriteUInt8( this.method_value[i], "method_value"); 
			boxSize += stream.WriteBits(4,  this.measurement_system[i], "measurement_system"); 
			boxSize += stream.WriteBits(4,  this.reliability[i], "reliability"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 3; // reserved
		boxSize += 7; // downmix_ID
		boxSize += 6; // DRC_set_ID
		boxSize += 12; // bs_sample_peak_level
		boxSize += 12; // bs_true_peak_level
		boxSize += 4; // measurement_system_for_TP
		boxSize += 4; // reliability_for_TP
		boxSize += 8; // measurement_count
		

		for (int i = 0 ; i < measurement_count; i++)
		{
			boxSize += 8; // method_definition
			boxSize += 8; // method_value
			boxSize += 4; // measurement_system
			boxSize += 4; // reliability
		}
		return boxSize;
	}
}


/*
class MPEG2TSSampleEntry(name) extends HintSampleEntry(name) { 
 uint(16) hinttrackversion = 1; 
 uint(16) highestcompatibleversion = 1; 
 uint(8) precedingbyteslen; 
 uint(8) trailingbyteslen; 
 uint(1) precomputed_only_flag; 
 uint(7) reserved; 
 Box  additionaldata[]; 
} 
*/
public partial class MPEG2TSSampleEntry : HintSampleEntry
{
	public override string DisplayName { get { return "MPEG2TSSampleEntry"; } }

	protected ushort hinttrackversion = 1; 
	public ushort Hinttrackversion { get { return this.hinttrackversion; } set { this.hinttrackversion = value; } }

	protected ushort highestcompatibleversion = 1; 
	public ushort Highestcompatibleversion { get { return this.highestcompatibleversion; } set { this.highestcompatibleversion = value; } }

	protected byte precedingbyteslen; 
	public byte Precedingbyteslen { get { return this.precedingbyteslen; } set { this.precedingbyteslen = value; } }

	protected byte trailingbyteslen; 
	public byte Trailingbyteslen { get { return this.trailingbyteslen; } set { this.trailingbyteslen = value; } }

	protected bool precomputed_only_flag; 
	public bool PrecomputedOnlyFlag { get { return this.precomputed_only_flag; } set { this.precomputed_only_flag = value; } }

	protected byte reserved; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }
	public IEnumerable<Box> Additionaldata { get { return this.children.OfType<Box>(); } }

	public MPEG2TSSampleEntry(uint name): base(name)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.hinttrackversion, "hinttrackversion"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.highestcompatibleversion, "highestcompatibleversion"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.precedingbyteslen, "precedingbyteslen"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.trailingbyteslen, "trailingbyteslen"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.precomputed_only_flag, "precomputed_only_flag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.reserved, "reserved"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.additionaldata, "additionaldata"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.hinttrackversion, "hinttrackversion"); 
		boxSize += stream.WriteUInt16( this.highestcompatibleversion, "highestcompatibleversion"); 
		boxSize += stream.WriteUInt8( this.precedingbyteslen, "precedingbyteslen"); 
		boxSize += stream.WriteUInt8( this.trailingbyteslen, "trailingbyteslen"); 
		boxSize += stream.WriteBit( this.precomputed_only_flag, "precomputed_only_flag"); 
		boxSize += stream.WriteBits(7,  this.reserved, "reserved"); 
		// boxSize += stream.WriteBox( this.additionaldata, "additionaldata"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // hinttrackversion
		boxSize += 16; // highestcompatibleversion
		boxSize += 8; // precedingbyteslen
		boxSize += 8; // trailingbyteslen
		boxSize += 1; // precomputed_only_flag
		boxSize += 7; // reserved
		// boxSize += IsoStream.CalculateBoxSize(additionaldata); // additionaldata
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ItemInfoExtension(unsigned int(32) extension_type)
{ 
} 

*/
public partial class ItemInfoExtension : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "ItemInfoExtension"; } }

	public ItemInfoExtension(uint extension_type): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		return boxSize;
	}
}


/*
class PlainTextSampleEntry(codingname) extends SampleEntry (codingname) { 
} 

*/
public partial class PlainTextSampleEntry : SampleEntry
{
	public override string DisplayName { get { return "PlainTextSampleEntry"; } }

	public PlainTextSampleEntry(uint codingname = 0): base(codingname)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
class SimpleTextSampleEntry(codingname) extends PlainTextSampleEntry ('stxt') { 
 string content_encoding; // optional 
 string mime_format; 
 BitRateBox (); 
    // optional 
 TextConfigBox (); 
 
   // optional 
} 
*/
public partial class SimpleTextSampleEntry : PlainTextSampleEntry
{
	public const string TYPE = "stxt";
	public override string DisplayName { get { return "SimpleTextSampleEntry"; } }

	protected BinaryUTF8String content_encoding;  //  optional 
	public BinaryUTF8String ContentEncoding { get { return this.content_encoding; } set { this.content_encoding = value; } }

	protected BinaryUTF8String mime_format; 
	public BinaryUTF8String MimeFormat { get { return this.mime_format; } set { this.mime_format = value; } }
	public BitRateBox _BitRateBox { get { return this.children.OfType<BitRateBox>().FirstOrDefault(); } }
	public TextConfigBox _TextConfigBox { get { return this.children.OfType<TextConfigBox>().FirstOrDefault(); } }

	public SimpleTextSampleEntry(uint codingname = 0): base(IsoStream.FromFourCC("stxt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.content_encoding, "content_encoding"); // optional 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.mime_format, "mime_format"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.BitRateBox, "BitRateBox"); // optional 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.TextConfigBox, "TextConfigBox"); // optional 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.content_encoding, "content_encoding"); // optional 
		boxSize += stream.WriteStringZeroTerminated( this.mime_format, "mime_format"); 
		// boxSize += stream.WriteBox( this.BitRateBox, "BitRateBox"); // optional 
		// boxSize += stream.WriteBox( this.TextConfigBox, "TextConfigBox"); // optional 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(content_encoding); // content_encoding
		boxSize += IsoStream.CalculateStringSize(mime_format); // mime_format
		// boxSize += IsoStream.CalculateBoxSize(BitRateBox); // BitRateBox
		// boxSize += IsoStream.CalculateBoxSize(TextConfigBox); // TextConfigBox
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ItemProperty(property_type) extends Box(property_type){}

*/
public partial class ItemProperty : Box
{
	public override string DisplayName { get { return "ItemProperty"; } }

	public ItemProperty(uint property_type): base(property_type)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
aligned(8) class ItemFullProperty(property_type, version, flags) extends FullBox(property_type, version, flags){}
*/
public partial class ItemFullProperty : FullBox
{
	public override string DisplayName { get { return "ItemFullProperty"; } }

	public ItemFullProperty(uint property_type, byte version, uint flags): base(property_type, version, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
aligned(8) class GeneralTypeBox(code) extends Box(code) {
      unsigned int(32)    major_brand;
      unsigned int(32)    minor_version;
      unsigned int(32)    compatible_brands[];    // to end of the box
    }
*/
public partial class GeneralTypeBox : Box
{
	public override string DisplayName { get { return "GeneralTypeBox"; } }

	protected uint major_brand; 
	public uint MajorBrand { get { return this.major_brand; } set { this.major_brand = value; } }

	protected uint minor_version; 
	public uint MinorVersion { get { return this.minor_version; } set { this.minor_version = value; } }

	protected uint[] compatible_brands;  //  to end of the box
	public uint[] CompatibleBrands { get { return this.compatible_brands; } set { this.compatible_brands = value; } }

	public GeneralTypeBox(uint code): base(code)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.major_brand, "major_brand"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.minor_version, "minor_version"); 
		boxSize += stream.ReadUInt32ArrayTillEnd(boxSize, readSize,  out this.compatible_brands, "compatible_brands"); // to end of the box
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.major_brand, "major_brand"); 
		boxSize += stream.WriteUInt32( this.minor_version, "minor_version"); 
		boxSize += stream.WriteUInt32ArrayTillEnd( this.compatible_brands, "compatible_brands"); // to end of the box
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // major_brand
		boxSize += 32; // minor_version
		boxSize += ((ulong)compatible_brands.Length * 32); // compatible_brands
		return boxSize;
	}
}


/*
aligned(8) class MetaDataKeyBox extends	Box(local_key_id) {
 MetaDataKeyDeclarationBox();
 MetaDataDatatypeBox();	  // optional
 MetaDataLocaleBox();	  // optional
 MetaDataSetupBox();	  // optional
 MetaDataExtensionsBox();  // optional
}

*/
public partial class MetaDataKeyBox : Box
{
	public override string DisplayName { get { return "MetaDataKeyBox"; } }
	public MetaDataKeyDeclarationBox _MetaDataKeyDeclarationBox { get { return this.children.OfType<MetaDataKeyDeclarationBox>().FirstOrDefault(); } }
	public MetaDataDatatypeBox _MetaDataDatatypeBox { get { return this.children.OfType<MetaDataDatatypeBox>().FirstOrDefault(); } }
	public MetaDataLocaleBox _MetaDataLocaleBox { get { return this.children.OfType<MetaDataLocaleBox>().FirstOrDefault(); } }
	public MetaDataSetupBox _MetaDataSetupBox { get { return this.children.OfType<MetaDataSetupBox>().FirstOrDefault(); } }
	public MetaDataExtensionsBox _MetaDataExtensionsBox { get { return this.children.OfType<MetaDataExtensionsBox>().FirstOrDefault(); } }

	public MetaDataKeyBox(uint local_key_id): base(local_key_id)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.MetaDataKeyDeclarationBox, "MetaDataKeyDeclarationBox"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.MetaDataDatatypeBox, "MetaDataDatatypeBox"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.MetaDataLocaleBox, "MetaDataLocaleBox"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.MetaDataSetupBox, "MetaDataSetupBox"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.MetaDataExtensionsBox, "MetaDataExtensionsBox"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.MetaDataKeyDeclarationBox, "MetaDataKeyDeclarationBox"); 
		// boxSize += stream.WriteBox( this.MetaDataDatatypeBox, "MetaDataDatatypeBox"); // optional
		// boxSize += stream.WriteBox( this.MetaDataLocaleBox, "MetaDataLocaleBox"); // optional
		// boxSize += stream.WriteBox( this.MetaDataSetupBox, "MetaDataSetupBox"); // optional
		// boxSize += stream.WriteBox( this.MetaDataExtensionsBox, "MetaDataExtensionsBox"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(MetaDataKeyDeclarationBox); // MetaDataKeyDeclarationBox
		// boxSize += IsoStream.CalculateBoxSize(MetaDataDatatypeBox); // MetaDataDatatypeBox
		// boxSize += IsoStream.CalculateBoxSize(MetaDataLocaleBox); // MetaDataLocaleBox
		// boxSize += IsoStream.CalculateBoxSize(MetaDataSetupBox); // MetaDataSetupBox
		// boxSize += IsoStream.CalculateBoxSize(MetaDataExtensionsBox); // MetaDataExtensionsBox
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class MetaDataKeyDeclarationBox extends Box('keyd') {
 unsigned int(32) key_namespace;
 unsigned int(8) key_value[];
}


*/
public partial class MetaDataKeyDeclarationBox : Box
{
	public const string TYPE = "keyd";
	public override string DisplayName { get { return "MetaDataKeyDeclarationBox"; } }

	protected uint key_namespace; 
	public uint KeyNamespace { get { return this.key_namespace; } set { this.key_namespace = value; } }

	protected byte[] key_value; 
	public byte[] KeyValue { get { return this.key_value; } set { this.key_value = value; } }

	public MetaDataKeyDeclarationBox(): base(IsoStream.FromFourCC("keyd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.key_namespace, "key_namespace"); 
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.key_value, "key_value"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.key_namespace, "key_namespace"); 
		boxSize += stream.WriteUInt8ArrayTillEnd( this.key_value, "key_value"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // key_namespace
		boxSize += ((ulong)key_value.Length * 8); // key_value
		return boxSize;
	}
}


/*
aligned(8) class MetaDataLocaleBox extends Box('loca') {
 string locale_string;
}


*/
public partial class MetaDataLocaleBox : Box
{
	public const string TYPE = "loca";
	public override string DisplayName { get { return "MetaDataLocaleBox"; } }

	protected BinaryUTF8String locale_string; 
	public BinaryUTF8String LocaleString { get { return this.locale_string; } set { this.locale_string = value; } }

	public MetaDataLocaleBox(): base(IsoStream.FromFourCC("loca"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.locale_string, "locale_string"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.locale_string, "locale_string"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(locale_string); // locale_string
		return boxSize;
	}
}


/*
aligned(8) class MetaDataSetupBox extends Box('setu') { // 'init' instead?
}


*/
public partial class MetaDataSetupBox : Box
{
	public const string TYPE = "setu";
	public override string DisplayName { get { return "MetaDataSetupBox"; } }

	public MetaDataSetupBox(): base(IsoStream.FromFourCC("setu"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		/*  'init' instead? */
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		/*  'init' instead? */
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		/*  'init' instead? */
		return boxSize;
	}
}


/*
aligned(8) class MetaDataExtensionsBox extends Box('exte') {
 Box extensions[];
}


*/
public partial class MetaDataExtensionsBox : Box
{
	public const string TYPE = "exte";
	public override string DisplayName { get { return "MetaDataExtensionsBox"; } }
	public IEnumerable<Box> Extensions { get { return this.children.OfType<Box>(); } }

	public MetaDataExtensionsBox(): base(IsoStream.FromFourCC("exte"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.extensions, "extensions"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.extensions, "extensions"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(extensions); // extensions
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class MetaDataInlineKeysPresentBox extends Box('keyi') {
unsigned int(8) inlineKeyValueBoxesPresent;
}


*/
public partial class MetaDataInlineKeysPresentBox : Box
{
	public const string TYPE = "keyi";
	public override string DisplayName { get { return "MetaDataInlineKeysPresentBox"; } }

	protected byte inlineKeyValueBoxesPresent; 
	public byte InlineKeyValueBoxesPresent { get { return this.inlineKeyValueBoxesPresent; } set { this.inlineKeyValueBoxesPresent = value; } }

	public MetaDataInlineKeysPresentBox(): base(IsoStream.FromFourCC("keyi"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.inlineKeyValueBoxesPresent, "inlineKeyValueBoxesPresent"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.inlineKeyValueBoxesPresent, "inlineKeyValueBoxesPresent"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // inlineKeyValueBoxesPresent
		return boxSize;
	}
}


/*
aligned(8) class MetaDataAccessUnit {
Box boxes[];
}


*/
public partial class MetaDataAccessUnit : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "MetaDataAccessUnit"; } }

	protected Box[] boxes; 
	public Box[] Boxes { get { return this.boxes; } set { this.boxes = value; } }

	public MetaDataAccessUnit(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBox( this.boxes, "boxes"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		return boxSize;
	}
}


/*
aligned(8) class MetaDataAUBox extends Box(local_key_id) {
}


*/
public partial class MetaDataAUBox : Box
{
	public override string DisplayName { get { return "MetaDataAUBox"; } }

	public MetaDataAUBox(uint local_key_id): base(local_key_id)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
abstract aligned(8) class SampleEntry (unsigned int(32) format) extends Box(format){ 
const unsigned int(8)[6] reservedSampleEntry = 0; 
unsigned int(16) data_reference_index; 
}

*/
public abstract partial class SampleEntry : Box
{
	public override string DisplayName { get { return "SampleEntry"; } }

	protected byte[] reservedSampleEntry = []; 
	public byte[] ReservedSampleEntry { get { return this.reservedSampleEntry; } set { this.reservedSampleEntry = value; } }

	protected ushort data_reference_index; 
	public ushort DataReferenceIndex { get { return this.data_reference_index; } set { this.data_reference_index = value; } }

	public SampleEntry(uint format): base(format)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 6,  out this.reservedSampleEntry, "reservedSampleEntry"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.data_reference_index, "data_reference_index"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8Array(6,  this.reservedSampleEntry, "reservedSampleEntry"); 
		boxSize += stream.WriteUInt16( this.data_reference_index, "data_reference_index"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 6 * 8; // reservedSampleEntry
		boxSize += 16; // data_reference_index
		return boxSize;
	}
}


/*
aligned(8) class SegmentIndexBox extends FullBox('sidx', version, 0) { 
  unsigned int(32) reference_ID; 
  unsigned int(32) timescale; 
  if (version==0) { 
   unsigned int(32) earliest_presentation_time; 
   unsigned int(32) first_offset; 
  }
  else { 
   unsigned int(64) earliest_presentation_time; 
   unsigned int(64) first_offset; 
  }
 unsigned int(16) reserved = 0; 
 unsigned int(16) reference_count; 
 for(i=1; i <= reference_count; i++) 
 {  
  bit(1)   reference_type; 
  unsigned int(31) referenced_size; 
  unsigned int(32) subsegment_duration; 
  bit(1)    starts_with_SAP; 
  unsigned int(3) SAP_type; 
  unsigned int(28) SAP_delta_time;
 } 
} 
*/
public partial class SegmentIndexBox : FullBox
{
	public const string TYPE = "sidx";
	public override string DisplayName { get { return "SegmentIndexBox"; } }

	protected uint reference_ID; 
	public uint ReferenceID { get { return this.reference_ID; } set { this.reference_ID = value; } }

	protected uint timescale; 
	public uint Timescale { get { return this.timescale; } set { this.timescale = value; } }

	protected ulong earliest_presentation_time; 
	public ulong EarliestPresentationTime { get { return this.earliest_presentation_time; } set { this.earliest_presentation_time = value; } }

	protected ulong first_offset; 
	public ulong FirstOffset { get { return this.first_offset; } set { this.first_offset = value; } }

	protected ushort reserved = 0; 
	public ushort Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected ushort reference_count; 
	public ushort ReferenceCount { get { return this.reference_count; } set { this.reference_count = value; } }

	protected bool[] reference_type; 
	public bool[] ReferenceType { get { return this.reference_type; } set { this.reference_type = value; } }

	protected uint[] referenced_size; 
	public uint[] ReferencedSize { get { return this.referenced_size; } set { this.referenced_size = value; } }

	protected uint[] subsegment_duration; 
	public uint[] SubsegmentDuration { get { return this.subsegment_duration; } set { this.subsegment_duration = value; } }

	protected bool[] starts_with_SAP; 
	public bool[] StartsWithSAP { get { return this.starts_with_SAP; } set { this.starts_with_SAP = value; } }

	protected byte[] SAP_type; 
	public byte[] SAPType { get { return this.SAP_type; } set { this.SAP_type = value; } }

	protected uint[] SAP_delta_time; 
	public uint[] SAPDeltaTime { get { return this.SAP_delta_time; } set { this.SAP_delta_time = value; } }

	public SegmentIndexBox(byte version = 0): base(IsoStream.FromFourCC("sidx"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.reference_ID, "reference_ID"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.timescale, "timescale"); 

		if (version==0)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.earliest_presentation_time, "earliest_presentation_time"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.first_offset, "first_offset"); 
		}

		else 
		{
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.earliest_presentation_time, "earliest_presentation_time"); 
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.first_offset, "first_offset"); 
		}
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.reference_count, "reference_count"); 

		this.reference_type = new bool[IsoStream.GetInt( reference_count)];
		this.referenced_size = new uint[IsoStream.GetInt( reference_count)];
		this.subsegment_duration = new uint[IsoStream.GetInt( reference_count)];
		this.starts_with_SAP = new bool[IsoStream.GetInt( reference_count)];
		this.SAP_type = new byte[IsoStream.GetInt( reference_count)];
		this.SAP_delta_time = new uint[IsoStream.GetInt( reference_count)];
		for (int i=0; i < reference_count; i++)
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.reference_type[i], "reference_type"); 
			boxSize += stream.ReadBits(boxSize, readSize, 31,  out this.referenced_size[i], "referenced_size"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.subsegment_duration[i], "subsegment_duration"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.starts_with_SAP[i], "starts_with_SAP"); 
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.SAP_type[i], "SAP_type"); 
			boxSize += stream.ReadBits(boxSize, readSize, 28,  out this.SAP_delta_time[i], "SAP_delta_time"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.reference_ID, "reference_ID"); 
		boxSize += stream.WriteUInt32( this.timescale, "timescale"); 

		if (version==0)
		{
			boxSize += stream.WriteUInt32( this.earliest_presentation_time, "earliest_presentation_time"); 
			boxSize += stream.WriteUInt32( this.first_offset, "first_offset"); 
		}

		else 
		{
			boxSize += stream.WriteUInt64( this.earliest_presentation_time, "earliest_presentation_time"); 
			boxSize += stream.WriteUInt64( this.first_offset, "first_offset"); 
		}
		boxSize += stream.WriteUInt16( this.reserved, "reserved"); 
		boxSize += stream.WriteUInt16( this.reference_count, "reference_count"); 

		for (int i=0; i < reference_count; i++)
		{
			boxSize += stream.WriteBit( this.reference_type[i], "reference_type"); 
			boxSize += stream.WriteBits(31,  this.referenced_size[i], "referenced_size"); 
			boxSize += stream.WriteUInt32( this.subsegment_duration[i], "subsegment_duration"); 
			boxSize += stream.WriteBit( this.starts_with_SAP[i], "starts_with_SAP"); 
			boxSize += stream.WriteBits(3,  this.SAP_type[i], "SAP_type"); 
			boxSize += stream.WriteBits(28,  this.SAP_delta_time[i], "SAP_delta_time"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // reference_ID
		boxSize += 32; // timescale

		if (version==0)
		{
			boxSize += 32; // earliest_presentation_time
			boxSize += 32; // first_offset
		}

		else 
		{
			boxSize += 64; // earliest_presentation_time
			boxSize += 64; // first_offset
		}
		boxSize += 16; // reserved
		boxSize += 16; // reference_count

		for (int i=0; i < reference_count; i++)
		{
			boxSize += 1; // reference_type
			boxSize += 31; // referenced_size
			boxSize += 32; // subsegment_duration
			boxSize += 1; // starts_with_SAP
			boxSize += 3; // SAP_type
			boxSize += 28; // SAP_delta_time
		}
		return boxSize;
	}
}


/*
aligned(8) class MovieBox extends Box('moov'){ 
} 
*/
public partial class MovieBox : Box
{
	public const string TYPE = "moov";
	public override string DisplayName { get { return "MovieBox"; } }

	public MovieBox(): base(IsoStream.FromFourCC("moov"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class MovieFragmentBox extends Box('moof'){ 
} 
*/
public partial class MovieFragmentBox : Box
{
	public const string TYPE = "moof";
	public override string DisplayName { get { return "MovieFragmentBox"; } }

	public MovieFragmentBox(): base(IsoStream.FromFourCC("moof"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class DataEntryBaseBox(entry_type, bit(24) flags) 
extends FullBox(entry_type, version = 0, flags) { 

} 
*/
public partial class DataEntryBaseBox : FullBox
{
	public override string DisplayName { get { return "DataEntryBaseBox"; } }

	public DataEntryBaseBox(uint entry_type, uint flags): base(entry_type, 0, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
class ReceivedSsrcBox extends Box('rssr') {
	unsigned int(32)	SSRC
}
*/
public partial class ReceivedSsrcBox : Box
{
	public const string TYPE = "rssr";
	public override string DisplayName { get { return "ReceivedSsrcBox"; } }

	protected uint SSRC; 
	public uint _SSRC { get { return this.SSRC; } set { this.SSRC = value; } }

	public ReceivedSsrcBox(): base(IsoStream.FromFourCC("rssr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.SSRC, "SSRC"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.SSRC, "SSRC"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // SSRC
		return boxSize;
	}
}


/*
class TimestampSynchrony() extends Box('tssy') {
	unsigned int(6) reserved;
	unsigned int(2) timestamp_sync;
}
*/
public partial class TimestampSynchrony : Box
{
	public const string TYPE = "tssy";
	public override string DisplayName { get { return "TimestampSynchrony"; } }

	protected byte reserved; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte timestamp_sync; 
	public byte TimestampSync { get { return this.timestamp_sync; } set { this.timestamp_sync = value; } }

	public TimestampSynchrony(): base(IsoStream.FromFourCC("tssy"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.timestamp_sync, "timestamp_sync"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(6,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(2,  this.timestamp_sync, "timestamp_sync"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 6; // reserved
		boxSize += 2; // timestamp_sync
		return boxSize;
	}
}


/*
class TimeScaleEntry() extends Box('tims') {
	uint(32)	timescale;
}


*/
public partial class TimeScaleEntry : Box
{
	public const string TYPE = "tims";
	public override string DisplayName { get { return "TimeScaleEntry"; } }

	protected uint timescale; 
	public uint Timescale { get { return this.timescale; } set { this.timescale = value; } }

	public TimeScaleEntry(): base(IsoStream.FromFourCC("tims"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.timescale, "timescale"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.timescale, "timescale"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // timescale
		return boxSize;
	}
}


/*
class TimeOffset() extends Box('tsro') {
	int(32)		offset;
}


*/
public partial class TimeOffset : Box
{
	public const string TYPE = "tsro";
	public override string DisplayName { get { return "TimeOffset"; } }

	protected int offset; 
	public int Offset { get { return this.offset; } set { this.offset = value; } }

	public TimeOffset(): base(IsoStream.FromFourCC("tsro"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.offset, "offset"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt32( this.offset, "offset"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // offset
		return boxSize;
	}
}


/*
class SequenceOffset() extends Box('snro') {
	int(32)		offset;
}
*/
public partial class SequenceOffset : Box
{
	public const string TYPE = "snro";
	public override string DisplayName { get { return "SequenceOffset"; } }

	protected int offset; 
	public int Offset { get { return this.offset; } set { this.offset = value; } }

	public SequenceOffset(): base(IsoStream.FromFourCC("snro"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.offset, "offset"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt32( this.offset, "offset"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // offset
		return boxSize;
	}
}


/*
aligned(8) class HintBytesSent extends Box('trpy') {
	uint(64)	bytessent; }	// total bytes sent, including 12-byte RTP headers

*/
public partial class HintBytesSent : Box
{
	public const string TYPE = "trpy";
	public override string DisplayName { get { return "HintBytesSent"; } }

	protected ulong bytessent; 
	public ulong Bytessent { get { return this.bytessent; } set { this.bytessent = value; } }

	public HintBytesSent(): base(IsoStream.FromFourCC("trpy"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt64(boxSize, readSize,  out this.bytessent, "bytessent"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt64( this.bytessent, "bytessent"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 64; // bytessent
		return boxSize;
	}
}


/*
aligned(8) class hintPacketsSent extends Box('nump') {
	uint(64)	packetssent; }	// total packets sent

*/
public partial class hintPacketsSent : Box
{
	public const string TYPE = "nump";
	public override string DisplayName { get { return "hintPacketsSent"; } }

	protected ulong packetssent; 
	public ulong Packetssent { get { return this.packetssent; } set { this.packetssent = value; } }

	public hintPacketsSent(): base(IsoStream.FromFourCC("nump"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt64(boxSize, readSize,  out this.packetssent, "packetssent"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt64( this.packetssent, "packetssent"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 64; // packetssent
		return boxSize;
	}
}


/*
aligned(8) class HintBytesSent extends Box('tpyl') {
	uint(64)	bytessent; }	// total bytes sent, not including RTP headers
*/
public partial class HintBytesSenttpylDup : Box
{
	public const string TYPE = "tpyl";
	public override string DisplayName { get { return "HintBytesSenttpylDup"; } }

	protected ulong bytessent; 
	public ulong Bytessent { get { return this.bytessent; } set { this.bytessent = value; } }

	public HintBytesSenttpylDup(): base(IsoStream.FromFourCC("tpyl"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt64(boxSize, readSize,  out this.bytessent, "bytessent"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt64( this.bytessent, "bytessent"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 64; // bytessent
		return boxSize;
	}
}


/*
aligned(8) class HintBytesSent extends Box('totl') {
	uint(32)	bytessent; }	// total bytes sent, including 12-byte RTP headers

*/
public partial class HintBytesSenttotlDup : Box
{
	public const string TYPE = "totl";
	public override string DisplayName { get { return "HintBytesSenttotlDup"; } }

	protected uint bytessent; 
	public uint Bytessent { get { return this.bytessent; } set { this.bytessent = value; } }

	public HintBytesSenttotlDup(): base(IsoStream.FromFourCC("totl"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.bytessent, "bytessent"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.bytessent, "bytessent"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // bytessent
		return boxSize;
	}
}


/*
aligned(8) class hintPacketsSent extends Box('npck') {
	uint(32)	packetssent; }	// total packets sent

*/
public partial class hintPacketsSentnpckDup : Box
{
	public const string TYPE = "npck";
	public override string DisplayName { get { return "hintPacketsSentnpckDup"; } }

	protected uint packetssent; 
	public uint Packetssent { get { return this.packetssent; } set { this.packetssent = value; } }

	public hintPacketsSentnpckDup(): base(IsoStream.FromFourCC("npck"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.packetssent, "packetssent"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.packetssent, "packetssent"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // packetssent
		return boxSize;
	}
}


/*
aligned(8) class HintBytesSent extends Box('tpay') {
	uint(32)	bytessent; }	// total bytes sent, not including RTP headers
*/
public partial class HintBytesSenttpayDup : Box
{
	public const string TYPE = "tpay";
	public override string DisplayName { get { return "HintBytesSenttpayDup"; } }

	protected uint bytessent; 
	public uint Bytessent { get { return this.bytessent; } set { this.bytessent = value; } }

	public HintBytesSenttpayDup(): base(IsoStream.FromFourCC("tpay"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.bytessent, "bytessent"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.bytessent, "bytessent"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // bytessent
		return boxSize;
	}
}


/*
aligned(8) class HintMaxRate extends Box('maxr') {	// maximum data rate
	uint(32)	period;			// in milliseconds
	uint(32)	bytes; }			// max bytes sent in any period 'period' long including RTP headers
*/
public partial class HintMaxRate : Box
{
	public const string TYPE = "maxr";
	public override string DisplayName { get { return "HintMaxRate"; } }

	protected uint period;  //  in milliseconds
	public uint Period { get { return this.period; } set { this.period = value; } }

	protected uint bytes; 
	public uint Bytes { get { return this.bytes; } set { this.bytes = value; } }

	public HintMaxRate(): base(IsoStream.FromFourCC("maxr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		/*  maximum data rate */
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.period, "period"); // in milliseconds
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.bytes, "bytes"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		/*  maximum data rate */
		boxSize += stream.WriteUInt32( this.period, "period"); // in milliseconds
		boxSize += stream.WriteUInt32( this.bytes, "bytes"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		/*  maximum data rate */
		boxSize += 32; // period
		boxSize += 32; // bytes
		return boxSize;
	}
}


/*
aligned(8) class hintmediaBytesSent extends Box('dmed') {
	uint(64)	bytessent; }	// total bytes sent from media tracks

*/
public partial class hintmediaBytesSent : Box
{
	public const string TYPE = "dmed";
	public override string DisplayName { get { return "hintmediaBytesSent"; } }

	protected ulong bytessent; 
	public ulong Bytessent { get { return this.bytessent; } set { this.bytessent = value; } }

	public hintmediaBytesSent(): base(IsoStream.FromFourCC("dmed"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt64(boxSize, readSize,  out this.bytessent, "bytessent"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt64( this.bytessent, "bytessent"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 64; // bytessent
		return boxSize;
	}
}


/*
aligned(8) class hintimmediateBytesSent extends Box('dimm') {
	uint(64)	bytessent; }	// total bytes sent immediate mode

*/
public partial class hintimmediateBytesSent : Box
{
	public const string TYPE = "dimm";
	public override string DisplayName { get { return "hintimmediateBytesSent"; } }

	protected ulong bytessent; 
	public ulong Bytessent { get { return this.bytessent; } set { this.bytessent = value; } }

	public hintimmediateBytesSent(): base(IsoStream.FromFourCC("dimm"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt64(boxSize, readSize,  out this.bytessent, "bytessent"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt64( this.bytessent, "bytessent"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 64; // bytessent
		return boxSize;
	}
}


/*
aligned(8) class hintrepeatedBytesSent extends Box('drep') {
	uint(64)	bytessent; }	// total bytes in repeated packets
*/
public partial class hintrepeatedBytesSent : Box
{
	public const string TYPE = "drep";
	public override string DisplayName { get { return "hintrepeatedBytesSent"; } }

	protected ulong bytessent; 
	public ulong Bytessent { get { return this.bytessent; } set { this.bytessent = value; } }

	public hintrepeatedBytesSent(): base(IsoStream.FromFourCC("drep"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt64(boxSize, readSize,  out this.bytessent, "bytessent"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt64( this.bytessent, "bytessent"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 64; // bytessent
		return boxSize;
	}
}


/*
aligned(8) class HintMinRelativeTime extends Box('tmin') {
	int(32)		time; }		// smallest relative transmission time, milliseconds

*/
public partial class HintMinRelativeTime : Box
{
	public const string TYPE = "tmin";
	public override string DisplayName { get { return "HintMinRelativeTime"; } }

	protected int time; 
	public int Time { get { return this.time; } set { this.time = value; } }

	public HintMinRelativeTime(): base(IsoStream.FromFourCC("tmin"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.time, "time"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt32( this.time, "time"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // time
		return boxSize;
	}
}


/*
aligned(8) class HintMaxRelativeTime extends Box('tmax') {
	int(32)		time; }		// largest relative transmission time, milliseconds
*/
public partial class HintMaxRelativeTime : Box
{
	public const string TYPE = "tmax";
	public override string DisplayName { get { return "HintMaxRelativeTime"; } }

	protected int time; 
	public int Time { get { return this.time; } set { this.time = value; } }

	public HintMaxRelativeTime(): base(IsoStream.FromFourCC("tmax"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.time, "time"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt32( this.time, "time"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // time
		return boxSize;
	}
}


/*
aligned(8) class HintLargestPacket extends Box('pmax') {
	uint(32)	bytes; }			// largest packet sent, including RTP header

*/
public partial class HintLargestPacket : Box
{
	public const string TYPE = "pmax";
	public override string DisplayName { get { return "HintLargestPacket"; } }

	protected uint bytes; 
	public uint Bytes { get { return this.bytes; } set { this.bytes = value; } }

	public HintLargestPacket(): base(IsoStream.FromFourCC("pmax"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.bytes, "bytes"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.bytes, "bytes"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // bytes
		return boxSize;
	}
}


/*
aligned(8) class HintLongestPacket extends Box('dmax') {
	uint(32)	time; }			// longest packet duration, milliseconds
*/
public partial class HintLongestPacket : Box
{
	public const string TYPE = "dmax";
	public override string DisplayName { get { return "HintLongestPacket"; } }

	protected uint time; 
	public uint Time { get { return this.time; } set { this.time = value; } }

	public HintLongestPacket(): base(IsoStream.FromFourCC("dmax"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.time, "time"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.time, "time"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // time
		return boxSize;
	}
}


/*
aligned(8) class HintPayloadID extends Box('payt') {
	uint(32)	payloadID;		// payload ID used in RTP packets
	uint(8)		count;
	char		rtpmap_string[count]; }
*/
public partial class HintPayloadID : Box
{
	public const string TYPE = "payt";
	public override string DisplayName { get { return "HintPayloadID"; } }

	protected uint payloadID;  //  payload ID used in RTP packets
	public uint PayloadID { get { return this.payloadID; } set { this.payloadID = value; } }

	protected byte count; 
	public byte Count { get { return this.count; } set { this.count = value; } }

	protected byte[] rtpmap_string; 
	public byte[] RtpmapString { get { return this.rtpmap_string; } set { this.rtpmap_string = value; } }

	public HintPayloadID(): base(IsoStream.FromFourCC("payt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.payloadID, "payloadID"); // payload ID used in RTP packets
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.count, "count"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(count),  out this.rtpmap_string, "rtpmap_string"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.payloadID, "payloadID"); // payload ID used in RTP packets
		boxSize += stream.WriteUInt8( this.count, "count"); 
		boxSize += stream.WriteUInt8Array((uint)(count),  this.rtpmap_string, "rtpmap_string"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // payloadID
		boxSize += 8; // count
		boxSize += ((ulong)(count) * 8); // rtpmap_string
		return boxSize;
	}
}


/*
aligned(8) class StereoVideoBox extends FullBox('stvi', version = 0, 0)
{
	template unsigned int(30) reserved = 0;
	unsigned int(2)	single_view_allowed;
	unsigned int(32)	stereo_scheme;
	unsigned int(32)	length;
	unsigned int(8)[length]	stereo_indication_type;
	Box[] any_box; // optional
}
*/
public partial class StereoVideoBox : FullBox
{
	public const string TYPE = "stvi";
	public override string DisplayName { get { return "StereoVideoBox"; } }

	protected uint reserved = 0; 
	public uint Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte single_view_allowed; 
	public byte SingleViewAllowed { get { return this.single_view_allowed; } set { this.single_view_allowed = value; } }

	protected uint stereo_scheme; 
	public uint StereoScheme { get { return this.stereo_scheme; } set { this.stereo_scheme = value; } }

	protected uint length; 
	public uint Length { get { return this.length; } set { this.length = value; } }

	protected byte[] stereo_indication_type; 
	public byte[] StereoIndicationType { get { return this.stereo_indication_type; } set { this.stereo_indication_type = value; } }
	public IEnumerable<Box> AnyBox { get { return this.children.OfType<Box>(); } }

	public StereoVideoBox(): base(IsoStream.FromFourCC("stvi"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 30,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.single_view_allowed, "single_view_allowed"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.stereo_scheme, "stereo_scheme"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.length, "length"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(length),  out this.stereo_indication_type, "stereo_indication_type"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.any_box, "any_box"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(30,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(2,  this.single_view_allowed, "single_view_allowed"); 
		boxSize += stream.WriteUInt32( this.stereo_scheme, "stereo_scheme"); 
		boxSize += stream.WriteUInt32( this.length, "length"); 
		boxSize += stream.WriteUInt8Array((uint)(length),  this.stereo_indication_type, "stereo_indication_type"); 
		// boxSize += stream.WriteBox( this.any_box, "any_box"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 30; // reserved
		boxSize += 2; // single_view_allowed
		boxSize += 32; // stereo_scheme
		boxSize += 32; // length
		boxSize += ((ulong)(length) * 8); // stereo_indication_type
		// boxSize += IsoStream.CalculateBoxSize(any_box); // any_box
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ExtendedLanguageBox extends FullBox('elng', 0, 0) {
	utf8string	extended_language;
}
*/
public partial class ExtendedLanguageBox : FullBox
{
	public const string TYPE = "elng";
	public override string DisplayName { get { return "ExtendedLanguageBox"; } }

	protected BinaryUTF8String extended_language; 
	public BinaryUTF8String ExtendedLanguage { get { return this.extended_language; } set { this.extended_language = value; } }

	public ExtendedLanguageBox(): base(IsoStream.FromFourCC("elng"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.extended_language, "extended_language"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.extended_language, "extended_language"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(extended_language); // extended_language
		return boxSize;
	}
}


/*
class BitRateBox extends Box('btrt'){
	unsigned int(32) bufferSizeDB;
	unsigned int(32) maxBitrate;
	unsigned int(32) avgBitrate;
}
*/
public partial class BitRateBox : Box
{
	public const string TYPE = "btrt";
	public override string DisplayName { get { return "BitRateBox"; } }

	protected uint bufferSizeDB; 
	public uint BufferSizeDB { get { return this.bufferSizeDB; } set { this.bufferSizeDB = value; } }

	protected uint maxBitrate; 
	public uint MaxBitrate { get { return this.maxBitrate; } set { this.maxBitrate = value; } }

	protected uint avgBitrate; 
	public uint AvgBitrate { get { return this.avgBitrate; } set { this.avgBitrate = value; } }

	public BitRateBox(): base(IsoStream.FromFourCC("btrt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.bufferSizeDB, "bufferSizeDB"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.maxBitrate, "maxBitrate"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.avgBitrate, "avgBitrate"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.bufferSizeDB, "bufferSizeDB"); 
		boxSize += stream.WriteUInt32( this.maxBitrate, "maxBitrate"); 
		boxSize += stream.WriteUInt32( this.avgBitrate, "avgBitrate"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // bufferSizeDB
		boxSize += 32; // maxBitrate
		boxSize += 32; // avgBitrate
		return boxSize;
	}
}


/*
class PixelAspectRatioBox extends Box('pasp'){
	unsigned int(32) hSpacing;
	unsigned int(32) vSpacing;
}
*/
public partial class PixelAspectRatioBox : Box
{
	public const string TYPE = "pasp";
	public override string DisplayName { get { return "PixelAspectRatioBox"; } }

	protected uint hSpacing; 
	public uint HSpacing { get { return this.hSpacing; } set { this.hSpacing = value; } }

	protected uint vSpacing; 
	public uint VSpacing { get { return this.vSpacing; } set { this.vSpacing = value; } }

	public PixelAspectRatioBox(): base(IsoStream.FromFourCC("pasp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.hSpacing, "hSpacing"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.vSpacing, "vSpacing"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.hSpacing, "hSpacing"); 
		boxSize += stream.WriteUInt32( this.vSpacing, "vSpacing"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // hSpacing
		boxSize += 32; // vSpacing
		return boxSize;
	}
}


/*
class CleanApertureBox extends Box('clap'){
	unsigned int(32) cleanApertureWidthN;
	unsigned int(32) cleanApertureWidthD;

	unsigned int(32) cleanApertureHeightN;
	unsigned int(32) cleanApertureHeightD;


	unsigned int(32) horizOffN;
	unsigned int(32) horizOffD;


	unsigned int(32) vertOffN;
	unsigned int(32) vertOffD;

}
*/
public partial class CleanApertureBox : Box
{
	public const string TYPE = "clap";
	public override string DisplayName { get { return "CleanApertureBox"; } }

	protected uint cleanApertureWidthN; 
	public uint CleanApertureWidthN { get { return this.cleanApertureWidthN; } set { this.cleanApertureWidthN = value; } }

	protected uint cleanApertureWidthD; 
	public uint CleanApertureWidthD { get { return this.cleanApertureWidthD; } set { this.cleanApertureWidthD = value; } }

	protected uint cleanApertureHeightN; 
	public uint CleanApertureHeightN { get { return this.cleanApertureHeightN; } set { this.cleanApertureHeightN = value; } }

	protected uint cleanApertureHeightD; 
	public uint CleanApertureHeightD { get { return this.cleanApertureHeightD; } set { this.cleanApertureHeightD = value; } }

	protected uint horizOffN; 
	public uint HorizOffN { get { return this.horizOffN; } set { this.horizOffN = value; } }

	protected uint horizOffD; 
	public uint HorizOffD { get { return this.horizOffD; } set { this.horizOffD = value; } }

	protected uint vertOffN; 
	public uint VertOffN { get { return this.vertOffN; } set { this.vertOffN = value; } }

	protected uint vertOffD; 
	public uint VertOffD { get { return this.vertOffD; } set { this.vertOffD = value; } }

	public CleanApertureBox(): base(IsoStream.FromFourCC("clap"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.cleanApertureWidthN, "cleanApertureWidthN"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.cleanApertureWidthD, "cleanApertureWidthD"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.cleanApertureHeightN, "cleanApertureHeightN"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.cleanApertureHeightD, "cleanApertureHeightD"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.horizOffN, "horizOffN"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.horizOffD, "horizOffD"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.vertOffN, "vertOffN"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.vertOffD, "vertOffD"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.cleanApertureWidthN, "cleanApertureWidthN"); 
		boxSize += stream.WriteUInt32( this.cleanApertureWidthD, "cleanApertureWidthD"); 
		boxSize += stream.WriteUInt32( this.cleanApertureHeightN, "cleanApertureHeightN"); 
		boxSize += stream.WriteUInt32( this.cleanApertureHeightD, "cleanApertureHeightD"); 
		boxSize += stream.WriteUInt32( this.horizOffN, "horizOffN"); 
		boxSize += stream.WriteUInt32( this.horizOffD, "horizOffD"); 
		boxSize += stream.WriteUInt32( this.vertOffN, "vertOffN"); 
		boxSize += stream.WriteUInt32( this.vertOffD, "vertOffD"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // cleanApertureWidthN
		boxSize += 32; // cleanApertureWidthD
		boxSize += 32; // cleanApertureHeightN
		boxSize += 32; // cleanApertureHeightD
		boxSize += 32; // horizOffN
		boxSize += 32; // horizOffD
		boxSize += 32; // vertOffN
		boxSize += 32; // vertOffD
		return boxSize;
	}
}


/*
class ContentColourVolumeBox extends Box('cclv'){
	unsigned int(1) reserved1 = 0;	// ccv_cancel_flag
	unsigned int(1) reserved2 = 0;	// ccv_persistence_flag
	unsigned int(1) ccv_primaries_present_flag;
	unsigned int(1) ccv_min_luminance_value_present_flag;
	unsigned int(1) ccv_max_luminance_value_present_flag;
	unsigned int(1) ccv_avg_luminance_value_present_flag;
	unsigned int(2) ccv_reserved_zero_2bits = 0;
	if( ccv_primaries_present_flag ) {
		for( c = 0; c < 3; c++ ) {
			signed int(32) ccv_primaries_x[ c ];
			signed int(32) ccv_primaries_y[ c ];
		}
	}
	if( ccv_min_luminance_value_present_flag )
		unsigned int(32) ccv_min_luminance_value;
	if( ccv_max_luminance_value_present_flag )
 		unsigned int(32) ccv_max_luminance_value;
	if( ccv_avg_luminance_value_present_flag )
 		unsigned int(32) ccv_avg_luminance_value;
}
*/
public partial class ContentColourVolumeBox : Box
{
	public const string TYPE = "cclv";
	public override string DisplayName { get { return "ContentColourVolumeBox"; } }

	protected bool reserved1 = false;  //  ccv_cancel_flag
	public bool Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected bool reserved2 = false;  //  ccv_persistence_flag
	public bool Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

	protected bool ccv_primaries_present_flag; 
	public bool CcvPrimariesPresentFlag { get { return this.ccv_primaries_present_flag; } set { this.ccv_primaries_present_flag = value; } }

	protected bool ccv_min_luminance_value_present_flag; 
	public bool CcvMinLuminanceValuePresentFlag { get { return this.ccv_min_luminance_value_present_flag; } set { this.ccv_min_luminance_value_present_flag = value; } }

	protected bool ccv_max_luminance_value_present_flag; 
	public bool CcvMaxLuminanceValuePresentFlag { get { return this.ccv_max_luminance_value_present_flag; } set { this.ccv_max_luminance_value_present_flag = value; } }

	protected bool ccv_avg_luminance_value_present_flag; 
	public bool CcvAvgLuminanceValuePresentFlag { get { return this.ccv_avg_luminance_value_present_flag; } set { this.ccv_avg_luminance_value_present_flag = value; } }

	protected byte ccv_reserved_zero_2bits = 0; 
	public byte CcvReservedZero2bits { get { return this.ccv_reserved_zero_2bits; } set { this.ccv_reserved_zero_2bits = value; } }

	protected int[] ccv_primaries_x; 
	public int[] CcvPrimariesx { get { return this.ccv_primaries_x; } set { this.ccv_primaries_x = value; } }

	protected int[] ccv_primaries_y; 
	public int[] CcvPrimariesy { get { return this.ccv_primaries_y; } set { this.ccv_primaries_y = value; } }

	protected uint ccv_min_luminance_value; 
	public uint CcvMinLuminanceValue { get { return this.ccv_min_luminance_value; } set { this.ccv_min_luminance_value = value; } }

	protected uint ccv_max_luminance_value; 
	public uint CcvMaxLuminanceValue { get { return this.ccv_max_luminance_value; } set { this.ccv_max_luminance_value = value; } }

	protected uint ccv_avg_luminance_value; 
	public uint CcvAvgLuminanceValue { get { return this.ccv_avg_luminance_value; } set { this.ccv_avg_luminance_value = value; } }

	public ContentColourVolumeBox(): base(IsoStream.FromFourCC("cclv"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved1, "reserved1"); // ccv_cancel_flag
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved2, "reserved2"); // ccv_persistence_flag
		boxSize += stream.ReadBit(boxSize, readSize,  out this.ccv_primaries_present_flag, "ccv_primaries_present_flag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.ccv_min_luminance_value_present_flag, "ccv_min_luminance_value_present_flag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.ccv_max_luminance_value_present_flag, "ccv_max_luminance_value_present_flag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.ccv_avg_luminance_value_present_flag, "ccv_avg_luminance_value_present_flag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.ccv_reserved_zero_2bits, "ccv_reserved_zero_2bits"); 

		if ( ccv_primaries_present_flag )
		{

			this.ccv_primaries_x = new int[IsoStream.GetInt( 3)];
			this.ccv_primaries_y = new int[IsoStream.GetInt( 3)];
			for (int  c = 0; c < 3; c++ )
			{
				boxSize += stream.ReadInt32(boxSize, readSize,  out this.ccv_primaries_x[ c ], "ccv_primaries_x"); 
				boxSize += stream.ReadInt32(boxSize, readSize,  out this.ccv_primaries_y[ c ], "ccv_primaries_y"); 
			}
		}

		if ( ccv_min_luminance_value_present_flag )
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.ccv_min_luminance_value, "ccv_min_luminance_value"); 
		}

		if ( ccv_max_luminance_value_present_flag )
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.ccv_max_luminance_value, "ccv_max_luminance_value"); 
		}

		if ( ccv_avg_luminance_value_present_flag )
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.ccv_avg_luminance_value, "ccv_avg_luminance_value"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.reserved1, "reserved1"); // ccv_cancel_flag
		boxSize += stream.WriteBit( this.reserved2, "reserved2"); // ccv_persistence_flag
		boxSize += stream.WriteBit( this.ccv_primaries_present_flag, "ccv_primaries_present_flag"); 
		boxSize += stream.WriteBit( this.ccv_min_luminance_value_present_flag, "ccv_min_luminance_value_present_flag"); 
		boxSize += stream.WriteBit( this.ccv_max_luminance_value_present_flag, "ccv_max_luminance_value_present_flag"); 
		boxSize += stream.WriteBit( this.ccv_avg_luminance_value_present_flag, "ccv_avg_luminance_value_present_flag"); 
		boxSize += stream.WriteBits(2,  this.ccv_reserved_zero_2bits, "ccv_reserved_zero_2bits"); 

		if ( ccv_primaries_present_flag )
		{

			for (int  c = 0; c < 3; c++ )
			{
				boxSize += stream.WriteInt32( this.ccv_primaries_x[ c ], "ccv_primaries_x"); 
				boxSize += stream.WriteInt32( this.ccv_primaries_y[ c ], "ccv_primaries_y"); 
			}
		}

		if ( ccv_min_luminance_value_present_flag )
		{
			boxSize += stream.WriteUInt32( this.ccv_min_luminance_value, "ccv_min_luminance_value"); 
		}

		if ( ccv_max_luminance_value_present_flag )
		{
			boxSize += stream.WriteUInt32( this.ccv_max_luminance_value, "ccv_max_luminance_value"); 
		}

		if ( ccv_avg_luminance_value_present_flag )
		{
			boxSize += stream.WriteUInt32( this.ccv_avg_luminance_value, "ccv_avg_luminance_value"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // reserved1
		boxSize += 1; // reserved2
		boxSize += 1; // ccv_primaries_present_flag
		boxSize += 1; // ccv_min_luminance_value_present_flag
		boxSize += 1; // ccv_max_luminance_value_present_flag
		boxSize += 1; // ccv_avg_luminance_value_present_flag
		boxSize += 2; // ccv_reserved_zero_2bits

		if ( ccv_primaries_present_flag )
		{

			for (int  c = 0; c < 3; c++ )
			{
				boxSize += 32; // ccv_primaries_x
				boxSize += 32; // ccv_primaries_y
			}
		}

		if ( ccv_min_luminance_value_present_flag )
		{
			boxSize += 32; // ccv_min_luminance_value
		}

		if ( ccv_max_luminance_value_present_flag )
		{
			boxSize += 32; // ccv_max_luminance_value
		}

		if ( ccv_avg_luminance_value_present_flag )
		{
			boxSize += 32; // ccv_avg_luminance_value
		}
		return boxSize;
	}
}


/*
class ColourInformationBox extends Box('colr'){
	unsigned int(32) colour_type;
	if (colour_type == 'nclx' || colour_type == 'nclc')	/* on-screen colours *//*
	{
		unsigned int(16) colour_primaries;
		unsigned int(16) transfer_characteristics;
		unsigned int(16) matrix_coefficients;
 		if(colour_type == 'nclx') {
 			unsigned int(1)  full_range_flag;
		unsigned int(7)  reserved = 0;
		}
	}
	else if (colour_type == 'rICC')
	{
		ICC_profile;	// restricted ICC profile
	}
	else if (colour_type == 'prof')
	{
		ICC_profile;	// unrestricted ICC profile
	}
}
*/
public partial class ColourInformationBox : Box
{
	public const string TYPE = "colr";
	public override string DisplayName { get { return "ColourInformationBox"; } }

	protected uint colour_type; 
	public uint ColourType { get { return this.colour_type; } set { this.colour_type = value; } }

	protected ushort colour_primaries; 
	public ushort ColourPrimaries { get { return this.colour_primaries; } set { this.colour_primaries = value; } }

	protected ushort transfer_characteristics; 
	public ushort TransferCharacteristics { get { return this.transfer_characteristics; } set { this.transfer_characteristics = value; } }

	protected ushort matrix_coefficients; 
	public ushort MatrixCoefficients { get { return this.matrix_coefficients; } set { this.matrix_coefficients = value; } }

	protected bool full_range_flag; 
	public bool FullRangeFlag { get { return this.full_range_flag; } set { this.full_range_flag = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected ICC_profile ICC_profile;  //  restricted ICC profile
	public ICC_profile ICCProfile { get { return this.ICC_profile; } set { this.ICC_profile = value; } }

	public ColourInformationBox(): base(IsoStream.FromFourCC("colr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.colour_type, "colour_type"); 

		if (colour_type == IsoStream.FromFourCC("nclx") || colour_type == IsoStream.FromFourCC("nclc"))
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.colour_primaries, "colour_primaries"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.transfer_characteristics, "transfer_characteristics"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.matrix_coefficients, "matrix_coefficients"); 

			if (colour_type == IsoStream.FromFourCC("nclx"))
			{
				boxSize += stream.ReadBit(boxSize, readSize,  out this.full_range_flag, "full_range_flag"); 
				boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.reserved, "reserved"); 
			}
		}

		else if (colour_type == IsoStream.FromFourCC("rICC"))
		{
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new ICC_profile(),  out this.ICC_profile, "ICC_profile"); // restricted ICC profile
		}

		else if (colour_type == IsoStream.FromFourCC("prof"))
		{
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new ICC_profile(),  out this.ICC_profile, "ICC_profile"); // unrestricted ICC profile
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.colour_type, "colour_type"); 

		if (colour_type == IsoStream.FromFourCC("nclx") || colour_type == IsoStream.FromFourCC("nclc"))
		{
			boxSize += stream.WriteUInt16( this.colour_primaries, "colour_primaries"); 
			boxSize += stream.WriteUInt16( this.transfer_characteristics, "transfer_characteristics"); 
			boxSize += stream.WriteUInt16( this.matrix_coefficients, "matrix_coefficients"); 

			if (colour_type == IsoStream.FromFourCC("nclx"))
			{
				boxSize += stream.WriteBit( this.full_range_flag, "full_range_flag"); 
				boxSize += stream.WriteBits(7,  this.reserved, "reserved"); 
			}
		}

		else if (colour_type == IsoStream.FromFourCC("rICC"))
		{
			boxSize += stream.WriteClass( this.ICC_profile, "ICC_profile"); // restricted ICC profile
		}

		else if (colour_type == IsoStream.FromFourCC("prof"))
		{
			boxSize += stream.WriteClass( this.ICC_profile, "ICC_profile"); // unrestricted ICC profile
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // colour_type

		if (colour_type == IsoStream.FromFourCC("nclx") || colour_type == IsoStream.FromFourCC("nclc"))
		{
			boxSize += 16; // colour_primaries
			boxSize += 16; // transfer_characteristics
			boxSize += 16; // matrix_coefficients

			if (colour_type == IsoStream.FromFourCC("nclx"))
			{
				boxSize += 1; // full_range_flag
				boxSize += 7; // reserved
			}
		}

		else if (colour_type == IsoStream.FromFourCC("rICC"))
		{
			boxSize += IsoStream.CalculateClassSize(ICC_profile); // ICC_profile
		}

		else if (colour_type == IsoStream.FromFourCC("prof"))
		{
			boxSize += IsoStream.CalculateClassSize(ICC_profile); // ICC_profile
		}
		return boxSize;
	}
}


/*
class ContentLightLevelBox extends Box('clli'){
	unsigned int(16) max_content_light_level;
	unsigned int(16) max_pic_average_light_level;
}
*/
public partial class ContentLightLevelBox : Box
{
	public const string TYPE = "clli";
	public override string DisplayName { get { return "ContentLightLevelBox"; } }

	protected ushort max_content_light_level; 
	public ushort MaxContentLightLevel { get { return this.max_content_light_level; } set { this.max_content_light_level = value; } }

	protected ushort max_pic_average_light_level; 
	public ushort MaxPicAverageLightLevel { get { return this.max_pic_average_light_level; } set { this.max_pic_average_light_level = value; } }

	public ContentLightLevelBox(): base(IsoStream.FromFourCC("clli"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.max_content_light_level, "max_content_light_level"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.max_pic_average_light_level, "max_pic_average_light_level"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.max_content_light_level, "max_content_light_level"); 
		boxSize += stream.WriteUInt16( this.max_pic_average_light_level, "max_pic_average_light_level"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // max_content_light_level
		boxSize += 16; // max_pic_average_light_level
		return boxSize;
	}
}


/*
class MasteringDisplayColourVolumeBox extends Box('mdcv'){
	for (c = 0; c<3; c++) {
		unsigned int(16) display_primaries_x;
		unsigned int(16) display_primaries_y;
	}
	unsigned int(16) white_point_x;
	unsigned int(16) white_point_y;
	unsigned int(32) max_display_mastering_luminance;
	unsigned int(32) min_display_mastering_luminance;
}
*/
public partial class MasteringDisplayColourVolumeBox : Box
{
	public const string TYPE = "mdcv";
	public override string DisplayName { get { return "MasteringDisplayColourVolumeBox"; } }

	protected ushort[] display_primaries_x; 
	public ushort[] DisplayPrimariesx { get { return this.display_primaries_x; } set { this.display_primaries_x = value; } }

	protected ushort[] display_primaries_y; 
	public ushort[] DisplayPrimariesy { get { return this.display_primaries_y; } set { this.display_primaries_y = value; } }

	protected ushort white_point_x; 
	public ushort WhitePointx { get { return this.white_point_x; } set { this.white_point_x = value; } }

	protected ushort white_point_y; 
	public ushort WhitePointy { get { return this.white_point_y; } set { this.white_point_y = value; } }

	protected uint max_display_mastering_luminance; 
	public uint MaxDisplayMasteringLuminance { get { return this.max_display_mastering_luminance; } set { this.max_display_mastering_luminance = value; } }

	protected uint min_display_mastering_luminance; 
	public uint MinDisplayMasteringLuminance { get { return this.min_display_mastering_luminance; } set { this.min_display_mastering_luminance = value; } }

	public MasteringDisplayColourVolumeBox(): base(IsoStream.FromFourCC("mdcv"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		this.display_primaries_x = new ushort[IsoStream.GetInt(3)];
		this.display_primaries_y = new ushort[IsoStream.GetInt(3)];
		for (int c = 0; c<3; c++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.display_primaries_x[c], "display_primaries_x"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.display_primaries_y[c], "display_primaries_y"); 
		}
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.white_point_x, "white_point_x"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.white_point_y, "white_point_y"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.max_display_mastering_luminance, "max_display_mastering_luminance"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.min_display_mastering_luminance, "min_display_mastering_luminance"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		for (int c = 0; c<3; c++)
		{
			boxSize += stream.WriteUInt16( this.display_primaries_x[c], "display_primaries_x"); 
			boxSize += stream.WriteUInt16( this.display_primaries_y[c], "display_primaries_y"); 
		}
		boxSize += stream.WriteUInt16( this.white_point_x, "white_point_x"); 
		boxSize += stream.WriteUInt16( this.white_point_y, "white_point_y"); 
		boxSize += stream.WriteUInt32( this.max_display_mastering_luminance, "max_display_mastering_luminance"); 
		boxSize += stream.WriteUInt32( this.min_display_mastering_luminance, "min_display_mastering_luminance"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		for (int c = 0; c<3; c++)
		{
			boxSize += 16; // display_primaries_x
			boxSize += 16; // display_primaries_y
		}
		boxSize += 16; // white_point_x
		boxSize += 16; // white_point_y
		boxSize += 32; // max_display_mastering_luminance
		boxSize += 32; // min_display_mastering_luminance
		return boxSize;
	}
}


/*
aligned(8) class ScrambleSchemeInfoBox extends Box('scrb') {
	SchemeTypeBox scheme_type_box;
	SchemeInformationBox info; // optional
}
*/
public partial class ScrambleSchemeInfoBox : Box
{
	public const string TYPE = "scrb";
	public override string DisplayName { get { return "ScrambleSchemeInfoBox"; } }
	public SchemeTypeBox SchemeTypeBox { get { return this.children.OfType<SchemeTypeBox>().FirstOrDefault(); } }
	public SchemeInformationBox Info { get { return this.children.OfType<SchemeInformationBox>().FirstOrDefault(); } }

	public ScrambleSchemeInfoBox(): base(IsoStream.FromFourCC("scrb"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scheme_type_box, "scheme_type_box"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.info, "info"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.scheme_type_box, "scheme_type_box"); 
		// boxSize += stream.WriteBox( this.info, "info"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(scheme_type_box); // scheme_type_box
		// boxSize += IsoStream.CalculateBoxSize(info); // info
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ChannelLayout extends FullBox('chnl', version, flags=0) {	if (version==0) {
		unsigned int(8) stream_structure;
		if (stream_structure & channelStructured) {
			unsigned int(8) definedLayout;
 			if (definedLayout==0) {
				for (i = 1 ; i <= layout_channel_count ; i++) {
					//  layout_channel_count comes from the sample entry
					unsigned int(8) speaker_position;
					if (speaker_position == 126) {	// explicit position
						signed int (16) azimuth;
						signed int (8)  elevation;
					}
				}
			} else {
				unsigned int(64)	omittedChannelsMap; 
						// a ‘1’ bit indicates ‘not in this track’
			}
		}
		if (stream_structure & objectStructured) {
			unsigned int(8) object_count;
		}
	} else {
		unsigned int(4) stream_structure;
		unsigned int(4) format_ordering;
		unsigned int(8) baseChannelCount;
		if (stream_structure & channelStructured) {
			unsigned int(8) definedLayout;
			if (definedLayout==0) {
				unsigned int(8) layout_channel_count;
				for (i = 1 ; i <= layout_channel_count ; i++) {
					unsigned int(8) speaker_position;
					if (speaker_position == 126) {	// explicit position
						signed int (16) azimuth;
						signed int (8)  elevation;
					}
				}
			} else {
				int(4) reserved = 0;
				unsigned int(3) channel_order_definition;
				unsigned int(1) omitted_channels_present;
				if (omitted_channels_present == 1) {
					unsigned int(64)	omittedChannelsMap; 
							// a ‘1’ bit indicates ‘not in this track’
				}
			}
		}
		if (stream_structure & objectStructured) {
							// object_count is derived from baseChannelCount
		}
	}
}

*/
public partial class ChannelLayout : FullBox
{
	public const string TYPE = "chnl";
	public override string DisplayName { get { return "ChannelLayout"; } }

	protected byte stream_structure; 
	public byte StreamStructure { get { return this.stream_structure; } set { this.stream_structure = value; } }

	protected byte definedLayout; 
	public byte DefinedLayout { get { return this.definedLayout; } set { this.definedLayout = value; } }

	protected byte[] speaker_position; 
	public byte[] SpeakerPosition { get { return this.speaker_position; } set { this.speaker_position = value; } }

	protected short[] azimuth; 
	public short[] Azimuth { get { return this.azimuth; } set { this.azimuth = value; } }

	protected sbyte[] elevation; 
	public sbyte[] Elevation { get { return this.elevation; } set { this.elevation = value; } }

	protected ulong omittedChannelsMap;  //  a ‘1’ bit indicates ‘not in this track’
	public ulong OmittedChannelsMap { get { return this.omittedChannelsMap; } set { this.omittedChannelsMap = value; } }

	protected byte object_count; 
	public byte ObjectCount { get { return this.object_count; } set { this.object_count = value; } }

	protected byte format_ordering; 
	public byte FormatOrdering { get { return this.format_ordering; } set { this.format_ordering = value; } }

	protected byte baseChannelCount; 
	public byte BaseChannelCount { get { return this.baseChannelCount; } set { this.baseChannelCount = value; } }

	protected byte layout_channel_count; 
	public byte LayoutChannelCount { get { return this.layout_channel_count; } set { this.layout_channel_count = value; } }

	protected sbyte reserved = 0; 
	public sbyte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte channel_order_definition; 
	public byte ChannelOrderDefinition { get { return this.channel_order_definition; } set { this.channel_order_definition = value; } }

	protected bool omitted_channels_present; 
	public bool OmittedChannelsPresent { get { return this.omitted_channels_present; } set { this.omitted_channels_present = value; } }

	public ChannelLayout(byte version = 0): base(IsoStream.FromFourCC("chnl"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if (version==0)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.stream_structure, "stream_structure"); 

			if ((stream_structure  &  1) ==  1)
			{
				boxSize += stream.ReadUInt8(boxSize, readSize,  out this.definedLayout, "definedLayout"); 

				if (definedLayout==0)
				{

					this.speaker_position = new byte[IsoStream.GetInt( layout_channel_count )];
					this.azimuth = new short[IsoStream.GetInt( layout_channel_count )];
					this.elevation = new sbyte[IsoStream.GetInt( layout_channel_count )];
					for (int i = 0 ; i < layout_channel_count ; i++)
					{
						/*   layout_channel_count comes from the sample entry */
						boxSize += stream.ReadUInt8(boxSize, readSize,  out this.speaker_position[i], "speaker_position"); 

						if (speaker_position[i] == 126)
						{
							/*  explicit position */
							boxSize += stream.ReadInt16(boxSize, readSize,  out this.azimuth[i], "azimuth"); 
							boxSize += stream.ReadInt8(boxSize, readSize,  out this.elevation[i], "elevation"); 
						}
					}
				}

				else 
				{
					boxSize += stream.ReadUInt64(boxSize, readSize,  out this.omittedChannelsMap, "omittedChannelsMap"); // a ‘1’ bit indicates ‘not in this track’
				}
			}

			if ((stream_structure  &  2) ==  2)
			{
				boxSize += stream.ReadUInt8(boxSize, readSize,  out this.object_count, "object_count"); 
			}
		}

		else 
		{
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.stream_structure, "stream_structure"); 
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.format_ordering, "format_ordering"); 
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.baseChannelCount, "baseChannelCount"); 

			if ((stream_structure  &  1) ==  1)
			{
				boxSize += stream.ReadUInt8(boxSize, readSize,  out this.definedLayout, "definedLayout"); 

				if (definedLayout==0)
				{
					boxSize += stream.ReadUInt8(boxSize, readSize,  out this.layout_channel_count, "layout_channel_count"); 

					for (int i = 0 ; i < layout_channel_count ; i++)
					{
						boxSize += stream.ReadUInt8(boxSize, readSize,  out this.speaker_position[i], "speaker_position"); 

						if (speaker_position[i] == 126)
						{
							/*  explicit position */
							boxSize += stream.ReadInt16(boxSize, readSize,  out this.azimuth[i], "azimuth"); 
							boxSize += stream.ReadInt8(boxSize, readSize,  out this.elevation[i], "elevation"); 
						}
					}
				}

				else 
				{
					boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.reserved, "reserved"); 
					boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.channel_order_definition, "channel_order_definition"); 
					boxSize += stream.ReadBit(boxSize, readSize,  out this.omitted_channels_present, "omitted_channels_present"); 

					if (omitted_channels_present == true)
					{
						boxSize += stream.ReadUInt64(boxSize, readSize,  out this.omittedChannelsMap, "omittedChannelsMap"); // a ‘1’ bit indicates ‘not in this track’
					}
				}
			}

			if ((stream_structure  &  2) ==  2)
			{
				/*  object_count is derived from baseChannelCount */
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if (version==0)
		{
			boxSize += stream.WriteUInt8( this.stream_structure, "stream_structure"); 

			if ((stream_structure  &  1) ==  1)
			{
				boxSize += stream.WriteUInt8( this.definedLayout, "definedLayout"); 

				if (definedLayout==0)
				{

					for (int i = 0 ; i < layout_channel_count ; i++)
					{
						/*   layout_channel_count comes from the sample entry */
						boxSize += stream.WriteUInt8( this.speaker_position[i], "speaker_position"); 

						if (speaker_position[i] == 126)
						{
							/*  explicit position */
							boxSize += stream.WriteInt16( this.azimuth[i], "azimuth"); 
							boxSize += stream.WriteInt8( this.elevation[i], "elevation"); 
						}
					}
				}

				else 
				{
					boxSize += stream.WriteUInt64( this.omittedChannelsMap, "omittedChannelsMap"); // a ‘1’ bit indicates ‘not in this track’
				}
			}

			if ((stream_structure  &  2) ==  2)
			{
				boxSize += stream.WriteUInt8( this.object_count, "object_count"); 
			}
		}

		else 
		{
			boxSize += stream.WriteBits(4,  this.stream_structure, "stream_structure"); 
			boxSize += stream.WriteBits(4,  this.format_ordering, "format_ordering"); 
			boxSize += stream.WriteUInt8( this.baseChannelCount, "baseChannelCount"); 

			if ((stream_structure  &  1) ==  1)
			{
				boxSize += stream.WriteUInt8( this.definedLayout, "definedLayout"); 

				if (definedLayout==0)
				{
					boxSize += stream.WriteUInt8( this.layout_channel_count, "layout_channel_count"); 

					for (int i = 0 ; i < layout_channel_count ; i++)
					{
						boxSize += stream.WriteUInt8( this.speaker_position[i], "speaker_position"); 

						if (speaker_position[i] == 126)
						{
							/*  explicit position */
							boxSize += stream.WriteInt16( this.azimuth[i], "azimuth"); 
							boxSize += stream.WriteInt8( this.elevation[i], "elevation"); 
						}
					}
				}

				else 
				{
					boxSize += stream.WriteBits(4,  this.reserved, "reserved"); 
					boxSize += stream.WriteBits(3,  this.channel_order_definition, "channel_order_definition"); 
					boxSize += stream.WriteBit( this.omitted_channels_present, "omitted_channels_present"); 

					if (omitted_channels_present == true)
					{
						boxSize += stream.WriteUInt64( this.omittedChannelsMap, "omittedChannelsMap"); // a ‘1’ bit indicates ‘not in this track’
					}
				}
			}

			if ((stream_structure  &  2) ==  2)
			{
				/*  object_count is derived from baseChannelCount */
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if (version==0)
		{
			boxSize += 8; // stream_structure

			if ((stream_structure  &  1) ==  1)
			{
				boxSize += 8; // definedLayout

				if (definedLayout==0)
				{

					for (int i = 0 ; i < layout_channel_count ; i++)
					{
						/*   layout_channel_count comes from the sample entry */
						boxSize += 8; // speaker_position

						if (speaker_position[i] == 126)
						{
							/*  explicit position */
							boxSize += 16; // azimuth
							boxSize += 8; // elevation
						}
					}
				}

				else 
				{
					boxSize += 64; // omittedChannelsMap
				}
			}

			if ((stream_structure  &  2) ==  2)
			{
				boxSize += 8; // object_count
			}
		}

		else 
		{
			boxSize += 4; // stream_structure
			boxSize += 4; // format_ordering
			boxSize += 8; // baseChannelCount

			if ((stream_structure  &  1) ==  1)
			{
				boxSize += 8; // definedLayout

				if (definedLayout==0)
				{
					boxSize += 8; // layout_channel_count

					for (int i = 0 ; i < layout_channel_count ; i++)
					{
						boxSize += 8; // speaker_position

						if (speaker_position[i] == 126)
						{
							/*  explicit position */
							boxSize += 16; // azimuth
							boxSize += 8; // elevation
						}
					}
				}

				else 
				{
					boxSize += 4; // reserved
					boxSize += 3; // channel_order_definition
					boxSize += 1; // omitted_channels_present

					if (omitted_channels_present == true)
					{
						boxSize += 64; // omittedChannelsMap
					}
				}
			}

			if ((stream_structure  &  2) ==  2)
			{
				/*  object_count is derived from baseChannelCount */
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class DownMixInstructions extends FullBox('dmix', version, flags=0) {
	if (version >= 1) {
		bit(1) reserved = 0;
		bit(7) downmix_instructions_count;
	} else {
		int downmix_instructions_count = 1;
	}
	for (a=1; a<=downmix_instructions_count; a++) { 
		unsigned int(8) targetLayout;
 		unsigned int(1) reserved = 0;
		unsigned int(7) targetChannelCount;
		bit(1) in_stream; 
		unsigned int(7) downmix_ID;
		if (in_stream==0) 
		{	// downmix coefficients are out of stream and supplied here
			int i, j;
			if (version >= 1) {
				bit(4) bs_downmix_offset;
				int size = 4;
				for (i=1; i <= targetChannelCount; i++){
					for (j=1; j <= baseChannelCount; j++) {
						bit(5) bs_downmix_coefficient_v1;
						size += 5;
					}
				}
				bit(8 ceil(size / 8) – size) reserved = 0; // byte align
			} else {
				for (i=1; i <= targetChannelCount; i++){
					for (j=1; j <= baseChannelCount; j++) {
						bit(4) bs_downmix_coefficient;
					}
				}
			}
		}
	}
}
*/
public partial class DownMixInstructions : FullBox
{
	public const string TYPE = "dmix";
	public override string DisplayName { get { return "DownMixInstructions"; } }

	protected bool reserved = false; 
	public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte downmix_instructions_count; 
	public byte DownmixInstructionsCount { get { return this.downmix_instructions_count; } set { this.downmix_instructions_count = value; } }

	protected byte[] targetLayout; 
	public byte[] TargetLayout { get { return this.targetLayout; } set { this.targetLayout = value; } }

	protected bool[] reserved0; 
	public bool[] Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected byte[] targetChannelCount; 
	public byte[] TargetChannelCount { get { return this.targetChannelCount; } set { this.targetChannelCount = value; } }

	protected bool[] in_stream; 
	public bool[] InStream { get { return this.in_stream; } set { this.in_stream = value; } }

	protected byte[] downmix_ID; 
	public byte[] DownmixID { get { return this.downmix_ID; } set { this.downmix_ID = value; } }

	protected byte[] bs_downmix_offset; 
	public byte[] BsDownmixOffset { get { return this.bs_downmix_offset; } set { this.bs_downmix_offset = value; } }

	protected byte[][][] bs_downmix_coefficient_v1; 
	public byte[][][] BsDownmixCoefficientV1 { get { return this.bs_downmix_coefficient_v1; } set { this.bs_downmix_coefficient_v1 = value; } }

	protected byte[][] reserved00;  //  byte align
	public byte[][] Reserved00 { get { return this.reserved00; } set { this.reserved00 = value; } }

	protected byte[][][] bs_downmix_coefficient; 
	public byte[][][] BsDownmixCoefficient { get { return this.bs_downmix_coefficient; } set { this.bs_downmix_coefficient = value; } }

	public DownMixInstructions(byte version = 0): base(IsoStream.FromFourCC("dmix"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		int baseChannelCount = 0; // TODO: get somewhere

		if (version >= 1)
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved, "reserved"); 
			boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.downmix_instructions_count, "downmix_instructions_count"); 
		}

		else 
		{
			downmix_instructions_count = 1;
		}

		this.targetLayout = new byte[IsoStream.GetInt(downmix_instructions_count)];
		this.reserved0 = new bool[IsoStream.GetInt(downmix_instructions_count)];
		this.targetChannelCount = new byte[IsoStream.GetInt(downmix_instructions_count)];
		this.in_stream = new bool[IsoStream.GetInt(downmix_instructions_count)];
		this.downmix_ID = new byte[IsoStream.GetInt(downmix_instructions_count)];
		this.bs_downmix_offset = new byte[IsoStream.GetInt(downmix_instructions_count)];
		this.bs_downmix_coefficient_v1 = new byte[IsoStream.GetInt(downmix_instructions_count)][][];
		this.reserved00 = new byte[IsoStream.GetInt(downmix_instructions_count)][];
		this.bs_downmix_coefficient = new byte[IsoStream.GetInt(downmix_instructions_count)][][];
		for (int a=0; a<downmix_instructions_count; a++)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.targetLayout[a], "targetLayout"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved0[a], "reserved0"); 
			boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.targetChannelCount[a], "targetChannelCount"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.in_stream[a], "in_stream"); 
			boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.downmix_ID[a], "downmix_ID"); 

			if (in_stream[a]== false)
			{
				/*  downmix coefficients are out of stream and supplied here */
				

				if (version >= 1)
				{
					boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.bs_downmix_offset[a], "bs_downmix_offset"); 
					int size = 4;

					this.bs_downmix_coefficient_v1[a] = new byte[IsoStream.GetInt( targetChannelCount[a])][];
					for (int i=0; i < targetChannelCount[a]; i++)
					{

						this.bs_downmix_coefficient_v1[a][i] = new byte[IsoStream.GetInt( baseChannelCount)];
						for (int j=0; j < baseChannelCount; j++)
						{
							boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.bs_downmix_coefficient_v1[a][i][j], "bs_downmix_coefficient_v1"); 
							size += 5;
						}
					}
					boxSize += stream.ReadBits(boxSize, readSize, (uint)((Math.Ceiling(size / 8d) - size) * 8 ),  out this.reserved00[a], "reserved00"); // byte align
				}

				else 
				{

					this.bs_downmix_coefficient[a] = new byte[IsoStream.GetInt( targetChannelCount[a])][];
					for (int i=0; i < targetChannelCount[a]; i++)
					{

						this.bs_downmix_coefficient[a][i] = new byte[IsoStream.GetInt( baseChannelCount)];
						for (int j=0; j < baseChannelCount; j++)
						{
							boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.bs_downmix_coefficient[a][i][j], "bs_downmix_coefficient"); 
						}
					}
				}
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		int baseChannelCount = 0; // TODO: get somewhere

		if (version >= 1)
		{
			boxSize += stream.WriteBit( this.reserved, "reserved"); 
			boxSize += stream.WriteBits(7,  this.downmix_instructions_count, "downmix_instructions_count"); 
		}

		else 
		{
			downmix_instructions_count = 1;
		}

		for (int a=0; a<downmix_instructions_count; a++)
		{
			boxSize += stream.WriteUInt8( this.targetLayout[a], "targetLayout"); 
			boxSize += stream.WriteBit( this.reserved0[a], "reserved0"); 
			boxSize += stream.WriteBits(7,  this.targetChannelCount[a], "targetChannelCount"); 
			boxSize += stream.WriteBit( this.in_stream[a], "in_stream"); 
			boxSize += stream.WriteBits(7,  this.downmix_ID[a], "downmix_ID"); 

			if (in_stream[a]== false)
			{
				/*  downmix coefficients are out of stream and supplied here */
				

				if (version >= 1)
				{
					boxSize += stream.WriteBits(4,  this.bs_downmix_offset[a], "bs_downmix_offset"); 
					int size = 4;

					for (int i=0; i < targetChannelCount[a]; i++)
					{

						for (int j=0; j < baseChannelCount; j++)
						{
							boxSize += stream.WriteBits(5,  this.bs_downmix_coefficient_v1[a][i][j], "bs_downmix_coefficient_v1"); 
							size += 5;
						}
					}
					boxSize += stream.WriteBits((uint)((Math.Ceiling(size / 8d) - size) * 8 ),  this.reserved00[a], "reserved00"); // byte align
				}

				else 
				{

					for (int i=0; i < targetChannelCount[a]; i++)
					{

						for (int j=0; j < baseChannelCount; j++)
						{
							boxSize += stream.WriteBits(4,  this.bs_downmix_coefficient[a][i][j], "bs_downmix_coefficient"); 
						}
					}
				}
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		int baseChannelCount = 0; // TODO: get somewhere

		if (version >= 1)
		{
			boxSize += 1; // reserved
			boxSize += 7; // downmix_instructions_count
		}

		else 
		{
			downmix_instructions_count = 1;
		}

		for (int a=0; a<downmix_instructions_count; a++)
		{
			boxSize += 8; // targetLayout
			boxSize += 1; // reserved0
			boxSize += 7; // targetChannelCount
			boxSize += 1; // in_stream
			boxSize += 7; // downmix_ID

			if (in_stream[a]== false)
			{
				/*  downmix coefficients are out of stream and supplied here */
				

				if (version >= 1)
				{
					boxSize += 4; // bs_downmix_offset
					int size = 4;

					for (int i=0; i < targetChannelCount[a]; i++)
					{

						for (int j=0; j < baseChannelCount; j++)
						{
							boxSize += 5; // bs_downmix_coefficient_v1
							size += 5;
						}
					}
					boxSize += (ulong)((Math.Ceiling(size / 8d) - size) * 8 ); // reserved00
				}

				else 
				{

					for (int i=0; i < targetChannelCount[a]; i++)
					{

						for (int j=0; j < baseChannelCount; j++)
						{
							boxSize += 4; // bs_downmix_coefficient
						}
					}
				}
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class SamplingRateBox extends FullBox('srat') {
	unsigned int(32) sampling_rate;
}
*/
public partial class SamplingRateBox : FullBox
{
	public const string TYPE = "srat";
	public override string DisplayName { get { return "SamplingRateBox"; } }

	protected uint sampling_rate; 
	public uint SamplingRate { get { return this.sampling_rate; } set { this.sampling_rate = value; } }

	public SamplingRateBox(): base(IsoStream.FromFourCC("srat"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sampling_rate, "sampling_rate"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.sampling_rate, "sampling_rate"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // sampling_rate
		return boxSize;
	}
}


/*
class TextConfigBox() extends FullBox ('txtC', 0, 0) {
	utf8string text_config;
}
*/
public partial class TextConfigBox : FullBox
{
	public const string TYPE = "txtC";
	public override string DisplayName { get { return "TextConfigBox"; } }

	protected BinaryUTF8String text_config; 
	public BinaryUTF8String TextConfig { get { return this.text_config; } set { this.text_config = value; } }

	public TextConfigBox(): base(IsoStream.FromFourCC("txtC"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.text_config, "text_config"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.text_config, "text_config"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(text_config); // text_config
		return boxSize;
	}
}


/*
aligned(8) class URIInitBox
		extends FullBox('uriI', version = 0, 0) {
	unsigned int(8) uri_initialization_data[];
}
*/
public partial class URIInitBox : FullBox
{
	public const string TYPE = "uriI";
	public override string DisplayName { get { return "URIInitBox"; } }

	protected byte[] uri_initialization_data; 
	public byte[] UriInitializationData { get { return this.uri_initialization_data; } set { this.uri_initialization_data = value; } }

	public URIInitBox(): base(IsoStream.FromFourCC("uriI"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.uri_initialization_data, "uri_initialization_data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.uri_initialization_data, "uri_initialization_data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)uri_initialization_data.Length * 8); // uri_initialization_data
		return boxSize;
	}
}


/*
aligned(8) class CopyrightBox
	extends FullBox('cprt', version = 0, 0) {
	const bit(1) pad = 0;
	unsigned int(5)[3] language; // ISO-639-2/T language code
	utfstring notice;
}
*/
public partial class CopyrightBox : FullBox
{
	public const string TYPE = "cprt";
	public override string DisplayName { get { return "CopyrightBox"; } }

	protected bool pad = false; 
	public bool Pad { get { return this.pad; } set { this.pad = value; } }

	protected string language;  //  ISO-639-2/T language code
	public string Language { get { return this.language; } set { this.language = value; } }

	protected BinaryUTF8String notice; 
	public BinaryUTF8String Notice { get { return this.notice; } set { this.notice = value; } }

	public CopyrightBox(): base(IsoStream.FromFourCC("cprt"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.pad, "pad"); 
		boxSize += stream.ReadIso639(boxSize, readSize,  out this.language, "language"); // ISO-639-2/T language code
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.notice, "notice"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.pad, "pad"); 
		boxSize += stream.WriteIso639( this.language, "language"); // ISO-639-2/T language code
		boxSize += stream.WriteStringZeroTerminated( this.notice, "notice"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // pad
		boxSize += 15; // language
		boxSize += IsoStream.CalculateStringSize(notice); // notice
		return boxSize;
	}
}


/*
aligned(8) class KindBox extends FullBox('kind', version = 0, 0) {
	utf8string schemeURI;
	utf8string value;
}
*/
public partial class KindBox : FullBox
{
	public const string TYPE = "kind";
	public override string DisplayName { get { return "KindBox"; } }

	protected BinaryUTF8String schemeURI; 
	public BinaryUTF8String SchemeURI { get { return this.schemeURI; } set { this.schemeURI = value; } }

	protected BinaryUTF8String value; 
	public BinaryUTF8String Value { get { return this.value; } set { this.value = value; } }

	public KindBox(): base(IsoStream.FromFourCC("kind"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.schemeURI, "schemeURI"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.value, "value"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.schemeURI, "schemeURI"); 
		boxSize += stream.WriteStringZeroTerminated( this.value, "value"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(schemeURI); // schemeURI
		boxSize += IsoStream.CalculateStringSize(value); // value
		return boxSize;
	}
}


/*
aligned(8) class TrackSelectionBox
	extends FullBox('tsel', version = 0, 0) {
	template int(32) switch_group = 0;
	unsigned int(32) attribute_list[];		// to end of the box
}
*/
public partial class TrackSelectionBox : FullBox
{
	public const string TYPE = "tsel";
	public override string DisplayName { get { return "TrackSelectionBox"; } }

	protected int switch_group = 0; 
	public int SwitchGroup { get { return this.switch_group; } set { this.switch_group = value; } }

	protected uint[] attribute_list;  //  to end of the box
	public uint[] AttributeList { get { return this.attribute_list; } set { this.attribute_list = value; } }

	public TrackSelectionBox(): base(IsoStream.FromFourCC("tsel"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.switch_group, "switch_group"); 
		boxSize += stream.ReadUInt32ArrayTillEnd(boxSize, readSize,  out this.attribute_list, "attribute_list"); // to end of the box
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt32( this.switch_group, "switch_group"); 
		boxSize += stream.WriteUInt32ArrayTillEnd( this.attribute_list, "attribute_list"); // to end of the box
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // switch_group
		boxSize += ((ulong)attribute_list.Length * 32); // attribute_list
		return boxSize;
	}
}


/*
aligned(8) class SubTrackBox extends Box('strk') {
}
*/
public partial class SubTrackBox : Box
{
	public const string TYPE = "strk";
	public override string DisplayName { get { return "SubTrackBox"; } }

	public SubTrackBox(): base(IsoStream.FromFourCC("strk"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class TrackHintInformation extends Box('hnti') {
}


*/
public partial class TrackHintInformation : Box
{
	public const string TYPE = "hnti";
	public override string DisplayName { get { return "TrackHintInformation"; } }

	public TrackHintInformation(): base(IsoStream.FromFourCC("hnti"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class RtpTrackSdpHintInformation extends Box('sdp ') {
	char	sdptext[];
}
*/
public partial class RtpTrackSdpHintInformation : Box
{
	public const string TYPE = "sdp ";
	public override string DisplayName { get { return "RtpTrackSdpHintInformation"; } }

	protected byte[] sdptext; 
	public byte[] Sdptext { get { return this.sdptext; } set { this.sdptext = value; } }

	public RtpTrackSdpHintInformation(): base(IsoStream.FromFourCC("sdp "))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.sdptext, "sdptext"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.sdptext, "sdptext"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)sdptext.Length * 8); // sdptext
		return boxSize;
	}
}


/*
aligned(8) class MovieHintInformation extends Box('hnti') {
}


*/
public partial class MovieHintInformation : Box
{
	public const string TYPE = "hnti";
	public override string DisplayName { get { return "MovieHintInformation"; } }

	public MovieHintInformation(): base(IsoStream.FromFourCC("hnti"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class RtpMovieHintInformation extends Box('rtp ') {
	uint(32) descriptionformat = 'sdp ';
	char  sdptext[];
}
*/
public partial class RtpMovieHintInformation : Box
{
	public const string TYPE = "rtp ";
	public override string DisplayName { get { return "RtpMovieHintInformation"; } }

	protected uint descriptionformat = IsoStream.FromFourCC("sdp "); 
	public uint Descriptionformat { get { return this.descriptionformat; } set { this.descriptionformat = value; } }

	protected byte[] sdptext; 
	public byte[] Sdptext { get { return this.sdptext; } set { this.sdptext = value; } }

	public RtpMovieHintInformation(): base(IsoStream.FromFourCC("rtp "))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.descriptionformat, "descriptionformat"); 
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.sdptext, "sdptext"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.descriptionformat, "descriptionformat"); 
		boxSize += stream.WriteUInt8ArrayTillEnd( this.sdptext, "sdptext"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // descriptionformat
		boxSize += ((ulong)sdptext.Length * 8); // sdptext
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class HintStatisticsBox extends Box('hinf') {
}
*/
public partial class HintStatisticsBox : Box
{
	public const string TYPE = "hinf";
	public override string DisplayName { get { return "HintStatisticsBox"; } }

	public HintStatisticsBox(): base(IsoStream.FromFourCC("hinf"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class LoudnessBox extends Box('ludt') {
	// not more than one TrackLoudnessInfo box with version>=1 is allowed
	TrackLoudnessInfo[]			loudness;
	// not more than one AlbumLoudnessInfo box with version>=1 is allowed
	AlbumLoudnessInfo[] albumLoudness;
}
*/
public partial class LoudnessBox : Box
{
	public const string TYPE = "ludt";
	public override string DisplayName { get { return "LoudnessBox"; } }
	public IEnumerable<TrackLoudnessInfo> Loudness { get { return this.children.OfType<TrackLoudnessInfo>(); } }
	public IEnumerable<AlbumLoudnessInfo> AlbumLoudness { get { return this.children.OfType<AlbumLoudnessInfo>(); } }

	public LoudnessBox(): base(IsoStream.FromFourCC("ludt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		/*  not more than one TrackLoudnessInfo box with version>=1 is allowed */
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.loudness, "loudness"); // not more than one AlbumLoudnessInfo box with version>=1 is allowed
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.albumLoudness, "albumLoudness"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		/*  not more than one TrackLoudnessInfo box with version>=1 is allowed */
		// boxSize += stream.WriteBox( this.loudness, "loudness"); // not more than one AlbumLoudnessInfo box with version>=1 is allowed
		// boxSize += stream.WriteBox( this.albumLoudness, "albumLoudness"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		/*  not more than one TrackLoudnessInfo box with version>=1 is allowed */
		// boxSize += IsoStream.CalculateBoxSize(loudness); // loudness
		// boxSize += IsoStream.CalculateBoxSize(albumLoudness); // albumLoudness
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class TrackLoudnessInfo extends LoudnessBaseBox('tlou') { }
*/
public partial class TrackLoudnessInfo : LoudnessBaseBox
{
	public const string TYPE = "tlou";
	public override string DisplayName { get { return "TrackLoudnessInfo"; } }

	public TrackLoudnessInfo(): base(IsoStream.FromFourCC("tlou"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
aligned(8) class AlbumLoudnessInfo extends LoudnessBaseBox ('alou') { }
*/
public partial class AlbumLoudnessInfo : LoudnessBaseBox
{
	public const string TYPE = "alou";
	public override string DisplayName { get { return "AlbumLoudnessInfo"; } }

	public AlbumLoudnessInfo(): base(IsoStream.FromFourCC("alou"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
aligned(8) class DataEntryUrlBox (bit(24) flags)
	extends DataEntryBaseBox('url ', flags) {
	utf8string location;
}
*/
public partial class DataEntryUrlBox : DataEntryBaseBox
{
	public const string TYPE = "url ";
	public override string DisplayName { get { return "DataEntryUrlBox"; } }

	protected BinaryUTF8String location; 
	public BinaryUTF8String Location { get { return this.location; } set { this.location = value; } }

	public DataEntryUrlBox(uint flags = 0): base(IsoStream.FromFourCC("url "), flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.location, "location"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.location, "location"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(location); // location
		return boxSize;
	}
}


/*
aligned(8) class DataEntryUrnBox (bit(24) flags)
	extends DataEntryBaseBox('urn ', flags) {
	utf8string name;
	utf8string location;
}
*/
public partial class DataEntryUrnBox : DataEntryBaseBox
{
	public const string TYPE = "urn ";
	public override string DisplayName { get { return "DataEntryUrnBox"; } }

	protected BinaryUTF8String name; 
	public BinaryUTF8String Name { get { return this.name; } set { this.name = value; } }

	protected BinaryUTF8String location; 
	public BinaryUTF8String Location { get { return this.location; } set { this.location = value; } }

	public DataEntryUrnBox(uint flags = 0): base(IsoStream.FromFourCC("urn "), flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.name, "name"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.location, "location"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.name, "name"); 
		boxSize += stream.WriteStringZeroTerminated( this.location, "location"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(name); // name
		boxSize += IsoStream.CalculateStringSize(location); // location
		return boxSize;
	}
}


/*
aligned(8) class DataEntryImdaBox (bit(24) flags)
	extends DataEntryBaseBox('imdt', flags) {
	unsigned int(32) imda_ref_identifier;
}
*/
public partial class DataEntryImdaBox : DataEntryBaseBox
{
	public const string TYPE = "imdt";
	public override string DisplayName { get { return "DataEntryImdaBox"; } }

	protected uint imda_ref_identifier; 
	public uint ImdaRefIdentifier { get { return this.imda_ref_identifier; } set { this.imda_ref_identifier = value; } }

	public DataEntryImdaBox(uint flags = 0): base(IsoStream.FromFourCC("imdt"), flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.imda_ref_identifier, "imda_ref_identifier"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.imda_ref_identifier, "imda_ref_identifier"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // imda_ref_identifier
		return boxSize;
	}
}


/*
aligned(8) class DataEntrySeqNumImdaBox (bit(24) flags)
	extends DataEntryBaseBox ('snim', flags) {
}
*/
public partial class DataEntrySeqNumImdaBox : DataEntryBaseBox
{
	public const string TYPE = "snim";
	public override string DisplayName { get { return "DataEntrySeqNumImdaBox"; } }

	public DataEntrySeqNumImdaBox(uint flags = 0): base(IsoStream.FromFourCC("snim"), flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
aligned(8) class ItemPropertyContainerBox
	extends Box('ipco')
{
	Box properties[];	// boxes derived from
		// ItemProperty or ItemFullProperty, or FreeSpaceBox(es)
		// to fill the box
}

*/
public partial class ItemPropertyContainerBox : Box
{
	public const string TYPE = "ipco";
	public override string DisplayName { get { return "ItemPropertyContainerBox"; } }
	public IEnumerable<Box> Properties { get { return this.children.OfType<Box>(); } }

	public ItemPropertyContainerBox(): base(IsoStream.FromFourCC("ipco"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.properties, "properties"); // boxes derived from
		/*  ItemProperty or ItemFullProperty, or FreeSpaceBox(es) */
		/*  to fill the box */
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.properties, "properties"); // boxes derived from
		/*  ItemProperty or ItemFullProperty, or FreeSpaceBox(es) */
		/*  to fill the box */
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(properties); // properties
		/*  ItemProperty or ItemFullProperty, or FreeSpaceBox(es) */
		/*  to fill the box */
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ItemPropertyAssociationBox
	extends FullBox('ipma', version, flags)
{
	unsigned int(32) entry_count;
	for(i = 0; i < entry_count; i++) {
		if (version < 1)
			unsigned int(16)	item_ID;
		else
			unsigned int(32)	item_ID;
		unsigned int(8) association_count;
		for (j=0; j<association_count; j++) {
			bit(1) essential;
			if (flags & 1)
				unsigned int(15) property_index;
			else
				unsigned int(7) property_index;
		}
	}
}

*/
public partial class ItemPropertyAssociationBox : FullBox
{
	public const string TYPE = "ipma";
	public override string DisplayName { get { return "ItemPropertyAssociationBox"; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected uint[] item_ID; 
	public uint[] ItemID { get { return this.item_ID; } set { this.item_ID = value; } }

	protected byte[] association_count; 
	public byte[] AssociationCount { get { return this.association_count; } set { this.association_count = value; } }

	protected bool[][] essential; 
	public bool[][] Essential { get { return this.essential; } set { this.essential = value; } }

	protected ushort[][] property_index; 
	public ushort[][] PropertyIndex { get { return this.property_index; } set { this.property_index = value; } }

	public ItemPropertyAssociationBox(byte version = 0, uint flags = 0): base(IsoStream.FromFourCC("ipma"), version, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 

		this.item_ID = new uint[IsoStream.GetInt( entry_count)];
		this.association_count = new byte[IsoStream.GetInt( entry_count)];
		this.essential = new bool[IsoStream.GetInt( entry_count)][];
		this.property_index = new ushort[IsoStream.GetInt( entry_count)][];
		for (int i = 0; i < entry_count; i++)
		{

			if (version < 1)
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.item_ID[i], "item_ID"); 
			}

			else 
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.item_ID[i], "item_ID"); 
			}
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.association_count[i], "association_count"); 

			this.essential[i] = new bool[IsoStream.GetInt(association_count[i])];
			this.property_index[i] = new ushort[IsoStream.GetInt(association_count[i])];
			for (int j=0; j<association_count[i]; j++)
			{
				boxSize += stream.ReadBit(boxSize, readSize,  out this.essential[i][j], "essential"); 

				if ((flags  &  1) ==  1)
				{
					boxSize += stream.ReadBits(boxSize, readSize, 15,  out this.property_index[i][j], "property_index"); 
				}

				else 
				{
					boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.property_index[i][j], "property_index"); 
				}
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 

		for (int i = 0; i < entry_count; i++)
		{

			if (version < 1)
			{
				boxSize += stream.WriteUInt16( this.item_ID[i], "item_ID"); 
			}

			else 
			{
				boxSize += stream.WriteUInt32( this.item_ID[i], "item_ID"); 
			}
			boxSize += stream.WriteUInt8( this.association_count[i], "association_count"); 

			for (int j=0; j<association_count[i]; j++)
			{
				boxSize += stream.WriteBit( this.essential[i][j], "essential"); 

				if ((flags  &  1) ==  1)
				{
					boxSize += stream.WriteBits(15,  this.property_index[i][j], "property_index"); 
				}

				else 
				{
					boxSize += stream.WriteBits(7,  this.property_index[i][j], "property_index"); 
				}
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // entry_count

		for (int i = 0; i < entry_count; i++)
		{

			if (version < 1)
			{
				boxSize += 16; // item_ID
			}

			else 
			{
				boxSize += 32; // item_ID
			}
			boxSize += 8; // association_count

			for (int j=0; j<association_count[i]; j++)
			{
				boxSize += 1; // essential

				if ((flags  &  1) ==  1)
				{
					boxSize += 15; // property_index
				}

				else 
				{
					boxSize += 7; // property_index
				}
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class ItemPropertiesBox
		extends Box('iprp') {
	ItemPropertyContainerBox property_container;
	ItemPropertyAssociationBox association[];
 }
*/
public partial class ItemPropertiesBox : Box
{
	public const string TYPE = "iprp";
	public override string DisplayName { get { return "ItemPropertiesBox"; } }
	public ItemPropertyContainerBox PropertyContainer { get { return this.children.OfType<ItemPropertyContainerBox>().FirstOrDefault(); } }
	public IEnumerable<ItemPropertyAssociationBox> Association { get { return this.children.OfType<ItemPropertyAssociationBox>(); } }

	public ItemPropertiesBox(): base(IsoStream.FromFourCC("iprp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.property_container, "property_container"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.association, "association"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.property_container, "property_container"); 
		// boxSize += stream.WriteBox( this.association, "association"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(property_container); // property_container
		// boxSize += IsoStream.CalculateBoxSize(association); // association
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class AlternativeStartupSequencePropertiesBox extends FullBox('assp', version, 0) {
	if (version == 0) {
		signed int(32)		min_initial_alt_startup_offset;
	}
	else if (version == 1) {
		unsigned int(32)	num_entries;
		for (j=1; j <= num_entries; j++) {
			unsigned int(32)	grouping_type_parameter;
			signed int(32)		min_initial_alt_startup_offset;
		}
	}
}
*/
public partial class AlternativeStartupSequencePropertiesBox : FullBox
{
	public const string TYPE = "assp";
	public override string DisplayName { get { return "AlternativeStartupSequencePropertiesBox"; } }

	protected int min_initial_alt_startup_offset; 
	public int MinInitialAltStartupOffset { get { return this.min_initial_alt_startup_offset; } set { this.min_initial_alt_startup_offset = value; } }

	protected uint num_entries; 
	public uint NumEntries { get { return this.num_entries; } set { this.num_entries = value; } }

	protected uint[] grouping_type_parameter; 
	public uint[] GroupingTypeParameter { get { return this.grouping_type_parameter; } set { this.grouping_type_parameter = value; } }

	protected int[] min_initial_alt_startup_offset0; 
	public int[] MinInitialAltStartupOffset0 { get { return this.min_initial_alt_startup_offset0; } set { this.min_initial_alt_startup_offset0 = value; } }

	public AlternativeStartupSequencePropertiesBox(byte version = 0): base(IsoStream.FromFourCC("assp"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if (version == 0)
		{
			boxSize += stream.ReadInt32(boxSize, readSize,  out this.min_initial_alt_startup_offset, "min_initial_alt_startup_offset"); 
		}

		else if (version == 1)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.num_entries, "num_entries"); 

			this.grouping_type_parameter = new uint[IsoStream.GetInt( num_entries)];
			this.min_initial_alt_startup_offset0 = new int[IsoStream.GetInt( num_entries)];
			for (int j=0; j < num_entries; j++)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.grouping_type_parameter[j], "grouping_type_parameter"); 
				boxSize += stream.ReadInt32(boxSize, readSize,  out this.min_initial_alt_startup_offset0[j], "min_initial_alt_startup_offset0"); 
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if (version == 0)
		{
			boxSize += stream.WriteInt32( this.min_initial_alt_startup_offset, "min_initial_alt_startup_offset"); 
		}

		else if (version == 1)
		{
			boxSize += stream.WriteUInt32( this.num_entries, "num_entries"); 

			for (int j=0; j < num_entries; j++)
			{
				boxSize += stream.WriteUInt32( this.grouping_type_parameter[j], "grouping_type_parameter"); 
				boxSize += stream.WriteInt32( this.min_initial_alt_startup_offset0[j], "min_initial_alt_startup_offset0"); 
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if (version == 0)
		{
			boxSize += 32; // min_initial_alt_startup_offset
		}

		else if (version == 1)
		{
			boxSize += 32; // num_entries

			for (int j=0; j < num_entries; j++)
			{
				boxSize += 32; // grouping_type_parameter
				boxSize += 32; // min_initial_alt_startup_offset0
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class BinaryXMLBox
		extends FullBox('bxml', version = 0, 0) {
	unsigned int(8) data[];		// to end of box
}
*/
public partial class BinaryXMLBox : FullBox
{
	public const string TYPE = "bxml";
	public override string DisplayName { get { return "BinaryXMLBox"; } }

	protected byte[] data;  //  to end of box
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public BinaryXMLBox(): base(IsoStream.FromFourCC("bxml"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); // to end of box
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); // to end of box
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class CompleteTrackInfoBox(fmt) extends Box('cinf') {
	OriginalFormatBox(fmt)	original_format;
}
*/
public partial class CompleteTrackInfoBox : Box
{
	public const string TYPE = "cinf";
	public override string DisplayName { get { return "CompleteTrackInfoBox"; } }
	public OriginalFormatBox OriginalFormat { get { return this.children.OfType<OriginalFormatBox>().FirstOrDefault(); } }

	public CompleteTrackInfoBox(uint fmt = 0): base(IsoStream.FromFourCC("cinf"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.original_format, "original_format"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.original_format, "original_format"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(original_format); // original_format
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ChunkLargeOffsetBox
	extends FullBox('co64', version = 0, 0) {
	unsigned int(32)	entry_count;
	for (i=1; i <= entry_count; i++) {
		unsigned int(64)	chunk_offset;
	}
}
*/
public partial class ChunkLargeOffsetBox : FullBox
{
	public const string TYPE = "co64";
	public override string DisplayName { get { return "ChunkLargeOffsetBox"; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected ulong[] chunk_offset; 
	public ulong[] ChunkOffset { get { return this.chunk_offset; } set { this.chunk_offset = value; } }

	public ChunkLargeOffsetBox(): base(IsoStream.FromFourCC("co64"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 

		this.chunk_offset = new ulong[IsoStream.GetInt( entry_count)];
		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.chunk_offset[i], "chunk_offset"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 

		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.WriteUInt64( this.chunk_offset[i], "chunk_offset"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // entry_count

		for (int i=0; i < entry_count; i++)
		{
			boxSize += 64; // chunk_offset
		}
		return boxSize;
	}
}


/*
aligned(8) class CompactSampleToGroupBox
	extends FullBox('csgp', version, flags)
{
	unsigned int(32) grouping_type;

	if (grouping_type_parameter_present == 1) {
		unsigned int(32) grouping_type_parameter;
	}
	unsigned int(32) pattern_count;
	totalPatternLength = 0;
	for (i=1; i <= pattern_count; i++) {
		unsigned int(f(pattern_size_code)) pattern_length[i];
		unsigned int(f(count_size_code)) sample_count[i];
	}
	for (j=1; j <= pattern_count; j++) {
		for (k=1; k <= pattern_length[j]; k++) {
			unsigned int(f(index_size_code))
						 sample_group_description_index[j][k];
			// whose msb might indicate fragment_local or global
		}
	}
}
*/
public partial class CompactSampleToGroupBox : FullBox
{
	public const string TYPE = "csgp";
	public override string DisplayName { get { return "CompactSampleToGroupBox"; } }

	protected uint grouping_type; 
	public uint GroupingType { get { return this.grouping_type; } set { this.grouping_type = value; } }

	protected uint grouping_type_parameter; 
	public uint GroupingTypeParameter { get { return this.grouping_type_parameter; } set { this.grouping_type_parameter = value; } }

	protected uint pattern_count; 
	public uint PatternCount { get { return this.pattern_count; } set { this.pattern_count = value; } }

	protected byte[][] pattern_length; 
	public byte[][] PatternLength { get { return this.pattern_length; } set { this.pattern_length = value; } }

	protected byte[][] sample_count; 
	public byte[][] SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

	protected byte[][][] sample_group_description_index;  //  whose msb might indicate fragment_local or global
	public byte[][][] SampleGroupDescriptionIndex { get { return this.sample_group_description_index; } set { this.sample_group_description_index = value; } }

	public CompactSampleToGroupBox(byte version = 0, uint flags = 0): base(IsoStream.FromFourCC("csgp"), version, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		bool grouping_type_parameter_present = (flags & (1 << 6)) == (1 << 6);
		uint count_size_code = (flags >> 2) & 0x3;
		uint pattern_size_code = (flags >> 4) & 0x3;
		uint index_size_code = flags & 0x3;

		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.grouping_type, "grouping_type"); 

		if (grouping_type_parameter_present == true)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.grouping_type_parameter, "grouping_type_parameter"); 
		}
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.pattern_count, "pattern_count"); 
		

		this.pattern_length = new byte[IsoStream.GetInt( pattern_count)][];
		this.sample_count = new byte[IsoStream.GetInt( pattern_count)][];
		for (int i=0; i < pattern_count; i++)
		{
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(pattern_size_code ),  out this.pattern_length[i], "pattern_length"); 
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(count_size_code ),  out this.sample_count[i], "sample_count"); 
		}

		this.sample_group_description_index = new byte[IsoStream.GetInt( pattern_count)][][];
		for (int j=0; j < pattern_count; j++)
		{

			this.sample_group_description_index[j] = new byte[IsoStream.GetInt( IsoStream.GetInt(pattern_length[j]))][];
			for (int k=0; k < IsoStream.GetInt(pattern_length[j]); k++)
			{
				boxSize += stream.ReadBits(boxSize, readSize, (uint)(index_size_code ),  out this.sample_group_description_index[j][k], "sample_group_description_index"); // whose msb might indicate fragment_local or global
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		bool grouping_type_parameter_present = (flags & (1 << 6)) == (1 << 6);
		uint count_size_code = (flags >> 2) & 0x3;
		uint pattern_size_code = (flags >> 4) & 0x3;
		uint index_size_code = flags & 0x3;

		boxSize += stream.WriteUInt32( this.grouping_type, "grouping_type"); 

		if (grouping_type_parameter_present == true)
		{
			boxSize += stream.WriteUInt32( this.grouping_type_parameter, "grouping_type_parameter"); 
		}
		boxSize += stream.WriteUInt32( this.pattern_count, "pattern_count"); 
		

		for (int i=0; i < pattern_count; i++)
		{
			boxSize += stream.WriteBits((uint)(pattern_size_code ),  this.pattern_length[i], "pattern_length"); 
			boxSize += stream.WriteBits((uint)(count_size_code ),  this.sample_count[i], "sample_count"); 
		}

		for (int j=0; j < pattern_count; j++)
		{

			for (int k=0; k < IsoStream.GetInt(pattern_length[j]); k++)
			{
				boxSize += stream.WriteBits((uint)(index_size_code ),  this.sample_group_description_index[j][k], "sample_group_description_index"); // whose msb might indicate fragment_local or global
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		bool grouping_type_parameter_present = (flags & (1 << 6)) == (1 << 6);
		uint count_size_code = (flags >> 2) & 0x3;
		uint pattern_size_code = (flags >> 4) & 0x3;
		uint index_size_code = flags & 0x3;

		boxSize += 32; // grouping_type

		if (grouping_type_parameter_present == true)
		{
			boxSize += 32; // grouping_type_parameter
		}
		boxSize += 32; // pattern_count
		

		for (int i=0; i < pattern_count; i++)
		{
			boxSize += (ulong)(pattern_size_code ); // pattern_length
			boxSize += (ulong)(count_size_code ); // sample_count
		}

		for (int j=0; j < pattern_count; j++)
		{

			for (int k=0; k < IsoStream.GetInt(pattern_length[j]); k++)
			{
				boxSize += (ulong)(index_size_code ); // sample_group_description_index
			}
		}
		return boxSize;
	}
}


/*
class CompositionToDecodeBox extends FullBox('cslg', version, 0) {
	if (version==0) {
		signed int(32)	compositionToDTSShift;
		signed int(32)	leastDecodeToDisplayDelta;
		signed int(32)	greatestDecodeToDisplayDelta;
		signed int(32)	compositionStartTime;
		signed int(32)	compositionEndTime;
	} else {
		signed int(64)	compositionToDTSShift;
		signed int(64)	leastDecodeToDisplayDelta;
		signed int(64)	greatestDecodeToDisplayDelta;
		signed int(64)	compositionStartTime;
		signed int(64)	compositionEndTime;
	}
}
*/
public partial class CompositionToDecodeBox : FullBox
{
	public const string TYPE = "cslg";
	public override string DisplayName { get { return "CompositionToDecodeBox"; } }

	protected long compositionToDTSShift; 
	public long CompositionToDTSShift { get { return this.compositionToDTSShift; } set { this.compositionToDTSShift = value; } }

	protected long leastDecodeToDisplayDelta; 
	public long LeastDecodeToDisplayDelta { get { return this.leastDecodeToDisplayDelta; } set { this.leastDecodeToDisplayDelta = value; } }

	protected long greatestDecodeToDisplayDelta; 
	public long GreatestDecodeToDisplayDelta { get { return this.greatestDecodeToDisplayDelta; } set { this.greatestDecodeToDisplayDelta = value; } }

	protected long compositionStartTime; 
	public long CompositionStartTime { get { return this.compositionStartTime; } set { this.compositionStartTime = value; } }

	protected long compositionEndTime; 
	public long CompositionEndTime { get { return this.compositionEndTime; } set { this.compositionEndTime = value; } }

	public CompositionToDecodeBox(byte version = 0): base(IsoStream.FromFourCC("cslg"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if (version==0)
		{
			boxSize += stream.ReadInt32(boxSize, readSize,  out this.compositionToDTSShift, "compositionToDTSShift"); 
			boxSize += stream.ReadInt32(boxSize, readSize,  out this.leastDecodeToDisplayDelta, "leastDecodeToDisplayDelta"); 
			boxSize += stream.ReadInt32(boxSize, readSize,  out this.greatestDecodeToDisplayDelta, "greatestDecodeToDisplayDelta"); 
			boxSize += stream.ReadInt32(boxSize, readSize,  out this.compositionStartTime, "compositionStartTime"); 
			boxSize += stream.ReadInt32(boxSize, readSize,  out this.compositionEndTime, "compositionEndTime"); 
		}

		else 
		{
			boxSize += stream.ReadInt64(boxSize, readSize,  out this.compositionToDTSShift, "compositionToDTSShift"); 
			boxSize += stream.ReadInt64(boxSize, readSize,  out this.leastDecodeToDisplayDelta, "leastDecodeToDisplayDelta"); 
			boxSize += stream.ReadInt64(boxSize, readSize,  out this.greatestDecodeToDisplayDelta, "greatestDecodeToDisplayDelta"); 
			boxSize += stream.ReadInt64(boxSize, readSize,  out this.compositionStartTime, "compositionStartTime"); 
			boxSize += stream.ReadInt64(boxSize, readSize,  out this.compositionEndTime, "compositionEndTime"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if (version==0)
		{
			boxSize += stream.WriteInt32( this.compositionToDTSShift, "compositionToDTSShift"); 
			boxSize += stream.WriteInt32( this.leastDecodeToDisplayDelta, "leastDecodeToDisplayDelta"); 
			boxSize += stream.WriteInt32( this.greatestDecodeToDisplayDelta, "greatestDecodeToDisplayDelta"); 
			boxSize += stream.WriteInt32( this.compositionStartTime, "compositionStartTime"); 
			boxSize += stream.WriteInt32( this.compositionEndTime, "compositionEndTime"); 
		}

		else 
		{
			boxSize += stream.WriteInt64( this.compositionToDTSShift, "compositionToDTSShift"); 
			boxSize += stream.WriteInt64( this.leastDecodeToDisplayDelta, "leastDecodeToDisplayDelta"); 
			boxSize += stream.WriteInt64( this.greatestDecodeToDisplayDelta, "greatestDecodeToDisplayDelta"); 
			boxSize += stream.WriteInt64( this.compositionStartTime, "compositionStartTime"); 
			boxSize += stream.WriteInt64( this.compositionEndTime, "compositionEndTime"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if (version==0)
		{
			boxSize += 32; // compositionToDTSShift
			boxSize += 32; // leastDecodeToDisplayDelta
			boxSize += 32; // greatestDecodeToDisplayDelta
			boxSize += 32; // compositionStartTime
			boxSize += 32; // compositionEndTime
		}

		else 
		{
			boxSize += 64; // compositionToDTSShift
			boxSize += 64; // leastDecodeToDisplayDelta
			boxSize += 64; // greatestDecodeToDisplayDelta
			boxSize += 64; // compositionStartTime
			boxSize += 64; // compositionEndTime
		}
		return boxSize;
	}
}


/*
aligned(8) class CompositionOffsetBox
	extends FullBox('ctts', version, 0) {
	unsigned int(32)	entry_count;
		int i;
	if (version==0) {
		for (i=0; i < entry_count; i++) {
			unsigned int(32)	sample_count;
			unsigned int(32)	sample_offset;
		}
	}
	else if (version == 1) {
		for (i=0; i < entry_count; i++) {
			unsigned int(32)	sample_count;
			signed   int(32)	sample_offset;
		}
	}
}
*/
public partial class CompositionOffsetBox : FullBox
{
	public const string TYPE = "ctts";
	public override string DisplayName { get { return "CompositionOffsetBox"; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected uint[] sample_count; 
	public uint[] SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

	protected uint[] sample_offset; 
	public uint[] SampleOffset { get { return this.sample_offset; } set { this.sample_offset = value; } }

	protected int[] sample_offset0; 
	public int[] SampleOffset0 { get { return this.sample_offset0; } set { this.sample_offset0 = value; } }

	public CompositionOffsetBox(byte version = 0): base(IsoStream.FromFourCC("ctts"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 
		

		if (version==0)
		{

			this.sample_count = new uint[IsoStream.GetInt( entry_count)];
			this.sample_offset = new uint[IsoStream.GetInt( entry_count)];
			for (int i=0; i < entry_count; i++)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_count[i], "sample_count"); 
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_offset[i], "sample_offset"); 
			}
		}

		else if (version == 1)
		{

			this.sample_offset0 = new int[IsoStream.GetInt( entry_count)];
			for (int i=0; i < entry_count; i++)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_count[i], "sample_count"); 
				boxSize += stream.ReadInt32(boxSize, readSize,  out this.sample_offset0[i], "sample_offset0"); 
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 
		

		if (version==0)
		{

			for (int i=0; i < entry_count; i++)
			{
				boxSize += stream.WriteUInt32( this.sample_count[i], "sample_count"); 
				boxSize += stream.WriteUInt32( this.sample_offset[i], "sample_offset"); 
			}
		}

		else if (version == 1)
		{

			for (int i=0; i < entry_count; i++)
			{
				boxSize += stream.WriteUInt32( this.sample_count[i], "sample_count"); 
				boxSize += stream.WriteInt32( this.sample_offset0[i], "sample_offset0"); 
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // entry_count
		

		if (version==0)
		{

			for (int i=0; i < entry_count; i++)
			{
				boxSize += 32; // sample_count
				boxSize += 32; // sample_offset
			}
		}

		else if (version == 1)
		{

			for (int i=0; i < entry_count; i++)
			{
				boxSize += 32; // sample_count
				boxSize += 32; // sample_offset0
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class DataInformationBox extends Box('dinf') {
}
*/
public partial class DataInformationBox : Box
{
	public const string TYPE = "dinf";
	public override string DisplayName { get { return "DataInformationBox"; } }

	public DataInformationBox(): base(IsoStream.FromFourCC("dinf"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class DataReferenceBox
	extends FullBox('dref', version = 0, 0) {
	unsigned int(32)	entry_count;
	for (i=1; i <= entry_count; i++) {
		DataEntryBaseBox(entry_type, entry_flags)	data_entry;
	}
}
*/
public partial class DataReferenceBox : FullBox
{
	public const string TYPE = "dref";
	public override string DisplayName { get { return "DataReferenceBox"; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }
	public IEnumerable<DataEntryBaseBox> DataEntry { get { return this.children.OfType<DataEntryBaseBox>(); } }

	public DataReferenceBox(): base(IsoStream.FromFourCC("dref"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 

		for (int i=0; i < entry_count; i++)
		{
			// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.data_entry[i], "data_entry"); 
		}
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 

		for (int i=0; i < entry_count; i++)
		{
			// boxSize += stream.WriteBox( this.data_entry[i], "data_entry"); 
		}
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // entry_count

		for (int i=0; i < entry_count; i++)
		{
			// boxSize += IsoStream.CalculateBoxSize(data_entry); // data_entry
		}
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class EditBox extends Box('edts') {
}
*/
public partial class EditBox : Box
{
	public const string TYPE = "edts";
	public override string DisplayName { get { return "EditBox"; } }

	public EditBox(): base(IsoStream.FromFourCC("edts"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class EditListBox extends FullBox('elst', version, flags) {
	unsigned int(32)	entry_count;
	for (i=1; i <= entry_count; i++) {
		if (version==1) {
			unsigned int(64) edit_duration;
			int(64) media_time;
		} else { // version==0
			unsigned int(32) edit_duration;
			int(32)	media_time;
		}
		int(16) media_rate_integer;
		int(16) media_rate_fraction;
	}
}
*/
public partial class EditListBox : FullBox
{
	public const string TYPE = "elst";
	public override string DisplayName { get { return "EditListBox"; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected ulong[] edit_duration; 
	public ulong[] EditDuration { get { return this.edit_duration; } set { this.edit_duration = value; } }

	protected long[] media_time; 
	public long[] MediaTime { get { return this.media_time; } set { this.media_time = value; } }

	protected short[] media_rate_integer; 
	public short[] MediaRateInteger { get { return this.media_rate_integer; } set { this.media_rate_integer = value; } }

	protected short[] media_rate_fraction; 
	public short[] MediaRateFraction { get { return this.media_rate_fraction; } set { this.media_rate_fraction = value; } }

	public EditListBox(byte version = 0, uint flags = 0): base(IsoStream.FromFourCC("elst"), version, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 

		this.edit_duration = new ulong[IsoStream.GetInt( entry_count)];
		this.media_time = new long[IsoStream.GetInt( entry_count)];
		this.media_rate_integer = new short[IsoStream.GetInt( entry_count)];
		this.media_rate_fraction = new short[IsoStream.GetInt( entry_count)];
		for (int i=0; i < entry_count; i++)
		{

			if (version==1)
			{
				boxSize += stream.ReadUInt64(boxSize, readSize,  out this.edit_duration[i], "edit_duration"); 
				boxSize += stream.ReadInt64(boxSize, readSize,  out this.media_time[i], "media_time"); 
			}

			else 
			{
				/*  version==0 */
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.edit_duration[i], "edit_duration"); 
				boxSize += stream.ReadInt32(boxSize, readSize,  out this.media_time[i], "media_time"); 
			}
			boxSize += stream.ReadInt16(boxSize, readSize,  out this.media_rate_integer[i], "media_rate_integer"); 
			boxSize += stream.ReadInt16(boxSize, readSize,  out this.media_rate_fraction[i], "media_rate_fraction"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 

		for (int i=0; i < entry_count; i++)
		{

			if (version==1)
			{
				boxSize += stream.WriteUInt64( this.edit_duration[i], "edit_duration"); 
				boxSize += stream.WriteInt64( this.media_time[i], "media_time"); 
			}

			else 
			{
				/*  version==0 */
				boxSize += stream.WriteUInt32( this.edit_duration[i], "edit_duration"); 
				boxSize += stream.WriteInt32( this.media_time[i], "media_time"); 
			}
			boxSize += stream.WriteInt16( this.media_rate_integer[i], "media_rate_integer"); 
			boxSize += stream.WriteInt16( this.media_rate_fraction[i], "media_rate_fraction"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // entry_count

		for (int i=0; i < entry_count; i++)
		{

			if (version==1)
			{
				boxSize += 64; // edit_duration
				boxSize += 64; // media_time
			}

			else 
			{
				/*  version==0 */
				boxSize += 32; // edit_duration
				boxSize += 32; // media_time
			}
			boxSize += 16; // media_rate_integer
			boxSize += 16; // media_rate_fraction
		}
		return boxSize;
	}
}


/*
aligned(8) class ExtendedTypeBox extends Box('etyp') {
	TypeCombinationBox	compatible_combinations[];	// to end of the box
}
*/
public partial class ExtendedTypeBox : Box
{
	public const string TYPE = "etyp";
	public override string DisplayName { get { return "ExtendedTypeBox"; } }
	public IEnumerable<TypeCombinationBox> CompatibleCombinations { get { return this.children.OfType<TypeCombinationBox>(); } }

	public ExtendedTypeBox(): base(IsoStream.FromFourCC("etyp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.compatible_combinations, "compatible_combinations"); // to end of the box
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.compatible_combinations, "compatible_combinations"); // to end of the box
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(compatible_combinations); // compatible_combinations
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class FDItemInfoExtension() extends ItemInfoExtension ('fdel') {
	utf8string content_location;
	utf8string content_MD5;
	unsigned int(64) content_length;
	unsigned int(64) transfer_length;
	unsigned int(8) entry_count;
	for (i=1; i <= entry_count; i++)
		unsigned int(32) group_id;
}
*/
public partial class FDItemInfoExtension : ItemInfoExtension
{
	public const string TYPE = "fdel";
	public override string DisplayName { get { return "FDItemInfoExtension"; } }

	protected BinaryUTF8String content_location; 
	public BinaryUTF8String ContentLocation { get { return this.content_location; } set { this.content_location = value; } }

	protected BinaryUTF8String content_MD5; 
	public BinaryUTF8String ContentMD5 { get { return this.content_MD5; } set { this.content_MD5 = value; } }

	protected ulong content_length; 
	public ulong ContentLength { get { return this.content_length; } set { this.content_length = value; } }

	protected ulong transfer_length; 
	public ulong TransferLength { get { return this.transfer_length; } set { this.transfer_length = value; } }

	protected byte entry_count; 
	public byte EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected uint[] group_id; 
	public uint[] GroupId { get { return this.group_id; } set { this.group_id = value; } }

	public FDItemInfoExtension(): base(IsoStream.FromFourCC("fdel"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.content_location, "content_location"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.content_MD5, "content_MD5"); 
		boxSize += stream.ReadUInt64(boxSize, readSize,  out this.content_length, "content_length"); 
		boxSize += stream.ReadUInt64(boxSize, readSize,  out this.transfer_length, "transfer_length"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.entry_count, "entry_count"); 

		this.group_id = new uint[IsoStream.GetInt( entry_count)];
		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.group_id[i], "group_id"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.content_location, "content_location"); 
		boxSize += stream.WriteStringZeroTerminated( this.content_MD5, "content_MD5"); 
		boxSize += stream.WriteUInt64( this.content_length, "content_length"); 
		boxSize += stream.WriteUInt64( this.transfer_length, "transfer_length"); 
		boxSize += stream.WriteUInt8( this.entry_count, "entry_count"); 

		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.WriteUInt32( this.group_id[i], "group_id"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(content_location); // content_location
		boxSize += IsoStream.CalculateStringSize(content_MD5); // content_MD5
		boxSize += 64; // content_length
		boxSize += 64; // transfer_length
		boxSize += 8; // entry_count

		for (int i=0; i < entry_count; i++)
		{
			boxSize += 32; // group_id
		}
		return boxSize;
	}
}


/*
aligned(8) class FECReservoirBox
		extends FullBox('fecr', version, 0) {
	if (version == 0) {
		unsigned int(16)	entry_count;
	} else {
		unsigned int(32)	entry_count;
	}
	for (i=1; i <= entry_count; i++) {
		if (version == 0) {
			unsigned int(16)	item_ID;
		} else {
			unsigned int(32)	item_ID;
		}
		unsigned int(32)	symbol_count;
	}
}
*/
public partial class FECReservoirBox : FullBox
{
	public const string TYPE = "fecr";
	public override string DisplayName { get { return "FECReservoirBox"; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected uint[] item_ID; 
	public uint[] ItemID { get { return this.item_ID; } set { this.item_ID = value; } }

	protected uint[] symbol_count; 
	public uint[] SymbolCount { get { return this.symbol_count; } set { this.symbol_count = value; } }

	public FECReservoirBox(byte version = 0): base(IsoStream.FromFourCC("fecr"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if (version == 0)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.entry_count, "entry_count"); 
		}

		else 
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 
		}

		this.item_ID = new uint[IsoStream.GetInt( entry_count)];
		this.symbol_count = new uint[IsoStream.GetInt( entry_count)];
		for (int i=0; i < entry_count; i++)
		{

			if (version == 0)
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.item_ID[i], "item_ID"); 
			}

			else 
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.item_ID[i], "item_ID"); 
			}
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.symbol_count[i], "symbol_count"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if (version == 0)
		{
			boxSize += stream.WriteUInt16( this.entry_count, "entry_count"); 
		}

		else 
		{
			boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 
		}

		for (int i=0; i < entry_count; i++)
		{

			if (version == 0)
			{
				boxSize += stream.WriteUInt16( this.item_ID[i], "item_ID"); 
			}

			else 
			{
				boxSize += stream.WriteUInt32( this.item_ID[i], "item_ID"); 
			}
			boxSize += stream.WriteUInt32( this.symbol_count[i], "symbol_count"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if (version == 0)
		{
			boxSize += 16; // entry_count
		}

		else 
		{
			boxSize += 32; // entry_count
		}

		for (int i=0; i < entry_count; i++)
		{

			if (version == 0)
			{
				boxSize += 16; // item_ID
			}

			else 
			{
				boxSize += 32; // item_ID
			}
			boxSize += 32; // symbol_count
		}
		return boxSize;
	}
}


/*
aligned(8) class PartitionEntry extends Box('paen') {
	FilePartitionBox	blocks_and_symbols;
	FECReservoirBox	FEC_symbol_locations; //optional
	FileReservoirBox	File_symbol_locations; //optional
}


*/
public partial class PartitionEntry : Box
{
	public const string TYPE = "paen";
	public override string DisplayName { get { return "PartitionEntry"; } }
	public FilePartitionBox BlocksAndSymbols { get { return this.children.OfType<FilePartitionBox>().FirstOrDefault(); } }
	public FECReservoirBox FECSymbolLocations { get { return this.children.OfType<FECReservoirBox>().FirstOrDefault(); } }
	public FileReservoirBox FileSymbolLocations { get { return this.children.OfType<FileReservoirBox>().FirstOrDefault(); } }

	public PartitionEntry(): base(IsoStream.FromFourCC("paen"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.blocks_and_symbols, "blocks_and_symbols"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.FEC_symbol_locations, "FEC_symbol_locations"); //optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.File_symbol_locations, "File_symbol_locations"); //optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.blocks_and_symbols, "blocks_and_symbols"); 
		// boxSize += stream.WriteBox( this.FEC_symbol_locations, "FEC_symbol_locations"); //optional
		// boxSize += stream.WriteBox( this.File_symbol_locations, "File_symbol_locations"); //optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(blocks_and_symbols); // blocks_and_symbols
		// boxSize += IsoStream.CalculateBoxSize(FEC_symbol_locations); // FEC_symbol_locations
		// boxSize += IsoStream.CalculateBoxSize(File_symbol_locations); // File_symbol_locations
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class FDItemInformationBox
		extends FullBox('fiin', version = 0, 0) {
	unsigned int(16)	entry_count;
	PartitionEntry		partition_entries[ entry_count ];
	FDSessionGroupBox	session_info;			//optional
	GroupIdToNameBox	group_id_to_name;	//optional
}
*/
public partial class FDItemInformationBox : FullBox
{
	public const string TYPE = "fiin";
	public override string DisplayName { get { return "FDItemInformationBox"; } }

	protected ushort entry_count; 
	public ushort EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }
	public IEnumerable<PartitionEntry> PartitionEntries { get { return this.children.OfType<PartitionEntry>(); } }
	public FDSessionGroupBox SessionInfo { get { return this.children.OfType<FDSessionGroupBox>().FirstOrDefault(); } }
	public GroupIdToNameBox GroupIdToName { get { return this.children.OfType<GroupIdToNameBox>().FirstOrDefault(); } }

	public FDItemInformationBox(): base(IsoStream.FromFourCC("fiin"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.entry_count, "entry_count"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.partition_entries, "partition_entries"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.session_info, "session_info"); //optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.group_id_to_name, "group_id_to_name"); //optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.entry_count, "entry_count"); 
		// boxSize += stream.WriteBox( this.partition_entries, "partition_entries"); 
		// boxSize += stream.WriteBox( this.session_info, "session_info"); //optional
		// boxSize += stream.WriteBox( this.group_id_to_name, "group_id_to_name"); //optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // entry_count
		// boxSize += IsoStream.CalculateBoxSize(partition_entries); // partition_entries
		// boxSize += IsoStream.CalculateBoxSize(session_info); // session_info
		// boxSize += IsoStream.CalculateBoxSize(group_id_to_name); // group_id_to_name
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class FileReservoirBox
		extends FullBox('fire', version, 0) {
	if (version == 0) {
		unsigned int(16)	entry_count;
	} else {
		unsigned int(32)	entry_count;
	}
	for (i=1; i <= entry_count; i++) {
		if (version == 0) {
			unsigned int(16)	item_ID;
		} else {
			unsigned int(32)	item_ID;
		}
		unsigned int(32)	symbol_count;
	}
}
*/
public partial class FileReservoirBox : FullBox
{
	public const string TYPE = "fire";
	public override string DisplayName { get { return "FileReservoirBox"; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected uint[] item_ID; 
	public uint[] ItemID { get { return this.item_ID; } set { this.item_ID = value; } }

	protected uint[] symbol_count; 
	public uint[] SymbolCount { get { return this.symbol_count; } set { this.symbol_count = value; } }

	public FileReservoirBox(byte version = 0): base(IsoStream.FromFourCC("fire"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if (version == 0)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.entry_count, "entry_count"); 
		}

		else 
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 
		}

		this.item_ID = new uint[IsoStream.GetInt( entry_count)];
		this.symbol_count = new uint[IsoStream.GetInt( entry_count)];
		for (int i=0; i < entry_count; i++)
		{

			if (version == 0)
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.item_ID[i], "item_ID"); 
			}

			else 
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.item_ID[i], "item_ID"); 
			}
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.symbol_count[i], "symbol_count"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if (version == 0)
		{
			boxSize += stream.WriteUInt16( this.entry_count, "entry_count"); 
		}

		else 
		{
			boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 
		}

		for (int i=0; i < entry_count; i++)
		{

			if (version == 0)
			{
				boxSize += stream.WriteUInt16( this.item_ID[i], "item_ID"); 
			}

			else 
			{
				boxSize += stream.WriteUInt32( this.item_ID[i], "item_ID"); 
			}
			boxSize += stream.WriteUInt32( this.symbol_count[i], "symbol_count"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if (version == 0)
		{
			boxSize += 16; // entry_count
		}

		else 
		{
			boxSize += 32; // entry_count
		}

		for (int i=0; i < entry_count; i++)
		{

			if (version == 0)
			{
				boxSize += 16; // item_ID
			}

			else 
			{
				boxSize += 32; // item_ID
			}
			boxSize += 32; // symbol_count
		}
		return boxSize;
	}
}


/*
aligned(8) class FilePartitionBox
		extends FullBox('fpar', version, 0) {
	if (version == 0) {
		unsigned int(16)	item_ID;
	} else {
		unsigned int(32)	item_ID;
	}
	unsigned int(16)	packet_payload_size;
	unsigned int(8)	reserved = 0;
	unsigned int(8)	FEC_encoding_ID;
	unsigned int(16)	FEC_instance_ID;
	unsigned int(16)	max_source_block_length;
	unsigned int(16)	encoding_symbol_length;
	unsigned int(16)	max_number_of_encoding_symbols;
	base64string		scheme_specific_info;
	if (version == 0) {
		unsigned int(16)	entry_count;
	} else {
		unsigned int(32)	entry_count;
	}
	for (i=1; i <= entry_count; i++) {
		unsigned int(16)	block_count;
		unsigned int(32)	block_size;
	}
}
*/
public partial class FilePartitionBox : FullBox
{
	public const string TYPE = "fpar";
	public override string DisplayName { get { return "FilePartitionBox"; } }

	protected uint item_ID; 
	public uint ItemID { get { return this.item_ID; } set { this.item_ID = value; } }

	protected ushort packet_payload_size; 
	public ushort PacketPayloadSize { get { return this.packet_payload_size; } set { this.packet_payload_size = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte FEC_encoding_ID; 
	public byte FECEncodingID { get { return this.FEC_encoding_ID; } set { this.FEC_encoding_ID = value; } }

	protected ushort FEC_instance_ID; 
	public ushort FECInstanceID { get { return this.FEC_instance_ID; } set { this.FEC_instance_ID = value; } }

	protected ushort max_source_block_length; 
	public ushort MaxSourceBlockLength { get { return this.max_source_block_length; } set { this.max_source_block_length = value; } }

	protected ushort encoding_symbol_length; 
	public ushort EncodingSymbolLength { get { return this.encoding_symbol_length; } set { this.encoding_symbol_length = value; } }

	protected ushort max_number_of_encoding_symbols; 
	public ushort MaxNumberOfEncodingSymbols { get { return this.max_number_of_encoding_symbols; } set { this.max_number_of_encoding_symbols = value; } }

	protected BinaryUTF8String scheme_specific_info; 
	public BinaryUTF8String SchemeSpecificInfo { get { return this.scheme_specific_info; } set { this.scheme_specific_info = value; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected ushort[] block_count; 
	public ushort[] BlockCount { get { return this.block_count; } set { this.block_count = value; } }

	protected uint[] block_size; 
	public uint[] BlockSize { get { return this.block_size; } set { this.block_size = value; } }

	public FilePartitionBox(byte version = 0): base(IsoStream.FromFourCC("fpar"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if (version == 0)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.item_ID, "item_ID"); 
		}

		else 
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.item_ID, "item_ID"); 
		}
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.packet_payload_size, "packet_payload_size"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.FEC_encoding_ID, "FEC_encoding_ID"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.FEC_instance_ID, "FEC_instance_ID"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.max_source_block_length, "max_source_block_length"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.encoding_symbol_length, "encoding_symbol_length"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.max_number_of_encoding_symbols, "max_number_of_encoding_symbols"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.scheme_specific_info, "scheme_specific_info"); 

		if (version == 0)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.entry_count, "entry_count"); 
		}

		else 
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 
		}

		this.block_count = new ushort[IsoStream.GetInt( entry_count)];
		this.block_size = new uint[IsoStream.GetInt( entry_count)];
		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.block_count[i], "block_count"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.block_size[i], "block_size"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if (version == 0)
		{
			boxSize += stream.WriteUInt16( this.item_ID, "item_ID"); 
		}

		else 
		{
			boxSize += stream.WriteUInt32( this.item_ID, "item_ID"); 
		}
		boxSize += stream.WriteUInt16( this.packet_payload_size, "packet_payload_size"); 
		boxSize += stream.WriteUInt8( this.reserved, "reserved"); 
		boxSize += stream.WriteUInt8( this.FEC_encoding_ID, "FEC_encoding_ID"); 
		boxSize += stream.WriteUInt16( this.FEC_instance_ID, "FEC_instance_ID"); 
		boxSize += stream.WriteUInt16( this.max_source_block_length, "max_source_block_length"); 
		boxSize += stream.WriteUInt16( this.encoding_symbol_length, "encoding_symbol_length"); 
		boxSize += stream.WriteUInt16( this.max_number_of_encoding_symbols, "max_number_of_encoding_symbols"); 
		boxSize += stream.WriteStringZeroTerminated( this.scheme_specific_info, "scheme_specific_info"); 

		if (version == 0)
		{
			boxSize += stream.WriteUInt16( this.entry_count, "entry_count"); 
		}

		else 
		{
			boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 
		}

		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.WriteUInt16( this.block_count[i], "block_count"); 
			boxSize += stream.WriteUInt32( this.block_size[i], "block_size"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if (version == 0)
		{
			boxSize += 16; // item_ID
		}

		else 
		{
			boxSize += 32; // item_ID
		}
		boxSize += 16; // packet_payload_size
		boxSize += 8; // reserved
		boxSize += 8; // FEC_encoding_ID
		boxSize += 16; // FEC_instance_ID
		boxSize += 16; // max_source_block_length
		boxSize += 16; // encoding_symbol_length
		boxSize += 16; // max_number_of_encoding_symbols
		boxSize += IsoStream.CalculateStringSize(scheme_specific_info); // scheme_specific_info

		if (version == 0)
		{
			boxSize += 16; // entry_count
		}

		else 
		{
			boxSize += 32; // entry_count
		}

		for (int i=0; i < entry_count; i++)
		{
			boxSize += 16; // block_count
			boxSize += 32; // block_size
		}
		return boxSize;
	}
}


/*
aligned(8) class FreeSpaceBox extends Box('free') {
unsigned int(8) data[];
}
*/
public partial class FreeSpaceBox : Box
{
	public const string TYPE = "free";
	public override string DisplayName { get { return "FreeSpaceBox"; } }

	protected StreamMarker data; 
	public StreamMarker Data { get { return this.data; } set { this.data = value; } }

	public FreeSpaceBox(): base(IsoStream.FromFourCC("free"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class OriginalFormatBox(codingname) extends Box ('frma') {
	unsigned int(32)	data_format = codingname;
			// format of decrypted, encoded data (in case of protection)
			// or un-transformed sample entry (in case of restriction
			// and complete track information)
}
*/
public partial class OriginalFormatBox : Box
{
	public const string TYPE = "frma";
	public override string DisplayName { get { return "OriginalFormatBox"; } }

	protected uint data_format; // = codingname
	public uint DataFormat { get { return this.data_format; } set { this.data_format = value; } }

	public OriginalFormatBox(uint codingname = 0): base(IsoStream.FromFourCC("frma"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.data_format, "data_format"); // format of decrypted, encoded data (in case of protection)
		/*  or un-transformed sample entry (in case of restriction */
		/*  and complete track information) */
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.data_format, "data_format"); // format of decrypted, encoded data (in case of protection)
		/*  or un-transformed sample entry (in case of restriction */
		/*  and complete track information) */
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // data_format
		/*  or un-transformed sample entry (in case of restriction */
		/*  and complete track information) */
		return boxSize;
	}
}


/*
aligned(8) class FileTypeBox
extends Box('ftyp')
{
unsigned int(32) major_brand;
unsigned int(32) minor_version;
unsigned int(32) compatible_brands[];// to end of the box
}
*/
public partial class FileTypeBox : Box
{
	public const string TYPE = "ftyp";
	public override string DisplayName { get { return "FileTypeBox"; } }

	protected uint major_brand; 
	public uint MajorBrand { get { return this.major_brand; } set { this.major_brand = value; } }

	protected uint minor_version; 
	public uint MinorVersion { get { return this.minor_version; } set { this.minor_version = value; } }

	protected uint[] compatible_brands;  //  to end of the box
	public uint[] CompatibleBrands { get { return this.compatible_brands; } set { this.compatible_brands = value; } }

	public FileTypeBox(): base(IsoStream.FromFourCC("ftyp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.major_brand, "major_brand"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.minor_version, "minor_version"); 
		boxSize += stream.ReadUInt32ArrayTillEnd(boxSize, readSize,  out this.compatible_brands, "compatible_brands"); // to end of the box
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.major_brand, "major_brand"); 
		boxSize += stream.WriteUInt32( this.minor_version, "minor_version"); 
		boxSize += stream.WriteUInt32ArrayTillEnd( this.compatible_brands, "compatible_brands"); // to end of the box
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // major_brand
		boxSize += 32; // minor_version
		boxSize += ((ulong)compatible_brands.Length * 32); // compatible_brands
		return boxSize;
	}
}


/*
aligned(8) class GroupIdToNameBox
		extends FullBox('gitn', version = 0, 0) {
	unsigned int(16)	entry_count;
	for (i=1; i <= entry_count; i++) {
		unsigned int(32)	group_ID;
		utf8string			group_name;
	}
}
*/
public partial class GroupIdToNameBox : FullBox
{
	public const string TYPE = "gitn";
	public override string DisplayName { get { return "GroupIdToNameBox"; } }

	protected ushort entry_count; 
	public ushort EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected uint[] group_ID; 
	public uint[] GroupID { get { return this.group_ID; } set { this.group_ID = value; } }

	protected BinaryUTF8String[] group_name; 
	public BinaryUTF8String[] GroupName { get { return this.group_name; } set { this.group_name = value; } }

	public GroupIdToNameBox(): base(IsoStream.FromFourCC("gitn"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.entry_count, "entry_count"); 

		this.group_ID = new uint[IsoStream.GetInt( entry_count)];
		this.group_name = new BinaryUTF8String[IsoStream.GetInt( entry_count)];
		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.group_ID[i], "group_ID"); 
			boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.group_name[i], "group_name"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.entry_count, "entry_count"); 

		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.WriteUInt32( this.group_ID[i], "group_ID"); 
			boxSize += stream.WriteStringZeroTerminated( this.group_name[i], "group_name"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // entry_count

		for (int i=0; i < entry_count; i++)
		{
			boxSize += 32; // group_ID
			boxSize += IsoStream.CalculateStringSize(group_name); // group_name
		}
		return boxSize;
	}
}


/*
aligned(8) class GroupsListBox extends Box('grpl') {
}
*/
public partial class GroupsListBox : Box
{
	public const string TYPE = "grpl";
	public override string DisplayName { get { return "GroupsListBox"; } }

	public GroupsListBox(): base(IsoStream.FromFourCC("grpl"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class HandlerBox extends FullBox('hdlr', version = 0, 0) {
	unsigned int(32)	pre_defined = 0;
	unsigned int(32)	handler_type;
	const unsigned int(32)[3]	reserved = 0;
	utf8string	name;
}
*/
public partial class HandlerBox : FullBox
{
	public const string TYPE = "hdlr";
	public override string DisplayName { get { return "HandlerBox"; } }

	protected uint pre_defined = 0; 
	public uint PreDefined { get { return this.pre_defined; } set { this.pre_defined = value; } }

	protected uint handler_type; 
	public uint HandlerType { get { return this.handler_type; } set { this.handler_type = value; } }

	protected uint[] reserved = []; 
	public uint[] Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected BinaryUTF8String name; 
	public BinaryUTF8String Name { get { return this.name; } set { this.name = value; } }

	public HandlerBox(): base(IsoStream.FromFourCC("hdlr"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.pre_defined, "pre_defined"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.handler_type, "handler_type"); 
		boxSize += stream.ReadUInt32Array(boxSize, readSize, 3,  out this.reserved, "reserved"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.name, "name"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.pre_defined, "pre_defined"); 
		boxSize += stream.WriteUInt32( this.handler_type, "handler_type"); 
		boxSize += stream.WriteUInt32Array(3,  this.reserved, "reserved"); 
		boxSize += stream.WriteStringZeroTerminated( this.name, "name"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // pre_defined
		boxSize += 32; // handler_type
		boxSize += 3 * 32; // reserved
		boxSize += IsoStream.CalculateStringSize(name); // name
		return boxSize;
	}
}


/*
aligned(8) class HintMediaHeaderBox
	extends FullBox('hmhd', version = 0, 0) {
	unsigned int(16)	maxPDUsize;
	unsigned int(16)	avgPDUsize;
	unsigned int(32)	maxbitrate;
	unsigned int(32)	avgbitrate;
	unsigned int(32)	reserved = 0;
}
*/
public partial class HintMediaHeaderBox : FullBox
{
	public const string TYPE = "hmhd";
	public override string DisplayName { get { return "HintMediaHeaderBox"; } }

	protected ushort maxPDUsize; 
	public ushort MaxPDUsize { get { return this.maxPDUsize; } set { this.maxPDUsize = value; } }

	protected ushort avgPDUsize; 
	public ushort AvgPDUsize { get { return this.avgPDUsize; } set { this.avgPDUsize = value; } }

	protected uint maxbitrate; 
	public uint Maxbitrate { get { return this.maxbitrate; } set { this.maxbitrate = value; } }

	protected uint avgbitrate; 
	public uint Avgbitrate { get { return this.avgbitrate; } set { this.avgbitrate = value; } }

	protected uint reserved = 0; 
	public uint Reserved { get { return this.reserved; } set { this.reserved = value; } }

	public HintMediaHeaderBox(): base(IsoStream.FromFourCC("hmhd"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.maxPDUsize, "maxPDUsize"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.avgPDUsize, "avgPDUsize"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.maxbitrate, "maxbitrate"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.avgbitrate, "avgbitrate"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.maxPDUsize, "maxPDUsize"); 
		boxSize += stream.WriteUInt16( this.avgPDUsize, "avgPDUsize"); 
		boxSize += stream.WriteUInt32( this.maxbitrate, "maxbitrate"); 
		boxSize += stream.WriteUInt32( this.avgbitrate, "avgbitrate"); 
		boxSize += stream.WriteUInt32( this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // maxPDUsize
		boxSize += 16; // avgPDUsize
		boxSize += 32; // maxbitrate
		boxSize += 32; // avgbitrate
		boxSize += 32; // reserved
		return boxSize;
	}
}


/*
aligned(8) class ItemDataBox extends Box('idat') {
	bit(8) data[];
}
*/
public partial class ItemDataBox : Box
{
	public const string TYPE = "idat";
	public override string DisplayName { get { return "ItemDataBox"; } }

	protected StreamMarker data; 
	public StreamMarker Data { get { return this.data; } set { this.data = value; } }

	public ItemDataBox(): base(IsoStream.FromFourCC("idat"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class ItemInfoBox
		extends FullBox('iinf', version, 0) {
	if (version == 0) {
		unsigned int(16)	entry_count;
	} else {
		unsigned int(32) entry_count;
	}
	ItemInfoEntry[ entry_count ]		item_infos;
}
*/
public partial class ItemInfoBox : FullBox
{
	public const string TYPE = "iinf";
	public override string DisplayName { get { return "ItemInfoBox"; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }
	public IEnumerable<ItemInfoEntry> ItemInfos { get { return this.children.OfType<ItemInfoEntry>(); } }

	public ItemInfoBox(byte version = 0): base(IsoStream.FromFourCC("iinf"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if (version == 0)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.entry_count, "entry_count"); 
		}

		else 
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 
		}
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.item_infos, "item_infos"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if (version == 0)
		{
			boxSize += stream.WriteUInt16( this.entry_count, "entry_count"); 
		}

		else 
		{
			boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 
		}
		// boxSize += stream.WriteBox( this.item_infos, "item_infos"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if (version == 0)
		{
			boxSize += 16; // entry_count
		}

		else 
		{
			boxSize += 32; // entry_count
		}
		// boxSize += IsoStream.CalculateBoxSize(item_infos); // item_infos
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ItemLocationBox extends FullBox('iloc', version, 0) {
	unsigned int(4)	offset_size;
	unsigned int(4)	length_size;
	unsigned int(4)	base_offset_size;
	if ((version == 1) || (version == 2)) {
		unsigned int(4)	index_size;
	} else {
		unsigned int(4)	reserved;
	}
	if (version < 2) {
		unsigned int(16)	item_count;
	} else if (version == 2) {
		unsigned int(32)	item_count;
	}
	for (i=0; i<item_count; i++) {
		if (version < 2) {
			unsigned int(16)	item_ID;
		} else if (version == 2) {
			unsigned int(32)	item_ID;
		}
		if ((version == 1) || (version == 2)) {
			unsigned int(12)	reserved = 0;
			unsigned int(4)	construction_method;
		}
		unsigned int(16)	data_reference_index;
		unsigned int(base_offset_size*8)	base_offset;
		unsigned int(16)		extent_count;
		for (j=0; j<extent_count; j++) {
			if (((version == 1) || (version == 2)) && (index_size > 0)) {
				unsigned int(index_size*8)	item_reference_index;
			}
			unsigned int(offset_size*8)	extent_offset;
			unsigned int(length_size*8)	extent_length;
		}
	}
}
*/
public partial class ItemLocationBox : FullBox
{
	public const string TYPE = "iloc";
	public override string DisplayName { get { return "ItemLocationBox"; } }

	protected byte offset_size; 
	public byte OffsetSize { get { return this.offset_size; } set { this.offset_size = value; } }

	protected byte length_size; 
	public byte LengthSize { get { return this.length_size; } set { this.length_size = value; } }

	protected byte base_offset_size; 
	public byte BaseOffsetSize { get { return this.base_offset_size; } set { this.base_offset_size = value; } }

	protected byte index_size; 
	public byte IndexSize { get { return this.index_size; } set { this.index_size = value; } }

	protected byte reserved; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected uint item_count; 
	public uint ItemCount { get { return this.item_count; } set { this.item_count = value; } }

	protected uint[] item_ID; 
	public uint[] ItemID { get { return this.item_ID; } set { this.item_ID = value; } }

	protected ushort[] reserved0; 
	public ushort[] Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected byte[] construction_method; 
	public byte[] ConstructionMethod { get { return this.construction_method; } set { this.construction_method = value; } }

	protected ushort[] data_reference_index; 
	public ushort[] DataReferenceIndex { get { return this.data_reference_index; } set { this.data_reference_index = value; } }

	protected byte[][] base_offset; 
	public byte[][] BaseOffset { get { return this.base_offset; } set { this.base_offset = value; } }

	protected ushort[] extent_count; 
	public ushort[] ExtentCount { get { return this.extent_count; } set { this.extent_count = value; } }

	protected byte[][][] item_reference_index; 
	public byte[][][] ItemReferenceIndex { get { return this.item_reference_index; } set { this.item_reference_index = value; } }

	protected byte[][][] extent_offset; 
	public byte[][][] ExtentOffset { get { return this.extent_offset; } set { this.extent_offset = value; } }

	protected byte[][][] extent_length; 
	public byte[][][] ExtentLength { get { return this.extent_length; } set { this.extent_length = value; } }

	public ItemLocationBox(byte version = 0): base(IsoStream.FromFourCC("iloc"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.offset_size, "offset_size"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.length_size, "length_size"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.base_offset_size, "base_offset_size"); 

		if ((version == 1) || (version == 2))
		{
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.index_size, "index_size"); 
		}

		else 
		{
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.reserved, "reserved"); 
		}

		if (version < 2)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.item_count, "item_count"); 
		}

		else if (version == 2)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.item_count, "item_count"); 
		}

		this.item_ID = new uint[IsoStream.GetInt(item_count)];
		this.reserved0 = new ushort[IsoStream.GetInt(item_count)];
		this.construction_method = new byte[IsoStream.GetInt(item_count)];
		this.data_reference_index = new ushort[IsoStream.GetInt(item_count)];
		this.base_offset = new byte[IsoStream.GetInt(item_count)][];
		this.extent_count = new ushort[IsoStream.GetInt(item_count)];
		this.item_reference_index = new byte[IsoStream.GetInt(item_count)][][];
		this.extent_offset = new byte[IsoStream.GetInt(item_count)][][];
		this.extent_length = new byte[IsoStream.GetInt(item_count)][][];
		for (int i=0; i<item_count; i++)
		{

			if (version < 2)
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.item_ID[i], "item_ID"); 
			}

			else if (version == 2)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.item_ID[i], "item_ID"); 
			}

			if ((version == 1) || (version == 2))
			{
				boxSize += stream.ReadBits(boxSize, readSize, 12,  out this.reserved0[i], "reserved0"); 
				boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.construction_method[i], "construction_method"); 
			}
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.data_reference_index[i], "data_reference_index"); 
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(base_offset_size*8 ),  out this.base_offset[i], "base_offset"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.extent_count[i], "extent_count"); 

			this.item_reference_index[i] = new byte[IsoStream.GetInt(extent_count[i])][];
			this.extent_offset[i] = new byte[IsoStream.GetInt(extent_count[i])][];
			this.extent_length[i] = new byte[IsoStream.GetInt(extent_count[i])][];
			for (int j=0; j<extent_count[i]; j++)
			{

				if (((version == 1) || (version == 2)) && (index_size > 0))
				{
					boxSize += stream.ReadBits(boxSize, readSize, (uint)(index_size*8 ),  out this.item_reference_index[i][j], "item_reference_index"); 
				}
				boxSize += stream.ReadBits(boxSize, readSize, (uint)(offset_size*8 ),  out this.extent_offset[i][j], "extent_offset"); 
				boxSize += stream.ReadBits(boxSize, readSize, (uint)(length_size*8 ),  out this.extent_length[i][j], "extent_length"); 
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(4,  this.offset_size, "offset_size"); 
		boxSize += stream.WriteBits(4,  this.length_size, "length_size"); 
		boxSize += stream.WriteBits(4,  this.base_offset_size, "base_offset_size"); 

		if ((version == 1) || (version == 2))
		{
			boxSize += stream.WriteBits(4,  this.index_size, "index_size"); 
		}

		else 
		{
			boxSize += stream.WriteBits(4,  this.reserved, "reserved"); 
		}

		if (version < 2)
		{
			boxSize += stream.WriteUInt16( this.item_count, "item_count"); 
		}

		else if (version == 2)
		{
			boxSize += stream.WriteUInt32( this.item_count, "item_count"); 
		}

		for (int i=0; i<item_count; i++)
		{

			if (version < 2)
			{
				boxSize += stream.WriteUInt16( this.item_ID[i], "item_ID"); 
			}

			else if (version == 2)
			{
				boxSize += stream.WriteUInt32( this.item_ID[i], "item_ID"); 
			}

			if ((version == 1) || (version == 2))
			{
				boxSize += stream.WriteBits(12,  this.reserved0[i], "reserved0"); 
				boxSize += stream.WriteBits(4,  this.construction_method[i], "construction_method"); 
			}
			boxSize += stream.WriteUInt16( this.data_reference_index[i], "data_reference_index"); 
			boxSize += stream.WriteBits((uint)(base_offset_size*8 ),  this.base_offset[i], "base_offset"); 
			boxSize += stream.WriteUInt16( this.extent_count[i], "extent_count"); 

			for (int j=0; j<extent_count[i]; j++)
			{

				if (((version == 1) || (version == 2)) && (index_size > 0))
				{
					boxSize += stream.WriteBits((uint)(index_size*8 ),  this.item_reference_index[i][j], "item_reference_index"); 
				}
				boxSize += stream.WriteBits((uint)(offset_size*8 ),  this.extent_offset[i][j], "extent_offset"); 
				boxSize += stream.WriteBits((uint)(length_size*8 ),  this.extent_length[i][j], "extent_length"); 
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 4; // offset_size
		boxSize += 4; // length_size
		boxSize += 4; // base_offset_size

		if ((version == 1) || (version == 2))
		{
			boxSize += 4; // index_size
		}

		else 
		{
			boxSize += 4; // reserved
		}

		if (version < 2)
		{
			boxSize += 16; // item_count
		}

		else if (version == 2)
		{
			boxSize += 32; // item_count
		}

		for (int i=0; i<item_count; i++)
		{

			if (version < 2)
			{
				boxSize += 16; // item_ID
			}

			else if (version == 2)
			{
				boxSize += 32; // item_ID
			}

			if ((version == 1) || (version == 2))
			{
				boxSize += 12; // reserved0
				boxSize += 4; // construction_method
			}
			boxSize += 16; // data_reference_index
			boxSize += (ulong)(base_offset_size*8 ); // base_offset
			boxSize += 16; // extent_count

			for (int j=0; j<extent_count[i]; j++)
			{

				if (((version == 1) || (version == 2)) && (index_size > 0))
				{
					boxSize += (ulong)(index_size*8 ); // item_reference_index
				}
				boxSize += (ulong)(offset_size*8 ); // extent_offset
				boxSize += (ulong)(length_size*8 ); // extent_length
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class IdentifiedMediaDataBox extends Box('imda') {
	unsigned int(32) imda_identifier;
	bit(8) data[]; // until the end of the box
}
*/
public partial class IdentifiedMediaDataBox : Box
{
	public const string TYPE = "imda";
	public override string DisplayName { get { return "IdentifiedMediaDataBox"; } }

	protected uint imda_identifier; 
	public uint ImdaIdentifier { get { return this.imda_identifier; } set { this.imda_identifier = value; } }

	protected byte[] data;  //  until the end of the box
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public IdentifiedMediaDataBox(): base(IsoStream.FromFourCC("imda"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.imda_identifier, "imda_identifier"); 
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); // until the end of the box
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.imda_identifier, "imda_identifier"); 
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); // until the end of the box
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // imda_identifier
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class ItemInfoEntry
		extends FullBox('infe', version, flags) {
	if ((version == 0) || (version == 1)) {
		unsigned int(16) item_ID;
		unsigned int(16) item_protection_index;
		utf8string item_name;
		utf8string content_type;
		utf8string content_encoding; //optional
	}
	if (version == 1) {
		unsigned int(32) extension_type; //optional
		ItemInfoExtension(extension_type); //optional
	}
	if (version >= 2) {
		if (version == 2) {
			unsigned int(16) item_ID;
		} else if (version == 3) {
			unsigned int(32) item_ID;
		}
		unsigned int(16) item_protection_index;
		unsigned int(32) item_type;
		utf8string item_name;
		if (item_type=='mime') {
			utf8string content_type;
			utf8string content_encoding; //optional
		} else if (item_type == 'uri ') {
			utf8string item_uri_type;
		}
	}
}
*/
public partial class ItemInfoEntry : FullBox
{
	public const string TYPE = "infe";
	public override string DisplayName { get { return "ItemInfoEntry"; } }

	protected uint item_ID; 
	public uint ItemID { get { return this.item_ID; } set { this.item_ID = value; } }

	protected ushort item_protection_index; 
	public ushort ItemProtectionIndex { get { return this.item_protection_index; } set { this.item_protection_index = value; } }

	protected BinaryUTF8String item_name; 
	public BinaryUTF8String ItemName { get { return this.item_name; } set { this.item_name = value; } }

	protected BinaryUTF8String content_type; 
	public BinaryUTF8String ContentType { get { return this.content_type; } set { this.content_type = value; } }

	protected BinaryUTF8String content_encoding;  // optional
	public BinaryUTF8String ContentEncoding { get { return this.content_encoding; } set { this.content_encoding = value; } }

	protected uint extension_type;  // optional
	public uint ExtensionType { get { return this.extension_type; } set { this.extension_type = value; } }

	protected ItemInfoExtension ItemInfoExtension;  // optional
	public ItemInfoExtension _ItemInfoExtension { get { return this.ItemInfoExtension; } set { this.ItemInfoExtension = value; } }

	protected uint item_type; 
	public uint ItemType { get { return this.item_type; } set { this.item_type = value; } }

	protected BinaryUTF8String item_uri_type; 
	public BinaryUTF8String ItemUriType { get { return this.item_uri_type; } set { this.item_uri_type = value; } }

	public ItemInfoEntry(byte version = 0, uint flags = 0): base(IsoStream.FromFourCC("infe"), version, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if ((version == 0) || (version == 1))
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.item_ID, "item_ID"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.item_protection_index, "item_protection_index"); 
			boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.item_name, "item_name"); 
			boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.content_type, "content_type"); 
			if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.content_encoding, "content_encoding"); //optional
		}

		if (version == 1)
		{
			if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadUInt32(boxSize, readSize,  out this.extension_type, "extension_type"); //optional
			if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadClass(boxSize, readSize, this, () => new ItemInfoExtension(extension_type),  out this.ItemInfoExtension, "ItemInfoExtension"); //optional
		}

		if (version >= 2)
		{

			if (version == 2)
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.item_ID, "item_ID"); 
			}

			else if (version == 3)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.item_ID, "item_ID"); 
			}
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.item_protection_index, "item_protection_index"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.item_type, "item_type"); 
			boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.item_name, "item_name"); 

			if (item_type==IsoStream.FromFourCC("mime"))
			{
				boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.content_type, "content_type"); 
				if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.content_encoding, "content_encoding"); //optional
			}

			else if (item_type == IsoStream.FromFourCC("uri "))
			{
				boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.item_uri_type, "item_uri_type"); 
			}
		}
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if ((version == 0) || (version == 1))
		{
			boxSize += stream.WriteUInt16( this.item_ID, "item_ID"); 
			boxSize += stream.WriteUInt16( this.item_protection_index, "item_protection_index"); 
			boxSize += stream.WriteStringZeroTerminated( this.item_name, "item_name"); 
			boxSize += stream.WriteStringZeroTerminated( this.content_type, "content_type"); 
			boxSize += stream.WriteStringZeroTerminated( this.content_encoding, "content_encoding"); //optional
		}

		if (version == 1)
		{
			boxSize += stream.WriteUInt32( this.extension_type, "extension_type"); //optional
			boxSize += stream.WriteClass( this.ItemInfoExtension, "ItemInfoExtension"); //optional
		}

		if (version >= 2)
		{

			if (version == 2)
			{
				boxSize += stream.WriteUInt16( this.item_ID, "item_ID"); 
			}

			else if (version == 3)
			{
				boxSize += stream.WriteUInt32( this.item_ID, "item_ID"); 
			}
			boxSize += stream.WriteUInt16( this.item_protection_index, "item_protection_index"); 
			boxSize += stream.WriteUInt32( this.item_type, "item_type"); 
			boxSize += stream.WriteStringZeroTerminated( this.item_name, "item_name"); 

			if (item_type==IsoStream.FromFourCC("mime"))
			{
				boxSize += stream.WriteStringZeroTerminated( this.content_type, "content_type"); 
				boxSize += stream.WriteStringZeroTerminated( this.content_encoding, "content_encoding"); //optional
			}

			else if (item_type == IsoStream.FromFourCC("uri "))
			{
				boxSize += stream.WriteStringZeroTerminated( this.item_uri_type, "item_uri_type"); 
			}
		}
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if ((version == 0) || (version == 1))
		{
			boxSize += 16; // item_ID
			boxSize += 16; // item_protection_index
			boxSize += IsoStream.CalculateStringSize(item_name); // item_name
			boxSize += IsoStream.CalculateStringSize(content_type); // content_type
			boxSize += IsoStream.CalculateStringSize(content_encoding); // content_encoding
		}

		if (version == 1)
		{
			boxSize += 32; // extension_type
			boxSize += IsoStream.CalculateClassSize(ItemInfoExtension); // ItemInfoExtension
		}

		if (version >= 2)
		{

			if (version == 2)
			{
				boxSize += 16; // item_ID
			}

			else if (version == 3)
			{
				boxSize += 32; // item_ID
			}
			boxSize += 16; // item_protection_index
			boxSize += 32; // item_type
			boxSize += IsoStream.CalculateStringSize(item_name); // item_name

			if (item_type==IsoStream.FromFourCC("mime"))
			{
				boxSize += IsoStream.CalculateStringSize(content_type); // content_type
				boxSize += IsoStream.CalculateStringSize(content_encoding); // content_encoding
			}

			else if (item_type == IsoStream.FromFourCC("uri "))
			{
				boxSize += IsoStream.CalculateStringSize(item_uri_type); // item_uri_type
			}
		}
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ItemProtectionBox
		extends FullBox('ipro', version = 0, 0) {
	unsigned int(16) protection_count;
	for (i=1; i<=protection_count; i++) {
		ProtectionSchemeInfoBox	protection_information;
	}
}
*/
public partial class ItemProtectionBox : FullBox
{
	public const string TYPE = "ipro";
	public override string DisplayName { get { return "ItemProtectionBox"; } }

	protected ushort protection_count; 
	public ushort ProtectionCount { get { return this.protection_count; } set { this.protection_count = value; } }
	public IEnumerable<ProtectionSchemeInfoBox> ProtectionInformation { get { return this.children.OfType<ProtectionSchemeInfoBox>(); } }

	public ItemProtectionBox(): base(IsoStream.FromFourCC("ipro"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.protection_count, "protection_count"); 

		for (int i=0; i<protection_count; i++)
		{
			// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.protection_information[i], "protection_information"); 
		}
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.protection_count, "protection_count"); 

		for (int i=0; i<protection_count; i++)
		{
			// boxSize += stream.WriteBox( this.protection_information[i], "protection_information"); 
		}
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // protection_count

		for (int i=0; i<protection_count; i++)
		{
			// boxSize += IsoStream.CalculateBoxSize(protection_information); // protection_information
		}
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ItemReferenceBox extends FullBox('iref', version, 0) {
	if (version==0) {
		SingleItemTypeReferenceBox				references[];
	} else if (version==1) {
		SingleItemTypeReferenceBoxLarge	references[];
	}
}
*/
public partial class ItemReferenceBox : FullBox
{
	public const string TYPE = "iref";
	public override string DisplayName { get { return "ItemReferenceBox"; } }

	protected SingleItemTypeReferenceBox[] references; 
	public SingleItemTypeReferenceBox[] References { get { return this.references; } set { this.references = value; } }

	protected SingleItemTypeReferenceBoxLarge[] references0; 
	public SingleItemTypeReferenceBoxLarge[] References0 { get { return this.references0; } set { this.references0 = value; } }

	public ItemReferenceBox(byte version = 0): base(IsoStream.FromFourCC("iref"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if (version==0)
		{
			boxSize += stream.ReadBox(boxSize, readSize, (boxHeader) => new SingleItemTypeReferenceBox(boxHeader.Type), this, out this.references, "references"); 
		}

		else if (version==1)
		{
			boxSize += stream.ReadBox(boxSize, readSize, (boxHeader) => new SingleItemTypeReferenceBoxLarge(boxHeader.Type), this, out this.references0, "references0"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if (version==0)
		{
			boxSize += stream.WriteBox( this.references, "references"); 
		}

		else if (version==1)
		{
			boxSize += stream.WriteBox( this.references0, "references0"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if (version==0)
		{
			boxSize += IsoStream.CalculateBoxSize(references); // references
		}

		else if (version==1)
		{
			boxSize += IsoStream.CalculateBoxSize(references0); // references0
		}
		return boxSize;
	}
}


/*
aligned(8) class LevelAssignmentBox extends FullBox('leva', 0, 0)
{
	unsigned int(8)	level_count;
	for (j=1; j <= level_count; j++) {
		unsigned int(32)	track_ID;
		unsigned int(1)	padding_flag;
		unsigned int(7)	assignment_type;
		if (assignment_type == 0) {
			unsigned int(32)	grouping_type;
		}
		else if (assignment_type == 1) {
			unsigned int(32)	grouping_type;
			unsigned int(32)	grouping_type_parameter;
		}
		else if (assignment_type == 2) {}
			// no further syntax elements needed
		else if (assignment_type == 3) {}
			// no further syntax elements needed
		else if (assignment_type == 4) {
			unsigned int(32) sub_track_ID;
		}
		// other assignment_type values are reserved
	}
}
*/
public partial class LevelAssignmentBox : FullBox
{
	public const string TYPE = "leva";
	public override string DisplayName { get { return "LevelAssignmentBox"; } }

	protected byte level_count; 
	public byte LevelCount { get { return this.level_count; } set { this.level_count = value; } }

	protected uint[] track_ID; 
	public uint[] TrackID { get { return this.track_ID; } set { this.track_ID = value; } }

	protected bool[] padding_flag; 
	public bool[] PaddingFlag { get { return this.padding_flag; } set { this.padding_flag = value; } }

	protected byte[] assignment_type; 
	public byte[] AssignmentType { get { return this.assignment_type; } set { this.assignment_type = value; } }

	protected uint[] grouping_type; 
	public uint[] GroupingType { get { return this.grouping_type; } set { this.grouping_type = value; } }

	protected uint[] grouping_type_parameter; 
	public uint[] GroupingTypeParameter { get { return this.grouping_type_parameter; } set { this.grouping_type_parameter = value; } }

	protected uint[] sub_track_ID; 
	public uint[] SubTrackID { get { return this.sub_track_ID; } set { this.sub_track_ID = value; } }

	public LevelAssignmentBox(): base(IsoStream.FromFourCC("leva"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.level_count, "level_count"); 

		this.track_ID = new uint[IsoStream.GetInt( level_count)];
		this.padding_flag = new bool[IsoStream.GetInt( level_count)];
		this.assignment_type = new byte[IsoStream.GetInt( level_count)];
		this.grouping_type = new uint[IsoStream.GetInt( level_count)];
		this.grouping_type_parameter = new uint[IsoStream.GetInt( level_count)];
		this.sub_track_ID = new uint[IsoStream.GetInt( level_count)];
		for (int j=0; j < level_count; j++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.track_ID[j], "track_ID"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.padding_flag[j], "padding_flag"); 
			boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.assignment_type[j], "assignment_type"); 

			if (assignment_type[j] == 0)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.grouping_type[j], "grouping_type"); 
			}

			else if (assignment_type[j] == 1)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.grouping_type[j], "grouping_type"); 
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.grouping_type_parameter[j], "grouping_type_parameter"); 
			}

			else if (assignment_type[j] == 2)
			{
			}
			/*  no further syntax elements needed */

			else if (assignment_type[j] == 3)
			{
			}
			/*  no further syntax elements needed */

			else if (assignment_type[j] == 4)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sub_track_ID[j], "sub_track_ID"); 
			}
			/*  other assignment_type values are reserved */
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.level_count, "level_count"); 

		for (int j=0; j < level_count; j++)
		{
			boxSize += stream.WriteUInt32( this.track_ID[j], "track_ID"); 
			boxSize += stream.WriteBit( this.padding_flag[j], "padding_flag"); 
			boxSize += stream.WriteBits(7,  this.assignment_type[j], "assignment_type"); 

			if (assignment_type[j] == 0)
			{
				boxSize += stream.WriteUInt32( this.grouping_type[j], "grouping_type"); 
			}

			else if (assignment_type[j] == 1)
			{
				boxSize += stream.WriteUInt32( this.grouping_type[j], "grouping_type"); 
				boxSize += stream.WriteUInt32( this.grouping_type_parameter[j], "grouping_type_parameter"); 
			}

			else if (assignment_type[j] == 2)
			{
			}
			/*  no further syntax elements needed */

			else if (assignment_type[j] == 3)
			{
			}
			/*  no further syntax elements needed */

			else if (assignment_type[j] == 4)
			{
				boxSize += stream.WriteUInt32( this.sub_track_ID[j], "sub_track_ID"); 
			}
			/*  other assignment_type values are reserved */
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // level_count

		for (int j=0; j < level_count; j++)
		{
			boxSize += 32; // track_ID
			boxSize += 1; // padding_flag
			boxSize += 7; // assignment_type

			if (assignment_type[j] == 0)
			{
				boxSize += 32; // grouping_type
			}

			else if (assignment_type[j] == 1)
			{
				boxSize += 32; // grouping_type
				boxSize += 32; // grouping_type_parameter
			}

			else if (assignment_type[j] == 2)
			{
			}
			/*  no further syntax elements needed */

			else if (assignment_type[j] == 3)
			{
			}
			/*  no further syntax elements needed */

			else if (assignment_type[j] == 4)
			{
				boxSize += 32; // sub_track_ID
			}
			/*  other assignment_type values are reserved */
		}
		return boxSize;
	}
}


/*
aligned(8) class MediaDataBox extends Box('mdat') {
	bit(8) data[];
}
*/
public partial class MediaDataBox : Box
{
	public const string TYPE = "mdat";
	public override string DisplayName { get { return "MediaDataBox"; } }

	protected StreamMarker data; 
	public StreamMarker Data { get { return this.data; } set { this.data = value; } }

	public MediaDataBox(): base(IsoStream.FromFourCC("mdat"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class MediaHeaderBox extends FullBox('mdhd', version, 0) {
	if (version==1) {
		unsigned int(64)	creation_time;
		unsigned int(64)	modification_time;
		unsigned int(32)	timescale;
		unsigned int(64)	duration;
	} else { // version==0
		unsigned int(32)	creation_time;
		unsigned int(32)	modification_time;
		unsigned int(32)	timescale;
		unsigned int(32)	duration;
	}
	bit(1)	pad = 0;
	unsigned int(5)[3]	language;	// ISO-639-2/T language code
	unsigned int(16)	pre_defined = 0;
}
*/
public partial class MediaHeaderBox : FullBox
{
	public const string TYPE = "mdhd";
	public override string DisplayName { get { return "MediaHeaderBox"; } }

	protected ulong creation_time; 
	public ulong CreationTime { get { return this.creation_time; } set { this.creation_time = value; } }

	protected ulong modification_time; 
	public ulong ModificationTime { get { return this.modification_time; } set { this.modification_time = value; } }

	protected uint timescale; 
	public uint Timescale { get { return this.timescale; } set { this.timescale = value; } }

	protected ulong duration; 
	public ulong Duration { get { return this.duration; } set { this.duration = value; } }

	protected bool pad = false; 
	public bool Pad { get { return this.pad; } set { this.pad = value; } }

	protected string language;  //  ISO-639-2/T language code
	public string Language { get { return this.language; } set { this.language = value; } }

	protected ushort pre_defined = 0; 
	public ushort PreDefined { get { return this.pre_defined; } set { this.pre_defined = value; } }

	public MediaHeaderBox(byte version = 0): base(IsoStream.FromFourCC("mdhd"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if (version==1)
		{
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.creation_time, "creation_time"); 
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.modification_time, "modification_time"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.timescale, "timescale"); 
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.duration, "duration"); 
		}

		else 
		{
			/*  version==0 */
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.creation_time, "creation_time"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.modification_time, "modification_time"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.timescale, "timescale"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.duration, "duration"); 
		}
		boxSize += stream.ReadBit(boxSize, readSize,  out this.pad, "pad"); 
		boxSize += stream.ReadIso639(boxSize, readSize,  out this.language, "language"); // ISO-639-2/T language code
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.pre_defined, "pre_defined"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if (version==1)
		{
			boxSize += stream.WriteUInt64( this.creation_time, "creation_time"); 
			boxSize += stream.WriteUInt64( this.modification_time, "modification_time"); 
			boxSize += stream.WriteUInt32( this.timescale, "timescale"); 
			boxSize += stream.WriteUInt64( this.duration, "duration"); 
		}

		else 
		{
			/*  version==0 */
			boxSize += stream.WriteUInt32( this.creation_time, "creation_time"); 
			boxSize += stream.WriteUInt32( this.modification_time, "modification_time"); 
			boxSize += stream.WriteUInt32( this.timescale, "timescale"); 
			boxSize += stream.WriteUInt32( this.duration, "duration"); 
		}
		boxSize += stream.WriteBit( this.pad, "pad"); 
		boxSize += stream.WriteIso639( this.language, "language"); // ISO-639-2/T language code
		boxSize += stream.WriteUInt16( this.pre_defined, "pre_defined"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if (version==1)
		{
			boxSize += 64; // creation_time
			boxSize += 64; // modification_time
			boxSize += 32; // timescale
			boxSize += 64; // duration
		}

		else 
		{
			/*  version==0 */
			boxSize += 32; // creation_time
			boxSize += 32; // modification_time
			boxSize += 32; // timescale
			boxSize += 32; // duration
		}
		boxSize += 1; // pad
		boxSize += 15; // language
		boxSize += 16; // pre_defined
		return boxSize;
	}
}


/*
aligned(8) class MediaBox extends Box('mdia') {
}
*/
public partial class MediaBox : Box
{
	public const string TYPE = "mdia";
	public override string DisplayName { get { return "MediaBox"; } }

	public MediaBox(): base(IsoStream.FromFourCC("mdia"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class MovieExtendsHeaderBox extends FullBox('mehd', version, 0) {
	if (version==1) {
		unsigned int(64)	fragment_duration;
	} else { // version==0
		unsigned int(32)	fragment_duration;
	}
}
*/
public partial class MovieExtendsHeaderBox : FullBox
{
	public const string TYPE = "mehd";
	public override string DisplayName { get { return "MovieExtendsHeaderBox"; } }

	protected ulong fragment_duration; 
	public ulong FragmentDuration { get { return this.fragment_duration; } set { this.fragment_duration = value; } }

	public MovieExtendsHeaderBox(byte version = 0): base(IsoStream.FromFourCC("mehd"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if (version==1)
		{
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.fragment_duration, "fragment_duration"); 
		}

		else 
		{
			/*  version==0 */
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.fragment_duration, "fragment_duration"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if (version==1)
		{
			boxSize += stream.WriteUInt64( this.fragment_duration, "fragment_duration"); 
		}

		else 
		{
			/*  version==0 */
			boxSize += stream.WriteUInt32( this.fragment_duration, "fragment_duration"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if (version==1)
		{
			boxSize += 64; // fragment_duration
		}

		else 
		{
			/*  version==0 */
			boxSize += 32; // fragment_duration
		}
		return boxSize;
	}
}


/*
aligned(8) class MetaBox (handler_type)
	extends FullBox('meta', version = 0, 0) {
	HandlerBox(handler_type)	theHandler;
	PrimaryItemBox		primary_resource;		// optional
	DataInformationBox	file_locations;		// optional
	ItemLocationBox		item_locations;		// optional
	ItemProtectionBox	protections;			// optional
	ItemInfoBox			item_infos;				// optional
	IPMPControlBox		IPMP_control;			// optional
	ItemReferenceBox		item_refs;					// optional
	ItemDataBox			item_data;					// optional
	Box	other_boxes[];								// optional
}
*/
public partial class MetaBox : FullBox
{
	public const string TYPE = "meta";
	public override string DisplayName { get { return "MetaBox"; } }
	public HandlerBox TheHandler { get { return this.children.OfType<HandlerBox>().FirstOrDefault(); } }
	public PrimaryItemBox PrimaryResource { get { return this.children.OfType<PrimaryItemBox>().FirstOrDefault(); } }
	public DataInformationBox FileLocations { get { return this.children.OfType<DataInformationBox>().FirstOrDefault(); } }
	public ItemLocationBox ItemLocations { get { return this.children.OfType<ItemLocationBox>().FirstOrDefault(); } }
	public ItemProtectionBox Protections { get { return this.children.OfType<ItemProtectionBox>().FirstOrDefault(); } }
	public ItemInfoBox ItemInfos { get { return this.children.OfType<ItemInfoBox>().FirstOrDefault(); } }
	public IPMPControlBox IPMPControl { get { return this.children.OfType<IPMPControlBox>().FirstOrDefault(); } }
	public ItemReferenceBox ItemRefs { get { return this.children.OfType<ItemReferenceBox>().FirstOrDefault(); } }
	public ItemDataBox ItemData { get { return this.children.OfType<ItemDataBox>().FirstOrDefault(); } }
	public IEnumerable<Box> OtherBoxes { get { return this.children.OfType<Box>(); } }
public bool IsQuickTime { get { return (GetParent() == null || (((Box)GetParent()).FourCC == IsoStream.FromFourCC("udta") || ((Box)GetParent()).FourCC == IsoStream.FromFourCC("trak"))); } }

	public MetaBox(uint handler_type = 0): base(IsoStream.FromFourCC("meta"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		if(IsQuickTime) boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.theHandler, "theHandler"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.primary_resource, "primary_resource"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.file_locations, "file_locations"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.item_locations, "item_locations"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.protections, "protections"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.item_infos, "item_infos"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.IPMP_control, "IPMP_control"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.item_refs, "item_refs"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.item_data, "item_data"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.other_boxes, "other_boxes"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		if(IsQuickTime) boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.theHandler, "theHandler"); 
		// boxSize += stream.WriteBox( this.primary_resource, "primary_resource"); // optional
		// boxSize += stream.WriteBox( this.file_locations, "file_locations"); // optional
		// boxSize += stream.WriteBox( this.item_locations, "item_locations"); // optional
		// boxSize += stream.WriteBox( this.protections, "protections"); // optional
		// boxSize += stream.WriteBox( this.item_infos, "item_infos"); // optional
		// boxSize += stream.WriteBox( this.IPMP_control, "IPMP_control"); // optional
		// boxSize += stream.WriteBox( this.item_refs, "item_refs"); // optional
		// boxSize += stream.WriteBox( this.item_data, "item_data"); // optional
		// boxSize += stream.WriteBox( this.other_boxes, "other_boxes"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		if(IsQuickTime) boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(theHandler); // theHandler
		// boxSize += IsoStream.CalculateBoxSize(primary_resource); // primary_resource
		// boxSize += IsoStream.CalculateBoxSize(file_locations); // file_locations
		// boxSize += IsoStream.CalculateBoxSize(item_locations); // item_locations
		// boxSize += IsoStream.CalculateBoxSize(protections); // protections
		// boxSize += IsoStream.CalculateBoxSize(item_infos); // item_infos
		// boxSize += IsoStream.CalculateBoxSize(IPMP_control); // IPMP_control
		// boxSize += IsoStream.CalculateBoxSize(item_refs); // item_refs
		// boxSize += IsoStream.CalculateBoxSize(item_data); // item_data
		// boxSize += IsoStream.CalculateBoxSize(other_boxes); // other_boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class MovieFragmentHeaderBox
			extends FullBox('mfhd', 0, 0){
	unsigned int(32)	sequence_number;
}
*/
public partial class MovieFragmentHeaderBox : FullBox
{
	public const string TYPE = "mfhd";
	public override string DisplayName { get { return "MovieFragmentHeaderBox"; } }

	protected uint sequence_number; 
	public uint SequenceNumber { get { return this.sequence_number; } set { this.sequence_number = value; } }

	public MovieFragmentHeaderBox(): base(IsoStream.FromFourCC("mfhd"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sequence_number, "sequence_number"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.sequence_number, "sequence_number"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // sequence_number
		return boxSize;
	}
}


/*
aligned(8) class MovieFragmentRandomAccessBox
	extends Box('mfra')
{
}
*/
public partial class MovieFragmentRandomAccessBox : Box
{
	public const string TYPE = "mfra";
	public override string DisplayName { get { return "MovieFragmentRandomAccessBox"; } }

	public MovieFragmentRandomAccessBox(): base(IsoStream.FromFourCC("mfra"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class MovieFragmentRandomAccessOffsetBox
 extends FullBox('mfro', version, 0) {
	unsigned int(32)	parent_size;
}
*/
public partial class MovieFragmentRandomAccessOffsetBox : FullBox
{
	public const string TYPE = "mfro";
	public override string DisplayName { get { return "MovieFragmentRandomAccessOffsetBox"; } }

	protected uint parent_size; 
	public uint ParentSize { get { return this.parent_size; } set { this.parent_size = value; } }

	public MovieFragmentRandomAccessOffsetBox(byte version = 0): base(IsoStream.FromFourCC("mfro"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.parent_size, "parent_size"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.parent_size, "parent_size"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // parent_size
		return boxSize;
	}
}


/*
aligned(8) class MediaInformationBox extends Box('minf') {
}
*/
public partial class MediaInformationBox : Box
{
	public const string TYPE = "minf";
	public override string DisplayName { get { return "MediaInformationBox"; } }

	public MediaInformationBox(): base(IsoStream.FromFourCC("minf"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class CompressedMovieFragmentBox
	extends CompressedBox('!mof', 'moof') {
}

*/
public partial class CompressedMovieFragmentBox : CompressedBox
{
	public const string TYPE = "moof";
	public override string DisplayName { get { return "CompressedMovieFragmentBox"; } }

	public CompressedMovieFragmentBox(): base(IsoStream.FromFourCC("moof"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class CompressedMovieBox
	extends CompressedBox('!mov', 'moov') {
}
*/
public partial class CompressedMovieBox : CompressedBox
{
	public const string TYPE = "moov";
	public override string DisplayName { get { return "CompressedMovieBox"; } }

	public CompressedMovieBox(): base(IsoStream.FromFourCC("moov"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class MovieExtendsBox extends Box('mvex'){
}
*/
public partial class MovieExtendsBox : Box
{
	public const string TYPE = "mvex";
	public override string DisplayName { get { return "MovieExtendsBox"; } }

	public MovieExtendsBox(): base(IsoStream.FromFourCC("mvex"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class MovieHeaderBox extends FullBox('mvhd', version, 0) {
	if (version==1) {
		unsigned int(64)	creation_time;
		unsigned int(64)	modification_time;
		unsigned int(32)	timescale;
		unsigned int(64)	duration;
	} else { // version==0
		unsigned int(32)	creation_time;
		unsigned int(32)	modification_time;
		unsigned int(32)	timescale;
		unsigned int(32)	duration;
	}
	template int(32)	rate = 0x00010000;	// typically 1.0
	template int(16)	volume = 0x0100;	// typically, full volume
	const bit(16)	reserved = 0;
	const unsigned int(32)[2]	reserved = 0;
	template int(32)[9]	matrix =
		{ 0x00010000,0,0,0,0x00010000,0,0,0,0x40000000 };
		// Unity matrix
	bit(32)[6]	pre_defined = 0;
	unsigned int(32)	next_track_ID;
}
*/
public partial class MovieHeaderBox : FullBox
{
	public const string TYPE = "mvhd";
	public override string DisplayName { get { return "MovieHeaderBox"; } }

	protected ulong creation_time; 
	public ulong CreationTime { get { return this.creation_time; } set { this.creation_time = value; } }

	protected ulong modification_time; 
	public ulong ModificationTime { get { return this.modification_time; } set { this.modification_time = value; } }

	protected uint timescale; 
	public uint Timescale { get { return this.timescale; } set { this.timescale = value; } }

	protected ulong duration; 
	public ulong Duration { get { return this.duration; } set { this.duration = value; } }

	protected int rate = 0x00010000;  //  typically 1.0
	public int Rate { get { return this.rate; } set { this.rate = value; } }

	protected short volume = 0x0100;  //  typically, full volume
	public short Volume { get { return this.volume; } set { this.volume = value; } }

	protected ushort reserved = 0; 
	public ushort Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected uint[] reserved0 = []; 
	public uint[] Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected int[] matrix =
		{ 0x00010000,0,0,0,0x00010000,0,0,0,0x40000000 };  //  Unity matrix
	public int[] Matrix { get { return this.matrix; } set { this.matrix = value; } }

	protected uint[] pre_defined = []; 
	public uint[] PreDefined { get { return this.pre_defined; } set { this.pre_defined = value; } }

	protected uint next_track_ID; 
	public uint NextTrackID { get { return this.next_track_ID; } set { this.next_track_ID = value; } }

	public MovieHeaderBox(byte version = 0): base(IsoStream.FromFourCC("mvhd"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if (version==1)
		{
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.creation_time, "creation_time"); 
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.modification_time, "modification_time"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.timescale, "timescale"); 
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.duration, "duration"); 
		}

		else 
		{
			/*  version==0 */
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.creation_time, "creation_time"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.modification_time, "modification_time"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.timescale, "timescale"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.duration, "duration"); 
		}
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.rate, "rate"); // typically 1.0
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.volume, "volume"); // typically, full volume
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadUInt32Array(boxSize, readSize, 2,  out this.reserved0, "reserved0"); 
		boxSize += stream.ReadInt32Array(boxSize, readSize, 9,  out this.matrix, "matrix"); // Unity matrix
		boxSize += stream.ReadUInt32Array(boxSize, readSize, 6,  out this.pre_defined, "pre_defined"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.next_track_ID, "next_track_ID"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if (version==1)
		{
			boxSize += stream.WriteUInt64( this.creation_time, "creation_time"); 
			boxSize += stream.WriteUInt64( this.modification_time, "modification_time"); 
			boxSize += stream.WriteUInt32( this.timescale, "timescale"); 
			boxSize += stream.WriteUInt64( this.duration, "duration"); 
		}

		else 
		{
			/*  version==0 */
			boxSize += stream.WriteUInt32( this.creation_time, "creation_time"); 
			boxSize += stream.WriteUInt32( this.modification_time, "modification_time"); 
			boxSize += stream.WriteUInt32( this.timescale, "timescale"); 
			boxSize += stream.WriteUInt32( this.duration, "duration"); 
		}
		boxSize += stream.WriteInt32( this.rate, "rate"); // typically 1.0
		boxSize += stream.WriteInt16( this.volume, "volume"); // typically, full volume
		boxSize += stream.WriteUInt16( this.reserved, "reserved"); 
		boxSize += stream.WriteUInt32Array(2,  this.reserved0, "reserved0"); 
		boxSize += stream.WriteInt32Array(9,  this.matrix, "matrix"); // Unity matrix
		boxSize += stream.WriteUInt32Array(6,  this.pre_defined, "pre_defined"); 
		boxSize += stream.WriteUInt32( this.next_track_ID, "next_track_ID"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if (version==1)
		{
			boxSize += 64; // creation_time
			boxSize += 64; // modification_time
			boxSize += 32; // timescale
			boxSize += 64; // duration
		}

		else 
		{
			/*  version==0 */
			boxSize += 32; // creation_time
			boxSize += 32; // modification_time
			boxSize += 32; // timescale
			boxSize += 32; // duration
		}
		boxSize += 32; // rate
		boxSize += 16; // volume
		boxSize += 16; // reserved
		boxSize += 2 * 32; // reserved0
		boxSize += 9 * 32; // matrix
		boxSize += 6 * 32; // pre_defined
		boxSize += 32; // next_track_ID
		return boxSize;
	}
}


/*
aligned(8) class NullMediaHeaderBox
	extends FullBox('nmhd', version = 0, flags) {
}
*/
public partial class NullMediaHeaderBox : FullBox
{
	public const string TYPE = "nmhd";
	public override string DisplayName { get { return "NullMediaHeaderBox"; } }

	public NullMediaHeaderBox(uint flags = 0): base(IsoStream.FromFourCC("nmhd"), 0, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
aligned(8) class OriginalFileTypeBox extends Box('otyp') {
}
*/
public partial class OriginalFileTypeBox : Box
{
	public const string TYPE = "otyp";
	public override string DisplayName { get { return "OriginalFileTypeBox"; } }

	public OriginalFileTypeBox(): base(IsoStream.FromFourCC("otyp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class PaddingBitsBox extends FullBox('padb', version = 0, 0) {
	unsigned int(32)	sample_count;
	int i;
	for (i=0; i < floor((sample_count + 1)/2); i++) {
		bit(1)	reserved = 0;
		bit(3)	pad1;
		bit(1)	reserved = 0;
		bit(3)	pad2;
	}
}
*/
public partial class PaddingBitsBox : FullBox
{
	public const string TYPE = "padb";
	public override string DisplayName { get { return "PaddingBitsBox"; } }

	protected uint sample_count; 
	public uint SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

	protected bool[] reserved; 
	public bool[] Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte[] pad1; 
	public byte[] Pad1 { get { return this.pad1; } set { this.pad1 = value; } }

	protected bool[] reserved0; 
	public bool[] Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected byte[] pad2; 
	public byte[] Pad2 { get { return this.pad2; } set { this.pad2 = value; } }

	public PaddingBitsBox(): base(IsoStream.FromFourCC("padb"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_count, "sample_count"); 
		

		this.reserved = new bool[IsoStream.GetInt( (int)Math.Floor((double)(sample_count + 1)/2))];
		this.pad1 = new byte[IsoStream.GetInt( (int)Math.Floor((double)(sample_count + 1)/2))];
		this.reserved0 = new bool[IsoStream.GetInt( (int)Math.Floor((double)(sample_count + 1)/2))];
		this.pad2 = new byte[IsoStream.GetInt( (int)Math.Floor((double)(sample_count + 1)/2))];
		for (int i=0; i < (int)Math.Floor((double)(sample_count + 1)/2); i++)
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved[i], "reserved"); 
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.pad1[i], "pad1"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved0[i], "reserved0"); 
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.pad2[i], "pad2"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.sample_count, "sample_count"); 
		

		for (int i=0; i < (int)Math.Floor((double)(sample_count + 1)/2); i++)
		{
			boxSize += stream.WriteBit( this.reserved[i], "reserved"); 
			boxSize += stream.WriteBits(3,  this.pad1[i], "pad1"); 
			boxSize += stream.WriteBit( this.reserved0[i], "reserved0"); 
			boxSize += stream.WriteBits(3,  this.pad2[i], "pad2"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // sample_count
		

		for (int i=0; i < (int)Math.Floor((double)(sample_count + 1)/2); i++)
		{
			boxSize += 1; // reserved
			boxSize += 3; // pad1
			boxSize += 1; // reserved0
			boxSize += 3; // pad2
		}
		return boxSize;
	}
}


/*
aligned(8) class ProgressiveDownloadInfoBox
		extends FullBox('pdin', version = 0, 0) {
	// to end of box
	ProgressiveDownloadInfoItem items[];
 }
 
*/
public partial class ProgressiveDownloadInfoBox : FullBox
{
	public const string TYPE = "pdin";
	public override string DisplayName { get { return "ProgressiveDownloadInfoBox"; } }

	protected ProgressiveDownloadInfoItem[] items; 
	public ProgressiveDownloadInfoItem[] Items { get { return this.items; } set { this.items = value; } }

	public ProgressiveDownloadInfoBox(): base(IsoStream.FromFourCC("pdin"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		/*  to end of box */
		boxSize += stream.ReadClass(boxSize, readSize, this, (uint)(uint.MaxValue), () => new ProgressiveDownloadInfoItem(),  out this.items, "items"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		/*  to end of box */
		boxSize += stream.WriteClass( this.items, "items"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		/*  to end of box */
		boxSize += IsoStream.CalculateClassSize(items); // items
		return boxSize;
	}
}


/*
aligned(8) class ProgressiveDownloadInfoItem {
 		unsigned int(32)  rate;
		unsigned int(32)  initial_delay;
 }

*/
public partial class ProgressiveDownloadInfoItem : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "ProgressiveDownloadInfoItem"; } }

	protected uint rate; 
	public uint Rate { get { return this.rate; } set { this.rate = value; } }

	protected uint initial_delay; 
	public uint InitialDelay { get { return this.initial_delay; } set { this.initial_delay = value; } }

	public ProgressiveDownloadInfoItem(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.rate, "rate"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.initial_delay, "initial_delay"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt32( this.rate, "rate"); 
		boxSize += stream.WriteUInt32( this.initial_delay, "initial_delay"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 32; // rate
		boxSize += 32; // initial_delay
		return boxSize;
	}
}


/*
aligned(8) class PrimaryItemBox
		extends FullBox('pitm', version, 0) {
	if (version == 0) {
		unsigned int(16)	item_ID;
	} else {
		unsigned int(32)	item_ID;
	}
}
*/
public partial class PrimaryItemBox : FullBox
{
	public const string TYPE = "pitm";
	public override string DisplayName { get { return "PrimaryItemBox"; } }

	protected uint item_ID; 
	public uint ItemID { get { return this.item_ID; } set { this.item_ID = value; } }

	public PrimaryItemBox(byte version = 0): base(IsoStream.FromFourCC("pitm"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if (version == 0)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.item_ID, "item_ID"); 
		}

		else 
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.item_ID, "item_ID"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if (version == 0)
		{
			boxSize += stream.WriteUInt16( this.item_ID, "item_ID"); 
		}

		else 
		{
			boxSize += stream.WriteUInt32( this.item_ID, "item_ID"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if (version == 0)
		{
			boxSize += 16; // item_ID
		}

		else 
		{
			boxSize += 32; // item_ID
		}
		return boxSize;
	}
}


/*
aligned(8) class ProducerReferenceTimeBox
	extends FullBox('prft', version, flags) {
	unsigned int(32) reference_track_ID;
	unsigned int(64) ntp_timestamp;
	if (version==0) {
		unsigned int(32) media_time;
	} else {
		unsigned int(64) media_time;
	}
}
*/
public partial class ProducerReferenceTimeBox : FullBox
{
	public const string TYPE = "prft";
	public override string DisplayName { get { return "ProducerReferenceTimeBox"; } }

	protected uint reference_track_ID; 
	public uint ReferenceTrackID { get { return this.reference_track_ID; } set { this.reference_track_ID = value; } }

	protected ulong ntp_timestamp; 
	public ulong NtpTimestamp { get { return this.ntp_timestamp; } set { this.ntp_timestamp = value; } }

	protected ulong media_time; 
	public ulong MediaTime { get { return this.media_time; } set { this.media_time = value; } }

	public ProducerReferenceTimeBox(byte version = 0, uint flags = 0): base(IsoStream.FromFourCC("prft"), version, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.reference_track_ID, "reference_track_ID"); 
		boxSize += stream.ReadUInt64(boxSize, readSize,  out this.ntp_timestamp, "ntp_timestamp"); 

		if (version==0)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.media_time, "media_time"); 
		}

		else 
		{
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.media_time, "media_time"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.reference_track_ID, "reference_track_ID"); 
		boxSize += stream.WriteUInt64( this.ntp_timestamp, "ntp_timestamp"); 

		if (version==0)
		{
			boxSize += stream.WriteUInt32( this.media_time, "media_time"); 
		}

		else 
		{
			boxSize += stream.WriteUInt64( this.media_time, "media_time"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // reference_track_ID
		boxSize += 64; // ntp_timestamp

		if (version==0)
		{
			boxSize += 32; // media_time
		}

		else 
		{
			boxSize += 64; // media_time
		}
		return boxSize;
	}
}


/*
aligned(8) class RestrictedSchemeInfoBox(fmt) extends Box('rinf') {
	OriginalFormatBox(fmt)	original_format;
	SchemeTypeBox			scheme_type_box;
	SchemeInformationBox	info;				// optional
}
*/
public partial class RestrictedSchemeInfoBox : Box
{
	public const string TYPE = "rinf";
	public override string DisplayName { get { return "RestrictedSchemeInfoBox"; } }
	public OriginalFormatBox OriginalFormat { get { return this.children.OfType<OriginalFormatBox>().FirstOrDefault(); } }
	public SchemeTypeBox SchemeTypeBox { get { return this.children.OfType<SchemeTypeBox>().FirstOrDefault(); } }
	public SchemeInformationBox Info { get { return this.children.OfType<SchemeInformationBox>().FirstOrDefault(); } }

	public RestrictedSchemeInfoBox(uint fmt = 0): base(IsoStream.FromFourCC("rinf"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.original_format, "original_format"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scheme_type_box, "scheme_type_box"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.info, "info"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.original_format, "original_format"); 
		// boxSize += stream.WriteBox( this.scheme_type_box, "scheme_type_box"); 
		// boxSize += stream.WriteBox( this.info, "info"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(original_format); // original_format
		// boxSize += IsoStream.CalculateBoxSize(scheme_type_box); // scheme_type_box
		// boxSize += IsoStream.CalculateBoxSize(info); // info
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class SampleAuxiliaryInformationOffsetsBox
	extends FullBox('saio', version, flags)
{
	if (flags & 1) {
		unsigned int(32) aux_info_type;
		unsigned int(32) aux_info_type_parameter;
	}
	unsigned int(32) entry_count;
	if ( version == 0 ) {
		unsigned int(32) offset[ entry_count ];
	}
	else {
		unsigned int(64) offset[ entry_count ];
	}
}
*/
public partial class SampleAuxiliaryInformationOffsetsBox : FullBox
{
	public const string TYPE = "saio";
	public override string DisplayName { get { return "SampleAuxiliaryInformationOffsetsBox"; } }

	protected uint aux_info_type; 
	public uint AuxInfoType { get { return this.aux_info_type; } set { this.aux_info_type = value; } }

	protected uint aux_info_type_parameter; 
	public uint AuxInfoTypeParameter { get { return this.aux_info_type_parameter; } set { this.aux_info_type_parameter = value; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected ulong[] offset; 
	public ulong[] Offset { get { return this.offset; } set { this.offset = value; } }

	public SampleAuxiliaryInformationOffsetsBox(byte version = 0, uint flags = 0): base(IsoStream.FromFourCC("saio"), version, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if ((flags  &  1) ==  1)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.aux_info_type, "aux_info_type"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.aux_info_type_parameter, "aux_info_type_parameter"); 
		}
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 

		if ( version == 0 )
		{
			boxSize += stream.ReadUInt32Array(boxSize, readSize, (uint)( entry_count ),  out this.offset, "offset"); 
		}

		else 
		{
			boxSize += stream.ReadUInt64Array(boxSize, readSize, (uint)( entry_count ),  out this.offset, "offset"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if ((flags  &  1) ==  1)
		{
			boxSize += stream.WriteUInt32( this.aux_info_type, "aux_info_type"); 
			boxSize += stream.WriteUInt32( this.aux_info_type_parameter, "aux_info_type_parameter"); 
		}
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 

		if ( version == 0 )
		{
			boxSize += stream.WriteUInt32Array((uint)( entry_count ),  this.offset, "offset"); 
		}

		else 
		{
			boxSize += stream.WriteUInt64Array((uint)( entry_count ),  this.offset, "offset"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if ((flags  &  1) ==  1)
		{
			boxSize += 32; // aux_info_type
			boxSize += 32; // aux_info_type_parameter
		}
		boxSize += 32; // entry_count

		if ( version == 0 )
		{
			boxSize += ((ulong)( entry_count ) * 32); // offset
		}

		else 
		{
			boxSize += ((ulong)( entry_count ) * 64); // offset
		}
		return boxSize;
	}
}


/*
aligned(8) class SampleAuxiliaryInformationSizesBox
	extends FullBox('saiz', version = 0, flags)
{
	if (flags & 1) {
		unsigned int(32) aux_info_type;
		unsigned int(32) aux_info_type_parameter;
	}
	unsigned int(8) default_sample_info_size;
	unsigned int(32) sample_count;
	if (default_sample_info_size == 0) {
		unsigned int(8) sample_info_size[ sample_count ];
	}
}
*/
public partial class SampleAuxiliaryInformationSizesBox : FullBox
{
	public const string TYPE = "saiz";
	public override string DisplayName { get { return "SampleAuxiliaryInformationSizesBox"; } }

	protected uint aux_info_type; 
	public uint AuxInfoType { get { return this.aux_info_type; } set { this.aux_info_type = value; } }

	protected uint aux_info_type_parameter; 
	public uint AuxInfoTypeParameter { get { return this.aux_info_type_parameter; } set { this.aux_info_type_parameter = value; } }

	protected byte default_sample_info_size; 
	public byte DefaultSampleInfoSize { get { return this.default_sample_info_size; } set { this.default_sample_info_size = value; } }

	protected uint sample_count; 
	public uint SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

	protected byte[] sample_info_size; 
	public byte[] SampleInfoSize { get { return this.sample_info_size; } set { this.sample_info_size = value; } }

	public SampleAuxiliaryInformationSizesBox(uint flags = 0): base(IsoStream.FromFourCC("saiz"), 0, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if ((flags  &  1) ==  1)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.aux_info_type, "aux_info_type"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.aux_info_type_parameter, "aux_info_type_parameter"); 
		}
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.default_sample_info_size, "default_sample_info_size"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_count, "sample_count"); 

		if (default_sample_info_size == 0)
		{
			boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)( sample_count ),  out this.sample_info_size, "sample_info_size"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if ((flags  &  1) ==  1)
		{
			boxSize += stream.WriteUInt32( this.aux_info_type, "aux_info_type"); 
			boxSize += stream.WriteUInt32( this.aux_info_type_parameter, "aux_info_type_parameter"); 
		}
		boxSize += stream.WriteUInt8( this.default_sample_info_size, "default_sample_info_size"); 
		boxSize += stream.WriteUInt32( this.sample_count, "sample_count"); 

		if (default_sample_info_size == 0)
		{
			boxSize += stream.WriteUInt8Array((uint)( sample_count ),  this.sample_info_size, "sample_info_size"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if ((flags  &  1) ==  1)
		{
			boxSize += 32; // aux_info_type
			boxSize += 32; // aux_info_type_parameter
		}
		boxSize += 8; // default_sample_info_size
		boxSize += 32; // sample_count

		if (default_sample_info_size == 0)
		{
			boxSize += ((ulong)( sample_count ) * 8); // sample_info_size
		}
		return boxSize;
	}
}


/*
aligned(8) class SampleToGroupBox
	extends FullBox('sbgp', version, 0)
{
	unsigned int(32)	grouping_type;
	if (version == 1) {
		unsigned int(32) grouping_type_parameter;
	}
	unsigned int(32)	entry_count;
	for (i=1; i <= entry_count; i++)
	{
		unsigned int(32)	sample_count;
		unsigned int(32)	group_description_index;
	}
}
*/
public partial class SampleToGroupBox : FullBox
{
	public const string TYPE = "sbgp";
	public override string DisplayName { get { return "SampleToGroupBox"; } }

	protected uint grouping_type; 
	public uint GroupingType { get { return this.grouping_type; } set { this.grouping_type = value; } }

	protected uint grouping_type_parameter; 
	public uint GroupingTypeParameter { get { return this.grouping_type_parameter; } set { this.grouping_type_parameter = value; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected uint[] sample_count; 
	public uint[] SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

	protected uint[] group_description_index; 
	public uint[] GroupDescriptionIndex { get { return this.group_description_index; } set { this.group_description_index = value; } }

	public SampleToGroupBox(byte version = 0): base(IsoStream.FromFourCC("sbgp"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.grouping_type, "grouping_type"); 

		if (version == 1)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.grouping_type_parameter, "grouping_type_parameter"); 
		}
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 

		this.sample_count = new uint[IsoStream.GetInt( entry_count)];
		this.group_description_index = new uint[IsoStream.GetInt( entry_count)];
		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_count[i], "sample_count"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.group_description_index[i], "group_description_index"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.grouping_type, "grouping_type"); 

		if (version == 1)
		{
			boxSize += stream.WriteUInt32( this.grouping_type_parameter, "grouping_type_parameter"); 
		}
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 

		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.WriteUInt32( this.sample_count[i], "sample_count"); 
			boxSize += stream.WriteUInt32( this.group_description_index[i], "group_description_index"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // grouping_type

		if (version == 1)
		{
			boxSize += 32; // grouping_type_parameter
		}
		boxSize += 32; // entry_count

		for (int i=0; i < entry_count; i++)
		{
			boxSize += 32; // sample_count
			boxSize += 32; // group_description_index
		}
		return boxSize;
	}
}


/*
aligned(8) class SchemeInformationBox extends Box('schi') {
	Box	scheme_specific_data[];
}
*/
public partial class SchemeInformationBox : Box
{
	public const string TYPE = "schi";
	public override string DisplayName { get { return "SchemeInformationBox"; } }
	public IEnumerable<Box> SchemeSpecificData { get { return this.children.OfType<Box>(); } }

	public SchemeInformationBox(): base(IsoStream.FromFourCC("schi"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scheme_specific_data, "scheme_specific_data"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.scheme_specific_data, "scheme_specific_data"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(scheme_specific_data); // scheme_specific_data
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class SchemeTypeBox extends FullBox('schm', 0, flags) {
	unsigned int(32) scheme_type; // 4CC identifying the scheme
	unsigned int(32) scheme_version; // scheme version
	if (flags & 0x000001) {
		utf8string scheme_uri; // browser uri
	}
}
*/
public partial class SchemeTypeBox : FullBox
{
	public const string TYPE = "schm";
	public override string DisplayName { get { return "SchemeTypeBox"; } }

	protected uint scheme_type;  //  4CC identifying the scheme
	public uint SchemeType { get { return this.scheme_type; } set { this.scheme_type = value; } }

	protected uint scheme_version;  //  scheme version
	public uint SchemeVersion { get { return this.scheme_version; } set { this.scheme_version = value; } }

	protected BinaryUTF8String scheme_uri;  //  browser uri
	public BinaryUTF8String SchemeUri { get { return this.scheme_uri; } set { this.scheme_uri = value; } }

	public SchemeTypeBox(uint flags = 0): base(IsoStream.FromFourCC("schm"), 0, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.scheme_type, "scheme_type"); // 4CC identifying the scheme
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.scheme_version, "scheme_version"); // scheme version

		if ((flags  &  0x000001) ==  0x000001)
		{
			boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.scheme_uri, "scheme_uri"); // browser uri
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.scheme_type, "scheme_type"); // 4CC identifying the scheme
		boxSize += stream.WriteUInt32( this.scheme_version, "scheme_version"); // scheme version

		if ((flags  &  0x000001) ==  0x000001)
		{
			boxSize += stream.WriteStringZeroTerminated( this.scheme_uri, "scheme_uri"); // browser uri
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // scheme_type
		boxSize += 32; // scheme_version

		if ((flags  &  0x000001) ==  0x000001)
		{
			boxSize += IsoStream.CalculateStringSize(scheme_uri); // scheme_uri
		}
		return boxSize;
	}
}


/*
aligned(8) class CompatibleSchemeTypeBox extends FullBox('csch', 0, flags) {
	// identical syntax to SchemeTypeBox
	unsigned int(32)	scheme_type;		// 4CC identifying the scheme
	unsigned int(32)	scheme_version;	// scheme version 
	if (flags & 0x000001) {
		utf8string scheme_uri;		// browser uri
	}
}

*/
public partial class CompatibleSchemeTypeBox : FullBox
{
	public const string TYPE = "csch";
	public override string DisplayName { get { return "CompatibleSchemeTypeBox"; } }

	protected uint scheme_type;  //  4CC identifying the scheme
	public uint SchemeType { get { return this.scheme_type; } set { this.scheme_type = value; } }

	protected uint scheme_version;  //  scheme version 
	public uint SchemeVersion { get { return this.scheme_version; } set { this.scheme_version = value; } }

	protected BinaryUTF8String scheme_uri;  //  browser uri
	public BinaryUTF8String SchemeUri { get { return this.scheme_uri; } set { this.scheme_uri = value; } }

	public CompatibleSchemeTypeBox(uint flags = 0): base(IsoStream.FromFourCC("csch"), 0, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		/*  identical syntax to SchemeTypeBox */
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.scheme_type, "scheme_type"); // 4CC identifying the scheme
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.scheme_version, "scheme_version"); // scheme version 

		if ((flags  &  0x000001) ==  0x000001)
		{
			boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.scheme_uri, "scheme_uri"); // browser uri
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		/*  identical syntax to SchemeTypeBox */
		boxSize += stream.WriteUInt32( this.scheme_type, "scheme_type"); // 4CC identifying the scheme
		boxSize += stream.WriteUInt32( this.scheme_version, "scheme_version"); // scheme version 

		if ((flags  &  0x000001) ==  0x000001)
		{
			boxSize += stream.WriteStringZeroTerminated( this.scheme_uri, "scheme_uri"); // browser uri
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		/*  identical syntax to SchemeTypeBox */
		boxSize += 32; // scheme_type
		boxSize += 32; // scheme_version

		if ((flags  &  0x000001) ==  0x000001)
		{
			boxSize += IsoStream.CalculateStringSize(scheme_uri); // scheme_uri
		}
		return boxSize;
	}
}


/*
aligned(8) class SampleDependencyTypeBox
	extends FullBox('sdtp', version = 0, 0) {
	for (i=0; i < sample_count; i++){
		unsigned int(2) is_leading;
		unsigned int(2) sample_depends_on;
		unsigned int(2) sample_is_depended_on;
		unsigned int(2) sample_has_redundancy;
	}
}
*/
public partial class SampleDependencyTypeBox : FullBox
{
	public const string TYPE = "sdtp";
	public override string DisplayName { get { return "SampleDependencyTypeBox"; } }

	protected byte[] is_leading; 
	public byte[] IsLeading { get { return this.is_leading; } set { this.is_leading = value; } }

	protected byte[] sample_depends_on; 
	public byte[] SampleDependsOn { get { return this.sample_depends_on; } set { this.sample_depends_on = value; } }

	protected byte[] sample_is_depended_on; 
	public byte[] SampleIsDependedOn { get { return this.sample_is_depended_on; } set { this.sample_is_depended_on = value; } }

	protected byte[] sample_has_redundancy; 
	public byte[] SampleHasRedundancy { get { return this.sample_has_redundancy; } set { this.sample_has_redundancy = value; } }

	public SampleDependencyTypeBox(): base(IsoStream.FromFourCC("sdtp"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		int sample_count = (int)((readSize - boxSize) >> 3); // should be taken from the stsz sample_count, but we can calculate it from the readSize - 1 byte per sample


		this.is_leading = new byte[IsoStream.GetInt( sample_count)];
		this.sample_depends_on = new byte[IsoStream.GetInt( sample_count)];
		this.sample_is_depended_on = new byte[IsoStream.GetInt( sample_count)];
		this.sample_has_redundancy = new byte[IsoStream.GetInt( sample_count)];
		for (int i=0; i < sample_count; i++)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.is_leading[i], "is_leading"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.sample_depends_on[i], "sample_depends_on"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.sample_is_depended_on[i], "sample_is_depended_on"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.sample_has_redundancy[i], "sample_has_redundancy"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		int sample_count = is_leading.Length;


		for (int i=0; i < sample_count; i++)
		{
			boxSize += stream.WriteBits(2,  this.is_leading[i], "is_leading"); 
			boxSize += stream.WriteBits(2,  this.sample_depends_on[i], "sample_depends_on"); 
			boxSize += stream.WriteBits(2,  this.sample_is_depended_on[i], "sample_is_depended_on"); 
			boxSize += stream.WriteBits(2,  this.sample_has_redundancy[i], "sample_has_redundancy"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		int sample_count = is_leading.Length;


		for (int i=0; i < sample_count; i++)
		{
			boxSize += 2; // is_leading
			boxSize += 2; // sample_depends_on
			boxSize += 2; // sample_is_depended_on
			boxSize += 2; // sample_has_redundancy
		}
		return boxSize;
	}
}


/*
aligned(8) class FDSessionGroupBox extends Box('segr') {
	unsigned int(16)	num_session_groups;
	for(i=0; i < num_session_groups; i++) {
		unsigned int(8)	entry_count;
		for (j=0; j < entry_count; j++) {
			unsigned int(32)	group_ID;
		}
		unsigned int(16) num_channels_in_session_group;
		for(k=0; k < num_channels_in_session_group; k++) {
			unsigned int(32) hint_track_ID;
		}
	}
}
*/
public partial class FDSessionGroupBox : Box
{
	public const string TYPE = "segr";
	public override string DisplayName { get { return "FDSessionGroupBox"; } }

	protected ushort num_session_groups; 
	public ushort NumSessionGroups { get { return this.num_session_groups; } set { this.num_session_groups = value; } }

	protected byte[] entry_count; 
	public byte[] EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected uint[][] group_ID; 
	public uint[][] GroupID { get { return this.group_ID; } set { this.group_ID = value; } }

	protected ushort[] num_channels_in_session_group; 
	public ushort[] NumChannelsInSessionGroup { get { return this.num_channels_in_session_group; } set { this.num_channels_in_session_group = value; } }

	protected uint[][] hint_track_ID; 
	public uint[][] HintTrackID { get { return this.hint_track_ID; } set { this.hint_track_ID = value; } }

	public FDSessionGroupBox(): base(IsoStream.FromFourCC("segr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.num_session_groups, "num_session_groups"); 

		this.entry_count = new byte[IsoStream.GetInt( num_session_groups)];
		this.group_ID = new uint[IsoStream.GetInt( num_session_groups)][];
		this.num_channels_in_session_group = new ushort[IsoStream.GetInt( num_session_groups)];
		this.hint_track_ID = new uint[IsoStream.GetInt( num_session_groups)][];
		for (int i=0; i < num_session_groups; i++)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.entry_count[i], "entry_count"); 

			this.group_ID[i] = new uint[IsoStream.GetInt( entry_count[i])];
			for (int j=0; j < entry_count[i]; j++)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.group_ID[i][j], "group_ID"); 
			}
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.num_channels_in_session_group[i], "num_channels_in_session_group"); 

			this.hint_track_ID[i] = new uint[IsoStream.GetInt( num_channels_in_session_group[i])];
			for (int k=0; k < num_channels_in_session_group[i]; k++)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.hint_track_ID[i][k], "hint_track_ID"); 
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.num_session_groups, "num_session_groups"); 

		for (int i=0; i < num_session_groups; i++)
		{
			boxSize += stream.WriteUInt8( this.entry_count[i], "entry_count"); 

			for (int j=0; j < entry_count[i]; j++)
			{
				boxSize += stream.WriteUInt32( this.group_ID[i][j], "group_ID"); 
			}
			boxSize += stream.WriteUInt16( this.num_channels_in_session_group[i], "num_channels_in_session_group"); 

			for (int k=0; k < num_channels_in_session_group[i]; k++)
			{
				boxSize += stream.WriteUInt32( this.hint_track_ID[i][k], "hint_track_ID"); 
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // num_session_groups

		for (int i=0; i < num_session_groups; i++)
		{
			boxSize += 8; // entry_count

			for (int j=0; j < entry_count[i]; j++)
			{
				boxSize += 32; // group_ID
			}
			boxSize += 16; // num_channels_in_session_group

			for (int k=0; k < num_channels_in_session_group[i]; k++)
			{
				boxSize += 32; // hint_track_ID
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class SampleGroupDescriptionBox ()
	extends FullBox('sgpd', version, flags){
	unsigned int(32) grouping_type;
	if (version>=1) { unsigned int(32) default_length; }
	if (version>=2) {
		unsigned int(32) default_group_description_index;
	}
	unsigned int(32) entry_count;
	int i;
	for (i = 1 ; i <= entry_count ; i++){
		if (version>=1) {
			if (default_length==0) {
				unsigned int(32) description_length;
			}
		}
		SampleGroupDescriptionEntry (grouping_type);
		// an instance of a class derived from SampleGroupDescriptionEntry
		//  that is appropriate and permitted for the media type
	}
}
*/
public partial class SampleGroupDescriptionBox : FullBox
{
	public const string TYPE = "sgpd";
	public override string DisplayName { get { return "SampleGroupDescriptionBox"; } }

	protected uint grouping_type; 
	public uint GroupingType { get { return this.grouping_type; } set { this.grouping_type = value; } }

	protected uint default_length; 
	public uint DefaultLength { get { return this.default_length; } set { this.default_length = value; } }

	protected uint default_group_description_index; 
	public uint DefaultGroupDescriptionIndex { get { return this.default_group_description_index; } set { this.default_group_description_index = value; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected uint[] description_length; 
	public uint[] DescriptionLength { get { return this.description_length; } set { this.description_length = value; } }

	protected SampleGroupDescriptionEntry[] SampleGroupDescriptionEntry;  //  an instance of a class derived from SampleGroupDescriptionEntry
	public SampleGroupDescriptionEntry[] _SampleGroupDescriptionEntry { get { return this.SampleGroupDescriptionEntry; } set { this.SampleGroupDescriptionEntry = value; } }

	public SampleGroupDescriptionBox(byte version = 0, uint flags = 0): base(IsoStream.FromFourCC("sgpd"), version, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.grouping_type, "grouping_type"); 

		if (version>=1)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.default_length, "default_length"); 
		}

		if (version>=2)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.default_group_description_index, "default_group_description_index"); 
		}
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 
		

		this.description_length = new uint[IsoStream.GetInt( entry_count )];
		this.SampleGroupDescriptionEntry = new SampleGroupDescriptionEntry[IsoStream.GetInt( entry_count )];
		for (int i = 0 ; i < entry_count ; i++)
		{

			if (version>=1)
			{

				if (default_length==0)
				{
					boxSize += stream.ReadUInt32(boxSize, readSize,  out this.description_length[i], "description_length"); 
				}
			}
			boxSize += stream.ReadClass(boxSize, readSize, this, () => BoxFactory.CreateEntry(IsoStream.ToFourCC(grouping_type)),  out this.SampleGroupDescriptionEntry[i], "SampleGroupDescriptionEntry"); // an instance of a class derived from SampleGroupDescriptionEntry
			/*   that is appropriate and permitted for the media type */
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.grouping_type, "grouping_type"); 

		if (version>=1)
		{
			boxSize += stream.WriteUInt32( this.default_length, "default_length"); 
		}

		if (version>=2)
		{
			boxSize += stream.WriteUInt32( this.default_group_description_index, "default_group_description_index"); 
		}
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 
		

		for (int i = 0 ; i < entry_count ; i++)
		{

			if (version>=1)
			{

				if (default_length==0)
				{
					boxSize += stream.WriteUInt32( this.description_length[i], "description_length"); 
				}
			}
			boxSize += stream.WriteClass( this.SampleGroupDescriptionEntry[i], "SampleGroupDescriptionEntry"); // an instance of a class derived from SampleGroupDescriptionEntry
			/*   that is appropriate and permitted for the media type */
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // grouping_type

		if (version>=1)
		{
			boxSize += 32; // default_length
		}

		if (version>=2)
		{
			boxSize += 32; // default_group_description_index
		}
		boxSize += 32; // entry_count
		

		for (int i = 0 ; i < entry_count ; i++)
		{

			if (version>=1)
			{

				if (default_length==0)
				{
					boxSize += 32; // description_length
				}
			}
			boxSize += IsoStream.CalculateClassSize(SampleGroupDescriptionEntry); // SampleGroupDescriptionEntry
			/*   that is appropriate and permitted for the media type */
		}
		return boxSize;
	}
}


/*
aligned(8) class CompressedSegmentIndexBox
	extends CompressedBox('!six', 'sidx') {
}

*/
public partial class CompressedSegmentIndexBox : CompressedBox
{
	public const string TYPE = "sidx";
	public override string DisplayName { get { return "CompressedSegmentIndexBox"; } }

	public CompressedSegmentIndexBox(): base(IsoStream.FromFourCC("sidx"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
aligned(8) class ProtectionSchemeInfoBox(fmt) extends Box('sinf') {
	OriginalFormatBox(fmt)	original_format;

	SchemeTypeBox			scheme_type_box;		// optional
	SchemeInformationBox	info;						// optional
}
*/
public partial class ProtectionSchemeInfoBox : Box
{
	public const string TYPE = "sinf";
	public override string DisplayName { get { return "ProtectionSchemeInfoBox"; } }
	public OriginalFormatBox OriginalFormat { get { return this.children.OfType<OriginalFormatBox>().FirstOrDefault(); } }
	public SchemeTypeBox SchemeTypeBox { get { return this.children.OfType<SchemeTypeBox>().FirstOrDefault(); } }
	public SchemeInformationBox Info { get { return this.children.OfType<SchemeInformationBox>().FirstOrDefault(); } }

	public ProtectionSchemeInfoBox(uint fmt = 0): base(IsoStream.FromFourCC("sinf"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.original_format, "original_format"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scheme_type_box, "scheme_type_box"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.info, "info"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.original_format, "original_format"); 
		// boxSize += stream.WriteBox( this.scheme_type_box, "scheme_type_box"); // optional
		// boxSize += stream.WriteBox( this.info, "info"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(original_format); // original_format
		// boxSize += IsoStream.CalculateBoxSize(scheme_type_box); // scheme_type_box
		// boxSize += IsoStream.CalculateBoxSize(info); // info
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class FreeSpaceBox extends Box('skip') {
unsigned int(8) data[];
}
*/
public partial class FreeSpaceBoxskipDup : Box
{
	public const string TYPE = "skip";
	public override string DisplayName { get { return "FreeSpaceBoxskipDup"; } }

	protected StreamMarker data; 
	public StreamMarker Data { get { return this.data; } set { this.data = value; } }

	public FreeSpaceBoxskipDup(): base(IsoStream.FromFourCC("skip"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class SoundMediaHeaderBox
	extends FullBox('smhd', version = 0, 0) {
	template int(16) balance = 0;
	const unsigned int(16)	reserved = 0;
}
*/
public partial class SoundMediaHeaderBox : FullBox
{
	public const string TYPE = "smhd";
	public override string DisplayName { get { return "SoundMediaHeaderBox"; } }

	protected short balance = 0; 
	public short Balance { get { return this.balance; } set { this.balance = value; } }

	protected ushort reserved = 0; 
	public ushort Reserved { get { return this.reserved; } set { this.reserved = value; } }

	public SoundMediaHeaderBox(): base(IsoStream.FromFourCC("smhd"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.balance, "balance"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt16( this.balance, "balance"); 
		boxSize += stream.WriteUInt16( this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // balance
		boxSize += 16; // reserved
		return boxSize;
	}
}


/*
aligned(8) class SRTPProcessBox extends FullBox('srpp', version, 0) {
	unsigned int(32)		encryption_algorithm_rtp;
	unsigned int(32)		encryption_algorithm_rtcp;
	unsigned int(32)		integrity_algorithm_rtp;
	unsigned int(32)		integrity_algorithm_rtcp;
	SchemeTypeBox			scheme_type_box;
	SchemeInformationBox	info;
}
*/
public partial class SRTPProcessBox : FullBox
{
	public const string TYPE = "srpp";
	public override string DisplayName { get { return "SRTPProcessBox"; } }

	protected uint encryption_algorithm_rtp; 
	public uint EncryptionAlgorithmRtp { get { return this.encryption_algorithm_rtp; } set { this.encryption_algorithm_rtp = value; } }

	protected uint encryption_algorithm_rtcp; 
	public uint EncryptionAlgorithmRtcp { get { return this.encryption_algorithm_rtcp; } set { this.encryption_algorithm_rtcp = value; } }

	protected uint integrity_algorithm_rtp; 
	public uint IntegrityAlgorithmRtp { get { return this.integrity_algorithm_rtp; } set { this.integrity_algorithm_rtp = value; } }

	protected uint integrity_algorithm_rtcp; 
	public uint IntegrityAlgorithmRtcp { get { return this.integrity_algorithm_rtcp; } set { this.integrity_algorithm_rtcp = value; } }
	public SchemeTypeBox SchemeTypeBox { get { return this.children.OfType<SchemeTypeBox>().FirstOrDefault(); } }
	public SchemeInformationBox Info { get { return this.children.OfType<SchemeInformationBox>().FirstOrDefault(); } }

	public SRTPProcessBox(byte version = 0): base(IsoStream.FromFourCC("srpp"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.encryption_algorithm_rtp, "encryption_algorithm_rtp"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.encryption_algorithm_rtcp, "encryption_algorithm_rtcp"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.integrity_algorithm_rtp, "integrity_algorithm_rtp"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.integrity_algorithm_rtcp, "integrity_algorithm_rtcp"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scheme_type_box, "scheme_type_box"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.info, "info"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.encryption_algorithm_rtp, "encryption_algorithm_rtp"); 
		boxSize += stream.WriteUInt32( this.encryption_algorithm_rtcp, "encryption_algorithm_rtcp"); 
		boxSize += stream.WriteUInt32( this.integrity_algorithm_rtp, "integrity_algorithm_rtp"); 
		boxSize += stream.WriteUInt32( this.integrity_algorithm_rtcp, "integrity_algorithm_rtcp"); 
		// boxSize += stream.WriteBox( this.scheme_type_box, "scheme_type_box"); 
		// boxSize += stream.WriteBox( this.info, "info"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // encryption_algorithm_rtp
		boxSize += 32; // encryption_algorithm_rtcp
		boxSize += 32; // integrity_algorithm_rtp
		boxSize += 32; // integrity_algorithm_rtcp
		// boxSize += IsoStream.CalculateBoxSize(scheme_type_box); // scheme_type_box
		// boxSize += IsoStream.CalculateBoxSize(info); // info
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class CompressedSubsegmentIndexBox
	extends CompressedBox('!ssx', 'ssix') {
}
*/
public partial class CompressedSubsegmentIndexBox : CompressedBox
{
	public const string TYPE = "ssix";
	public override string DisplayName { get { return "CompressedSubsegmentIndexBox"; } }

	public CompressedSubsegmentIndexBox(): base(IsoStream.FromFourCC("ssix"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
aligned(8) class SampleTableBox extends Box('stbl') {
}
*/
public partial class SampleTableBox : Box
{
	public const string TYPE = "stbl";
	public override string DisplayName { get { return "SampleTableBox"; } }

	public SampleTableBox(): base(IsoStream.FromFourCC("stbl"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ChunkOffsetBox
	extends FullBox('stco', version = 0, 0) {
	unsigned int(32)	entry_count;
	for (i=1; i <= entry_count; i++) {
		unsigned int(32)	chunk_offset;
	}
}
*/
public partial class ChunkOffsetBox : FullBox
{
	public const string TYPE = "stco";
	public override string DisplayName { get { return "ChunkOffsetBox"; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected uint[] chunk_offset; 
	public uint[] ChunkOffset { get { return this.chunk_offset; } set { this.chunk_offset = value; } }

	public ChunkOffsetBox(): base(IsoStream.FromFourCC("stco"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 

		this.chunk_offset = new uint[IsoStream.GetInt( entry_count)];
		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.chunk_offset[i], "chunk_offset"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 

		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.WriteUInt32( this.chunk_offset[i], "chunk_offset"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // entry_count

		for (int i=0; i < entry_count; i++)
		{
			boxSize += 32; // chunk_offset
		}
		return boxSize;
	}
}


/*
aligned(8) class DegradationPriorityBox
	extends FullBox('stdp', version = 0, 0) {
	int i;
	for (i=0; i < sample_count; i++) {
		unsigned int(16)	priority;
	}
}
*/
public partial class DegradationPriorityBox : FullBox
{
	public const string TYPE = "stdp";
	public override string DisplayName { get { return "DegradationPriorityBox"; } }

	protected ushort[] priority; 
	public ushort[] Priority { get { return this.priority; } set { this.priority = value; } }

	public DegradationPriorityBox(): base(IsoStream.FromFourCC("stdp"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		int sample_count = (int)((readSize - boxSize) >> 4); // should be taken from the stsz sample_count, but we can calculate it from the readSize - 2 bytes per sample

		

		this.priority = new ushort[IsoStream.GetInt( sample_count)];
		for (int i=0; i < sample_count; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.priority[i], "priority"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		int sample_count = priority.Length;

		

		for (int i=0; i < sample_count; i++)
		{
			boxSize += stream.WriteUInt16( this.priority[i], "priority"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		int sample_count = priority.Length;

		

		for (int i=0; i < sample_count; i++)
		{
			boxSize += 16; // priority
		}
		return boxSize;
	}
}


/*
aligned(8) class SubtitleMediaHeaderBox
	extends FullBox ('sthd', version = 0, flags = 0){
}
*/
public partial class SubtitleMediaHeaderBox : FullBox
{
	public const string TYPE = "sthd";
	public override string DisplayName { get { return "SubtitleMediaHeaderBox"; } }

	public SubtitleMediaHeaderBox(): base(IsoStream.FromFourCC("sthd"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
aligned(8) class SubTrackDefinitionBox extends Box('strd') {
}
*/
public partial class SubTrackDefinitionBox : Box
{
	public const string TYPE = "strd";
	public override string DisplayName { get { return "SubTrackDefinitionBox"; } }

	public SubTrackDefinitionBox(): base(IsoStream.FromFourCC("strd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class SubTrackInformationBox
	extends FullBox('stri', version = 0, 0){
	template int(16)	switch_group = 0;
	template int(16)	alternate_group = 0;
	template unsigned int(32)	sub_track_ID = 0;
	unsigned int(32)	attribute_list[];	// to the end of the box
}
*/
public partial class SubTrackInformationBox : FullBox
{
	public const string TYPE = "stri";
	public override string DisplayName { get { return "SubTrackInformationBox"; } }

	protected short switch_group = 0; 
	public short SwitchGroup { get { return this.switch_group; } set { this.switch_group = value; } }

	protected short alternate_group = 0; 
	public short AlternateGroup { get { return this.alternate_group; } set { this.alternate_group = value; } }

	protected uint sub_track_ID = 0; 
	public uint SubTrackID { get { return this.sub_track_ID; } set { this.sub_track_ID = value; } }

	protected uint[] attribute_list;  //  to the end of the box
	public uint[] AttributeList { get { return this.attribute_list; } set { this.attribute_list = value; } }

	public SubTrackInformationBox(): base(IsoStream.FromFourCC("stri"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.switch_group, "switch_group"); 
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.alternate_group, "alternate_group"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sub_track_ID, "sub_track_ID"); 
		boxSize += stream.ReadUInt32ArrayTillEnd(boxSize, readSize,  out this.attribute_list, "attribute_list"); // to the end of the box
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt16( this.switch_group, "switch_group"); 
		boxSize += stream.WriteInt16( this.alternate_group, "alternate_group"); 
		boxSize += stream.WriteUInt32( this.sub_track_ID, "sub_track_ID"); 
		boxSize += stream.WriteUInt32ArrayTillEnd( this.attribute_list, "attribute_list"); // to the end of the box
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // switch_group
		boxSize += 16; // alternate_group
		boxSize += 32; // sub_track_ID
		boxSize += ((ulong)attribute_list.Length * 32); // attribute_list
		return boxSize;
	}
}


/*
aligned(8) class SampleToChunkBox
	extends FullBox('stsc', version = 0, 0) {
	unsigned int(32)	entry_count;
	for (i=1; i <= entry_count; i++) {
		unsigned int(32)	first_chunk;
		unsigned int(32)	samples_per_chunk;
		unsigned int(32)	sample_description_index;
	}
}
*/
public partial class SampleToChunkBox : FullBox
{
	public const string TYPE = "stsc";
	public override string DisplayName { get { return "SampleToChunkBox"; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected uint[] first_chunk; 
	public uint[] FirstChunk { get { return this.first_chunk; } set { this.first_chunk = value; } }

	protected uint[] samples_per_chunk; 
	public uint[] SamplesPerChunk { get { return this.samples_per_chunk; } set { this.samples_per_chunk = value; } }

	protected uint[] sample_description_index; 
	public uint[] SampleDescriptionIndex { get { return this.sample_description_index; } set { this.sample_description_index = value; } }

	public SampleToChunkBox(): base(IsoStream.FromFourCC("stsc"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 

		this.first_chunk = new uint[IsoStream.GetInt( entry_count)];
		this.samples_per_chunk = new uint[IsoStream.GetInt( entry_count)];
		this.sample_description_index = new uint[IsoStream.GetInt( entry_count)];
		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.first_chunk[i], "first_chunk"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.samples_per_chunk[i], "samples_per_chunk"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_description_index[i], "sample_description_index"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 

		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.WriteUInt32( this.first_chunk[i], "first_chunk"); 
			boxSize += stream.WriteUInt32( this.samples_per_chunk[i], "samples_per_chunk"); 
			boxSize += stream.WriteUInt32( this.sample_description_index[i], "sample_description_index"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // entry_count

		for (int i=0; i < entry_count; i++)
		{
			boxSize += 32; // first_chunk
			boxSize += 32; // samples_per_chunk
			boxSize += 32; // sample_description_index
		}
		return boxSize;
	}
}


/*
aligned(8) class SampleDescriptionBox ()
	extends FullBox('stsd', version, 0){
	int i ;
	unsigned int(32) entry_count;
	for (i = 1 ; i <= entry_count ; i++){
		SampleEntry();		// an instance of a class derived from SampleEntry
	}
}
*/
public partial class SampleDescriptionBox : FullBox
{
	public const string TYPE = "stsd";
	public override string DisplayName { get { return "SampleDescriptionBox"; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }
	public IEnumerable<SampleEntry> _SampleEntry { get { return this.children.OfType<SampleEntry>(); } }

	public SampleDescriptionBox(byte version = 0): base(IsoStream.FromFourCC("stsd"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 

		for (int i = 0 ; i < entry_count ; i++)
		{
			// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.SampleEntry[i], "SampleEntry"); // an instance of a class derived from SampleEntry
		}
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 

		for (int i = 0 ; i < entry_count ; i++)
		{
			// boxSize += stream.WriteBox( this.SampleEntry[i], "SampleEntry"); // an instance of a class derived from SampleEntry
		}
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		
		boxSize += 32; // entry_count

		for (int i = 0 ; i < entry_count ; i++)
		{
			// boxSize += IsoStream.CalculateBoxSize(SampleEntry); // SampleEntry
		}
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class SubTrackSampleGroupBox
	extends FullBox('stsg', 0, 0){
	unsigned int(32) grouping_type;
	unsigned int(16) item_count;
	for(i = 0; i< item_count; i++)
		unsigned int(32)	group_description_index;
}
*/
public partial class SubTrackSampleGroupBox : FullBox
{
	public const string TYPE = "stsg";
	public override string DisplayName { get { return "SubTrackSampleGroupBox"; } }

	protected uint grouping_type; 
	public uint GroupingType { get { return this.grouping_type; } set { this.grouping_type = value; } }

	protected ushort item_count; 
	public ushort ItemCount { get { return this.item_count; } set { this.item_count = value; } }

	protected uint[] group_description_index; 
	public uint[] GroupDescriptionIndex { get { return this.group_description_index; } set { this.group_description_index = value; } }

	public SubTrackSampleGroupBox(): base(IsoStream.FromFourCC("stsg"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.grouping_type, "grouping_type"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.item_count, "item_count"); 

		this.group_description_index = new uint[IsoStream.GetInt( item_count)];
		for (int i = 0; i< item_count; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.group_description_index[i], "group_description_index"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.grouping_type, "grouping_type"); 
		boxSize += stream.WriteUInt16( this.item_count, "item_count"); 

		for (int i = 0; i< item_count; i++)
		{
			boxSize += stream.WriteUInt32( this.group_description_index[i], "group_description_index"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // grouping_type
		boxSize += 16; // item_count

		for (int i = 0; i< item_count; i++)
		{
			boxSize += 32; // group_description_index
		}
		return boxSize;
	}
}


/*
aligned(8) class ShadowSyncSampleBox
	extends FullBox('stsh', version = 0, 0) {
	unsigned int(32)	entry_count;
	int i;
	for (i=0; i < entry_count; i++) {
		unsigned int(32)	shadowed_sample_number;
		unsigned int(32)	sync_sample_number;
	}
}
*/
public partial class ShadowSyncSampleBox : FullBox
{
	public const string TYPE = "stsh";
	public override string DisplayName { get { return "ShadowSyncSampleBox"; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected uint[] shadowed_sample_number; 
	public uint[] ShadowedSampleNumber { get { return this.shadowed_sample_number; } set { this.shadowed_sample_number = value; } }

	protected uint[] sync_sample_number; 
	public uint[] SyncSampleNumber { get { return this.sync_sample_number; } set { this.sync_sample_number = value; } }

	public ShadowSyncSampleBox(): base(IsoStream.FromFourCC("stsh"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 
		

		this.shadowed_sample_number = new uint[IsoStream.GetInt( entry_count)];
		this.sync_sample_number = new uint[IsoStream.GetInt( entry_count)];
		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.shadowed_sample_number[i], "shadowed_sample_number"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sync_sample_number[i], "sync_sample_number"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 
		

		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.WriteUInt32( this.shadowed_sample_number[i], "shadowed_sample_number"); 
			boxSize += stream.WriteUInt32( this.sync_sample_number[i], "sync_sample_number"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // entry_count
		

		for (int i=0; i < entry_count; i++)
		{
			boxSize += 32; // shadowed_sample_number
			boxSize += 32; // sync_sample_number
		}
		return boxSize;
	}
}


/*
aligned(8) class SyncSampleBox
	extends FullBox('stss', version = 0, 0) {
	unsigned int(32)	entry_count;
	int i;
	for (i=0; i < entry_count; i++) {
		unsigned int(32)	sample_number;
	}
}
*/
public partial class SyncSampleBox : FullBox
{
	public const string TYPE = "stss";
	public override string DisplayName { get { return "SyncSampleBox"; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected uint[] sample_number; 
	public uint[] SampleNumber { get { return this.sample_number; } set { this.sample_number = value; } }

	public SyncSampleBox(): base(IsoStream.FromFourCC("stss"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 
		

		this.sample_number = new uint[IsoStream.GetInt( entry_count)];
		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_number[i], "sample_number"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 
		

		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.WriteUInt32( this.sample_number[i], "sample_number"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // entry_count
		

		for (int i=0; i < entry_count; i++)
		{
			boxSize += 32; // sample_number
		}
		return boxSize;
	}
}


/*
aligned(8) class SampleSizeBox extends FullBox('stsz', version = 0, 0) {
	unsigned int(32)	sample_size;
	unsigned int(32)	sample_count;
	if (sample_size==0) {
		for (i=1; i <= sample_count; i++) {
		unsigned int(32)	entry_size;
		}
	}
}
*/
public partial class SampleSizeBox : FullBox
{
	public const string TYPE = "stsz";
	public override string DisplayName { get { return "SampleSizeBox"; } }

	protected uint sample_size; 
	public uint SampleSize { get { return this.sample_size; } set { this.sample_size = value; } }

	protected uint sample_count; 
	public uint SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

	protected uint[] entry_size; 
	public uint[] EntrySize { get { return this.entry_size; } set { this.entry_size = value; } }

	public SampleSizeBox(): base(IsoStream.FromFourCC("stsz"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_size, "sample_size"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_count, "sample_count"); 

		if (sample_size==0)
		{

			this.entry_size = new uint[IsoStream.GetInt( sample_count)];
			for (int i=0; i < sample_count; i++)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_size[i], "entry_size"); 
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.sample_size, "sample_size"); 
		boxSize += stream.WriteUInt32( this.sample_count, "sample_count"); 

		if (sample_size==0)
		{

			for (int i=0; i < sample_count; i++)
			{
				boxSize += stream.WriteUInt32( this.entry_size[i], "entry_size"); 
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // sample_size
		boxSize += 32; // sample_count

		if (sample_size==0)
		{

			for (int i=0; i < sample_count; i++)
			{
				boxSize += 32; // entry_size
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class TimeToSampleBox
	extends FullBox('stts', version = 0, 0) {
	unsigned int(32)	entry_count;
		int i;
	for (i=0; i < entry_count; i++) {
		unsigned int(32)	sample_count;
		unsigned int(32)	sample_delta;
	}
}
*/
public partial class TimeToSampleBox : FullBox
{
	public const string TYPE = "stts";
	public override string DisplayName { get { return "TimeToSampleBox"; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected uint[] sample_count; 
	public uint[] SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

	protected uint[] sample_delta; 
	public uint[] SampleDelta { get { return this.sample_delta; } set { this.sample_delta = value; } }

	public TimeToSampleBox(): base(IsoStream.FromFourCC("stts"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 
		

		this.sample_count = new uint[IsoStream.GetInt( entry_count)];
		this.sample_delta = new uint[IsoStream.GetInt( entry_count)];
		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_count[i], "sample_count"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_delta[i], "sample_delta"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 
		

		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.WriteUInt32( this.sample_count[i], "sample_count"); 
			boxSize += stream.WriteUInt32( this.sample_delta[i], "sample_delta"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // entry_count
		

		for (int i=0; i < entry_count; i++)
		{
			boxSize += 32; // sample_count
			boxSize += 32; // sample_delta
		}
		return boxSize;
	}
}


/*
aligned(8) class SegmentTypeBox extends GeneralTypeBox ('styp')
{}
*/
public partial class SegmentTypeBox : GeneralTypeBox
{
	public const string TYPE = "styp";
	public override string DisplayName { get { return "SegmentTypeBox"; } }

	public SegmentTypeBox(): base(IsoStream.FromFourCC("styp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
aligned(8) class CompactSampleSizeBox 
		extends FullBox('stz2', version = 0, 0) {
	unsigned int(24)	reserved = 0;
	unsigned int(8)	field_size;
	unsigned int(32)	sample_count;
	for (i=1; i <= sample_count; i++) {
		unsigned int(field_size)	entry_size;
	}
}
*/
public partial class CompactSampleSizeBox : FullBox
{
	public const string TYPE = "stz2";
	public override string DisplayName { get { return "CompactSampleSizeBox"; } }

	protected uint reserved = 0; 
	public uint Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte field_size; 
	public byte FieldSize { get { return this.field_size; } set { this.field_size = value; } }

	protected uint sample_count; 
	public uint SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

	protected byte[][] entry_size; 
	public byte[][] EntrySize { get { return this.entry_size; } set { this.entry_size = value; } }

	public CompactSampleSizeBox(): base(IsoStream.FromFourCC("stz2"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt24(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.field_size, "field_size"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_count, "sample_count"); 

		this.entry_size = new byte[IsoStream.GetInt( sample_count)][];
		for (int i=0; i < sample_count; i++)
		{
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(field_size ),  out this.entry_size[i], "entry_size"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt24( this.reserved, "reserved"); 
		boxSize += stream.WriteUInt8( this.field_size, "field_size"); 
		boxSize += stream.WriteUInt32( this.sample_count, "sample_count"); 

		for (int i=0; i < sample_count; i++)
		{
			boxSize += stream.WriteBits((uint)(field_size ),  this.entry_size[i], "entry_size"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 24; // reserved
		boxSize += 8; // field_size
		boxSize += 32; // sample_count

		for (int i=0; i < sample_count; i++)
		{
			boxSize += (ulong)(field_size ); // entry_size
		}
		return boxSize;
	}
}


/*
aligned(8) class SubSampleInformationBox
	extends FullBox('subs', version, flags) {
	unsigned int(32) entry_count;
	int i,j;
	for (i=0; i < entry_count; i++) {
		unsigned int(32) sample_delta;
		unsigned int(16) subsample_count;
		if (subsample_count > 0) {
			for (j=0; j < subsample_count; j++) {
				if(version == 1)
				{
					unsigned int(32) subsample_size;
				}
				else
				{
					unsigned int(16) subsample_size;
				}
				unsigned int(8) subsample_priority;
				unsigned int(8) discardable;
				unsigned int(32) codec_specific_parameters;
			}
		}
	}
}
*/
public partial class SubSampleInformationBox : FullBox
{
	public const string TYPE = "subs";
	public override string DisplayName { get { return "SubSampleInformationBox"; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected uint[] sample_delta; 
	public uint[] SampleDelta { get { return this.sample_delta; } set { this.sample_delta = value; } }

	protected ushort[] subsample_count; 
	public ushort[] SubsampleCount { get { return this.subsample_count; } set { this.subsample_count = value; } }

	protected uint[][] subsample_size; 
	public uint[][] SubsampleSize { get { return this.subsample_size; } set { this.subsample_size = value; } }

	protected byte[][] subsample_priority; 
	public byte[][] SubsamplePriority { get { return this.subsample_priority; } set { this.subsample_priority = value; } }

	protected byte[][] discardable; 
	public byte[][] Discardable { get { return this.discardable; } set { this.discardable = value; } }

	protected uint[][] codec_specific_parameters; 
	public uint[][] CodecSpecificParameters { get { return this.codec_specific_parameters; } set { this.codec_specific_parameters = value; } }

	public SubSampleInformationBox(byte version = 0, uint flags = 0): base(IsoStream.FromFourCC("subs"), version, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 
		

		this.sample_delta = new uint[IsoStream.GetInt( entry_count)];
		this.subsample_count = new ushort[IsoStream.GetInt( entry_count)];
		this.subsample_size = new uint[IsoStream.GetInt( entry_count)][];
		this.subsample_priority = new byte[IsoStream.GetInt( entry_count)][];
		this.discardable = new byte[IsoStream.GetInt( entry_count)][];
		this.codec_specific_parameters = new uint[IsoStream.GetInt( entry_count)][];
		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_delta[i], "sample_delta"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.subsample_count[i], "subsample_count"); 

			if (subsample_count[i] > 0)
			{

				this.subsample_size[i] = new uint[IsoStream.GetInt( subsample_count[i])];
				this.subsample_priority[i] = new byte[IsoStream.GetInt( subsample_count[i])];
				this.discardable[i] = new byte[IsoStream.GetInt( subsample_count[i])];
				this.codec_specific_parameters[i] = new uint[IsoStream.GetInt( subsample_count[i])];
				for (int j=0; j < subsample_count[i]; j++)
				{

					if (version == 1)
					{
						boxSize += stream.ReadUInt32(boxSize, readSize,  out this.subsample_size[i][j], "subsample_size"); 
					}

					else 
					{
						boxSize += stream.ReadUInt16(boxSize, readSize,  out this.subsample_size[i][j], "subsample_size"); 
					}
					boxSize += stream.ReadUInt8(boxSize, readSize,  out this.subsample_priority[i][j], "subsample_priority"); 
					boxSize += stream.ReadUInt8(boxSize, readSize,  out this.discardable[i][j], "discardable"); 
					boxSize += stream.ReadUInt32(boxSize, readSize,  out this.codec_specific_parameters[i][j], "codec_specific_parameters"); 
				}
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 
		

		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.WriteUInt32( this.sample_delta[i], "sample_delta"); 
			boxSize += stream.WriteUInt16( this.subsample_count[i], "subsample_count"); 

			if (subsample_count[i] > 0)
			{

				for (int j=0; j < subsample_count[i]; j++)
				{

					if (version == 1)
					{
						boxSize += stream.WriteUInt32( this.subsample_size[i][j], "subsample_size"); 
					}

					else 
					{
						boxSize += stream.WriteUInt16( this.subsample_size[i][j], "subsample_size"); 
					}
					boxSize += stream.WriteUInt8( this.subsample_priority[i][j], "subsample_priority"); 
					boxSize += stream.WriteUInt8( this.discardable[i][j], "discardable"); 
					boxSize += stream.WriteUInt32( this.codec_specific_parameters[i][j], "codec_specific_parameters"); 
				}
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // entry_count
		

		for (int i=0; i < entry_count; i++)
		{
			boxSize += 32; // sample_delta
			boxSize += 16; // subsample_count

			if (subsample_count[i] > 0)
			{

				for (int j=0; j < subsample_count[i]; j++)
				{

					if (version == 1)
					{
						boxSize += 32; // subsample_size
					}

					else 
					{
						boxSize += 16; // subsample_size
					}
					boxSize += 8; // subsample_priority
					boxSize += 8; // discardable
					boxSize += 32; // codec_specific_parameters
				}
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class TrackFragmentBaseMediaDecodeTimeBox
	extends FullBox('tfdt', version, 0) {
	if (version==1) {
		unsigned int(64) baseMediaDecodeTime;
	} else { // version==0
		unsigned int(32) baseMediaDecodeTime;
	}
}
*/
public partial class TrackFragmentBaseMediaDecodeTimeBox : FullBox
{
	public const string TYPE = "tfdt";
	public override string DisplayName { get { return "TrackFragmentBaseMediaDecodeTimeBox"; } }

	protected ulong baseMediaDecodeTime; 
	public ulong BaseMediaDecodeTime { get { return this.baseMediaDecodeTime; } set { this.baseMediaDecodeTime = value; } }

	public TrackFragmentBaseMediaDecodeTimeBox(byte version = 0): base(IsoStream.FromFourCC("tfdt"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if (version==1)
		{
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.baseMediaDecodeTime, "baseMediaDecodeTime"); 
		}

		else 
		{
			/*  version==0 */
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.baseMediaDecodeTime, "baseMediaDecodeTime"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if (version==1)
		{
			boxSize += stream.WriteUInt64( this.baseMediaDecodeTime, "baseMediaDecodeTime"); 
		}

		else 
		{
			/*  version==0 */
			boxSize += stream.WriteUInt32( this.baseMediaDecodeTime, "baseMediaDecodeTime"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if (version==1)
		{
			boxSize += 64; // baseMediaDecodeTime
		}

		else 
		{
			/*  version==0 */
			boxSize += 32; // baseMediaDecodeTime
		}
		return boxSize;
	}
}


/*
aligned(8) class TrackFragmentHeaderBox
                extends FullBox('tfhd', 0, tf_flags){
        unsigned int(32)	track_ID;
        // all the following are optional fields
        // their presence is indicated by bits in the tf_flags
        if (flags & 0x1) {
           unsigned int(64)	base_data_offset;
        }
        if (flags & 0x2) {
           unsigned int(32)	sample_description_index;
        }
        if (flags & 0x8) {
           unsigned int(32)	default_sample_duration;
        }
        if (flags & 0x10) {
           unsigned int(32)	default_sample_size;
        }
        if (flags & 0x20) {
           unsigned int(32)	default_sample_flags;
        }
    }
*/
public partial class TrackFragmentHeaderBox : FullBox
{
	public const string TYPE = "tfhd";
	public override string DisplayName { get { return "TrackFragmentHeaderBox"; } }

	protected uint track_ID;  //  all the following are optional fields
	public uint TrackID { get { return this.track_ID; } set { this.track_ID = value; } }

	protected ulong base_data_offset; 
	public ulong BaseDataOffset { get { return this.base_data_offset; } set { this.base_data_offset = value; } }

	protected uint sample_description_index; 
	public uint SampleDescriptionIndex { get { return this.sample_description_index; } set { this.sample_description_index = value; } }

	protected uint default_sample_duration; 
	public uint DefaultSampleDuration { get { return this.default_sample_duration; } set { this.default_sample_duration = value; } }

	protected uint default_sample_size; 
	public uint DefaultSampleSize { get { return this.default_sample_size; } set { this.default_sample_size = value; } }

	protected uint default_sample_flags; 
	public uint DefaultSampleFlags { get { return this.default_sample_flags; } set { this.default_sample_flags = value; } }

	public TrackFragmentHeaderBox(uint tf_flags = 0): base(IsoStream.FromFourCC("tfhd"), 0, tf_flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadUInt32(boxSize, readSize,  out this.track_ID, "track_ID"); // all the following are optional fields
		/*  their presence is indicated by bits in the tf_flags */

		if ((flags  &  0x1) ==  0x1)
		{
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.base_data_offset, "base_data_offset"); 
		}

		if ((flags  &  0x2) ==  0x2)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_description_index, "sample_description_index"); 
		}

		if ((flags  &  0x8) ==  0x8)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.default_sample_duration, "default_sample_duration"); 
		}

		if ((flags  &  0x10) ==  0x10)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.default_sample_size, "default_sample_size"); 
		}

		if ((flags  &  0x20) ==  0x20)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.default_sample_flags, "default_sample_flags"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.track_ID, "track_ID"); // all the following are optional fields
		/*  their presence is indicated by bits in the tf_flags */

		if ((flags  &  0x1) ==  0x1)
		{
			boxSize += stream.WriteUInt64( this.base_data_offset, "base_data_offset"); 
		}

		if ((flags  &  0x2) ==  0x2)
		{
			boxSize += stream.WriteUInt32( this.sample_description_index, "sample_description_index"); 
		}

		if ((flags  &  0x8) ==  0x8)
		{
			boxSize += stream.WriteUInt32( this.default_sample_duration, "default_sample_duration"); 
		}

		if ((flags  &  0x10) ==  0x10)
		{
			boxSize += stream.WriteUInt32( this.default_sample_size, "default_sample_size"); 
		}

		if ((flags  &  0x20) ==  0x20)
		{
			boxSize += stream.WriteUInt32( this.default_sample_flags, "default_sample_flags"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // track_ID
		/*  their presence is indicated by bits in the tf_flags */

		if ((flags  &  0x1) ==  0x1)
		{
			boxSize += 64; // base_data_offset
		}

		if ((flags  &  0x2) ==  0x2)
		{
			boxSize += 32; // sample_description_index
		}

		if ((flags  &  0x8) ==  0x8)
		{
			boxSize += 32; // default_sample_duration
		}

		if ((flags  &  0x10) ==  0x10)
		{
			boxSize += 32; // default_sample_size
		}

		if ((flags  &  0x20) ==  0x20)
		{
			boxSize += 32; // default_sample_flags
		}
		return boxSize;
	}
}


/*
aligned(8) class TrackFragmentRandomAccessBox
 extends FullBox('tfra', version, 0) {
	unsigned int(32)	track_ID;
	const unsigned int(26)	reserved = 0;
	unsigned int(2)	length_size_of_traf_num;
	unsigned int(2)	length_size_of_trun_num;
	unsigned int(2)	length_size_of_sample_num;
	unsigned int(32)	number_of_entry;
	for(i=1; i <= number_of_entry; i++){
		if(version==1){
			unsigned int(64)	time;
			unsigned int(64)	moof_offset;
		}else{
			unsigned int(32)	time;
			unsigned int(32)	moof_offset;
		}
		unsigned int((length_size_of_traf_num+1) * 8)	traf_number;
		unsigned int((length_size_of_trun_num+1) * 8)	trun_number;
		unsigned int((length_size_of_sample_num+1) * 8)	sample_delta;
	}
}
*/
public partial class TrackFragmentRandomAccessBox : FullBox
{
	public const string TYPE = "tfra";
	public override string DisplayName { get { return "TrackFragmentRandomAccessBox"; } }

	protected uint track_ID; 
	public uint TrackID { get { return this.track_ID; } set { this.track_ID = value; } }

	protected uint reserved = 0; 
	public uint Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte length_size_of_traf_num; 
	public byte LengthSizeOfTrafNum { get { return this.length_size_of_traf_num; } set { this.length_size_of_traf_num = value; } }

	protected byte length_size_of_trun_num; 
	public byte LengthSizeOfTrunNum { get { return this.length_size_of_trun_num; } set { this.length_size_of_trun_num = value; } }

	protected byte length_size_of_sample_num; 
	public byte LengthSizeOfSampleNum { get { return this.length_size_of_sample_num; } set { this.length_size_of_sample_num = value; } }

	protected uint number_of_entry; 
	public uint NumberOfEntry { get { return this.number_of_entry; } set { this.number_of_entry = value; } }

	protected ulong[] time; 
	public ulong[] Time { get { return this.time; } set { this.time = value; } }

	protected ulong[] moof_offset; 
	public ulong[] MoofOffset { get { return this.moof_offset; } set { this.moof_offset = value; } }

	protected byte[][] traf_number; 
	public byte[][] TrafNumber { get { return this.traf_number; } set { this.traf_number = value; } }

	protected byte[][] trun_number; 
	public byte[][] TrunNumber { get { return this.trun_number; } set { this.trun_number = value; } }

	protected byte[][] sample_delta; 
	public byte[][] SampleDelta { get { return this.sample_delta; } set { this.sample_delta = value; } }

	public TrackFragmentRandomAccessBox(byte version = 0): base(IsoStream.FromFourCC("tfra"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.track_ID, "track_ID"); 
		boxSize += stream.ReadBits(boxSize, readSize, 26,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.length_size_of_traf_num, "length_size_of_traf_num"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.length_size_of_trun_num, "length_size_of_trun_num"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.length_size_of_sample_num, "length_size_of_sample_num"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.number_of_entry, "number_of_entry"); 

		this.time = new ulong[IsoStream.GetInt( number_of_entry)];
		this.moof_offset = new ulong[IsoStream.GetInt( number_of_entry)];
		this.traf_number = new byte[IsoStream.GetInt( number_of_entry)][];
		this.trun_number = new byte[IsoStream.GetInt( number_of_entry)][];
		this.sample_delta = new byte[IsoStream.GetInt( number_of_entry)][];
		for (int i=0; i < number_of_entry; i++)
		{

			if (version==1)
			{
				boxSize += stream.ReadUInt64(boxSize, readSize,  out this.time[i], "time"); 
				boxSize += stream.ReadUInt64(boxSize, readSize,  out this.moof_offset[i], "moof_offset"); 
			}

			else 
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.time[i], "time"); 
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.moof_offset[i], "moof_offset"); 
			}
			boxSize += stream.ReadBits(boxSize, readSize, (uint)((length_size_of_traf_num+1) * 8 ),  out this.traf_number[i], "traf_number"); 
			boxSize += stream.ReadBits(boxSize, readSize, (uint)((length_size_of_trun_num+1) * 8 ),  out this.trun_number[i], "trun_number"); 
			boxSize += stream.ReadBits(boxSize, readSize, (uint)((length_size_of_sample_num+1) * 8 ),  out this.sample_delta[i], "sample_delta"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.track_ID, "track_ID"); 
		boxSize += stream.WriteBits(26,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(2,  this.length_size_of_traf_num, "length_size_of_traf_num"); 
		boxSize += stream.WriteBits(2,  this.length_size_of_trun_num, "length_size_of_trun_num"); 
		boxSize += stream.WriteBits(2,  this.length_size_of_sample_num, "length_size_of_sample_num"); 
		boxSize += stream.WriteUInt32( this.number_of_entry, "number_of_entry"); 

		for (int i=0; i < number_of_entry; i++)
		{

			if (version==1)
			{
				boxSize += stream.WriteUInt64( this.time[i], "time"); 
				boxSize += stream.WriteUInt64( this.moof_offset[i], "moof_offset"); 
			}

			else 
			{
				boxSize += stream.WriteUInt32( this.time[i], "time"); 
				boxSize += stream.WriteUInt32( this.moof_offset[i], "moof_offset"); 
			}
			boxSize += stream.WriteBits((uint)((length_size_of_traf_num+1) * 8 ),  this.traf_number[i], "traf_number"); 
			boxSize += stream.WriteBits((uint)((length_size_of_trun_num+1) * 8 ),  this.trun_number[i], "trun_number"); 
			boxSize += stream.WriteBits((uint)((length_size_of_sample_num+1) * 8 ),  this.sample_delta[i], "sample_delta"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // track_ID
		boxSize += 26; // reserved
		boxSize += 2; // length_size_of_traf_num
		boxSize += 2; // length_size_of_trun_num
		boxSize += 2; // length_size_of_sample_num
		boxSize += 32; // number_of_entry

		for (int i=0; i < number_of_entry; i++)
		{

			if (version==1)
			{
				boxSize += 64; // time
				boxSize += 64; // moof_offset
			}

			else 
			{
				boxSize += 32; // time
				boxSize += 32; // moof_offset
			}
			boxSize += (ulong)((length_size_of_traf_num+1) * 8 ); // traf_number
			boxSize += (ulong)((length_size_of_trun_num+1) * 8 ); // trun_number
			boxSize += (ulong)((length_size_of_sample_num+1) * 8 ); // sample_delta
		}
		return boxSize;
	}
}


/*
aligned(8) class TrackHeaderBox
	extends FullBox('tkhd', version, flags){
	if (version==1) {
		unsigned int(64)	creation_time;
		unsigned int(64)	modification_time;
		unsigned int(32)	track_ID;
		const unsigned int(32)	reserved = 0;
		unsigned int(64)	duration;
	} else { // version==0
		unsigned int(32)	creation_time;
		unsigned int(32)	modification_time;
		unsigned int(32)	track_ID;
		const unsigned int(32)	reserved = 0;
		unsigned int(32)	duration;
	}
	const unsigned int(32)[2]	reserved = 0;
	template int(16) layer = 0;
	template int(16) alternate_group = 0;
	template int(16)	volume = {if track_is_audio 0x0100 else 0};
	const unsigned int(16)	reserved = 0;
	template int(32)[9]	matrix=
		{ 0x00010000,0,0,0,0x00010000,0,0,0,0x40000000 };
		// unity matrix
	unsigned int(32) width;
	unsigned int(32) height;
}
*/
public partial class TrackHeaderBox : FullBox
{
	public const string TYPE = "tkhd";
	public override string DisplayName { get { return "TrackHeaderBox"; } }

	protected ulong creation_time; 
	public ulong CreationTime { get { return this.creation_time; } set { this.creation_time = value; } }

	protected ulong modification_time; 
	public ulong ModificationTime { get { return this.modification_time; } set { this.modification_time = value; } }

	protected uint track_ID; 
	public uint TrackID { get { return this.track_ID; } set { this.track_ID = value; } }

	protected uint reserved = 0; 
	public uint Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected ulong duration; 
	public ulong Duration { get { return this.duration; } set { this.duration = value; } }

	protected uint reserved0 = 0; 
	public uint Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected uint[] reserved1 = []; 
	public uint[] Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected short layer = 0; 
	public short Layer { get { return this.layer; } set { this.layer = value; } }

	protected short alternate_group = 0; 
	public short AlternateGroup { get { return this.alternate_group; } set { this.alternate_group = value; } }

	protected short volume = 0; // = { default samplerate of media}<<16;
	public short Volume { get { return this.volume; } set { this.volume = value; } }

	protected ushort reserved2 = 0; 
	public ushort Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

	protected int[] matrix =
		{ 0x00010000,0,0,0,0x00010000,0,0,0,0x40000000 };  //  unity matrix
	public int[] Matrix { get { return this.matrix; } set { this.matrix = value; } }

	protected uint width; 
	public uint Width { get { return this.width; } set { this.width = value; } }

	protected uint height; 
	public uint Height { get { return this.height; } set { this.height = value; } }

	public TrackHeaderBox(byte version = 0, uint flags = 0): base(IsoStream.FromFourCC("tkhd"), version, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if (version==1)
		{
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.creation_time, "creation_time"); 
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.modification_time, "modification_time"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.track_ID, "track_ID"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.reserved, "reserved"); 
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.duration, "duration"); 
		}

		else 
		{
			/*  version==0 */
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.creation_time, "creation_time"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.modification_time, "modification_time"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.track_ID, "track_ID"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.reserved0, "reserved0"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.duration, "duration"); 
		}
		boxSize += stream.ReadUInt32Array(boxSize, readSize, 2,  out this.reserved1, "reserved1"); 
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.layer, "layer"); 
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.alternate_group, "alternate_group"); 
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.volume, "volume"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.reserved2, "reserved2"); 
		boxSize += stream.ReadInt32Array(boxSize, readSize, 9,  out this.matrix, "matrix"); // unity matrix
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.width, "width"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.height, "height"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if (version==1)
		{
			boxSize += stream.WriteUInt64( this.creation_time, "creation_time"); 
			boxSize += stream.WriteUInt64( this.modification_time, "modification_time"); 
			boxSize += stream.WriteUInt32( this.track_ID, "track_ID"); 
			boxSize += stream.WriteUInt32( this.reserved, "reserved"); 
			boxSize += stream.WriteUInt64( this.duration, "duration"); 
		}

		else 
		{
			/*  version==0 */
			boxSize += stream.WriteUInt32( this.creation_time, "creation_time"); 
			boxSize += stream.WriteUInt32( this.modification_time, "modification_time"); 
			boxSize += stream.WriteUInt32( this.track_ID, "track_ID"); 
			boxSize += stream.WriteUInt32( this.reserved0, "reserved0"); 
			boxSize += stream.WriteUInt32( this.duration, "duration"); 
		}
		boxSize += stream.WriteUInt32Array(2,  this.reserved1, "reserved1"); 
		boxSize += stream.WriteInt16( this.layer, "layer"); 
		boxSize += stream.WriteInt16( this.alternate_group, "alternate_group"); 
		boxSize += stream.WriteInt16( this.volume, "volume"); 
		boxSize += stream.WriteUInt16( this.reserved2, "reserved2"); 
		boxSize += stream.WriteInt32Array(9,  this.matrix, "matrix"); // unity matrix
		boxSize += stream.WriteUInt32( this.width, "width"); 
		boxSize += stream.WriteUInt32( this.height, "height"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if (version==1)
		{
			boxSize += 64; // creation_time
			boxSize += 64; // modification_time
			boxSize += 32; // track_ID
			boxSize += 32; // reserved
			boxSize += 64; // duration
		}

		else 
		{
			/*  version==0 */
			boxSize += 32; // creation_time
			boxSize += 32; // modification_time
			boxSize += 32; // track_ID
			boxSize += 32; // reserved0
			boxSize += 32; // duration
		}
		boxSize += 2 * 32; // reserved1
		boxSize += 16; // layer
		boxSize += 16; // alternate_group
		boxSize += 16; // volume
		boxSize += 16; // reserved2
		boxSize += 9 * 32; // matrix
		boxSize += 32; // width
		boxSize += 32; // height
		return boxSize;
	}
}


/*
aligned(8) class TrackFragmentBox extends Box('traf'){
}
*/
public partial class TrackFragmentBox : Box
{
	public const string TYPE = "traf";
	public override string DisplayName { get { return "TrackFragmentBox"; } }

	public TrackFragmentBox(): base(IsoStream.FromFourCC("traf"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class TrackBox extends Box('trak') {
}
*/
public partial class TrackBox : Box
{
	public const string TYPE = "trak";
	public override string DisplayName { get { return "TrackBox"; } }

	public TrackBox(): base(IsoStream.FromFourCC("trak"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class TrackReferenceBox extends Box('tref') {
	TrackReferenceTypeBox [];
}
*/
public partial class TrackReferenceBox : Box
{
	public const string TYPE = "tref";
	public override string DisplayName { get { return "TrackReferenceBox"; } }
	public IEnumerable<TrackReferenceTypeBox> _TrackReferenceTypeBox { get { return this.children.OfType<TrackReferenceTypeBox>(); } }

	public TrackReferenceBox(): base(IsoStream.FromFourCC("tref"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.TrackReferenceTypeBox, "TrackReferenceTypeBox"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.TrackReferenceTypeBox, "TrackReferenceTypeBox"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(TrackReferenceTypeBox); // TrackReferenceTypeBox
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class TrackExtensionPropertiesBox extends FullBox('trep', 0, 0) {
	unsigned int(32) track_ID;
	// Any number of boxes may follow
}
*/
public partial class TrackExtensionPropertiesBox : FullBox
{
	public const string TYPE = "trep";
	public override string DisplayName { get { return "TrackExtensionPropertiesBox"; } }

	protected uint track_ID;  //  Any number of boxes may follow
	public uint TrackID { get { return this.track_ID; } set { this.track_ID = value; } }

	public TrackExtensionPropertiesBox(): base(IsoStream.FromFourCC("trep"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.track_ID, "track_ID"); // Any number of boxes may follow
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.track_ID, "track_ID"); // Any number of boxes may follow
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // track_ID
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class TrackExtendsBox extends FullBox('trex', 0, 0){
	unsigned int(32)	track_ID;
	unsigned int(32)	default_sample_description_index;
	unsigned int(32)	default_sample_duration;
	unsigned int(32)	default_sample_size;
	unsigned int(32)	default_sample_flags;
}
*/
public partial class TrackExtendsBox : FullBox
{
	public const string TYPE = "trex";
	public override string DisplayName { get { return "TrackExtendsBox"; } }

	protected uint track_ID; 
	public uint TrackID { get { return this.track_ID; } set { this.track_ID = value; } }

	protected uint default_sample_description_index; 
	public uint DefaultSampleDescriptionIndex { get { return this.default_sample_description_index; } set { this.default_sample_description_index = value; } }

	protected uint default_sample_duration; 
	public uint DefaultSampleDuration { get { return this.default_sample_duration; } set { this.default_sample_duration = value; } }

	protected uint default_sample_size; 
	public uint DefaultSampleSize { get { return this.default_sample_size; } set { this.default_sample_size = value; } }

	protected uint default_sample_flags; 
	public uint DefaultSampleFlags { get { return this.default_sample_flags; } set { this.default_sample_flags = value; } }

	public TrackExtendsBox(): base(IsoStream.FromFourCC("trex"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.track_ID, "track_ID"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.default_sample_description_index, "default_sample_description_index"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.default_sample_duration, "default_sample_duration"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.default_sample_size, "default_sample_size"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.default_sample_flags, "default_sample_flags"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.track_ID, "track_ID"); 
		boxSize += stream.WriteUInt32( this.default_sample_description_index, "default_sample_description_index"); 
		boxSize += stream.WriteUInt32( this.default_sample_duration, "default_sample_duration"); 
		boxSize += stream.WriteUInt32( this.default_sample_size, "default_sample_size"); 
		boxSize += stream.WriteUInt32( this.default_sample_flags, "default_sample_flags"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // track_ID
		boxSize += 32; // default_sample_description_index
		boxSize += 32; // default_sample_duration
		boxSize += 32; // default_sample_size
		boxSize += 32; // default_sample_flags
		return boxSize;
	}
}


/*
aligned(8) class TrackGroupBox extends Box('trgr') {
}
*/
public partial class TrackGroupBox : Box
{
	public const string TYPE = "trgr";
	public override string DisplayName { get { return "TrackGroupBox"; } }

	public TrackGroupBox(): base(IsoStream.FromFourCC("trgr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class TrackRunBox extends FullBox('trun', version, tr_flags) {
    unsigned int(32)	sample_count;
    if(flags & 0x1) {
       signed int(32)	data_offset;
    }
    if(flags & 0x4) {
       unsigned int(32)	first_sample_flags;
    }
    // all fields in the following array are optional
    // as indicated by bits set in the tr_flags
    TrunEntry(version, flags)[ sample_count ];
}


*/
public partial class TrackRunBox : FullBox
{
	public const string TYPE = "trun";
	public override string DisplayName { get { return "TrackRunBox"; } }

	protected uint sample_count; 
	public uint SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

	protected int data_offset; 
	public int DataOffset { get { return this.data_offset; } set { this.data_offset = value; } }

	protected uint first_sample_flags; 
	public uint FirstSampleFlags { get { return this.first_sample_flags; } set { this.first_sample_flags = value; } }

	protected TrunEntry[] TrunEntry; 
	public TrunEntry[] _TrunEntry { get { return this.TrunEntry; } set { this.TrunEntry = value; } }

	public TrackRunBox(byte version = 0, uint tr_flags = 0): base(IsoStream.FromFourCC("trun"), version, tr_flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_count, "sample_count"); 

		if ((flags  &  0x1) ==  0x1)
		{
			boxSize += stream.ReadInt32(boxSize, readSize,  out this.data_offset, "data_offset"); 
		}

		if ((flags  &  0x4) ==  0x4)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.first_sample_flags, "first_sample_flags"); 
		}
		/*  all fields in the following array are optional */
		/*  as indicated by bits set in the tr_flags */
		boxSize += stream.ReadClass(boxSize, readSize, this, (uint)( sample_count ), () => new TrunEntry(version, flags),  out this.TrunEntry, "TrunEntry"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.sample_count, "sample_count"); 

		if ((flags  &  0x1) ==  0x1)
		{
			boxSize += stream.WriteInt32( this.data_offset, "data_offset"); 
		}

		if ((flags  &  0x4) ==  0x4)
		{
			boxSize += stream.WriteUInt32( this.first_sample_flags, "first_sample_flags"); 
		}
		/*  all fields in the following array are optional */
		/*  as indicated by bits set in the tr_flags */
		boxSize += stream.WriteClass( this.TrunEntry, "TrunEntry"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // sample_count

		if ((flags  &  0x1) ==  0x1)
		{
			boxSize += 32; // data_offset
		}

		if ((flags  &  0x4) ==  0x4)
		{
			boxSize += 32; // first_sample_flags
		}
		/*  all fields in the following array are optional */
		/*  as indicated by bits set in the tr_flags */
		boxSize += IsoStream.CalculateClassSize(TrunEntry); // TrunEntry
		return boxSize;
	}
}


/*
aligned(8) class TrunEntry(version, flags) {
   if(flags & 0x100) {
      unsigned int(32) sample_duration;
   }
   if(flags & 0x200) {
      unsigned int(32) sample_size;
   }
   if(flags & 0x400) {
      unsigned int(32) sample_flags;
   }
   if(flags & 0x800) 
   {
      if (version == 0)
      { 
          unsigned int(32) sample_composition_time_offset; 
      }
      else
      {
          signed int(32) sample_composition_time_offset; 
      }
   }
}
*/
public partial class TrunEntry : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "TrunEntry"; } }

	protected uint sample_duration; 
	public uint SampleDuration { get { return this.sample_duration; } set { this.sample_duration = value; } }

	protected uint sample_size; 
	public uint SampleSize { get { return this.sample_size; } set { this.sample_size = value; } }

	protected uint sample_flags; 
	public uint SampleFlags { get { return this.sample_flags; } set { this.sample_flags = value; } }

	protected uint sample_composition_time_offset; 
	public uint SampleCompositionTimeOffset { get { return this.sample_composition_time_offset; } set { this.sample_composition_time_offset = value; } }

	protected int sample_composition_time_offset0; 
	public int SampleCompositionTimeOffset0 { get { return this.sample_composition_time_offset0; } set { this.sample_composition_time_offset0 = value; } }

	protected byte version; 
	public byte Version { get { return this.version; } set { this.version = value; } }

	protected uint flags; 
	public uint Flags { get { return this.flags; } set { this.flags = value; } }

	public TrunEntry(byte version = 0, uint flags = 0): base()
	{
		this.version = version;
		 this.flags = flags;	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;

		if ((flags  &  0x100) ==  0x100)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_duration, "sample_duration"); 
		}

		if ((flags  &  0x200) ==  0x200)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_size, "sample_size"); 
		}

		if ((flags  &  0x400) ==  0x400)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_flags, "sample_flags"); 
		}

		if ((flags  &  0x800) ==  0x800)
		{

			if (version == 0)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_composition_time_offset, "sample_composition_time_offset"); 
			}

			else 
			{
				boxSize += stream.ReadInt32(boxSize, readSize,  out this.sample_composition_time_offset0, "sample_composition_time_offset0"); 
			}
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;

		if ((flags  &  0x100) ==  0x100)
		{
			boxSize += stream.WriteUInt32( this.sample_duration, "sample_duration"); 
		}

		if ((flags  &  0x200) ==  0x200)
		{
			boxSize += stream.WriteUInt32( this.sample_size, "sample_size"); 
		}

		if ((flags  &  0x400) ==  0x400)
		{
			boxSize += stream.WriteUInt32( this.sample_flags, "sample_flags"); 
		}

		if ((flags  &  0x800) ==  0x800)
		{

			if (version == 0)
			{
				boxSize += stream.WriteUInt32( this.sample_composition_time_offset, "sample_composition_time_offset"); 
			}

			else 
			{
				boxSize += stream.WriteInt32( this.sample_composition_time_offset0, "sample_composition_time_offset0"); 
			}
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;

		if ((flags  &  0x100) ==  0x100)
		{
			boxSize += 32; // sample_duration
		}

		if ((flags  &  0x200) ==  0x200)
		{
			boxSize += 32; // sample_size
		}

		if ((flags  &  0x400) ==  0x400)
		{
			boxSize += 32; // sample_flags
		}

		if ((flags  &  0x800) ==  0x800)
		{

			if (version == 0)
			{
				boxSize += 32; // sample_composition_time_offset
			}

			else 
			{
				boxSize += 32; // sample_composition_time_offset0
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class TrackTypeBox extends GeneralTypeBox ('ttyp')
{}
*/
public partial class TrackTypeBox : GeneralTypeBox
{
	public const string TYPE = "ttyp";
	public override string DisplayName { get { return "TrackTypeBox"; } }

	public TrackTypeBox(): base(IsoStream.FromFourCC("ttyp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
aligned(8) class TypeCombinationBox extends Box('tyco') {
	unsigned int(32)	compatible_brands[];	// to end of the box
}
*/
public partial class TypeCombinationBox : Box
{
	public const string TYPE = "tyco";
	public override string DisplayName { get { return "TypeCombinationBox"; } }

	protected uint[] compatible_brands;  //  to end of the box
	public uint[] CompatibleBrands { get { return this.compatible_brands; } set { this.compatible_brands = value; } }

	public TypeCombinationBox(): base(IsoStream.FromFourCC("tyco"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32ArrayTillEnd(boxSize, readSize,  out this.compatible_brands, "compatible_brands"); // to end of the box
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32ArrayTillEnd( this.compatible_brands, "compatible_brands"); // to end of the box
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)compatible_brands.Length * 32); // compatible_brands
		return boxSize;
	}
}


/*
aligned(8) class UserDataBox extends Box('udta') {
}
*/
public partial class UserDataBox : Box
{
	public const string TYPE = "udta";
	public override string DisplayName { get { return "UserDataBox"; } }

	public UserDataBox(): base(IsoStream.FromFourCC("udta"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class BoxHeader (
		unsigned int(32) boxtype,
		optional unsigned int(8)[16] extended_type) {
	unsigned int(32) size;
	unsigned int(32) type = boxtype;
	if (size==1) {
		unsigned int(64) largesize;
	} else if (size==0) {
		// box extends to end of file
	}
	if (type=='uuid') {
		unsigned int(8)[16] usertype = extended_type;
	}
}
*/
public partial class BoxHeader : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "BoxHeader"; } }

	protected uint size; 
	public uint Size { get { return this.size; } set { this.size = value; } }

	protected uint type; // = boxtype
	public uint Type { get { return this.type; } set { this.type = value; } }

	protected ulong largesize; 
	public ulong Largesize { get { return this.largesize; } set { this.largesize = value; } }

	protected byte[] usertype; // = extended_type
	public byte[] Usertype { get { return this.usertype; } set { this.usertype = value; } }

	public BoxHeader(uint boxtype = 0, byte[] extended_type = null): base()
	{
		this.type = boxtype;
		this.usertype = extended_type;
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.size, "size"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.type, "type"); 

		if (size==1)
		{
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.largesize, "largesize"); 
		}

		else if (size==0)
		{
			/*  box extends to end of file */
		}

		if (type==IsoStream.FromFourCC("uuid"))
		{
			boxSize += stream.ReadUInt8Array(boxSize, readSize, 16,  out this.usertype, "usertype"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt32( this.size, "size"); 
		boxSize += stream.WriteUInt32( this.type, "type"); 

		if (size==1)
		{
			boxSize += stream.WriteUInt64( this.largesize, "largesize"); 
		}

		else if (size==0)
		{
			/*  box extends to end of file */
		}

		if (type==IsoStream.FromFourCC("uuid"))
		{
			boxSize += stream.WriteUInt8Array(16,  this.usertype, "usertype"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 32; // size
		boxSize += 32; // type

		if (size==1)
		{
			boxSize += 64; // largesize
		}

		else if (size==0)
		{
			/*  box extends to end of file */
		}

		if (type==IsoStream.FromFourCC("uuid"))
		{
			boxSize += 16 * 8; // usertype
		}
		return boxSize;
	}
}


/*
aligned(8) class VideoMediaHeaderBox
	extends FullBox('vmhd', version = 0, 1) {
	template unsigned int(16)		graphicsmode = 0;	// copy, see below
	template unsigned int(16)[3]	opcolor = {0, 0, 0};
}
*/
public partial class VideoMediaHeaderBox : FullBox
{
	public const string TYPE = "vmhd";
	public override string DisplayName { get { return "VideoMediaHeaderBox"; } }

	protected ushort graphicsmode = 0;  //  copy, see below
	public ushort Graphicsmode { get { return this.graphicsmode; } set { this.graphicsmode = value; } }

	protected ushort[] opcolor = {0, 0, 0}; 
	public ushort[] Opcolor { get { return this.opcolor; } set { this.opcolor = value; } }

	public VideoMediaHeaderBox(): base(IsoStream.FromFourCC("vmhd"), 0, 1)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.graphicsmode, "graphicsmode"); // copy, see below
		boxSize += stream.ReadUInt16Array(boxSize, readSize, 3,  out this.opcolor, "opcolor"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.graphicsmode, "graphicsmode"); // copy, see below
		boxSize += stream.WriteUInt16Array(3,  this.opcolor, "opcolor"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // graphicsmode
		boxSize += 3 * 16; // opcolor
		return boxSize;
	}
}


/*
aligned(8) class XMLBox
	extends FullBox('xml ', version = 0, 0) {
	utfstring xml;
}
*/
public partial class XMLBox : FullBox
{
	public const string TYPE = "xml ";
	public override string DisplayName { get { return "XMLBox"; } }

	protected BinaryUTF8String xml; 
	public BinaryUTF8String Xml { get { return this.xml; } set { this.xml = value; } }

	public XMLBox(): base(IsoStream.FromFourCC("xml "), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.xml, "xml"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.xml, "xml"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(xml); // xml
		return boxSize;
	}
}


/*
class AmbientViewingEnvironmentBox extends Box('amve'){
	unsigned int(32) ambient_illuminance; 
	unsigned int(16) ambient_light_x;
	unsigned int(16) ambient_light_y;
}
*/
public partial class AmbientViewingEnvironmentBox : Box
{
	public const string TYPE = "amve";
	public override string DisplayName { get { return "AmbientViewingEnvironmentBox"; } }

	protected uint ambient_illuminance; 
	public uint AmbientIlluminance { get { return this.ambient_illuminance; } set { this.ambient_illuminance = value; } }

	protected ushort ambient_light_x; 
	public ushort AmbientLightx { get { return this.ambient_light_x; } set { this.ambient_light_x = value; } }

	protected ushort ambient_light_y; 
	public ushort AmbientLighty { get { return this.ambient_light_y; } set { this.ambient_light_y = value; } }

	public AmbientViewingEnvironmentBox(): base(IsoStream.FromFourCC("amve"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.ambient_illuminance, "ambient_illuminance"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.ambient_light_x, "ambient_light_x"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.ambient_light_y, "ambient_light_y"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.ambient_illuminance, "ambient_illuminance"); 
		boxSize += stream.WriteUInt16( this.ambient_light_x, "ambient_light_x"); 
		boxSize += stream.WriteUInt16( this.ambient_light_y, "ambient_light_y"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // ambient_illuminance
		boxSize += 16; // ambient_light_x
		boxSize += 16; // ambient_light_y
		return boxSize;
	}
}


/*
class MetaDataKeyTableBox extends FullBox('keys') { 
        unsigned int(32) entry_count;
        MetaDataKeyBox[];
    }
*/
public partial class MetaDataKeyTableBox : FullBox
{
	public const string TYPE = "keys";
	public override string DisplayName { get { return "MetaDataKeyTableBox"; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }
	public IEnumerable<MetaDataKeyBox> _MetaDataKeyBox { get { return this.children.OfType<MetaDataKeyBox>(); } }

	public MetaDataKeyTableBox(): base(IsoStream.FromFourCC("keys"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.MetaDataKeyBox, "MetaDataKeyBox"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 
		// boxSize += stream.WriteBox( this.MetaDataKeyBox, "MetaDataKeyBox"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // entry_count
		// boxSize += IsoStream.CalculateBoxSize(MetaDataKeyBox); // MetaDataKeyBox
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class URIBox extends FullBox('uri ', version = 0, 0) {
	utf8string theURI;
}
*/
public partial class URIBox : FullBox
{
	public const string TYPE = "uri ";
	public override string DisplayName { get { return "URIBox"; } }

	protected BinaryUTF8String theURI; 
	public BinaryUTF8String TheURI { get { return this.theURI; } set { this.theURI = value; } }

	public URIBox(): base(IsoStream.FromFourCC("uri "), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.theURI, "theURI"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.theURI, "theURI"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(theURI); // theURI
		return boxSize;
	}
}


/*
class AudioSampleEntry(codingname) extends SampleEntry (codingname) {
    unsigned int(16) soundversion = 0;
    unsigned int(16) reserved1 = 0;
    unsigned int(32) reserved2 = 0;
    unsigned int(16) channelcount;
    template unsigned int(16) samplesize = 16;

    unsigned int(16) pre_defined = 0;
    const unsigned int(16) reserved = 0;
    template unsigned int(32) samplerate;

    if(codingname != 'mlpa') {
        samplerate = samplerate >> 16;
    }

    if(soundversion == 1 || soundversion == 2) {
       unsigned int(32) samplesPerPacket;
       unsigned int(32) bytesPerPacket;
       unsigned int(32) bytesPerFrame;
       unsigned int(32) bytesPerSample;
    }

    if(soundversion == 2) {
       unsigned int(8)[20] soundVersion2Data;
    }

    ChannelLayout();
    // we permit any number of DownMix or DRC boxes: 
    DownMixInstructions() [];
    DRCCoefficientsBasic() [];
    DRCInstructionsBasic() [];
    DRCCoefficientsUniDRC() [];
    DRCInstructionsUniDRC() [];
    // we permit only one DRC Extension box:
    UniDrcConfigExtension();
    // optional boxes follow
    SamplingRateBox();
    Box (); // further boxes as needed
}
*/
public partial class AudioSampleEntry : SampleEntry
{
	public override string DisplayName { get { return "AudioSampleEntry"; } }

	protected ushort soundversion = 0; 
	public ushort Soundversion { get { return this.soundversion; } set { this.soundversion = value; } }

	protected ushort reserved1 = 0; 
	public ushort Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected uint reserved2 = 0; 
	public uint Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

	protected ushort channelcount; 
	public ushort Channelcount { get { return this.channelcount; } set { this.channelcount = value; } }

	protected ushort samplesize = 16; 
	public ushort Samplesize { get { return this.samplesize; } set { this.samplesize = value; } }

	protected ushort pre_defined = 0; 
	public ushort PreDefined { get { return this.pre_defined; } set { this.pre_defined = value; } }

	protected ushort reserved = 0; 
	public ushort Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected uint samplerate; 
	public uint Samplerate { get { return this.samplerate; } set { this.samplerate = value; } }

	protected uint samplesPerPacket; 
	public uint SamplesPerPacket { get { return this.samplesPerPacket; } set { this.samplesPerPacket = value; } }

	protected uint bytesPerPacket; 
	public uint BytesPerPacket { get { return this.bytesPerPacket; } set { this.bytesPerPacket = value; } }

	protected uint bytesPerFrame; 
	public uint BytesPerFrame { get { return this.bytesPerFrame; } set { this.bytesPerFrame = value; } }

	protected uint bytesPerSample; 
	public uint BytesPerSample { get { return this.bytesPerSample; } set { this.bytesPerSample = value; } }

	protected byte[] soundVersion2Data; 
	public byte[] SoundVersion2Data { get { return this.soundVersion2Data; } set { this.soundVersion2Data = value; } }
	public ChannelLayout _ChannelLayout { get { return this.children.OfType<ChannelLayout>().FirstOrDefault(); } }
	public IEnumerable<DownMixInstructions> _DownMixInstructions { get { return this.children.OfType<DownMixInstructions>(); } }
	public IEnumerable<DRCCoefficientsBasic> _DRCCoefficientsBasic { get { return this.children.OfType<DRCCoefficientsBasic>(); } }
	public IEnumerable<DRCInstructionsBasic> _DRCInstructionsBasic { get { return this.children.OfType<DRCInstructionsBasic>(); } }
	public IEnumerable<DRCCoefficientsUniDRC> _DRCCoefficientsUniDRC { get { return this.children.OfType<DRCCoefficientsUniDRC>(); } }
	public IEnumerable<DRCInstructionsUniDRC> _DRCInstructionsUniDRC { get { return this.children.OfType<DRCInstructionsUniDRC>(); } }
	public UniDrcConfigExtension _UniDrcConfigExtension { get { return this.children.OfType<UniDrcConfigExtension>().FirstOrDefault(); } }
	public SamplingRateBox _SamplingRateBox { get { return this.children.OfType<SamplingRateBox>().FirstOrDefault(); } }
	public Box _Box { get { return this.children.OfType<Box>().FirstOrDefault(); } }

	public AudioSampleEntry(uint codingname = 0): base(codingname)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.soundversion, "soundversion"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.reserved1, "reserved1"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.reserved2, "reserved2"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.channelcount, "channelcount"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.samplesize, "samplesize"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.pre_defined, "pre_defined"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.samplerate, "samplerate"); 

		if (FourCC != IsoStream.FromFourCC("mlpa"))
		{
			// samplerate = samplerate >> 16;
		}

		if (soundversion == 1 || soundversion == 2)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.samplesPerPacket, "samplesPerPacket"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.bytesPerPacket, "bytesPerPacket"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.bytesPerFrame, "bytesPerFrame"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.bytesPerSample, "bytesPerSample"); 
		}

		if (soundversion == 2)
		{
			boxSize += stream.ReadUInt8Array(boxSize, readSize, 20,  out this.soundVersion2Data, "soundVersion2Data"); 
		}
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.ChannelLayout, "ChannelLayout"); // we permit any number of DownMix or DRC boxes: 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.DownMixInstructions, "DownMixInstructions"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.DRCCoefficientsBasic, "DRCCoefficientsBasic"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.DRCInstructionsBasic, "DRCInstructionsBasic"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.DRCCoefficientsUniDRC, "DRCCoefficientsUniDRC"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.DRCInstructionsUniDRC, "DRCInstructionsUniDRC"); // we permit only one DRC Extension box:
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.UniDrcConfigExtension, "UniDrcConfigExtension"); // optional boxes follow
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.SamplingRateBox, "SamplingRateBox"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.Box, "Box"); // further boxes as needed
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.soundversion, "soundversion"); 
		boxSize += stream.WriteUInt16( this.reserved1, "reserved1"); 
		boxSize += stream.WriteUInt32( this.reserved2, "reserved2"); 
		boxSize += stream.WriteUInt16( this.channelcount, "channelcount"); 
		boxSize += stream.WriteUInt16( this.samplesize, "samplesize"); 
		boxSize += stream.WriteUInt16( this.pre_defined, "pre_defined"); 
		boxSize += stream.WriteUInt16( this.reserved, "reserved"); 
		boxSize += stream.WriteUInt32( this.samplerate, "samplerate"); 

		if (FourCC != IsoStream.FromFourCC("mlpa"))
		{
			// samplerate = samplerate >> 16;
		}

		if (soundversion == 1 || soundversion == 2)
		{
			boxSize += stream.WriteUInt32( this.samplesPerPacket, "samplesPerPacket"); 
			boxSize += stream.WriteUInt32( this.bytesPerPacket, "bytesPerPacket"); 
			boxSize += stream.WriteUInt32( this.bytesPerFrame, "bytesPerFrame"); 
			boxSize += stream.WriteUInt32( this.bytesPerSample, "bytesPerSample"); 
		}

		if (soundversion == 2)
		{
			boxSize += stream.WriteUInt8Array(20,  this.soundVersion2Data, "soundVersion2Data"); 
		}
		// boxSize += stream.WriteBox( this.ChannelLayout, "ChannelLayout"); // we permit any number of DownMix or DRC boxes: 
		// boxSize += stream.WriteBox( this.DownMixInstructions, "DownMixInstructions"); 
		// boxSize += stream.WriteBox( this.DRCCoefficientsBasic, "DRCCoefficientsBasic"); 
		// boxSize += stream.WriteBox( this.DRCInstructionsBasic, "DRCInstructionsBasic"); 
		// boxSize += stream.WriteBox( this.DRCCoefficientsUniDRC, "DRCCoefficientsUniDRC"); 
		// boxSize += stream.WriteBox( this.DRCInstructionsUniDRC, "DRCInstructionsUniDRC"); // we permit only one DRC Extension box:
		// boxSize += stream.WriteBox( this.UniDrcConfigExtension, "UniDrcConfigExtension"); // optional boxes follow
		// boxSize += stream.WriteBox( this.SamplingRateBox, "SamplingRateBox"); 
		// boxSize += stream.WriteBox( this.Box, "Box"); // further boxes as needed
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // soundversion
		boxSize += 16; // reserved1
		boxSize += 32; // reserved2
		boxSize += 16; // channelcount
		boxSize += 16; // samplesize
		boxSize += 16; // pre_defined
		boxSize += 16; // reserved
		boxSize += 32; // samplerate

		if (FourCC != IsoStream.FromFourCC("mlpa"))
		{
			// samplerate = samplerate >> 16;
		}

		if (soundversion == 1 || soundversion == 2)
		{
			boxSize += 32; // samplesPerPacket
			boxSize += 32; // bytesPerPacket
			boxSize += 32; // bytesPerFrame
			boxSize += 32; // bytesPerSample
		}

		if (soundversion == 2)
		{
			boxSize += 20 * 8; // soundVersion2Data
		}
		// boxSize += IsoStream.CalculateBoxSize(ChannelLayout); // ChannelLayout
		// boxSize += IsoStream.CalculateBoxSize(DownMixInstructions); // DownMixInstructions
		// boxSize += IsoStream.CalculateBoxSize(DRCCoefficientsBasic); // DRCCoefficientsBasic
		// boxSize += IsoStream.CalculateBoxSize(DRCInstructionsBasic); // DRCInstructionsBasic
		// boxSize += IsoStream.CalculateBoxSize(DRCCoefficientsUniDRC); // DRCCoefficientsUniDRC
		// boxSize += IsoStream.CalculateBoxSize(DRCInstructionsUniDRC); // DRCInstructionsUniDRC
		// boxSize += IsoStream.CalculateBoxSize(UniDrcConfigExtension); // UniDrcConfigExtension
		// boxSize += IsoStream.CalculateBoxSize(SamplingRateBox); // SamplingRateBox
		// boxSize += IsoStream.CalculateBoxSize(Box); // Box
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class AudioSampleEntryV1(codingname) extends SampleEntry (codingname){
	unsigned int(16) entry_version;	// shall be 1, 
	// and shall be in an stsd with version ==1
	const unsigned int(16)[3] reserved = 0;
	template unsigned int(16) channelcount;	// shall be correct
	template unsigned int(16) samplesize = 16;
	unsigned int(16) pre_defined = 0;
	const unsigned int(16) reserved = 0 ;
	template unsigned int(32) samplerate = 1<<16;
	// optional boxes follow
	SamplingRateBox();
	Box ();		// further boxes as needed
	ChannelLayout();
	DownMixInstructions() [];
	DRCCoefficientsBasic() [];
	DRCInstructionsBasic() [];
	DRCCoefficientsUniDRC() [];
	DRCInstructionsUniDRC() [];
	// we permit only one DRC Extension box:
	UniDrcConfigExtension();
	// optional boxes follow
	ChannelLayout();
}
*/
public partial class AudioSampleEntryV1 : SampleEntry
{
	public override string DisplayName { get { return "AudioSampleEntryV1"; } }

	protected ushort entry_version;  //  shall be 1, 
	public ushort EntryVersion { get { return this.entry_version; } set { this.entry_version = value; } }

	protected ushort[] reserved = []; 
	public ushort[] Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected ushort channelcount;  //  shall be correct
	public ushort Channelcount { get { return this.channelcount; } set { this.channelcount = value; } }

	protected ushort samplesize = 16; 
	public ushort Samplesize { get { return this.samplesize; } set { this.samplesize = value; } }

	protected ushort pre_defined = 0; 
	public ushort PreDefined { get { return this.pre_defined; } set { this.pre_defined = value; } }

	protected ushort reserved0 = 0 ; 
	public ushort Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected uint samplerate = 1<<16;  //  optional boxes follow
	public uint Samplerate { get { return this.samplerate; } set { this.samplerate = value; } }
	public SamplingRateBox _SamplingRateBox { get { return this.children.OfType<SamplingRateBox>().FirstOrDefault(); } }
	public Box _Box { get { return this.children.OfType<Box>().FirstOrDefault(); } }
	public ChannelLayout _ChannelLayout { get { return this.children.OfType<ChannelLayout>().FirstOrDefault(); } }
	public IEnumerable<DownMixInstructions> _DownMixInstructions { get { return this.children.OfType<DownMixInstructions>(); } }
	public IEnumerable<DRCCoefficientsBasic> _DRCCoefficientsBasic { get { return this.children.OfType<DRCCoefficientsBasic>(); } }
	public IEnumerable<DRCInstructionsBasic> _DRCInstructionsBasic { get { return this.children.OfType<DRCInstructionsBasic>(); } }
	public IEnumerable<DRCCoefficientsUniDRC> _DRCCoefficientsUniDRC { get { return this.children.OfType<DRCCoefficientsUniDRC>(); } }
	public IEnumerable<DRCInstructionsUniDRC> _DRCInstructionsUniDRC { get { return this.children.OfType<DRCInstructionsUniDRC>(); } }
	public UniDrcConfigExtension _UniDrcConfigExtension { get { return this.children.OfType<UniDrcConfigExtension>().FirstOrDefault(); } }

	public AudioSampleEntryV1(uint codingname = 0): base(codingname)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.entry_version, "entry_version"); // shall be 1, 
		/*  and shall be in an stsd with version ==1 */
		boxSize += stream.ReadUInt16Array(boxSize, readSize, 3,  out this.reserved, "reserved"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.channelcount, "channelcount"); // shall be correct
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.samplesize, "samplesize"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.pre_defined, "pre_defined"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.reserved0, "reserved0"); 
		if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadUInt32(boxSize, readSize,  out this.samplerate, "samplerate"); // optional boxes follow
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.SamplingRateBox, "SamplingRateBox"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.Box, "Box"); // further boxes as needed
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.ChannelLayout, "ChannelLayout"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.DownMixInstructions, "DownMixInstructions"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.DRCCoefficientsBasic, "DRCCoefficientsBasic"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.DRCInstructionsBasic, "DRCInstructionsBasic"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.DRCCoefficientsUniDRC, "DRCCoefficientsUniDRC"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.DRCInstructionsUniDRC, "DRCInstructionsUniDRC"); // we permit only one DRC Extension box:
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.UniDrcConfigExtension, "UniDrcConfigExtension"); // optional boxes follow
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.ChannelLayout, "ChannelLayout"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.entry_version, "entry_version"); // shall be 1, 
		/*  and shall be in an stsd with version ==1 */
		boxSize += stream.WriteUInt16Array(3,  this.reserved, "reserved"); 
		boxSize += stream.WriteUInt16( this.channelcount, "channelcount"); // shall be correct
		boxSize += stream.WriteUInt16( this.samplesize, "samplesize"); 
		boxSize += stream.WriteUInt16( this.pre_defined, "pre_defined"); 
		boxSize += stream.WriteUInt16( this.reserved0, "reserved0"); 
		boxSize += stream.WriteUInt32( this.samplerate, "samplerate"); // optional boxes follow
		// boxSize += stream.WriteBox( this.SamplingRateBox, "SamplingRateBox"); 
		// boxSize += stream.WriteBox( this.Box, "Box"); // further boxes as needed
		// boxSize += stream.WriteBox( this.ChannelLayout, "ChannelLayout"); 
		// boxSize += stream.WriteBox( this.DownMixInstructions, "DownMixInstructions"); 
		// boxSize += stream.WriteBox( this.DRCCoefficientsBasic, "DRCCoefficientsBasic"); 
		// boxSize += stream.WriteBox( this.DRCInstructionsBasic, "DRCInstructionsBasic"); 
		// boxSize += stream.WriteBox( this.DRCCoefficientsUniDRC, "DRCCoefficientsUniDRC"); 
		// boxSize += stream.WriteBox( this.DRCInstructionsUniDRC, "DRCInstructionsUniDRC"); // we permit only one DRC Extension box:
		// boxSize += stream.WriteBox( this.UniDrcConfigExtension, "UniDrcConfigExtension"); // optional boxes follow
		// boxSize += stream.WriteBox( this.ChannelLayout, "ChannelLayout"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // entry_version
		/*  and shall be in an stsd with version ==1 */
		boxSize += 3 * 16; // reserved
		boxSize += 16; // channelcount
		boxSize += 16; // samplesize
		boxSize += 16; // pre_defined
		boxSize += 16; // reserved0
		boxSize += 32; // samplerate
		// boxSize += IsoStream.CalculateBoxSize(SamplingRateBox); // SamplingRateBox
		// boxSize += IsoStream.CalculateBoxSize(Box); // Box
		// boxSize += IsoStream.CalculateBoxSize(ChannelLayout); // ChannelLayout
		// boxSize += IsoStream.CalculateBoxSize(DownMixInstructions); // DownMixInstructions
		// boxSize += IsoStream.CalculateBoxSize(DRCCoefficientsBasic); // DRCCoefficientsBasic
		// boxSize += IsoStream.CalculateBoxSize(DRCInstructionsBasic); // DRCInstructionsBasic
		// boxSize += IsoStream.CalculateBoxSize(DRCCoefficientsUniDRC); // DRCCoefficientsUniDRC
		// boxSize += IsoStream.CalculateBoxSize(DRCInstructionsUniDRC); // DRCInstructionsUniDRC
		// boxSize += IsoStream.CalculateBoxSize(UniDrcConfigExtension); // UniDrcConfigExtension
		// boxSize += IsoStream.CalculateBoxSize(ChannelLayout); // ChannelLayout
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class FontSampleEntry(codingname) extends SampleEntry (codingname){
	//other boxes from derived specifications
}
*/
public partial class FontSampleEntry : SampleEntry
{
	public override string DisplayName { get { return "FontSampleEntry"; } }

	public FontSampleEntry(uint codingname = 0): base(codingname)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		/* other boxes from derived specifications */
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		/* other boxes from derived specifications */
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		/* other boxes from derived specifications */
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class MetaDataSampleEntry(codingname) extends SampleEntry (codingname) {
}
*/
public partial class MetaDataSampleEntry : SampleEntry
{
	public override string DisplayName { get { return "MetaDataSampleEntry"; } }

	public MetaDataSampleEntry(uint codingname = 0): base(codingname)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
class GenericSampleEntry extends Box('encv') {
	// ProtectionSchemeInfoBox {
		// OriginalFormatBox;	// data_format is 'resv'
		// SchemeTypeBox;
		// SchemeInformationBox;
	// }
// tRestrictedSchemeInfoBox {
		// OriginalFormatBox; // data_format indicates a codec, e.g. 'avc1'
		// SchemeTypeBox;
		// SchemeInformationBox;
	// }
	// Boxes specific to the untransformed sample entry type
	// For 'avc1', these would include AVCConfigurationBox
}
*/
public partial class GenericSampleEntry : Box
{
	public const string TYPE = "encv";
	public override string DisplayName { get { return "GenericSampleEntry"; } }

	public GenericSampleEntry(): base(IsoStream.FromFourCC("encv"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		/*  ProtectionSchemeInfoBox { */
		/*  OriginalFormatBox;	// data_format is 'resv' */
		/*  SchemeTypeBox; */
		/*  SchemeInformationBox; */
		/*  } */
		/*  tRestrictedSchemeInfoBox { */
		/*  OriginalFormatBox; // data_format indicates a codec, e.g. 'avc1' */
		/*  SchemeTypeBox; */
		/*  SchemeInformationBox; */
		/*  } */
		/*  Boxes specific to the untransformed sample entry type */
		/*  For 'avc1', these would include AVCConfigurationBox */
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		/*  ProtectionSchemeInfoBox { */
		/*  OriginalFormatBox;	// data_format is 'resv' */
		/*  SchemeTypeBox; */
		/*  SchemeInformationBox; */
		/*  } */
		/*  tRestrictedSchemeInfoBox { */
		/*  OriginalFormatBox; // data_format indicates a codec, e.g. 'avc1' */
		/*  SchemeTypeBox; */
		/*  SchemeInformationBox; */
		/*  } */
		/*  Boxes specific to the untransformed sample entry type */
		/*  For 'avc1', these would include AVCConfigurationBox */
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		/*  ProtectionSchemeInfoBox { */
		/*  OriginalFormatBox;	// data_format is 'resv' */
		/*  SchemeTypeBox; */
		/*  SchemeInformationBox; */
		/*  } */
		/*  tRestrictedSchemeInfoBox { */
		/*  OriginalFormatBox; // data_format indicates a codec, e.g. 'avc1' */
		/*  SchemeTypeBox; */
		/*  SchemeInformationBox; */
		/*  } */
		/*  Boxes specific to the untransformed sample entry type */
		/*  For 'avc1', these would include AVCConfigurationBox */
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class XMLMetaDataSampleEntry() extends MetaDataSampleEntry ('metx') {
	utf8string content_encoding; // optional
	utf8list namespace;
	utf8list schema_location; // optional
}
*/
public partial class XMLMetaDataSampleEntry : MetaDataSampleEntry
{
	public const string TYPE = "metx";
	public override string DisplayName { get { return "XMLMetaDataSampleEntry"; } }

	protected BinaryUTF8String content_encoding;  //  optional
	public BinaryUTF8String ContentEncoding { get { return this.content_encoding; } set { this.content_encoding = value; } }

	protected BinaryUTF8String ns; 
	public BinaryUTF8String Ns { get { return this.ns; } set { this.ns = value; } }

	protected BinaryUTF8String schema_location;  //  optional
	public BinaryUTF8String SchemaLocation { get { return this.schema_location; } set { this.schema_location = value; } }

	public XMLMetaDataSampleEntry(): base(IsoStream.FromFourCC("metx"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.content_encoding, "content_encoding"); // optional
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.ns, "ns"); 
		if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.schema_location, "schema_location"); // optional
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.content_encoding, "content_encoding"); // optional
		boxSize += stream.WriteStringZeroTerminated( this.ns, "ns"); 
		boxSize += stream.WriteStringZeroTerminated( this.schema_location, "schema_location"); // optional
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(content_encoding); // content_encoding
		boxSize += IsoStream.CalculateStringSize(ns); // ns
		boxSize += IsoStream.CalculateStringSize(schema_location); // schema_location
		return boxSize;
	}
}


/*
class TextMetaDataSampleEntry() extends MetaDataSampleEntry ('mett') {
	utf8string content_encoding; // optional
	utf8string mime_format;
	TextConfigBox (); // optional
}
*/
public partial class TextMetaDataSampleEntry : MetaDataSampleEntry
{
	public const string TYPE = "mett";
	public override string DisplayName { get { return "TextMetaDataSampleEntry"; } }

	protected BinaryUTF8String content_encoding;  //  optional
	public BinaryUTF8String ContentEncoding { get { return this.content_encoding; } set { this.content_encoding = value; } }

	protected BinaryUTF8String mime_format; 
	public BinaryUTF8String MimeFormat { get { return this.mime_format; } set { this.mime_format = value; } }
	public TextConfigBox _TextConfigBox { get { return this.children.OfType<TextConfigBox>().FirstOrDefault(); } }

	public TextMetaDataSampleEntry(): base(IsoStream.FromFourCC("mett"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.content_encoding, "content_encoding"); // optional
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.mime_format, "mime_format"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.TextConfigBox, "TextConfigBox"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.content_encoding, "content_encoding"); // optional
		boxSize += stream.WriteStringZeroTerminated( this.mime_format, "mime_format"); 
		// boxSize += stream.WriteBox( this.TextConfigBox, "TextConfigBox"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(content_encoding); // content_encoding
		boxSize += IsoStream.CalculateStringSize(mime_format); // mime_format
		// boxSize += IsoStream.CalculateBoxSize(TextConfigBox); // TextConfigBox
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class URIMetaSampleEntry() extends MetaDataSampleEntry ('urim') {
	URIBox			the_label;
	URIInitBox		init;		// optional
}
*/
public partial class URIMetaSampleEntry : MetaDataSampleEntry
{
	public const string TYPE = "urim";
	public override string DisplayName { get { return "URIMetaSampleEntry"; } }
	public URIBox TheLabel { get { return this.children.OfType<URIBox>().FirstOrDefault(); } }
	public URIInitBox Init { get { return this.children.OfType<URIInitBox>().FirstOrDefault(); } }

	public URIMetaSampleEntry(): base(IsoStream.FromFourCC("urim"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.the_label, "the_label"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.init, "init"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.the_label, "the_label"); 
		// boxSize += stream.WriteBox( this.init, "init"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(the_label); // the_label
		// boxSize += IsoStream.CalculateBoxSize(init); // init
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class BoxedMetaDataSampleEntry 
	extends MetaDataSampleEntry ('mebx') {
	MetaDataKeyTableBox();				// mandatory
	BitRateBox ();							// optional
}
*/
public partial class BoxedMetaDataSampleEntry : MetaDataSampleEntry
{
	public const string TYPE = "mebx";
	public override string DisplayName { get { return "BoxedMetaDataSampleEntry"; } }
	public MetaDataKeyTableBox _MetaDataKeyTableBox { get { return this.children.OfType<MetaDataKeyTableBox>().FirstOrDefault(); } }
	public BitRateBox _BitRateBox { get { return this.children.OfType<BitRateBox>().FirstOrDefault(); } }

	public BoxedMetaDataSampleEntry(): base(IsoStream.FromFourCC("mebx"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.MetaDataKeyTableBox, "MetaDataKeyTableBox"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.BitRateBox, "BitRateBox"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.MetaDataKeyTableBox, "MetaDataKeyTableBox"); // mandatory
		// boxSize += stream.WriteBox( this.BitRateBox, "BitRateBox"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(MetaDataKeyTableBox); // MetaDataKeyTableBox
		// boxSize += IsoStream.CalculateBoxSize(BitRateBox); // BitRateBox
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class FDHintSampleEntry() extends HintSampleEntry ('fdp ') {
	unsigned int(16)	hinttrackversion = 1;
	unsigned int(16)	highestcompatibleversion = 1;
	unsigned int(16)	partition_entry_ID;
	unsigned int(16)	FEC_overhead;
}
*/
public partial class FDHintSampleEntry : HintSampleEntry
{
	public const string TYPE = "fdp ";
	public override string DisplayName { get { return "FDHintSampleEntry"; } }

	protected ushort hinttrackversion = 1; 
	public ushort Hinttrackversion { get { return this.hinttrackversion; } set { this.hinttrackversion = value; } }

	protected ushort highestcompatibleversion = 1; 
	public ushort Highestcompatibleversion { get { return this.highestcompatibleversion; } set { this.highestcompatibleversion = value; } }

	protected ushort partition_entry_ID; 
	public ushort PartitionEntryID { get { return this.partition_entry_ID; } set { this.partition_entry_ID = value; } }

	protected ushort FEC_overhead; 
	public ushort FECOverhead { get { return this.FEC_overhead; } set { this.FEC_overhead = value; } }

	public FDHintSampleEntry(): base(IsoStream.FromFourCC("fdp "))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.hinttrackversion, "hinttrackversion"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.highestcompatibleversion, "highestcompatibleversion"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.partition_entry_ID, "partition_entry_ID"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.FEC_overhead, "FEC_overhead"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.hinttrackversion, "hinttrackversion"); 
		boxSize += stream.WriteUInt16( this.highestcompatibleversion, "highestcompatibleversion"); 
		boxSize += stream.WriteUInt16( this.partition_entry_ID, "partition_entry_ID"); 
		boxSize += stream.WriteUInt16( this.FEC_overhead, "FEC_overhead"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // hinttrackversion
		boxSize += 16; // highestcompatibleversion
		boxSize += 16; // partition_entry_ID
		boxSize += 16; // FEC_overhead
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class IncompleteAVCSampleEntry() extends VisualSampleEntry ('icpv'){
	CompleteTrackInfoBox();
	AVCConfigurationBox config;
}
*/
public partial class IncompleteAVCSampleEntry : VisualSampleEntry
{
	public const string TYPE = "icpv";
	public override string DisplayName { get { return "IncompleteAVCSampleEntry"; } }
	public CompleteTrackInfoBox _CompleteTrackInfoBox { get { return this.children.OfType<CompleteTrackInfoBox>().FirstOrDefault(); } }
	public AVCConfigurationBox Config { get { return this.children.OfType<AVCConfigurationBox>().FirstOrDefault(); } }

	public IncompleteAVCSampleEntry(): base(IsoStream.FromFourCC("icpv"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.CompleteTrackInfoBox, "CompleteTrackInfoBox"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.CompleteTrackInfoBox, "CompleteTrackInfoBox"); 
		// boxSize += stream.WriteBox( this.config, "config"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(CompleteTrackInfoBox); // CompleteTrackInfoBox
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class ProtectedMPEG2TransportStreamSampleEntry
	extends MPEG2TSSampleEntry('pm2t') {
	ProtectionSchemeInfoBox		SchemeInformation;
}
*/
public partial class ProtectedMPEG2TransportStreamSampleEntry : MPEG2TSSampleEntry
{
	public const string TYPE = "pm2t";
	public override string DisplayName { get { return "ProtectedMPEG2TransportStreamSampleEntry"; } }
	public ProtectionSchemeInfoBox _SchemeInformation { get { return this.children.OfType<ProtectionSchemeInfoBox>().FirstOrDefault(); } }

	public ProtectedMPEG2TransportStreamSampleEntry(): base(IsoStream.FromFourCC("pm2t"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.SchemeInformation, "SchemeInformation"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.SchemeInformation, "SchemeInformation"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(SchemeInformation); // SchemeInformation
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class ProtectedRtpReceptionHintSampleEntry
	extends RtpReceptionHintSampleEntry ('prtp') {
	ProtectionSchemeInfoBox		SchemeInformation;
}
*/
public partial class ProtectedRtpReceptionHintSampleEntry : RtpReceptionHintSampleEntry
{
	public const string TYPE = "prtp";
	public override string DisplayName { get { return "ProtectedRtpReceptionHintSampleEntry"; } }
	public ProtectionSchemeInfoBox _SchemeInformation { get { return this.children.OfType<ProtectionSchemeInfoBox>().FirstOrDefault(); } }

	public ProtectedRtpReceptionHintSampleEntry(): base(IsoStream.FromFourCC("prtp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.SchemeInformation, "SchemeInformation"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.SchemeInformation, "SchemeInformation"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(SchemeInformation); // SchemeInformation
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class MPEG2TSReceptionSampleEntry extends MPEG2TSSampleEntry('rm2t') {}
*/
public partial class MPEG2TSReceptionSampleEntry : MPEG2TSSampleEntry
{
	public const string TYPE = "rm2t";
	public override string DisplayName { get { return "MPEG2TSReceptionSampleEntry"; } }

	public MPEG2TSReceptionSampleEntry(): base(IsoStream.FromFourCC("rm2t"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
class ReceivedRtpHintSampleEntry() extends HintSampleEntry ('rrtp') {
	uint(16)		hinttrackversion = 1;
	uint(16)		highestcompatibleversion = 1;
	uint(32)		maxpacketsize;
}
*/
public partial class ReceivedRtpHintSampleEntry : HintSampleEntry
{
	public const string TYPE = "rrtp";
	public override string DisplayName { get { return "ReceivedRtpHintSampleEntry"; } }

	protected ushort hinttrackversion = 1; 
	public ushort Hinttrackversion { get { return this.hinttrackversion; } set { this.hinttrackversion = value; } }

	protected ushort highestcompatibleversion = 1; 
	public ushort Highestcompatibleversion { get { return this.highestcompatibleversion; } set { this.highestcompatibleversion = value; } }

	protected uint maxpacketsize; 
	public uint Maxpacketsize { get { return this.maxpacketsize; } set { this.maxpacketsize = value; } }

	public ReceivedRtpHintSampleEntry(): base(IsoStream.FromFourCC("rrtp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.hinttrackversion, "hinttrackversion"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.highestcompatibleversion, "highestcompatibleversion"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.maxpacketsize, "maxpacketsize"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.hinttrackversion, "hinttrackversion"); 
		boxSize += stream.WriteUInt16( this.highestcompatibleversion, "highestcompatibleversion"); 
		boxSize += stream.WriteUInt32( this.maxpacketsize, "maxpacketsize"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // hinttrackversion
		boxSize += 16; // highestcompatibleversion
		boxSize += 32; // maxpacketsize
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class ReceivedSrtpHintSampleEntry() extends HintSampleEntry ('rsrp') {
	uint(16)		hinttrackversion = 1;
	uint(16)		highestcompatibleversion = 1;
	uint(32)		maxpacketsize;
}
*/
public partial class ReceivedSrtpHintSampleEntry : HintSampleEntry
{
	public const string TYPE = "rsrp";
	public override string DisplayName { get { return "ReceivedSrtpHintSampleEntry"; } }

	protected ushort hinttrackversion = 1; 
	public ushort Hinttrackversion { get { return this.hinttrackversion; } set { this.hinttrackversion = value; } }

	protected ushort highestcompatibleversion = 1; 
	public ushort Highestcompatibleversion { get { return this.highestcompatibleversion; } set { this.highestcompatibleversion = value; } }

	protected uint maxpacketsize; 
	public uint Maxpacketsize { get { return this.maxpacketsize; } set { this.maxpacketsize = value; } }

	public ReceivedSrtpHintSampleEntry(): base(IsoStream.FromFourCC("rsrp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.hinttrackversion, "hinttrackversion"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.highestcompatibleversion, "highestcompatibleversion"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.maxpacketsize, "maxpacketsize"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.hinttrackversion, "hinttrackversion"); 
		boxSize += stream.WriteUInt16( this.highestcompatibleversion, "highestcompatibleversion"); 
		boxSize += stream.WriteUInt32( this.maxpacketsize, "maxpacketsize"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // hinttrackversion
		boxSize += 16; // highestcompatibleversion
		boxSize += 32; // maxpacketsize
		return boxSize;
	}
}


/*
class HintSampleEntry() extends SampleEntry (protocol) {
}
*/
public partial class HintSampleEntry : SampleEntry
{
	public override string DisplayName { get { return "HintSampleEntry"; } }

	public HintSampleEntry(uint protocol): base(protocol)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
class MPEG2TSServerSampleEntry extends MPEG2TSSampleEntry('sm2t') {}
*/
public partial class MPEG2TSServerSampleEntry : MPEG2TSSampleEntry
{
	public const string TYPE = "sm2t";
	public override string DisplayName { get { return "MPEG2TSServerSampleEntry"; } }

	public MPEG2TSServerSampleEntry(): base(IsoStream.FromFourCC("sm2t"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
class SrtpHintSampleEntry() extends HintSampleEntry ('srtp') {
	uint(16)		hinttrackversion = 1;
	uint(16)		highestcompatibleversion = 1;
	uint(32)		maxpacketsize;
}
*/
public partial class SrtpHintSampleEntry : HintSampleEntry
{
	public const string TYPE = "srtp";
	public override string DisplayName { get { return "SrtpHintSampleEntry"; } }

	protected ushort hinttrackversion = 1; 
	public ushort Hinttrackversion { get { return this.hinttrackversion; } set { this.hinttrackversion = value; } }

	protected ushort highestcompatibleversion = 1; 
	public ushort Highestcompatibleversion { get { return this.highestcompatibleversion; } set { this.highestcompatibleversion = value; } }

	protected uint maxpacketsize; 
	public uint Maxpacketsize { get { return this.maxpacketsize; } set { this.maxpacketsize = value; } }

	public SrtpHintSampleEntry(): base(IsoStream.FromFourCC("srtp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.hinttrackversion, "hinttrackversion"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.highestcompatibleversion, "highestcompatibleversion"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.maxpacketsize, "maxpacketsize"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.hinttrackversion, "hinttrackversion"); 
		boxSize += stream.WriteUInt16( this.highestcompatibleversion, "highestcompatibleversion"); 
		boxSize += stream.WriteUInt32( this.maxpacketsize, "maxpacketsize"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // hinttrackversion
		boxSize += 16; // highestcompatibleversion
		boxSize += 32; // maxpacketsize
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class HapticSampleEntry(codingname)
	extends SampleEntry(codingname) {
	Box()[]	otherboxes;
}
*/
public partial class HapticSampleEntry : SampleEntry
{
	public override string DisplayName { get { return "HapticSampleEntry"; } }
	public IEnumerable<Box> Otherboxes { get { return this.children.OfType<Box>(); } }

	public HapticSampleEntry(uint codingname = 0): base(codingname)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.otherboxes, "otherboxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.otherboxes, "otherboxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(otherboxes); // otherboxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class VolumetricVisualSampleEntry(codingname) 
	extends SampleEntry (codingname){
	unsigned int(8)[32] compressorname;
	// other boxes from derived specifications
}
*/
public partial class VolumetricVisualSampleEntry : SampleEntry
{
	public override string DisplayName { get { return "VolumetricVisualSampleEntry"; } }

	protected byte[] compressorname;  //  other boxes from derived specifications
	public byte[] Compressorname { get { return this.compressorname; } set { this.compressorname = value; } }

	public VolumetricVisualSampleEntry(uint codingname = 0): base(codingname)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 32,  out this.compressorname, "compressorname"); // other boxes from derived specifications
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8Array(32,  this.compressorname, "compressorname"); // other boxes from derived specifications
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32 * 8; // compressorname
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class VisualSampleEntry(codingname) extends SampleEntry (codingname){
	unsigned int(16) pre_defined = 0;
	const unsigned int(16) reserved = 0;
	unsigned int(32)[3]	pre_defined = 0;
	unsigned int(16)	width;
	unsigned int(16)	height;
	template unsigned int(32)	horizresolution = 0x00480000;	// 72 dpi
	template unsigned int(32)	vertresolution  = 0x00480000;	// 72 dpi
	const unsigned int(32)	reserved = 0;
	template unsigned int(16)	frame_count = 1;
	uint(8)[32]	compressorname;
	template unsigned int(16)	depth = 0x0018;
	int(16)	pre_defined = -1;
	// other boxes from derived specifications
	CleanApertureBox			clap;		// optional
	PixelAspectRatioBox		pasp;		// optional
}

*/
public partial class VisualSampleEntry : SampleEntry
{
	public override string DisplayName { get { return "VisualSampleEntry"; } }

	protected ushort pre_defined = 0; 
	public ushort PreDefined { get { return this.pre_defined; } set { this.pre_defined = value; } }

	protected ushort reserved = 0; 
	public ushort Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected uint[] pre_defined0 = []; 
	public uint[] PreDefined0 { get { return this.pre_defined0; } set { this.pre_defined0 = value; } }

	protected ushort width; 
	public ushort Width { get { return this.width; } set { this.width = value; } }

	protected ushort height; 
	public ushort Height { get { return this.height; } set { this.height = value; } }

	protected uint horizresolution = 0x00480000;  //  72 dpi
	public uint Horizresolution { get { return this.horizresolution; } set { this.horizresolution = value; } }

	protected uint vertresolution = 0x00480000;  //  72 dpi
	public uint Vertresolution { get { return this.vertresolution; } set { this.vertresolution = value; } }

	protected uint reserved0 = 0; 
	public uint Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected ushort frame_count = 1; 
	public ushort FrameCount { get { return this.frame_count; } set { this.frame_count = value; } }

	protected byte[] compressorname; 
	public byte[] Compressorname { get { return this.compressorname; } set { this.compressorname = value; } }

	protected ushort depth = 0x0018; 
	public ushort Depth { get { return this.depth; } set { this.depth = value; } }

	protected short pre_defined1 = -1;  //  other boxes from derived specifications
	public short PreDefined1 { get { return this.pre_defined1; } set { this.pre_defined1 = value; } }
	public CleanApertureBox Clap { get { return this.children.OfType<CleanApertureBox>().FirstOrDefault(); } }
	public PixelAspectRatioBox Pasp { get { return this.children.OfType<PixelAspectRatioBox>().FirstOrDefault(); } }

	public VisualSampleEntry(uint codingname = 0): base(codingname)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.pre_defined, "pre_defined"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadUInt32Array(boxSize, readSize, 3,  out this.pre_defined0, "pre_defined0"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.width, "width"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.height, "height"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.horizresolution, "horizresolution"); // 72 dpi
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.vertresolution, "vertresolution"); // 72 dpi
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.reserved0, "reserved0"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.frame_count, "frame_count"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 32,  out this.compressorname, "compressorname"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.depth, "depth"); 
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.pre_defined1, "pre_defined1"); // other boxes from derived specifications
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.clap, "clap"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.pasp, "pasp"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.pre_defined, "pre_defined"); 
		boxSize += stream.WriteUInt16( this.reserved, "reserved"); 
		boxSize += stream.WriteUInt32Array(3,  this.pre_defined0, "pre_defined0"); 
		boxSize += stream.WriteUInt16( this.width, "width"); 
		boxSize += stream.WriteUInt16( this.height, "height"); 
		boxSize += stream.WriteUInt32( this.horizresolution, "horizresolution"); // 72 dpi
		boxSize += stream.WriteUInt32( this.vertresolution, "vertresolution"); // 72 dpi
		boxSize += stream.WriteUInt32( this.reserved0, "reserved0"); 
		boxSize += stream.WriteUInt16( this.frame_count, "frame_count"); 
		boxSize += stream.WriteUInt8Array(32,  this.compressorname, "compressorname"); 
		boxSize += stream.WriteUInt16( this.depth, "depth"); 
		boxSize += stream.WriteInt16( this.pre_defined1, "pre_defined1"); // other boxes from derived specifications
		// boxSize += stream.WriteBox( this.clap, "clap"); // optional
		// boxSize += stream.WriteBox( this.pasp, "pasp"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // pre_defined
		boxSize += 16; // reserved
		boxSize += 3 * 32; // pre_defined0
		boxSize += 16; // width
		boxSize += 16; // height
		boxSize += 32; // horizresolution
		boxSize += 32; // vertresolution
		boxSize += 32; // reserved0
		boxSize += 16; // frame_count
		boxSize += 32 * 8; // compressorname
		boxSize += 16; // depth
		boxSize += 16; // pre_defined1
		// boxSize += IsoStream.CalculateBoxSize(clap); // clap
		// boxSize += IsoStream.CalculateBoxSize(pasp); // pasp
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class RtpHintSampleEntry() extends HintSampleEntry ('rtp ') {
	uint(16)		hinttrackversion = 1;
	uint(16)		highestcompatibleversion = 1;
	uint(32)		maxpacketsize;
}
*/
public partial class RtpHintSampleEntry : HintSampleEntry
{
	public const string TYPE = "rtp ";
	public override string DisplayName { get { return "RtpHintSampleEntry"; } }

	protected ushort hinttrackversion = 1; 
	public ushort Hinttrackversion { get { return this.hinttrackversion; } set { this.hinttrackversion = value; } }

	protected ushort highestcompatibleversion = 1; 
	public ushort Highestcompatibleversion { get { return this.highestcompatibleversion; } set { this.highestcompatibleversion = value; } }

	protected uint maxpacketsize; 
	public uint Maxpacketsize { get { return this.maxpacketsize; } set { this.maxpacketsize = value; } }

	public RtpHintSampleEntry(): base(IsoStream.FromFourCC("rtp "))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.hinttrackversion, "hinttrackversion"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.highestcompatibleversion, "highestcompatibleversion"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.maxpacketsize, "maxpacketsize"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.hinttrackversion, "hinttrackversion"); 
		boxSize += stream.WriteUInt16( this.highestcompatibleversion, "highestcompatibleversion"); 
		boxSize += stream.WriteUInt32( this.maxpacketsize, "maxpacketsize"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // hinttrackversion
		boxSize += 16; // highestcompatibleversion
		boxSize += 32; // maxpacketsize
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class EntityToGroupBox(grouping_type, version, flags)
extends FullBox(grouping_type, version, flags) {
	unsigned int(32) group_id;
	unsigned int(32) num_entities_in_group;
	for(i=0; i<num_entities_in_group; i++)
		unsigned int(32) entity_id;
// the remaining data may be specified for a particular grouping_type
}
*/
public partial class EntityToGroupBox : FullBox
{
	public override string DisplayName { get { return "EntityToGroupBox"; } }

	protected uint group_id; 
	public uint GroupId { get { return this.group_id; } set { this.group_id = value; } }

	protected uint num_entities_in_group; 
	public uint NumEntitiesInGroup { get { return this.num_entities_in_group; } set { this.num_entities_in_group = value; } }

	protected uint[] entity_id;  //  the remaining data may be specified for a particular grouping_type
	public uint[] EntityId { get { return this.entity_id; } set { this.entity_id = value; } }

	public EntityToGroupBox(uint grouping_type, byte version, uint flags): base(grouping_type, version, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.group_id, "group_id"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.num_entities_in_group, "num_entities_in_group"); 

		this.entity_id = new uint[IsoStream.GetInt(num_entities_in_group)];
		for (int i=0; i<num_entities_in_group; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entity_id[i], "entity_id"); // the remaining data may be specified for a particular grouping_type
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.group_id, "group_id"); 
		boxSize += stream.WriteUInt32( this.num_entities_in_group, "num_entities_in_group"); 

		for (int i=0; i<num_entities_in_group; i++)
		{
			boxSize += stream.WriteUInt32( this.entity_id[i], "entity_id"); // the remaining data may be specified for a particular grouping_type
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // group_id
		boxSize += 32; // num_entities_in_group

		for (int i=0; i<num_entities_in_group; i++)
		{
			boxSize += 32; // entity_id
		}
		return boxSize;
	}
}


/*
aligned(8) class BrandProperty extends GeneralTypeBox ('brnd') 
{ }
*/
public partial class BrandProperty : GeneralTypeBox
{
	public const string TYPE = "brnd";
	public override string DisplayName { get { return "BrandProperty"; } }

	public BrandProperty(): base(IsoStream.FromFourCC("brnd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
aligned(8) class SingleItemTypeReferenceBox(referenceType) extends Box(referenceType) {
	unsigned int(16) from_item_ID;
	unsigned int(16) reference_count;
	for (j=0; j<reference_count; j++) {
		unsigned int(16) to_item_ID;
	}
}



*/
public partial class SingleItemTypeReferenceBox : Box
{
	public override string DisplayName { get { return "SingleItemTypeReferenceBox"; } }

	protected ushort from_item_ID; 
	public ushort FromItemID { get { return this.from_item_ID; } set { this.from_item_ID = value; } }

	protected ushort reference_count; 
	public ushort ReferenceCount { get { return this.reference_count; } set { this.reference_count = value; } }

	protected ushort[] to_item_ID; 
	public ushort[] ToItemID { get { return this.to_item_ID; } set { this.to_item_ID = value; } }

	public SingleItemTypeReferenceBox(uint referenceType): base(referenceType)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.from_item_ID, "from_item_ID"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.reference_count, "reference_count"); 

		this.to_item_ID = new ushort[IsoStream.GetInt(reference_count)];
		for (int j=0; j<reference_count; j++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.to_item_ID[j], "to_item_ID"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.from_item_ID, "from_item_ID"); 
		boxSize += stream.WriteUInt16( this.reference_count, "reference_count"); 

		for (int j=0; j<reference_count; j++)
		{
			boxSize += stream.WriteUInt16( this.to_item_ID[j], "to_item_ID"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // from_item_ID
		boxSize += 16; // reference_count

		for (int j=0; j<reference_count; j++)
		{
			boxSize += 16; // to_item_ID
		}
		return boxSize;
	}
}


/*
aligned(8) class SingleItemTypeReferenceBoxLarge(referenceType) extends Box(referenceType) {
	unsigned int(32) from_item_ID;
	unsigned int(16) reference_count;
	for (j=0; j<reference_count; j++) {
		unsigned int(32) to_item_ID;
	}
}
*/
public partial class SingleItemTypeReferenceBoxLarge : Box
{
	public override string DisplayName { get { return "SingleItemTypeReferenceBoxLarge"; } }

	protected uint from_item_ID; 
	public uint FromItemID { get { return this.from_item_ID; } set { this.from_item_ID = value; } }

	protected ushort reference_count; 
	public ushort ReferenceCount { get { return this.reference_count; } set { this.reference_count = value; } }

	protected uint[] to_item_ID; 
	public uint[] ToItemID { get { return this.to_item_ID; } set { this.to_item_ID = value; } }

	public SingleItemTypeReferenceBoxLarge(uint referenceType): base(referenceType)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.from_item_ID, "from_item_ID"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.reference_count, "reference_count"); 

		this.to_item_ID = new uint[IsoStream.GetInt(reference_count)];
		for (int j=0; j<reference_count; j++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.to_item_ID[j], "to_item_ID"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.from_item_ID, "from_item_ID"); 
		boxSize += stream.WriteUInt16( this.reference_count, "reference_count"); 

		for (int j=0; j<reference_count; j++)
		{
			boxSize += stream.WriteUInt32( this.to_item_ID[j], "to_item_ID"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // from_item_ID
		boxSize += 16; // reference_count

		for (int j=0; j<reference_count; j++)
		{
			boxSize += 32; // to_item_ID
		}
		return boxSize;
	}
}


/*
class AlternativeStartupEntry() extends VisualSampleGroupEntry ('alst')
{
	unsigned int(16) roll_count;
	unsigned int(16) first_output_sample;
	for (i=1; i <= roll_count; i++)
		unsigned int(32) sample_offset[i];
	 // optional, until the end of the structure
AlternativeStartupEntryItem items[];
}
 
*/
public partial class AlternativeStartupEntry : VisualSampleGroupEntry
{
	public const string TYPE = "alst";
	public override string DisplayName { get { return "AlternativeStartupEntry"; } }

	protected ushort roll_count; 
	public ushort RollCount { get { return this.roll_count; } set { this.roll_count = value; } }

	protected ushort first_output_sample; 
	public ushort FirstOutputSample { get { return this.first_output_sample; } set { this.first_output_sample = value; } }

	protected uint[] sample_offset;  //  optional, until the end of the structure
	public uint[] SampleOffset { get { return this.sample_offset; } set { this.sample_offset = value; } }

	protected AlternativeStartupEntryItem[] items; 
	public AlternativeStartupEntryItem[] Items { get { return this.items; } set { this.items = value; } }

	public AlternativeStartupEntry(): base(IsoStream.FromFourCC("alst"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.roll_count, "roll_count"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.first_output_sample, "first_output_sample"); 

		this.sample_offset = new uint[IsoStream.GetInt( roll_count)];
		for (int i=0; i < roll_count; i++)
		{
			if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_offset[i], "sample_offset"); // optional, until the end of the structure
		}
		boxSize += stream.ReadClass(boxSize, readSize, this, (uint)(uint.MaxValue), () => new AlternativeStartupEntryItem(),  out this.items, "items"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.roll_count, "roll_count"); 
		boxSize += stream.WriteUInt16( this.first_output_sample, "first_output_sample"); 

		for (int i=0; i < roll_count; i++)
		{
			boxSize += stream.WriteUInt32( this.sample_offset[i], "sample_offset"); // optional, until the end of the structure
		}
		boxSize += stream.WriteClass( this.items, "items"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // roll_count
		boxSize += 16; // first_output_sample

		for (int i=0; i < roll_count; i++)
		{
			boxSize += 32; // sample_offset
		}
		boxSize += IsoStream.CalculateClassSize(items); // items
		return boxSize;
	}
}


/*
aligned(8) class AlternativeStartupEntryItem() {
		unsigned int(16) num_output_samples;
		unsigned int(16) num_total_samples;
}

*/
public partial class AlternativeStartupEntryItem : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "AlternativeStartupEntryItem"; } }

	protected ushort num_output_samples; 
	public ushort NumOutputSamples { get { return this.num_output_samples; } set { this.num_output_samples = value; } }

	protected ushort num_total_samples; 
	public ushort NumTotalSamples { get { return this.num_total_samples; } set { this.num_total_samples = value; } }

	public AlternativeStartupEntryItem(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.num_output_samples, "num_output_samples"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.num_total_samples, "num_total_samples"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt16( this.num_output_samples, "num_output_samples"); 
		boxSize += stream.WriteUInt16( this.num_total_samples, "num_total_samples"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 16; // num_output_samples
		boxSize += 16; // num_total_samples
		return boxSize;
	}
}


/*
class VisualDRAPEntry() 
extends VisualSampleGroupEntry('drap') {
	unsigned int(3) DRAP_type;
	unsigned int(29) reserved = 0;
}
*/
public partial class VisualDRAPEntry : VisualSampleGroupEntry
{
	public const string TYPE = "drap";
	public override string DisplayName { get { return "VisualDRAPEntry"; } }

	protected byte DRAP_type; 
	public byte DRAPType { get { return this.DRAP_type; } set { this.DRAP_type = value; } }

	protected uint reserved = 0; 
	public uint Reserved { get { return this.reserved; } set { this.reserved = value; } }

	public VisualDRAPEntry(): base(IsoStream.FromFourCC("drap"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.DRAP_type, "DRAP_type"); 
		boxSize += stream.ReadBits(boxSize, readSize, 29,  out this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(3,  this.DRAP_type, "DRAP_type"); 
		boxSize += stream.WriteBits(29,  this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 3; // DRAP_type
		boxSize += 29; // reserved
		return boxSize;
	}
}


/*
class AudioPreRollEntry() extends AudioSampleGroupEntry ('prol')
{
	signed int(16) roll_distance;
}
*/
public partial class AudioPreRollEntry : AudioSampleGroupEntry
{
	public const string TYPE = "prol";
	public override string DisplayName { get { return "AudioPreRollEntry"; } }

	protected short roll_distance; 
	public short RollDistance { get { return this.roll_distance; } set { this.roll_distance = value; } }

	public AudioPreRollEntry(): base(IsoStream.FromFourCC("prol"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.roll_distance, "roll_distance"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt16( this.roll_distance, "roll_distance"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // roll_distance
		return boxSize;
	}
}


/*
class VisualRandomAccessEntry() extends VisualSampleGroupEntry ('rap ')
{
	unsigned int(1) num_leading_samples_known;
	unsigned int(7) num_leading_samples;
}
*/
public partial class VisualRandomAccessEntry : VisualSampleGroupEntry
{
	public const string TYPE = "rap ";
	public override string DisplayName { get { return "VisualRandomAccessEntry"; } }

	protected bool num_leading_samples_known; 
	public bool NumLeadingSamplesKnown { get { return this.num_leading_samples_known; } set { this.num_leading_samples_known = value; } }

	protected byte num_leading_samples; 
	public byte NumLeadingSamples { get { return this.num_leading_samples; } set { this.num_leading_samples = value; } }

	public VisualRandomAccessEntry(): base(IsoStream.FromFourCC("rap "))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.num_leading_samples_known, "num_leading_samples_known"); 
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.num_leading_samples, "num_leading_samples"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.num_leading_samples_known, "num_leading_samples_known"); 
		boxSize += stream.WriteBits(7,  this.num_leading_samples, "num_leading_samples"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // num_leading_samples_known
		boxSize += 7; // num_leading_samples
		return boxSize;
	}
}


/*
class RateShareEntry() extends SampleGroupDescriptionEntry('rash') {
	unsigned int(16)	operation_point_count;
	if (operation_point_count == 1) {
		unsigned int(16)		target_rate_share;
	}
	else {
		for (i=0; i < operation_point_count; i++) {
			unsigned int(32)	available_bitrate;
			unsigned int(16)	target_rate_share;
		}
	}
	unsigned int(32)	maximum_bitrate;
	unsigned int(32)	minimum_bitrate;
	unsigned int(8)	discard_priority;
}
*/
public partial class RateShareEntry : SampleGroupDescriptionEntry
{
	public const string TYPE = "rash";
	public override string DisplayName { get { return "RateShareEntry"; } }

	protected ushort operation_point_count; 
	public ushort OperationPointCount { get { return this.operation_point_count; } set { this.operation_point_count = value; } }

	protected ushort target_rate_share; 
	public ushort TargetRateShare { get { return this.target_rate_share; } set { this.target_rate_share = value; } }

	protected uint[] available_bitrate; 
	public uint[] AvailableBitrate { get { return this.available_bitrate; } set { this.available_bitrate = value; } }

	protected ushort[] target_rate_share0; 
	public ushort[] TargetRateShare0 { get { return this.target_rate_share0; } set { this.target_rate_share0 = value; } }

	protected uint maximum_bitrate; 
	public uint MaximumBitrate { get { return this.maximum_bitrate; } set { this.maximum_bitrate = value; } }

	protected uint minimum_bitrate; 
	public uint MinimumBitrate { get { return this.minimum_bitrate; } set { this.minimum_bitrate = value; } }

	protected byte discard_priority; 
	public byte DiscardPriority { get { return this.discard_priority; } set { this.discard_priority = value; } }

	public RateShareEntry(): base(IsoStream.FromFourCC("rash"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.operation_point_count, "operation_point_count"); 

		if (operation_point_count == 1)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.target_rate_share, "target_rate_share"); 
		}

		else 
		{

			this.available_bitrate = new uint[IsoStream.GetInt( operation_point_count)];
			this.target_rate_share0 = new ushort[IsoStream.GetInt( operation_point_count)];
			for (int i=0; i < operation_point_count; i++)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.available_bitrate[i], "available_bitrate"); 
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.target_rate_share0[i], "target_rate_share0"); 
			}
		}
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.maximum_bitrate, "maximum_bitrate"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.minimum_bitrate, "minimum_bitrate"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.discard_priority, "discard_priority"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.operation_point_count, "operation_point_count"); 

		if (operation_point_count == 1)
		{
			boxSize += stream.WriteUInt16( this.target_rate_share, "target_rate_share"); 
		}

		else 
		{

			for (int i=0; i < operation_point_count; i++)
			{
				boxSize += stream.WriteUInt32( this.available_bitrate[i], "available_bitrate"); 
				boxSize += stream.WriteUInt16( this.target_rate_share0[i], "target_rate_share0"); 
			}
		}
		boxSize += stream.WriteUInt32( this.maximum_bitrate, "maximum_bitrate"); 
		boxSize += stream.WriteUInt32( this.minimum_bitrate, "minimum_bitrate"); 
		boxSize += stream.WriteUInt8( this.discard_priority, "discard_priority"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // operation_point_count

		if (operation_point_count == 1)
		{
			boxSize += 16; // target_rate_share
		}

		else 
		{

			for (int i=0; i < operation_point_count; i++)
			{
				boxSize += 32; // available_bitrate
				boxSize += 16; // target_rate_share0
			}
		}
		boxSize += 32; // maximum_bitrate
		boxSize += 32; // minimum_bitrate
		boxSize += 8; // discard_priority
		return boxSize;
	}
}


/*
class AudioRollRecoveryEntry() extends AudioSampleGroupEntry ('roll')
{
	signed int(16) roll_distance;
}
*/
public partial class AudioRollRecoveryEntry : AudioSampleGroupEntry
{
	public const string TYPE = "roll";
	public override string DisplayName { get { return "AudioRollRecoveryEntry"; } }

	protected short roll_distance; 
	public short RollDistance { get { return this.roll_distance; } set { this.roll_distance = value; } }

	public AudioRollRecoveryEntry(): base(IsoStream.FromFourCC("roll"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.roll_distance, "roll_distance"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt16( this.roll_distance, "roll_distance"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // roll_distance
		return boxSize;
	}
}


/*
class SAPEntry() extends  SampleGroupDescriptionEntry('sap ')
{
	unsigned int(1) dependent_flag;
	unsigned int(3) reserved;
	unsigned int(4) SAP_type;
}
*/
public partial class SAPEntry : SampleGroupDescriptionEntry
{
	public const string TYPE = "sap ";
	public override string DisplayName { get { return "SAPEntry"; } }

	protected bool dependent_flag; 
	public bool DependentFlag { get { return this.dependent_flag; } set { this.dependent_flag = value; } }

	protected byte reserved; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte SAP_type; 
	public byte SAPType { get { return this.SAP_type; } set { this.SAP_type = value; } }

	public SAPEntry(): base(IsoStream.FromFourCC("sap "))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.dependent_flag, "dependent_flag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.SAP_type, "SAP_type"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.dependent_flag, "dependent_flag"); 
		boxSize += stream.WriteBits(3,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(4,  this.SAP_type, "SAP_type"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // dependent_flag
		boxSize += 3; // reserved
		boxSize += 4; // SAP_type
		return boxSize;
	}
}


/*
class SampleToMetadataItemEntry() 
extends SampleGroupDescriptionEntry('stmi') {
	unsigned int(32) meta_box_handler_type;
	unsigned int(32) num_items;
	for(i = 0; i < num_items; i++) {
		unsigned int(32) item_id[i];
	}
}
*/
public partial class SampleToMetadataItemEntry : SampleGroupDescriptionEntry
{
	public const string TYPE = "stmi";
	public override string DisplayName { get { return "SampleToMetadataItemEntry"; } }

	protected uint meta_box_handler_type; 
	public uint MetaBoxHandlerType { get { return this.meta_box_handler_type; } set { this.meta_box_handler_type = value; } }

	protected uint num_items; 
	public uint NumItems { get { return this.num_items; } set { this.num_items = value; } }

	protected uint[] item_id; 
	public uint[] ItemId { get { return this.item_id; } set { this.item_id = value; } }

	public SampleToMetadataItemEntry(): base(IsoStream.FromFourCC("stmi"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.meta_box_handler_type, "meta_box_handler_type"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.num_items, "num_items"); 

		this.item_id = new uint[IsoStream.GetInt( num_items)];
		for (int i = 0; i < num_items; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.item_id[i], "item_id"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.meta_box_handler_type, "meta_box_handler_type"); 
		boxSize += stream.WriteUInt32( this.num_items, "num_items"); 

		for (int i = 0; i < num_items; i++)
		{
			boxSize += stream.WriteUInt32( this.item_id[i], "item_id"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // meta_box_handler_type
		boxSize += 32; // num_items

		for (int i = 0; i < num_items; i++)
		{
			boxSize += 32; // item_id
		}
		return boxSize;
	}
}


/*
class TemporalLevelEntry() extends VisualSampleGroupEntry('tele')
{
	bit(1)	level_independently_decodable;
	bit(7)	reserved=0;
}
*/
public partial class TemporalLevelEntry : VisualSampleGroupEntry
{
	public const string TYPE = "tele";
	public override string DisplayName { get { return "TemporalLevelEntry"; } }

	protected bool level_independently_decodable; 
	public bool LevelIndependentlyDecodable { get { return this.level_independently_decodable; } set { this.level_independently_decodable = value; } }

	protected byte reserved =0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	public TemporalLevelEntry(): base(IsoStream.FromFourCC("tele"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.level_independently_decodable, "level_independently_decodable"); 
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.level_independently_decodable, "level_independently_decodable"); 
		boxSize += stream.WriteBits(7,  this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // level_independently_decodable
		boxSize += 7; // reserved
		return boxSize;
	}
}


/*
class PixelAspectRatioEntry() extends VisualSampleGroupEntry ('pasr'){
	unsigned int(32) hSpacing;
	unsigned int(32) vSpacing;
}
*/
public partial class PixelAspectRatioEntry : VisualSampleGroupEntry
{
	public const string TYPE = "pasr";
	public override string DisplayName { get { return "PixelAspectRatioEntry"; } }

	protected uint hSpacing; 
	public uint HSpacing { get { return this.hSpacing; } set { this.hSpacing = value; } }

	protected uint vSpacing; 
	public uint VSpacing { get { return this.vSpacing; } set { this.vSpacing = value; } }

	public PixelAspectRatioEntry(): base(IsoStream.FromFourCC("pasr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.hSpacing, "hSpacing"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.vSpacing, "vSpacing"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.hSpacing, "hSpacing"); 
		boxSize += stream.WriteUInt32( this.vSpacing, "vSpacing"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // hSpacing
		boxSize += 32; // vSpacing
		return boxSize;
	}
}


/*
class CleanApertureEntry() extends VisualSampleGroupEntry ('casg'){
	unsigned int(32) cleanApertureWidthN;
	unsigned int(32) cleanApertureWidthD;

	unsigned int(32) cleanApertureHeightN;
	unsigned int(32) cleanApertureHeightD;


	unsigned int(32) horizOffN;
	unsigned int(32) horizOffD;


	unsigned int(32) vertOffN;
	unsigned int(32) vertOffD;

}
*/
public partial class CleanApertureEntry : VisualSampleGroupEntry
{
	public const string TYPE = "casg";
	public override string DisplayName { get { return "CleanApertureEntry"; } }

	protected uint cleanApertureWidthN; 
	public uint CleanApertureWidthN { get { return this.cleanApertureWidthN; } set { this.cleanApertureWidthN = value; } }

	protected uint cleanApertureWidthD; 
	public uint CleanApertureWidthD { get { return this.cleanApertureWidthD; } set { this.cleanApertureWidthD = value; } }

	protected uint cleanApertureHeightN; 
	public uint CleanApertureHeightN { get { return this.cleanApertureHeightN; } set { this.cleanApertureHeightN = value; } }

	protected uint cleanApertureHeightD; 
	public uint CleanApertureHeightD { get { return this.cleanApertureHeightD; } set { this.cleanApertureHeightD = value; } }

	protected uint horizOffN; 
	public uint HorizOffN { get { return this.horizOffN; } set { this.horizOffN = value; } }

	protected uint horizOffD; 
	public uint HorizOffD { get { return this.horizOffD; } set { this.horizOffD = value; } }

	protected uint vertOffN; 
	public uint VertOffN { get { return this.vertOffN; } set { this.vertOffN = value; } }

	protected uint vertOffD; 
	public uint VertOffD { get { return this.vertOffD; } set { this.vertOffD = value; } }

	public CleanApertureEntry(): base(IsoStream.FromFourCC("casg"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.cleanApertureWidthN, "cleanApertureWidthN"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.cleanApertureWidthD, "cleanApertureWidthD"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.cleanApertureHeightN, "cleanApertureHeightN"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.cleanApertureHeightD, "cleanApertureHeightD"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.horizOffN, "horizOffN"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.horizOffD, "horizOffD"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.vertOffN, "vertOffN"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.vertOffD, "vertOffD"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.cleanApertureWidthN, "cleanApertureWidthN"); 
		boxSize += stream.WriteUInt32( this.cleanApertureWidthD, "cleanApertureWidthD"); 
		boxSize += stream.WriteUInt32( this.cleanApertureHeightN, "cleanApertureHeightN"); 
		boxSize += stream.WriteUInt32( this.cleanApertureHeightD, "cleanApertureHeightD"); 
		boxSize += stream.WriteUInt32( this.horizOffN, "horizOffN"); 
		boxSize += stream.WriteUInt32( this.horizOffD, "horizOffD"); 
		boxSize += stream.WriteUInt32( this.vertOffN, "vertOffN"); 
		boxSize += stream.WriteUInt32( this.vertOffD, "vertOffD"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // cleanApertureWidthN
		boxSize += 32; // cleanApertureWidthD
		boxSize += 32; // cleanApertureHeightN
		boxSize += 32; // cleanApertureHeightD
		boxSize += 32; // horizOffN
		boxSize += 32; // horizOffD
		boxSize += 32; // vertOffN
		boxSize += 32; // vertOffD
		return boxSize;
	}
}


/*
aligned(8) class TrackGroupTypeBox(boxtype = 'msrc') extends FullBox(boxtype, version = 0, flags = 0)
{
	unsigned int(32) track_group_id;
	// the remaining data may be specified 
	//  for a particular track_group_type
}
*/
public partial class TrackGroupTypeBox : FullBox
{
	public override string DisplayName { get { return "TrackGroupTypeBox"; } }

	protected uint track_group_id;  //  the remaining data may be specified 
	public uint TrackGroupId { get { return this.track_group_id; } set { this.track_group_id = value; } }

	public TrackGroupTypeBox(uint boxtype = 1836282467): base(boxtype, 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.track_group_id, "track_group_id"); // the remaining data may be specified 
		/*   for a particular track_group_type */
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.track_group_id, "track_group_id"); // the remaining data may be specified 
		/*   for a particular track_group_type */
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // track_group_id
		/*   for a particular track_group_type */
		return boxSize;
	}
}


/*
aligned(8) class StereoVideoGroupBox extends TrackGroupTypeBox('ster') 
{
	unsigned int(1) left_view_flag;
	bit(31) reserved;
}
*/
public partial class StereoVideoGroupBox : TrackGroupTypeBox
{
	public const string TYPE = "ster";
	public override string DisplayName { get { return "StereoVideoGroupBox"; } }

	protected bool left_view_flag; 
	public bool LeftViewFlag { get { return this.left_view_flag; } set { this.left_view_flag = value; } }

	protected uint reserved; 
	public uint Reserved { get { return this.reserved; } set { this.reserved = value; } }

	public StereoVideoGroupBox(): base(IsoStream.FromFourCC("ster"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.left_view_flag, "left_view_flag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 31,  out this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.left_view_flag, "left_view_flag"); 
		boxSize += stream.WriteBits(31,  this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // left_view_flag
		boxSize += 31; // reserved
		return boxSize;
	}
}


/*
aligned(8) class TrackReferenceTypeBox (unsigned int(32) reference_type) extends Box(reference_type) {
	unsigned int(32) track_IDs[];
}
*/
public partial class TrackReferenceTypeBox : Box
{
	public override string DisplayName { get { return "TrackReferenceTypeBox"; } }

	protected uint[] track_IDs; 
	public uint[] TrackIDs { get { return this.track_IDs; } set { this.track_IDs = value; } }

	public TrackReferenceTypeBox(uint reference_type): base(reference_type)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32ArrayTillEnd(boxSize, readSize,  out this.track_IDs, "track_IDs"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32ArrayTillEnd( this.track_IDs, "track_IDs"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)track_IDs.Length * 32); // track_IDs
		return boxSize;
	}
}


/*
class ViewPriorityBox extends Box ('vipr') {
 ViprEntry entries[]; 
} 
 
*/
public partial class ViewPriorityBox : Box
{
	public const string TYPE = "vipr";
	public override string DisplayName { get { return "ViewPriorityBox"; } }

	protected ViprEntry[] entries; 
	public ViprEntry[] Entries { get { return this.entries; } set { this.entries = value; } }

	public ViewPriorityBox(): base(IsoStream.FromFourCC("vipr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, (uint)(uint.MaxValue), () => new ViprEntry(),  out this.entries, "entries"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.entries, "entries"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(entries); // entries
		return boxSize;
	}
}


/*
aligned(8) class ViprEntry() {
 unsigned int(6) reserved = 0; 
  unsigned int(10) view_id; 
  unsigned int(32) content_priority_id;
 }

*/
public partial class ViprEntry : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "ViprEntry"; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected ushort view_id; 
	public ushort ViewId { get { return this.view_id; } set { this.view_id = value; } }

	protected uint content_priority_id; 
	public uint ContentPriorityId { get { return this.content_priority_id; } set { this.content_priority_id = value; } }

	public ViprEntry(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 10,  out this.view_id, "view_id"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.content_priority_id, "content_priority_id"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBits(6,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(10,  this.view_id, "view_id"); 
		boxSize += stream.WriteUInt32( this.content_priority_id, "content_priority_id"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 6; // reserved
		boxSize += 10; // view_id
		boxSize += 32; // content_priority_id
		return boxSize;
	}
}


/*
aligned(8) class DependencyInfo  
{ 
unsigned int(8)   subSeqDirectionFlag; 
unsigned int(8)   layerNumber; 
unsigned int(16)  subSequenceIdentifier; 
} 

*/
public partial class DependencyInfo : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "DependencyInfo"; } }

	protected byte subSeqDirectionFlag; 
	public byte SubSeqDirectionFlag { get { return this.subSeqDirectionFlag; } set { this.subSeqDirectionFlag = value; } }

	protected byte layerNumber; 
	public byte LayerNumber { get { return this.layerNumber; } set { this.layerNumber = value; } }

	protected ushort subSequenceIdentifier; 
	public ushort SubSequenceIdentifier { get { return this.subSequenceIdentifier; } set { this.subSequenceIdentifier = value; } }

	public DependencyInfo(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.subSeqDirectionFlag, "subSeqDirectionFlag"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.layerNumber, "layerNumber"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.subSequenceIdentifier, "subSequenceIdentifier"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt8( this.subSeqDirectionFlag, "subSeqDirectionFlag"); 
		boxSize += stream.WriteUInt8( this.layerNumber, "layerNumber"); 
		boxSize += stream.WriteUInt16( this.subSequenceIdentifier, "subSequenceIdentifier"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 8; // subSeqDirectionFlag
		boxSize += 8; // layerNumber
		boxSize += 16; // subSequenceIdentifier
		return boxSize;
	}
}


/*
class AVCSubSequenceEntry () extends VisualSampleGroupEntry ('avss') 
{ 
  unsigned int(16) subSequenceIdentifer; 
  unsigned int(8)  layerNumber;  
  unsigned int(1)  durationFlag; 
  unsigned int(1)  avgRateFlag; 
  unsigned int(6)  reserved = 0;  
  if (durationFlag) 
   unsigned int(32) duration; 
  if (avgRateFlag) 
  {
   unsigned int(8)  accurateStatisticsFlag; 
   unsigned int(16) avgBitRate; 
   unsigned int(16) avgFrameRate; 
  }
  unsigned int(8) numReferences; 
  DependencyInfo dependency[numReferences]; 
 } 

*/
public partial class AVCSubSequenceEntry : VisualSampleGroupEntry
{
	public const string TYPE = "avss";
	public override string DisplayName { get { return "AVCSubSequenceEntry"; } }

	protected ushort subSequenceIdentifer; 
	public ushort SubSequenceIdentifer { get { return this.subSequenceIdentifer; } set { this.subSequenceIdentifer = value; } }

	protected byte layerNumber; 
	public byte LayerNumber { get { return this.layerNumber; } set { this.layerNumber = value; } }

	protected bool durationFlag; 
	public bool DurationFlag { get { return this.durationFlag; } set { this.durationFlag = value; } }

	protected bool avgRateFlag; 
	public bool AvgRateFlag { get { return this.avgRateFlag; } set { this.avgRateFlag = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected uint duration; 
	public uint Duration { get { return this.duration; } set { this.duration = value; } }

	protected byte accurateStatisticsFlag; 
	public byte AccurateStatisticsFlag { get { return this.accurateStatisticsFlag; } set { this.accurateStatisticsFlag = value; } }

	protected ushort avgBitRate; 
	public ushort AvgBitRate { get { return this.avgBitRate; } set { this.avgBitRate = value; } }

	protected ushort avgFrameRate; 
	public ushort AvgFrameRate { get { return this.avgFrameRate; } set { this.avgFrameRate = value; } }

	protected byte numReferences; 
	public byte NumReferences { get { return this.numReferences; } set { this.numReferences = value; } }

	protected DependencyInfo[] dependency; 
	public DependencyInfo[] Dependency { get { return this.dependency; } set { this.dependency = value; } }

	public AVCSubSequenceEntry(): base(IsoStream.FromFourCC("avss"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.subSequenceIdentifer, "subSequenceIdentifer"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.layerNumber, "layerNumber"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.durationFlag, "durationFlag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.avgRateFlag, "avgRateFlag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved, "reserved"); 

		if (durationFlag)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.duration, "duration"); 
		}

		if (avgRateFlag)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.accurateStatisticsFlag, "accurateStatisticsFlag"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.avgBitRate, "avgBitRate"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.avgFrameRate, "avgFrameRate"); 
		}
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.numReferences, "numReferences"); 
		boxSize += stream.ReadClass(boxSize, readSize, this, (uint)(numReferences), () => new DependencyInfo(),  out this.dependency, "dependency"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.subSequenceIdentifer, "subSequenceIdentifer"); 
		boxSize += stream.WriteUInt8( this.layerNumber, "layerNumber"); 
		boxSize += stream.WriteBit( this.durationFlag, "durationFlag"); 
		boxSize += stream.WriteBit( this.avgRateFlag, "avgRateFlag"); 
		boxSize += stream.WriteBits(6,  this.reserved, "reserved"); 

		if (durationFlag)
		{
			boxSize += stream.WriteUInt32( this.duration, "duration"); 
		}

		if (avgRateFlag)
		{
			boxSize += stream.WriteUInt8( this.accurateStatisticsFlag, "accurateStatisticsFlag"); 
			boxSize += stream.WriteUInt16( this.avgBitRate, "avgBitRate"); 
			boxSize += stream.WriteUInt16( this.avgFrameRate, "avgFrameRate"); 
		}
		boxSize += stream.WriteUInt8( this.numReferences, "numReferences"); 
		boxSize += stream.WriteClass( this.dependency, "dependency"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // subSequenceIdentifer
		boxSize += 8; // layerNumber
		boxSize += 1; // durationFlag
		boxSize += 1; // avgRateFlag
		boxSize += 6; // reserved

		if (durationFlag)
		{
			boxSize += 32; // duration
		}

		if (avgRateFlag)
		{
			boxSize += 8; // accurateStatisticsFlag
			boxSize += 16; // avgBitRate
			boxSize += 16; // avgFrameRate
		}
		boxSize += 8; // numReferences
		boxSize += IsoStream.CalculateClassSize(dependency); // dependency
		return boxSize;
	}
}


/*
class IntrinsicCameraParametersBox extends FullBox ('icam', version=0, flags) { 
 unsigned int(6)  
 reserved=0;  
 unsigned int(10)  ref_view_id; 
 unsigned int(32) prec_focal_length; 
 unsigned int(32) prec_principal_point; 
 unsigned int(32) prec_skew_factor; 
 unsigned int(8) exponent_focal_length_x; 
 signed   int(64) mantissa_focal_length_x; 
 unsigned int(8) exponent_focal_length_y; 
 signed   int(64) mantissa_focal_length_y;  
 unsigned int(8) exponent_principal_point_x; 
 signed   int(64) mantissa_principal_point_x; 
 unsigned int(8) exponent_principal_point_y; 
 signed   int(64) mantissa_principal_point_y; 
 unsigned int(8) exponent_skew_factor; 
 signed   int(64) mantissa_skew_factor; 
} 
*/
public partial class IntrinsicCameraParametersBox : FullBox
{
	public const string TYPE = "icam";
	public override string DisplayName { get { return "IntrinsicCameraParametersBox"; } }

	protected byte reserved =0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected ushort ref_view_id; 
	public ushort RefViewId { get { return this.ref_view_id; } set { this.ref_view_id = value; } }

	protected uint prec_focal_length; 
	public uint PrecFocalLength { get { return this.prec_focal_length; } set { this.prec_focal_length = value; } }

	protected uint prec_principal_point; 
	public uint PrecPrincipalPoint { get { return this.prec_principal_point; } set { this.prec_principal_point = value; } }

	protected uint prec_skew_factor; 
	public uint PrecSkewFactor { get { return this.prec_skew_factor; } set { this.prec_skew_factor = value; } }

	protected byte exponent_focal_length_x; 
	public byte ExponentFocalLengthx { get { return this.exponent_focal_length_x; } set { this.exponent_focal_length_x = value; } }

	protected long mantissa_focal_length_x; 
	public long MantissaFocalLengthx { get { return this.mantissa_focal_length_x; } set { this.mantissa_focal_length_x = value; } }

	protected byte exponent_focal_length_y; 
	public byte ExponentFocalLengthy { get { return this.exponent_focal_length_y; } set { this.exponent_focal_length_y = value; } }

	protected long mantissa_focal_length_y; 
	public long MantissaFocalLengthy { get { return this.mantissa_focal_length_y; } set { this.mantissa_focal_length_y = value; } }

	protected byte exponent_principal_point_x; 
	public byte ExponentPrincipalPointx { get { return this.exponent_principal_point_x; } set { this.exponent_principal_point_x = value; } }

	protected long mantissa_principal_point_x; 
	public long MantissaPrincipalPointx { get { return this.mantissa_principal_point_x; } set { this.mantissa_principal_point_x = value; } }

	protected byte exponent_principal_point_y; 
	public byte ExponentPrincipalPointy { get { return this.exponent_principal_point_y; } set { this.exponent_principal_point_y = value; } }

	protected long mantissa_principal_point_y; 
	public long MantissaPrincipalPointy { get { return this.mantissa_principal_point_y; } set { this.mantissa_principal_point_y = value; } }

	protected byte exponent_skew_factor; 
	public byte ExponentSkewFactor { get { return this.exponent_skew_factor; } set { this.exponent_skew_factor = value; } }

	protected long mantissa_skew_factor; 
	public long MantissaSkewFactor { get { return this.mantissa_skew_factor; } set { this.mantissa_skew_factor = value; } }

	public IntrinsicCameraParametersBox(uint flags = 0): base(IsoStream.FromFourCC("icam"), 0, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 10,  out this.ref_view_id, "ref_view_id"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.prec_focal_length, "prec_focal_length"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.prec_principal_point, "prec_principal_point"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.prec_skew_factor, "prec_skew_factor"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.exponent_focal_length_x, "exponent_focal_length_x"); 
		boxSize += stream.ReadInt64(boxSize, readSize,  out this.mantissa_focal_length_x, "mantissa_focal_length_x"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.exponent_focal_length_y, "exponent_focal_length_y"); 
		boxSize += stream.ReadInt64(boxSize, readSize,  out this.mantissa_focal_length_y, "mantissa_focal_length_y"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.exponent_principal_point_x, "exponent_principal_point_x"); 
		boxSize += stream.ReadInt64(boxSize, readSize,  out this.mantissa_principal_point_x, "mantissa_principal_point_x"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.exponent_principal_point_y, "exponent_principal_point_y"); 
		boxSize += stream.ReadInt64(boxSize, readSize,  out this.mantissa_principal_point_y, "mantissa_principal_point_y"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.exponent_skew_factor, "exponent_skew_factor"); 
		boxSize += stream.ReadInt64(boxSize, readSize,  out this.mantissa_skew_factor, "mantissa_skew_factor"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(6,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(10,  this.ref_view_id, "ref_view_id"); 
		boxSize += stream.WriteUInt32( this.prec_focal_length, "prec_focal_length"); 
		boxSize += stream.WriteUInt32( this.prec_principal_point, "prec_principal_point"); 
		boxSize += stream.WriteUInt32( this.prec_skew_factor, "prec_skew_factor"); 
		boxSize += stream.WriteUInt8( this.exponent_focal_length_x, "exponent_focal_length_x"); 
		boxSize += stream.WriteInt64( this.mantissa_focal_length_x, "mantissa_focal_length_x"); 
		boxSize += stream.WriteUInt8( this.exponent_focal_length_y, "exponent_focal_length_y"); 
		boxSize += stream.WriteInt64( this.mantissa_focal_length_y, "mantissa_focal_length_y"); 
		boxSize += stream.WriteUInt8( this.exponent_principal_point_x, "exponent_principal_point_x"); 
		boxSize += stream.WriteInt64( this.mantissa_principal_point_x, "mantissa_principal_point_x"); 
		boxSize += stream.WriteUInt8( this.exponent_principal_point_y, "exponent_principal_point_y"); 
		boxSize += stream.WriteInt64( this.mantissa_principal_point_y, "mantissa_principal_point_y"); 
		boxSize += stream.WriteUInt8( this.exponent_skew_factor, "exponent_skew_factor"); 
		boxSize += stream.WriteInt64( this.mantissa_skew_factor, "mantissa_skew_factor"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 6; // reserved
		boxSize += 10; // ref_view_id
		boxSize += 32; // prec_focal_length
		boxSize += 32; // prec_principal_point
		boxSize += 32; // prec_skew_factor
		boxSize += 8; // exponent_focal_length_x
		boxSize += 64; // mantissa_focal_length_x
		boxSize += 8; // exponent_focal_length_y
		boxSize += 64; // mantissa_focal_length_y
		boxSize += 8; // exponent_principal_point_x
		boxSize += 64; // mantissa_principal_point_x
		boxSize += 8; // exponent_principal_point_y
		boxSize += 64; // mantissa_principal_point_y
		boxSize += 8; // exponent_skew_factor
		boxSize += 64; // mantissa_skew_factor
		return boxSize;
	}
}


/*
class ExtrinsicCameraParametersBox extends FullBox ('ecam', version=0, flags) { 
 unsigned int(6)  reserved=0; 
 unsigned int(10)  ref_view_id; 
 unsigned int(8) prec_rotation_param; 
 unsigned int(8) prec_translation_param; 
 for (j=1; j<=3; j++) { /* row *//*   
  for (k=1; k<=3; k++) { /* column *//* 
   unsigned int(8) exponent_r[j][k]; 
   signed   int(64) mantissa_r [j][k]; 
  } 
  unsigned int(8) exponent_t[j]; 
  signed   int(64) mantissa_t[j]; 
 } 
}
*/
public partial class ExtrinsicCameraParametersBox : FullBox
{
	public const string TYPE = "ecam";
	public override string DisplayName { get { return "ExtrinsicCameraParametersBox"; } }

	protected byte reserved =0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected ushort ref_view_id; 
	public ushort RefViewId { get { return this.ref_view_id; } set { this.ref_view_id = value; } }

	protected byte prec_rotation_param; 
	public byte PrecRotationParam { get { return this.prec_rotation_param; } set { this.prec_rotation_param = value; } }

	protected byte prec_translation_param; 
	public byte PrecTranslationParam { get { return this.prec_translation_param; } set { this.prec_translation_param = value; } }

	protected byte[][] exponent_r; 
	public byte[][] Exponentr { get { return this.exponent_r; } set { this.exponent_r = value; } }

	protected long[][] mantissa_r; 
	public long[][] Mantissar { get { return this.mantissa_r; } set { this.mantissa_r = value; } }

	protected byte[] exponent_t; 
	public byte[] Exponentt { get { return this.exponent_t; } set { this.exponent_t = value; } }

	protected long[] mantissa_t; 
	public long[] Mantissat { get { return this.mantissa_t; } set { this.mantissa_t = value; } }

	public ExtrinsicCameraParametersBox(uint flags = 0): base(IsoStream.FromFourCC("ecam"), 0, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 10,  out this.ref_view_id, "ref_view_id"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.prec_rotation_param, "prec_rotation_param"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.prec_translation_param, "prec_translation_param"); 

		this.exponent_r = new byte[IsoStream.GetInt(3)][];
		this.mantissa_r = new long[IsoStream.GetInt(3)][];
		this.exponent_t = new byte[IsoStream.GetInt(3)];
		this.mantissa_t = new long[IsoStream.GetInt(3)];
		for (int j=0; j<3; j++)
		{
			/*  row  */

			this.exponent_r[j] = new byte[IsoStream.GetInt(3)];
			this.mantissa_r[j] = new long[IsoStream.GetInt(3)];
			for (int k=0; k<3; k++)
			{
				/*  column  */
				boxSize += stream.ReadUInt8(boxSize, readSize,  out this.exponent_r[j][k], "exponent_r"); 
				boxSize += stream.ReadInt64(boxSize, readSize,  out this.mantissa_r[j][k], "mantissa_r"); 
			}
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.exponent_t[j], "exponent_t"); 
			boxSize += stream.ReadInt64(boxSize, readSize,  out this.mantissa_t[j], "mantissa_t"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(6,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(10,  this.ref_view_id, "ref_view_id"); 
		boxSize += stream.WriteUInt8( this.prec_rotation_param, "prec_rotation_param"); 
		boxSize += stream.WriteUInt8( this.prec_translation_param, "prec_translation_param"); 

		for (int j=0; j<3; j++)
		{
			/*  row  */

			for (int k=0; k<3; k++)
			{
				/*  column  */
				boxSize += stream.WriteUInt8( this.exponent_r[j][k], "exponent_r"); 
				boxSize += stream.WriteInt64( this.mantissa_r[j][k], "mantissa_r"); 
			}
			boxSize += stream.WriteUInt8( this.exponent_t[j], "exponent_t"); 
			boxSize += stream.WriteInt64( this.mantissa_t[j], "mantissa_t"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 6; // reserved
		boxSize += 10; // ref_view_id
		boxSize += 8; // prec_rotation_param
		boxSize += 8; // prec_translation_param

		for (int j=0; j<3; j++)
		{
			/*  row  */

			for (int k=0; k<3; k++)
			{
				/*  column  */
				boxSize += 8; // exponent_r
				boxSize += 64; // mantissa_r
			}
			boxSize += 8; // exponent_t
			boxSize += 64; // mantissa_t
		}
		return boxSize;
	}
}


/*
aligned(8) class AVCDecoderConfigurationRecord { 
 unsigned int(8) configurationVersion = 1; 
 unsigned int(8) AVCProfileIndication; 
 unsigned int(8) profile_compatibility; 
 unsigned int(8) AVCLevelIndication;  
 bit(6) reserved = '111111'b; 
 unsigned int(2) lengthSizeMinusOne;  
 bit(3) reserved = '111'b; 
 unsigned int(5) numOfSequenceParameterSets; 
 for (i=0; i< numOfSequenceParameterSets;  i++) { 
  unsigned int(16) sequenceParameterSetLength ; 
  bit(8*sequenceParameterSetLength) sequenceParameterSetNALUnit; 
 } 
 unsigned int(8) numOfPictureParameterSets; 
 for (i=0; i< numOfPictureParameterSets;  i++) { 
  unsigned int(16) pictureParameterSetLength; 
  bit(8*pictureParameterSetLength) pictureParameterSetNALUnit; 
 } 
 if( AVCProfileIndication  ==  100  ||  AVCProfileIndication  ==  110  || 
    AVCProfileIndication  ==  122  ||  AVCProfileIndication  ==  144 ) 
 { 
  bit(6) reserved = '111111'b; 
  unsigned int(2) chroma_format; 
  bit(5) reserved = '11111'b; 
  unsigned int(3) bit_depth_luma_minus8; 
  bit(5) reserved = '11111'b; 
  unsigned int(3) bit_depth_chroma_minus8; 
  unsigned int(8) numOfSequenceParameterSetExt; 
  for (i=0; i< numOfSequenceParameterSetExt; i++) { 
   unsigned int(16) sequenceParameterSetExtLength; 
   bit(8*sequenceParameterSetExtLength) sequenceParameterSetExtNALUnit; 
  }
 } 
}
*/
public partial class AVCDecoderConfigurationRecord : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "AVCDecoderConfigurationRecord"; } }

	protected byte configurationVersion = 1; 
	public byte ConfigurationVersion { get { return this.configurationVersion; } set { this.configurationVersion = value; } }

	protected byte AVCProfileIndication; 
	public byte _AVCProfileIndication { get { return this.AVCProfileIndication; } set { this.AVCProfileIndication = value; } }

	protected byte profile_compatibility; 
	public byte ProfileCompatibility { get { return this.profile_compatibility; } set { this.profile_compatibility = value; } }

	protected byte AVCLevelIndication; 
	public byte _AVCLevelIndication { get { return this.AVCLevelIndication; } set { this.AVCLevelIndication = value; } }

	protected byte reserved = 0b111111; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte lengthSizeMinusOne; 
	public byte LengthSizeMinusOne { get { return this.lengthSizeMinusOne; } set { this.lengthSizeMinusOne = value; } }

	protected byte reserved0 = 0b111; 
	public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected byte numOfSequenceParameterSets; 
	public byte NumOfSequenceParameterSets { get { return this.numOfSequenceParameterSets; } set { this.numOfSequenceParameterSets = value; } }

	protected ushort[] sequenceParameterSetLength; 
	public ushort[] SequenceParameterSetLength { get { return this.sequenceParameterSetLength; } set { this.sequenceParameterSetLength = value; } }

	protected byte[][] sequenceParameterSetNALUnit; 
	public byte[][] SequenceParameterSetNALUnit { get { return this.sequenceParameterSetNALUnit; } set { this.sequenceParameterSetNALUnit = value; } }

	protected byte numOfPictureParameterSets; 
	public byte NumOfPictureParameterSets { get { return this.numOfPictureParameterSets; } set { this.numOfPictureParameterSets = value; } }

	protected ushort[] pictureParameterSetLength; 
	public ushort[] PictureParameterSetLength { get { return this.pictureParameterSetLength; } set { this.pictureParameterSetLength = value; } }

	protected byte[][] pictureParameterSetNALUnit; 
	public byte[][] PictureParameterSetNALUnit { get { return this.pictureParameterSetNALUnit; } set { this.pictureParameterSetNALUnit = value; } }

	protected byte reserved1 = 0b111111; 
	public byte Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected byte chroma_format; 
	public byte ChromaFormat { get { return this.chroma_format; } set { this.chroma_format = value; } }

	protected byte reserved00 = 0b11111; 
	public byte Reserved00 { get { return this.reserved00; } set { this.reserved00 = value; } }

	protected byte bit_depth_luma_minus8; 
	public byte BitDepthLumaMinus8 { get { return this.bit_depth_luma_minus8; } set { this.bit_depth_luma_minus8 = value; } }

	protected byte reserved10 = 0b11111; 
	public byte Reserved10 { get { return this.reserved10; } set { this.reserved10 = value; } }

	protected byte bit_depth_chroma_minus8; 
	public byte BitDepthChromaMinus8 { get { return this.bit_depth_chroma_minus8; } set { this.bit_depth_chroma_minus8 = value; } }

	protected byte numOfSequenceParameterSetExt; 
	public byte NumOfSequenceParameterSetExt { get { return this.numOfSequenceParameterSetExt; } set { this.numOfSequenceParameterSetExt = value; } }

	protected ushort[] sequenceParameterSetExtLength; 
	public ushort[] SequenceParameterSetExtLength { get { return this.sequenceParameterSetExtLength; } set { this.sequenceParameterSetExtLength = value; } }

	protected byte[][] sequenceParameterSetExtNALUnit; 
	public byte[][] SequenceParameterSetExtNALUnit { get { return this.sequenceParameterSetExtNALUnit; } set { this.sequenceParameterSetExtNALUnit = value; } }
public bool HasExtensions { get; set; } = false;

	public AVCDecoderConfigurationRecord(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.configurationVersion, "configurationVersion"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.AVCProfileIndication, "AVCProfileIndication"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.profile_compatibility, "profile_compatibility"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.AVCLevelIndication, "AVCLevelIndication"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.lengthSizeMinusOne, "lengthSizeMinusOne"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.reserved0, "reserved0"); 
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.numOfSequenceParameterSets, "numOfSequenceParameterSets"); 

		this.sequenceParameterSetLength = new ushort[IsoStream.GetInt( numOfSequenceParameterSets)];
		this.sequenceParameterSetNALUnit = new byte[IsoStream.GetInt( numOfSequenceParameterSets)][];
		for (int i=0; i< numOfSequenceParameterSets;  i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.sequenceParameterSetLength[i], "sequenceParameterSetLength"); 
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(8*sequenceParameterSetLength[i] ),  out this.sequenceParameterSetNALUnit[i], "sequenceParameterSetNALUnit"); 
		}
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.numOfPictureParameterSets, "numOfPictureParameterSets"); 

		this.pictureParameterSetLength = new ushort[IsoStream.GetInt( numOfPictureParameterSets)];
		this.pictureParameterSetNALUnit = new byte[IsoStream.GetInt( numOfPictureParameterSets)][];
		for (int i=0; i< numOfPictureParameterSets;  i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.pictureParameterSetLength[i], "pictureParameterSetLength"); 
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(8*pictureParameterSetLength[i] ),  out this.pictureParameterSetNALUnit[i], "pictureParameterSetNALUnit"); 
		}

		if (boxSize >= readSize || (readSize - boxSize) < 4) return boxSize; else HasExtensions = true;
		if ( AVCProfileIndication  ==  100  ||  AVCProfileIndication  ==  110  || 
    AVCProfileIndication  ==  122  ||  AVCProfileIndication  ==  144 )
		{
			boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved1, "reserved1"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.chroma_format, "chroma_format"); 
			boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.reserved00, "reserved00"); 
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.bit_depth_luma_minus8, "bit_depth_luma_minus8"); 
			boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.reserved10, "reserved10"); 
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.bit_depth_chroma_minus8, "bit_depth_chroma_minus8"); 
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.numOfSequenceParameterSetExt, "numOfSequenceParameterSetExt"); 

			this.sequenceParameterSetExtLength = new ushort[IsoStream.GetInt( numOfSequenceParameterSetExt)];
			this.sequenceParameterSetExtNALUnit = new byte[IsoStream.GetInt( numOfSequenceParameterSetExt)][];
			for (int i=0; i< numOfSequenceParameterSetExt; i++)
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.sequenceParameterSetExtLength[i], "sequenceParameterSetExtLength"); 
				boxSize += stream.ReadBits(boxSize, readSize, (uint)(8*sequenceParameterSetExtLength[i] ),  out this.sequenceParameterSetExtNALUnit[i], "sequenceParameterSetExtNALUnit"); 
			}
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt8( this.configurationVersion, "configurationVersion"); 
		boxSize += stream.WriteUInt8( this.AVCProfileIndication, "AVCProfileIndication"); 
		boxSize += stream.WriteUInt8( this.profile_compatibility, "profile_compatibility"); 
		boxSize += stream.WriteUInt8( this.AVCLevelIndication, "AVCLevelIndication"); 
		boxSize += stream.WriteBits(6,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(2,  this.lengthSizeMinusOne, "lengthSizeMinusOne"); 
		boxSize += stream.WriteBits(3,  this.reserved0, "reserved0"); 
		boxSize += stream.WriteBits(5,  this.numOfSequenceParameterSets, "numOfSequenceParameterSets"); 

		for (int i=0; i< numOfSequenceParameterSets;  i++)
		{
			boxSize += stream.WriteUInt16( this.sequenceParameterSetLength[i], "sequenceParameterSetLength"); 
			boxSize += stream.WriteBits((uint)(8*sequenceParameterSetLength[i] ),  this.sequenceParameterSetNALUnit[i], "sequenceParameterSetNALUnit"); 
		}
		boxSize += stream.WriteUInt8( this.numOfPictureParameterSets, "numOfPictureParameterSets"); 

		for (int i=0; i< numOfPictureParameterSets;  i++)
		{
			boxSize += stream.WriteUInt16( this.pictureParameterSetLength[i], "pictureParameterSetLength"); 
			boxSize += stream.WriteBits((uint)(8*pictureParameterSetLength[i] ),  this.pictureParameterSetNALUnit[i], "pictureParameterSetNALUnit"); 
		}

		if (!HasExtensions) return boxSize;
		if ( AVCProfileIndication  ==  100  ||  AVCProfileIndication  ==  110  || 
    AVCProfileIndication  ==  122  ||  AVCProfileIndication  ==  144 )
		{
			boxSize += stream.WriteBits(6,  this.reserved1, "reserved1"); 
			boxSize += stream.WriteBits(2,  this.chroma_format, "chroma_format"); 
			boxSize += stream.WriteBits(5,  this.reserved00, "reserved00"); 
			boxSize += stream.WriteBits(3,  this.bit_depth_luma_minus8, "bit_depth_luma_minus8"); 
			boxSize += stream.WriteBits(5,  this.reserved10, "reserved10"); 
			boxSize += stream.WriteBits(3,  this.bit_depth_chroma_minus8, "bit_depth_chroma_minus8"); 
			boxSize += stream.WriteUInt8( this.numOfSequenceParameterSetExt, "numOfSequenceParameterSetExt"); 

			for (int i=0; i< numOfSequenceParameterSetExt; i++)
			{
				boxSize += stream.WriteUInt16( this.sequenceParameterSetExtLength[i], "sequenceParameterSetExtLength"); 
				boxSize += stream.WriteBits((uint)(8*sequenceParameterSetExtLength[i] ),  this.sequenceParameterSetExtNALUnit[i], "sequenceParameterSetExtNALUnit"); 
			}
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 8; // configurationVersion
		boxSize += 8; // AVCProfileIndication
		boxSize += 8; // profile_compatibility
		boxSize += 8; // AVCLevelIndication
		boxSize += 6; // reserved
		boxSize += 2; // lengthSizeMinusOne
		boxSize += 3; // reserved0
		boxSize += 5; // numOfSequenceParameterSets

		for (int i=0; i< numOfSequenceParameterSets;  i++)
		{
			boxSize += 16; // sequenceParameterSetLength
			boxSize += (ulong)(8*sequenceParameterSetLength[i] ); // sequenceParameterSetNALUnit
		}
		boxSize += 8; // numOfPictureParameterSets

		for (int i=0; i< numOfPictureParameterSets;  i++)
		{
			boxSize += 16; // pictureParameterSetLength
			boxSize += (ulong)(8*pictureParameterSetLength[i] ); // pictureParameterSetNALUnit
		}

		if (!HasExtensions) return boxSize;
		if ( AVCProfileIndication  ==  100  ||  AVCProfileIndication  ==  110  || 
    AVCProfileIndication  ==  122  ||  AVCProfileIndication  ==  144 )
		{
			boxSize += 6; // reserved1
			boxSize += 2; // chroma_format
			boxSize += 5; // reserved00
			boxSize += 3; // bit_depth_luma_minus8
			boxSize += 5; // reserved10
			boxSize += 3; // bit_depth_chroma_minus8
			boxSize += 8; // numOfSequenceParameterSetExt

			for (int i=0; i< numOfSequenceParameterSetExt; i++)
			{
				boxSize += 16; // sequenceParameterSetExtLength
				boxSize += (ulong)(8*sequenceParameterSetExtLength[i] ); // sequenceParameterSetExtNALUnit
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class MVCDecoderConfigurationRecord { 
unsigned int(8) configurationVersion = 1; 
unsigned int(8) AVCProfileIndication; 
unsigned int(8) profile_compatibility; 
unsigned int(8) AVCLevelIndication;  
 bit(1) complete_representation; 
 bit(1) explicit_au_track; 
bit(4) reserved = '1111'b; 
unsigned int(2) lengthSizeMinusOne;  
bit(1) reserved = '0'b; 
unsigned int(7) numOfSequenceParameterSets; 
for (i=0; i< numOfSequenceParameterSets; i++) { 
unsigned int(16) sequenceParameterSetLength ; 
  bit(8*sequenceParameterSetLength) sequenceParameterSetNALUnit; 
 } 
unsigned int(8) numOfPictureParameterSets; 
for (i=0; i< numOfPictureParameterSets; i++) { 
  unsigned int(16) pictureParameterSetLength; 
  bit(8*pictureParameterSetLength) pictureParameterSetNALUnit; 
 } 
}
*/
public partial class MVCDecoderConfigurationRecord : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "MVCDecoderConfigurationRecord"; } }

	protected byte configurationVersion = 1; 
	public byte ConfigurationVersion { get { return this.configurationVersion; } set { this.configurationVersion = value; } }

	protected byte AVCProfileIndication; 
	public byte _AVCProfileIndication { get { return this.AVCProfileIndication; } set { this.AVCProfileIndication = value; } }

	protected byte profile_compatibility; 
	public byte ProfileCompatibility { get { return this.profile_compatibility; } set { this.profile_compatibility = value; } }

	protected byte AVCLevelIndication; 
	public byte _AVCLevelIndication { get { return this.AVCLevelIndication; } set { this.AVCLevelIndication = value; } }

	protected bool complete_representation; 
	public bool CompleteRepresentation { get { return this.complete_representation; } set { this.complete_representation = value; } }

	protected bool explicit_au_track; 
	public bool ExplicitAuTrack { get { return this.explicit_au_track; } set { this.explicit_au_track = value; } }

	protected byte reserved = 0b1111; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte lengthSizeMinusOne; 
	public byte LengthSizeMinusOne { get { return this.lengthSizeMinusOne; } set { this.lengthSizeMinusOne = value; } }

	protected bool reserved0 = false; 
	public bool Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected byte numOfSequenceParameterSets; 
	public byte NumOfSequenceParameterSets { get { return this.numOfSequenceParameterSets; } set { this.numOfSequenceParameterSets = value; } }

	protected ushort[] sequenceParameterSetLength; 
	public ushort[] SequenceParameterSetLength { get { return this.sequenceParameterSetLength; } set { this.sequenceParameterSetLength = value; } }

	protected byte[][] sequenceParameterSetNALUnit; 
	public byte[][] SequenceParameterSetNALUnit { get { return this.sequenceParameterSetNALUnit; } set { this.sequenceParameterSetNALUnit = value; } }

	protected byte numOfPictureParameterSets; 
	public byte NumOfPictureParameterSets { get { return this.numOfPictureParameterSets; } set { this.numOfPictureParameterSets = value; } }

	protected ushort[] pictureParameterSetLength; 
	public ushort[] PictureParameterSetLength { get { return this.pictureParameterSetLength; } set { this.pictureParameterSetLength = value; } }

	protected byte[][] pictureParameterSetNALUnit; 
	public byte[][] PictureParameterSetNALUnit { get { return this.pictureParameterSetNALUnit; } set { this.pictureParameterSetNALUnit = value; } }

	public MVCDecoderConfigurationRecord(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.configurationVersion, "configurationVersion"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.AVCProfileIndication, "AVCProfileIndication"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.profile_compatibility, "profile_compatibility"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.AVCLevelIndication, "AVCLevelIndication"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.complete_representation, "complete_representation"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.explicit_au_track, "explicit_au_track"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.lengthSizeMinusOne, "lengthSizeMinusOne"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved0, "reserved0"); 
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.numOfSequenceParameterSets, "numOfSequenceParameterSets"); 

		this.sequenceParameterSetLength = new ushort[IsoStream.GetInt( numOfSequenceParameterSets)];
		this.sequenceParameterSetNALUnit = new byte[IsoStream.GetInt( numOfSequenceParameterSets)][];
		for (int i=0; i< numOfSequenceParameterSets; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.sequenceParameterSetLength[i], "sequenceParameterSetLength"); 
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(8*sequenceParameterSetLength[i] ),  out this.sequenceParameterSetNALUnit[i], "sequenceParameterSetNALUnit"); 
		}
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.numOfPictureParameterSets, "numOfPictureParameterSets"); 

		this.pictureParameterSetLength = new ushort[IsoStream.GetInt( numOfPictureParameterSets)];
		this.pictureParameterSetNALUnit = new byte[IsoStream.GetInt( numOfPictureParameterSets)][];
		for (int i=0; i< numOfPictureParameterSets; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.pictureParameterSetLength[i], "pictureParameterSetLength"); 
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(8*pictureParameterSetLength[i] ),  out this.pictureParameterSetNALUnit[i], "pictureParameterSetNALUnit"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt8( this.configurationVersion, "configurationVersion"); 
		boxSize += stream.WriteUInt8( this.AVCProfileIndication, "AVCProfileIndication"); 
		boxSize += stream.WriteUInt8( this.profile_compatibility, "profile_compatibility"); 
		boxSize += stream.WriteUInt8( this.AVCLevelIndication, "AVCLevelIndication"); 
		boxSize += stream.WriteBit( this.complete_representation, "complete_representation"); 
		boxSize += stream.WriteBit( this.explicit_au_track, "explicit_au_track"); 
		boxSize += stream.WriteBits(4,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(2,  this.lengthSizeMinusOne, "lengthSizeMinusOne"); 
		boxSize += stream.WriteBit( this.reserved0, "reserved0"); 
		boxSize += stream.WriteBits(7,  this.numOfSequenceParameterSets, "numOfSequenceParameterSets"); 

		for (int i=0; i< numOfSequenceParameterSets; i++)
		{
			boxSize += stream.WriteUInt16( this.sequenceParameterSetLength[i], "sequenceParameterSetLength"); 
			boxSize += stream.WriteBits((uint)(8*sequenceParameterSetLength[i] ),  this.sequenceParameterSetNALUnit[i], "sequenceParameterSetNALUnit"); 
		}
		boxSize += stream.WriteUInt8( this.numOfPictureParameterSets, "numOfPictureParameterSets"); 

		for (int i=0; i< numOfPictureParameterSets; i++)
		{
			boxSize += stream.WriteUInt16( this.pictureParameterSetLength[i], "pictureParameterSetLength"); 
			boxSize += stream.WriteBits((uint)(8*pictureParameterSetLength[i] ),  this.pictureParameterSetNALUnit[i], "pictureParameterSetNALUnit"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 8; // configurationVersion
		boxSize += 8; // AVCProfileIndication
		boxSize += 8; // profile_compatibility
		boxSize += 8; // AVCLevelIndication
		boxSize += 1; // complete_representation
		boxSize += 1; // explicit_au_track
		boxSize += 4; // reserved
		boxSize += 2; // lengthSizeMinusOne
		boxSize += 1; // reserved0
		boxSize += 7; // numOfSequenceParameterSets

		for (int i=0; i< numOfSequenceParameterSets; i++)
		{
			boxSize += 16; // sequenceParameterSetLength
			boxSize += (ulong)(8*sequenceParameterSetLength[i] ); // sequenceParameterSetNALUnit
		}
		boxSize += 8; // numOfPictureParameterSets

		for (int i=0; i< numOfPictureParameterSets; i++)
		{
			boxSize += 16; // pictureParameterSetLength
			boxSize += (ulong)(8*pictureParameterSetLength[i] ); // pictureParameterSetNALUnit
		}
		return boxSize;
	}
}


/*
aligned(8) class SVCDecoderConfigurationRecord { 
unsigned int(8) configurationVersion = 1; 
unsigned int(8) AVCProfileIndication; 
unsigned int(8) profile_compatibility; 
unsigned int(8) AVCLevelIndication;  
 bit(1) complete_represenation; 
bit(5) reserved = '11111'b; 
unsigned int(2) lengthSizeMinusOne;  
bit(1) reserved = '0'b; 
unsigned int(7) numOfSequenceParameterSets; 
for (i=0; i< numOfSequenceParameterSets && numOfSequenceParameterSets <= 64 && numOfSequenceParameterSets >= 0; i++) { 
unsigned int(16) sequenceParameterSetLength ; 
  bit(8*sequenceParameterSetLength) sequenceParameterSetNALUnit; 
 } 
unsigned int(8) numOfPictureParameterSets; 
for (i=0; i< numOfPictureParameterSets; i++) { 
  unsigned int(16) pictureParameterSetLength; 
  bit(8*pictureParameterSetLength) pictureParameterSetNALUnit; 
 } 
}
*/
public partial class SVCDecoderConfigurationRecord : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "SVCDecoderConfigurationRecord"; } }

	protected byte configurationVersion = 1; 
	public byte ConfigurationVersion { get { return this.configurationVersion; } set { this.configurationVersion = value; } }

	protected byte AVCProfileIndication; 
	public byte _AVCProfileIndication { get { return this.AVCProfileIndication; } set { this.AVCProfileIndication = value; } }

	protected byte profile_compatibility; 
	public byte ProfileCompatibility { get { return this.profile_compatibility; } set { this.profile_compatibility = value; } }

	protected byte AVCLevelIndication; 
	public byte _AVCLevelIndication { get { return this.AVCLevelIndication; } set { this.AVCLevelIndication = value; } }

	protected bool complete_represenation; 
	public bool CompleteRepresenation { get { return this.complete_represenation; } set { this.complete_represenation = value; } }

	protected byte reserved = 0b11111; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte lengthSizeMinusOne; 
	public byte LengthSizeMinusOne { get { return this.lengthSizeMinusOne; } set { this.lengthSizeMinusOne = value; } }

	protected bool reserved0 = false; 
	public bool Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected byte numOfSequenceParameterSets; 
	public byte NumOfSequenceParameterSets { get { return this.numOfSequenceParameterSets; } set { this.numOfSequenceParameterSets = value; } }

	protected ushort[] sequenceParameterSetLength; 
	public ushort[] SequenceParameterSetLength { get { return this.sequenceParameterSetLength; } set { this.sequenceParameterSetLength = value; } }

	protected byte[][] sequenceParameterSetNALUnit; 
	public byte[][] SequenceParameterSetNALUnit { get { return this.sequenceParameterSetNALUnit; } set { this.sequenceParameterSetNALUnit = value; } }

	protected byte numOfPictureParameterSets; 
	public byte NumOfPictureParameterSets { get { return this.numOfPictureParameterSets; } set { this.numOfPictureParameterSets = value; } }

	protected ushort[] pictureParameterSetLength; 
	public ushort[] PictureParameterSetLength { get { return this.pictureParameterSetLength; } set { this.pictureParameterSetLength = value; } }

	protected byte[][] pictureParameterSetNALUnit; 
	public byte[][] PictureParameterSetNALUnit { get { return this.pictureParameterSetNALUnit; } set { this.pictureParameterSetNALUnit = value; } }

	public SVCDecoderConfigurationRecord(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.configurationVersion, "configurationVersion"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.AVCProfileIndication, "AVCProfileIndication"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.profile_compatibility, "profile_compatibility"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.AVCLevelIndication, "AVCLevelIndication"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.complete_represenation, "complete_represenation"); 
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.lengthSizeMinusOne, "lengthSizeMinusOne"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved0, "reserved0"); 
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.numOfSequenceParameterSets, "numOfSequenceParameterSets"); 

		this.sequenceParameterSetLength = new ushort[IsoStream.GetInt( 0)];
		this.sequenceParameterSetNALUnit = new byte[IsoStream.GetInt( 0)][];
		for (int i=0; i< numOfSequenceParameterSets && numOfSequenceParameterSets <= 64 && numOfSequenceParameterSets >= 0; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.sequenceParameterSetLength[i], "sequenceParameterSetLength"); 
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(8*sequenceParameterSetLength[i] ),  out this.sequenceParameterSetNALUnit[i], "sequenceParameterSetNALUnit"); 
		}
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.numOfPictureParameterSets, "numOfPictureParameterSets"); 

		this.pictureParameterSetLength = new ushort[IsoStream.GetInt( numOfPictureParameterSets)];
		this.pictureParameterSetNALUnit = new byte[IsoStream.GetInt( numOfPictureParameterSets)][];
		for (int i=0; i< numOfPictureParameterSets; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.pictureParameterSetLength[i], "pictureParameterSetLength"); 
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(8*pictureParameterSetLength[i] ),  out this.pictureParameterSetNALUnit[i], "pictureParameterSetNALUnit"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt8( this.configurationVersion, "configurationVersion"); 
		boxSize += stream.WriteUInt8( this.AVCProfileIndication, "AVCProfileIndication"); 
		boxSize += stream.WriteUInt8( this.profile_compatibility, "profile_compatibility"); 
		boxSize += stream.WriteUInt8( this.AVCLevelIndication, "AVCLevelIndication"); 
		boxSize += stream.WriteBit( this.complete_represenation, "complete_represenation"); 
		boxSize += stream.WriteBits(5,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(2,  this.lengthSizeMinusOne, "lengthSizeMinusOne"); 
		boxSize += stream.WriteBit( this.reserved0, "reserved0"); 
		boxSize += stream.WriteBits(7,  this.numOfSequenceParameterSets, "numOfSequenceParameterSets"); 

		for (int i=0; i< numOfSequenceParameterSets && numOfSequenceParameterSets <= 64 && numOfSequenceParameterSets >= 0; i++)
		{
			boxSize += stream.WriteUInt16( this.sequenceParameterSetLength[i], "sequenceParameterSetLength"); 
			boxSize += stream.WriteBits((uint)(8*sequenceParameterSetLength[i] ),  this.sequenceParameterSetNALUnit[i], "sequenceParameterSetNALUnit"); 
		}
		boxSize += stream.WriteUInt8( this.numOfPictureParameterSets, "numOfPictureParameterSets"); 

		for (int i=0; i< numOfPictureParameterSets; i++)
		{
			boxSize += stream.WriteUInt16( this.pictureParameterSetLength[i], "pictureParameterSetLength"); 
			boxSize += stream.WriteBits((uint)(8*pictureParameterSetLength[i] ),  this.pictureParameterSetNALUnit[i], "pictureParameterSetNALUnit"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 8; // configurationVersion
		boxSize += 8; // AVCProfileIndication
		boxSize += 8; // profile_compatibility
		boxSize += 8; // AVCLevelIndication
		boxSize += 1; // complete_represenation
		boxSize += 5; // reserved
		boxSize += 2; // lengthSizeMinusOne
		boxSize += 1; // reserved0
		boxSize += 7; // numOfSequenceParameterSets

		for (int i=0; i< numOfSequenceParameterSets && numOfSequenceParameterSets <= 64 && numOfSequenceParameterSets >= 0; i++)
		{
			boxSize += 16; // sequenceParameterSetLength
			boxSize += (ulong)(8*sequenceParameterSetLength[i] ); // sequenceParameterSetNALUnit
		}
		boxSize += 8; // numOfPictureParameterSets

		for (int i=0; i< numOfPictureParameterSets; i++)
		{
			boxSize += 16; // pictureParameterSetLength
			boxSize += (ulong)(8*pictureParameterSetLength[i] ); // pictureParameterSetNALUnit
		}
		return boxSize;
	}
}


/*
aligned(8) class HEVCDecoderConfigurationRecord {
	unsigned int(8) configurationVersion = 1;
	unsigned int(2) general_profile_space;
	unsigned int(1) general_tier_flag;
	unsigned int(5) general_profile_idc;
	unsigned int(32) general_profile_compatibility_flags;
	unsigned int(48) general_constraint_indicator_flags;
	unsigned int(8) general_level_idc;
	bit(4) reserved = '1111'b;
	unsigned int(12) min_spatial_segmentation_idc;
	bit(6) reserved = '111111'b;
	unsigned int(2) parallelismType;
	bit(6) reserved = '111111'b;
	unsigned int(2) chromaFormat;
	bit(5) reserved = '11111'b;
	unsigned int(3) bitDepthLumaMinus8;
	bit(5) reserved = '11111'b;
	unsigned int(3) bitDepthChromaMinus8;
	bit(16) avgFrameRate;
	bit(2) constantFrameRate;
	bit(3) numTemporalLayers;
	bit(1) temporalIdNested;
	unsigned int(2) lengthSizeMinusOne; 
	unsigned int(8) numOfArrays;
	for (j=0; j < numOfArrays; j++) {
		bit(1) array_completeness;
		unsigned int(1) reserved = 0;
		unsigned int(6) NAL_unit_type;
		unsigned int(16) numNalus;
		for (i=0; i< numNalus; i++) {
			unsigned int(16) nalUnitLength;
			bit(8*nalUnitLength) nalUnit;
		}
	}
}
*/
public partial class HEVCDecoderConfigurationRecord : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "HEVCDecoderConfigurationRecord"; } }

	protected byte configurationVersion = 1; 
	public byte ConfigurationVersion { get { return this.configurationVersion; } set { this.configurationVersion = value; } }

	protected byte general_profile_space; 
	public byte GeneralProfileSpace { get { return this.general_profile_space; } set { this.general_profile_space = value; } }

	protected bool general_tier_flag; 
	public bool GeneralTierFlag { get { return this.general_tier_flag; } set { this.general_tier_flag = value; } }

	protected byte general_profile_idc; 
	public byte GeneralProfileIdc { get { return this.general_profile_idc; } set { this.general_profile_idc = value; } }

	protected uint general_profile_compatibility_flags; 
	public uint GeneralProfileCompatibilityFlags { get { return this.general_profile_compatibility_flags; } set { this.general_profile_compatibility_flags = value; } }

	protected ulong general_constraint_indicator_flags; 
	public ulong GeneralConstraintIndicatorFlags { get { return this.general_constraint_indicator_flags; } set { this.general_constraint_indicator_flags = value; } }

	protected byte general_level_idc; 
	public byte GeneralLevelIdc { get { return this.general_level_idc; } set { this.general_level_idc = value; } }

	protected byte reserved = 0b1111; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected ushort min_spatial_segmentation_idc; 
	public ushort MinSpatialSegmentationIdc { get { return this.min_spatial_segmentation_idc; } set { this.min_spatial_segmentation_idc = value; } }

	protected byte reserved0 = 0b111111; 
	public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected byte parallelismType; 
	public byte ParallelismType { get { return this.parallelismType; } set { this.parallelismType = value; } }

	protected byte reserved1 = 0b111111; 
	public byte Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected byte chromaFormat; 
	public byte ChromaFormat { get { return this.chromaFormat; } set { this.chromaFormat = value; } }

	protected byte reserved2 = 0b11111; 
	public byte Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

	protected byte bitDepthLumaMinus8; 
	public byte BitDepthLumaMinus8 { get { return this.bitDepthLumaMinus8; } set { this.bitDepthLumaMinus8 = value; } }

	protected byte reserved3 = 0b11111; 
	public byte Reserved3 { get { return this.reserved3; } set { this.reserved3 = value; } }

	protected byte bitDepthChromaMinus8; 
	public byte BitDepthChromaMinus8 { get { return this.bitDepthChromaMinus8; } set { this.bitDepthChromaMinus8 = value; } }

	protected ushort avgFrameRate; 
	public ushort AvgFrameRate { get { return this.avgFrameRate; } set { this.avgFrameRate = value; } }

	protected byte constantFrameRate; 
	public byte ConstantFrameRate { get { return this.constantFrameRate; } set { this.constantFrameRate = value; } }

	protected byte numTemporalLayers; 
	public byte NumTemporalLayers { get { return this.numTemporalLayers; } set { this.numTemporalLayers = value; } }

	protected bool temporalIdNested; 
	public bool TemporalIdNested { get { return this.temporalIdNested; } set { this.temporalIdNested = value; } }

	protected byte lengthSizeMinusOne; 
	public byte LengthSizeMinusOne { get { return this.lengthSizeMinusOne; } set { this.lengthSizeMinusOne = value; } }

	protected byte numOfArrays; 
	public byte NumOfArrays { get { return this.numOfArrays; } set { this.numOfArrays = value; } }

	protected bool[] array_completeness; 
	public bool[] ArrayCompleteness { get { return this.array_completeness; } set { this.array_completeness = value; } }

	protected bool[] reserved4; 
	public bool[] Reserved4 { get { return this.reserved4; } set { this.reserved4 = value; } }

	protected byte[] NAL_unit_type; 
	public byte[] NALUnitType { get { return this.NAL_unit_type; } set { this.NAL_unit_type = value; } }

	protected ushort[] numNalus; 
	public ushort[] NumNalus { get { return this.numNalus; } set { this.numNalus = value; } }

	protected ushort[][] nalUnitLength; 
	public ushort[][] NalUnitLength { get { return this.nalUnitLength; } set { this.nalUnitLength = value; } }

	protected byte[][][] nalUnit; 
	public byte[][][] NalUnit { get { return this.nalUnit; } set { this.nalUnit = value; } }

	public HEVCDecoderConfigurationRecord(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.configurationVersion, "configurationVersion"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.general_profile_space, "general_profile_space"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.general_tier_flag, "general_tier_flag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.general_profile_idc, "general_profile_idc"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.general_profile_compatibility_flags, "general_profile_compatibility_flags"); 
		boxSize += stream.ReadUInt48(boxSize, readSize,  out this.general_constraint_indicator_flags, "general_constraint_indicator_flags"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.general_level_idc, "general_level_idc"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 12,  out this.min_spatial_segmentation_idc, "min_spatial_segmentation_idc"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved0, "reserved0"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.parallelismType, "parallelismType"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved1, "reserved1"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.chromaFormat, "chromaFormat"); 
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.reserved2, "reserved2"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.bitDepthLumaMinus8, "bitDepthLumaMinus8"); 
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.reserved3, "reserved3"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.bitDepthChromaMinus8, "bitDepthChromaMinus8"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.avgFrameRate, "avgFrameRate"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.constantFrameRate, "constantFrameRate"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.numTemporalLayers, "numTemporalLayers"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.temporalIdNested, "temporalIdNested"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.lengthSizeMinusOne, "lengthSizeMinusOne"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.numOfArrays, "numOfArrays"); 

		this.array_completeness = new bool[IsoStream.GetInt( numOfArrays)];
		this.reserved4 = new bool[IsoStream.GetInt( numOfArrays)];
		this.NAL_unit_type = new byte[IsoStream.GetInt( numOfArrays)];
		this.numNalus = new ushort[IsoStream.GetInt( numOfArrays)];
		this.nalUnitLength = new ushort[IsoStream.GetInt( numOfArrays)][];
		this.nalUnit = new byte[IsoStream.GetInt( numOfArrays)][][];
		for (int j=0; j < numOfArrays; j++)
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.array_completeness[j], "array_completeness"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved4[j], "reserved4"); 
			boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.NAL_unit_type[j], "NAL_unit_type"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.numNalus[j], "numNalus"); 

			this.nalUnitLength[j] = new ushort[IsoStream.GetInt( numNalus[j])];
			this.nalUnit[j] = new byte[IsoStream.GetInt( numNalus[j])][];
			for (int i=0; i< numNalus[j]; i++)
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.nalUnitLength[j][i], "nalUnitLength"); 
				boxSize += stream.ReadBits(boxSize, readSize, (uint)(8*nalUnitLength[j][i] ),  out this.nalUnit[j][i], "nalUnit"); 
			}
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt8( this.configurationVersion, "configurationVersion"); 
		boxSize += stream.WriteBits(2,  this.general_profile_space, "general_profile_space"); 
		boxSize += stream.WriteBit( this.general_tier_flag, "general_tier_flag"); 
		boxSize += stream.WriteBits(5,  this.general_profile_idc, "general_profile_idc"); 
		boxSize += stream.WriteUInt32( this.general_profile_compatibility_flags, "general_profile_compatibility_flags"); 
		boxSize += stream.WriteUInt48( this.general_constraint_indicator_flags, "general_constraint_indicator_flags"); 
		boxSize += stream.WriteUInt8( this.general_level_idc, "general_level_idc"); 
		boxSize += stream.WriteBits(4,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(12,  this.min_spatial_segmentation_idc, "min_spatial_segmentation_idc"); 
		boxSize += stream.WriteBits(6,  this.reserved0, "reserved0"); 
		boxSize += stream.WriteBits(2,  this.parallelismType, "parallelismType"); 
		boxSize += stream.WriteBits(6,  this.reserved1, "reserved1"); 
		boxSize += stream.WriteBits(2,  this.chromaFormat, "chromaFormat"); 
		boxSize += stream.WriteBits(5,  this.reserved2, "reserved2"); 
		boxSize += stream.WriteBits(3,  this.bitDepthLumaMinus8, "bitDepthLumaMinus8"); 
		boxSize += stream.WriteBits(5,  this.reserved3, "reserved3"); 
		boxSize += stream.WriteBits(3,  this.bitDepthChromaMinus8, "bitDepthChromaMinus8"); 
		boxSize += stream.WriteUInt16( this.avgFrameRate, "avgFrameRate"); 
		boxSize += stream.WriteBits(2,  this.constantFrameRate, "constantFrameRate"); 
		boxSize += stream.WriteBits(3,  this.numTemporalLayers, "numTemporalLayers"); 
		boxSize += stream.WriteBit( this.temporalIdNested, "temporalIdNested"); 
		boxSize += stream.WriteBits(2,  this.lengthSizeMinusOne, "lengthSizeMinusOne"); 
		boxSize += stream.WriteUInt8( this.numOfArrays, "numOfArrays"); 

		for (int j=0; j < numOfArrays; j++)
		{
			boxSize += stream.WriteBit( this.array_completeness[j], "array_completeness"); 
			boxSize += stream.WriteBit( this.reserved4[j], "reserved4"); 
			boxSize += stream.WriteBits(6,  this.NAL_unit_type[j], "NAL_unit_type"); 
			boxSize += stream.WriteUInt16( this.numNalus[j], "numNalus"); 

			for (int i=0; i< numNalus[j]; i++)
			{
				boxSize += stream.WriteUInt16( this.nalUnitLength[j][i], "nalUnitLength"); 
				boxSize += stream.WriteBits((uint)(8*nalUnitLength[j][i] ),  this.nalUnit[j][i], "nalUnit"); 
			}
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 8; // configurationVersion
		boxSize += 2; // general_profile_space
		boxSize += 1; // general_tier_flag
		boxSize += 5; // general_profile_idc
		boxSize += 32; // general_profile_compatibility_flags
		boxSize += 48; // general_constraint_indicator_flags
		boxSize += 8; // general_level_idc
		boxSize += 4; // reserved
		boxSize += 12; // min_spatial_segmentation_idc
		boxSize += 6; // reserved0
		boxSize += 2; // parallelismType
		boxSize += 6; // reserved1
		boxSize += 2; // chromaFormat
		boxSize += 5; // reserved2
		boxSize += 3; // bitDepthLumaMinus8
		boxSize += 5; // reserved3
		boxSize += 3; // bitDepthChromaMinus8
		boxSize += 16; // avgFrameRate
		boxSize += 2; // constantFrameRate
		boxSize += 3; // numTemporalLayers
		boxSize += 1; // temporalIdNested
		boxSize += 2; // lengthSizeMinusOne
		boxSize += 8; // numOfArrays

		for (int j=0; j < numOfArrays; j++)
		{
			boxSize += 1; // array_completeness
			boxSize += 1; // reserved4
			boxSize += 6; // NAL_unit_type
			boxSize += 16; // numNalus

			for (int i=0; i< numNalus[j]; i++)
			{
				boxSize += 16; // nalUnitLength
				boxSize += (ulong)(8*nalUnitLength[j][i] ); // nalUnit
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class VvcPTLRecord(num_sublayers) {
	bit(2) reserved = 0;
	unsigned int(6) num_bytes_constraint_info;
	unsigned int(7) general_profile_idc;
	unsigned int(1) general_tier_flag;
	unsigned int(8) general_level_idc;
	unsigned int(1) ptl_frame_only_constraint_flag;
	unsigned int(1) ptl_multi_layer_enabled_flag;
	unsigned int(8*num_bytes_constraint_info - 2) general_constraint_info;
	for (i=num_sublayers - 2; i >= 0; i--)
		unsigned int(1) ptl_sublayer_level_present_flag[i];
	for (j=num_sublayers; j<=8 && num_sublayers > 1; j++)
		bit(1) ptl_reserved_zero_bit = 0;
	for (i=num_sublayers-2; i >= 0; i--) {
		if (ptl_sublayer_level_present_flag[i])
			unsigned int(8) sublayer_level_idc[i];
		}
	unsigned int(8) ptl_num_sub_profiles;
	for (j=0; j < ptl_num_sub_profiles; j++)
		unsigned int(32) general_sub_profile_idc[j];
} 
*/
public partial class VvcPTLRecord : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "VvcPTLRecord"; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte num_bytes_constraint_info; 
	public byte NumBytesConstraintInfo { get { return this.num_bytes_constraint_info; } set { this.num_bytes_constraint_info = value; } }

	protected byte general_profile_idc; 
	public byte GeneralProfileIdc { get { return this.general_profile_idc; } set { this.general_profile_idc = value; } }

	protected bool general_tier_flag; 
	public bool GeneralTierFlag { get { return this.general_tier_flag; } set { this.general_tier_flag = value; } }

	protected byte general_level_idc; 
	public byte GeneralLevelIdc { get { return this.general_level_idc; } set { this.general_level_idc = value; } }

	protected bool ptl_frame_only_constraint_flag; 
	public bool PtlFrameOnlyConstraintFlag { get { return this.ptl_frame_only_constraint_flag; } set { this.ptl_frame_only_constraint_flag = value; } }

	protected bool ptl_multi_layer_enabled_flag; 
	public bool PtlMultiLayerEnabledFlag { get { return this.ptl_multi_layer_enabled_flag; } set { this.ptl_multi_layer_enabled_flag = value; } }

	protected byte[] general_constraint_info; 
	public byte[] GeneralConstraintInfo { get { return this.general_constraint_info; } set { this.general_constraint_info = value; } }

	protected bool[] ptl_sublayer_level_present_flag; 
	public bool[] PtlSublayerLevelPresentFlag { get { return this.ptl_sublayer_level_present_flag; } set { this.ptl_sublayer_level_present_flag = value; } }

	protected bool[] ptl_reserved_zero_bit; 
	public bool[] PtlReservedZeroBit { get { return this.ptl_reserved_zero_bit; } set { this.ptl_reserved_zero_bit = value; } }

	protected byte[] sublayer_level_idc; 
	public byte[] SublayerLevelIdc { get { return this.sublayer_level_idc; } set { this.sublayer_level_idc = value; } }

	protected byte ptl_num_sub_profiles; 
	public byte PtlNumSubProfiles { get { return this.ptl_num_sub_profiles; } set { this.ptl_num_sub_profiles = value; } }

	protected uint[] general_sub_profile_idc; 
	public uint[] GeneralSubProfileIdc { get { return this.general_sub_profile_idc; } set { this.general_sub_profile_idc = value; } }

	protected byte num_sublayers; 
	public byte NumSublayers { get { return this.num_sublayers; } set { this.num_sublayers = value; } }

	public VvcPTLRecord(byte num_sublayers): base()
	{
		this.num_sublayers = num_sublayers;
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.num_bytes_constraint_info, "num_bytes_constraint_info"); 
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.general_profile_idc, "general_profile_idc"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.general_tier_flag, "general_tier_flag"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.general_level_idc, "general_level_idc"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.ptl_frame_only_constraint_flag, "ptl_frame_only_constraint_flag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.ptl_multi_layer_enabled_flag, "ptl_multi_layer_enabled_flag"); 
		boxSize += stream.ReadBits(boxSize, readSize, (uint)(8*num_bytes_constraint_info - 2 ),  out this.general_constraint_info, "general_constraint_info"); 

		this.ptl_sublayer_level_present_flag = new bool[IsoStream.GetInt(num_sublayers - 1)];
		for (int i=num_sublayers - 2; i >= 0; i--)
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.ptl_sublayer_level_present_flag[i], "ptl_sublayer_level_present_flag"); 
		}

		this.ptl_reserved_zero_bit = new bool[IsoStream.GetInt(9)];
		for (int j=num_sublayers; j<=8 && num_sublayers > 1; j++)
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.ptl_reserved_zero_bit[j], "ptl_reserved_zero_bit"); 
		}

		this.sublayer_level_idc = new byte[IsoStream.GetInt(num_sublayers - 1)];
		for (int i=num_sublayers-2; i >= 0; i--)
		{

			if (ptl_sublayer_level_present_flag[i])
			{
				boxSize += stream.ReadUInt8(boxSize, readSize,  out this.sublayer_level_idc[i], "sublayer_level_idc"); 
			}
		}
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.ptl_num_sub_profiles, "ptl_num_sub_profiles"); 

		this.general_sub_profile_idc = new uint[IsoStream.GetInt( ptl_num_sub_profiles)];
		for (int j=0; j < ptl_num_sub_profiles; j++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.general_sub_profile_idc[j], "general_sub_profile_idc"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBits(2,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(6,  this.num_bytes_constraint_info, "num_bytes_constraint_info"); 
		boxSize += stream.WriteBits(7,  this.general_profile_idc, "general_profile_idc"); 
		boxSize += stream.WriteBit( this.general_tier_flag, "general_tier_flag"); 
		boxSize += stream.WriteUInt8( this.general_level_idc, "general_level_idc"); 
		boxSize += stream.WriteBit( this.ptl_frame_only_constraint_flag, "ptl_frame_only_constraint_flag"); 
		boxSize += stream.WriteBit( this.ptl_multi_layer_enabled_flag, "ptl_multi_layer_enabled_flag"); 
		boxSize += stream.WriteBits((uint)(8*num_bytes_constraint_info - 2 ),  this.general_constraint_info, "general_constraint_info"); 

		for (int i=num_sublayers - 2; i >= 0; i--)
		{
			boxSize += stream.WriteBit( this.ptl_sublayer_level_present_flag[i], "ptl_sublayer_level_present_flag"); 
		}

		for (int j=num_sublayers; j<=8 && num_sublayers > 1; j++)
		{
			boxSize += stream.WriteBit( this.ptl_reserved_zero_bit[j], "ptl_reserved_zero_bit"); 
		}

		for (int i=num_sublayers-2; i >= 0; i--)
		{

			if (ptl_sublayer_level_present_flag[i])
			{
				boxSize += stream.WriteUInt8( this.sublayer_level_idc[i], "sublayer_level_idc"); 
			}
		}
		boxSize += stream.WriteUInt8( this.ptl_num_sub_profiles, "ptl_num_sub_profiles"); 

		for (int j=0; j < ptl_num_sub_profiles; j++)
		{
			boxSize += stream.WriteUInt32( this.general_sub_profile_idc[j], "general_sub_profile_idc"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 2; // reserved
		boxSize += 6; // num_bytes_constraint_info
		boxSize += 7; // general_profile_idc
		boxSize += 1; // general_tier_flag
		boxSize += 8; // general_level_idc
		boxSize += 1; // ptl_frame_only_constraint_flag
		boxSize += 1; // ptl_multi_layer_enabled_flag
		boxSize += (ulong)(8*num_bytes_constraint_info - 2 ); // general_constraint_info

		for (int i=num_sublayers - 2; i >= 0; i--)
		{
			boxSize += 1; // ptl_sublayer_level_present_flag
		}

		for (int j=num_sublayers; j<=8 && num_sublayers > 1; j++)
		{
			boxSize += 1; // ptl_reserved_zero_bit
		}

		for (int i=num_sublayers-2; i >= 0; i--)
		{

			if (ptl_sublayer_level_present_flag[i])
			{
				boxSize += 8; // sublayer_level_idc
			}
		}
		boxSize += 8; // ptl_num_sub_profiles

		for (int j=0; j < ptl_num_sub_profiles; j++)
		{
			boxSize += 32; // general_sub_profile_idc
		}
		return boxSize;
	}
}


/*
aligned(8) class VvcDecoderConfigurationRecord {
	bit(5) reserved = '11111'b;
	unsigned int(2) LengthSizeMinusOne;
	unsigned int(1) ptl_present_flag;
	if (ptl_present_flag) {
		unsigned int(9) ols_idx;
		unsigned int(3) num_sublayers;
		unsigned int(2) constant_frame_rate;
		unsigned int(2) chroma_format_idc;
		unsigned int(3) bit_depth_minus8;
		bit(5) reserved = '11111'b;
		VvcPTLRecord(num_sublayers) native_ptl;
		unsigned_int(16) max_picture_width;
		unsigned_int(16) max_picture_height;
		unsigned int(16) avg_frame_rate;
	}
	unsigned int(8) num_of_arrays;
	for (j=0; j < num_of_arrays; j++) {
		unsigned int(1) array_completeness;
		bit(2) reserved = 0;
		unsigned int(5) NAL_unit_type;
		if (NAL_unit_type != DCI_NUT  &&  NAL_unit_type != OPI_NUT) {
			unsigned int(16) num_nalus;
		for (i=0; i< num_nalus; i++) {
			unsigned int(16) nal_unit_length;
			bit(8*nal_unit_length) nal_unit;
		}
		}
	}
}
*/
public partial class VvcDecoderConfigurationRecord : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "VvcDecoderConfigurationRecord"; } }

	protected byte reserved = 0b11111; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte LengthSizeMinusOne; 
	public byte _LengthSizeMinusOne { get { return this.LengthSizeMinusOne; } set { this.LengthSizeMinusOne = value; } }

	protected bool ptl_present_flag; 
	public bool PtlPresentFlag { get { return this.ptl_present_flag; } set { this.ptl_present_flag = value; } }

	protected ushort ols_idx; 
	public ushort OlsIdx { get { return this.ols_idx; } set { this.ols_idx = value; } }

	protected byte num_sublayers; 
	public byte NumSublayers { get { return this.num_sublayers; } set { this.num_sublayers = value; } }

	protected byte constant_frame_rate; 
	public byte ConstantFrameRate { get { return this.constant_frame_rate; } set { this.constant_frame_rate = value; } }

	protected byte chroma_format_idc; 
	public byte ChromaFormatIdc { get { return this.chroma_format_idc; } set { this.chroma_format_idc = value; } }

	protected byte bit_depth_minus8; 
	public byte BitDepthMinus8 { get { return this.bit_depth_minus8; } set { this.bit_depth_minus8 = value; } }

	protected byte reserved0 = 0b11111; 
	public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected VvcPTLRecord native_ptl; 
	public VvcPTLRecord NativePtl { get { return this.native_ptl; } set { this.native_ptl = value; } }

	protected ushort max_picture_width; 
	public ushort MaxPictureWidth { get { return this.max_picture_width; } set { this.max_picture_width = value; } }

	protected ushort max_picture_height; 
	public ushort MaxPictureHeight { get { return this.max_picture_height; } set { this.max_picture_height = value; } }

	protected ushort avg_frame_rate; 
	public ushort AvgFrameRate { get { return this.avg_frame_rate; } set { this.avg_frame_rate = value; } }

	protected byte num_of_arrays; 
	public byte NumOfArrays { get { return this.num_of_arrays; } set { this.num_of_arrays = value; } }

	protected bool[] array_completeness; 
	public bool[] ArrayCompleteness { get { return this.array_completeness; } set { this.array_completeness = value; } }

	protected byte[] reserved1; 
	public byte[] Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected byte[] NAL_unit_type; 
	public byte[] NALUnitType { get { return this.NAL_unit_type; } set { this.NAL_unit_type = value; } }

	protected ushort[] num_nalus; 
	public ushort[] NumNalus { get { return this.num_nalus; } set { this.num_nalus = value; } }

	protected ushort[][] nal_unit_length; 
	public ushort[][] NalUnitLength { get { return this.nal_unit_length; } set { this.nal_unit_length = value; } }

	protected byte[][][] nal_unit; 
	public byte[][][] NalUnit { get { return this.nal_unit; } set { this.nal_unit = value; } }

	public VvcDecoderConfigurationRecord(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		const int OPI_NUT = 12;
		const int DCI_NUT = 13;

		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.LengthSizeMinusOne, "LengthSizeMinusOne"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.ptl_present_flag, "ptl_present_flag"); 

		if (ptl_present_flag)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 9,  out this.ols_idx, "ols_idx"); 
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.num_sublayers, "num_sublayers"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.constant_frame_rate, "constant_frame_rate"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.chroma_format_idc, "chroma_format_idc"); 
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.bit_depth_minus8, "bit_depth_minus8"); 
			boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.reserved0, "reserved0"); 
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new VvcPTLRecord(num_sublayers),  out this.native_ptl, "native_ptl"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.max_picture_width, "max_picture_width"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.max_picture_height, "max_picture_height"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.avg_frame_rate, "avg_frame_rate"); 
		}
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.num_of_arrays, "num_of_arrays"); 

		this.array_completeness = new bool[IsoStream.GetInt( num_of_arrays)];
		this.reserved1 = new byte[IsoStream.GetInt( num_of_arrays)];
		this.NAL_unit_type = new byte[IsoStream.GetInt( num_of_arrays)];
		this.num_nalus = new ushort[IsoStream.GetInt( num_of_arrays)];
		this.nal_unit_length = new ushort[IsoStream.GetInt( num_of_arrays)][];
		this.nal_unit = new byte[IsoStream.GetInt( num_of_arrays)][][];
		for (int j=0; j < num_of_arrays; j++)
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.array_completeness[j], "array_completeness"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.reserved1[j], "reserved1"); 
			boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.NAL_unit_type[j], "NAL_unit_type"); 

			if (NAL_unit_type[j] != DCI_NUT  &&  NAL_unit_type[j] != OPI_NUT)
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.num_nalus[j], "num_nalus"); 

				this.nal_unit_length[j] = new ushort[IsoStream.GetInt( num_nalus[j])];
				this.nal_unit[j] = new byte[IsoStream.GetInt( num_nalus[j])][];
				for (int i=0; i< num_nalus[j]; i++)
				{
					boxSize += stream.ReadUInt16(boxSize, readSize,  out this.nal_unit_length[j][i], "nal_unit_length"); 
					boxSize += stream.ReadBits(boxSize, readSize, (uint)(8*nal_unit_length[j][i] ),  out this.nal_unit[j][i], "nal_unit"); 
				}
			}
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		const int OPI_NUT = 12;
		const int DCI_NUT = 13;

		boxSize += stream.WriteBits(5,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(2,  this.LengthSizeMinusOne, "LengthSizeMinusOne"); 
		boxSize += stream.WriteBit( this.ptl_present_flag, "ptl_present_flag"); 

		if (ptl_present_flag)
		{
			boxSize += stream.WriteBits(9,  this.ols_idx, "ols_idx"); 
			boxSize += stream.WriteBits(3,  this.num_sublayers, "num_sublayers"); 
			boxSize += stream.WriteBits(2,  this.constant_frame_rate, "constant_frame_rate"); 
			boxSize += stream.WriteBits(2,  this.chroma_format_idc, "chroma_format_idc"); 
			boxSize += stream.WriteBits(3,  this.bit_depth_minus8, "bit_depth_minus8"); 
			boxSize += stream.WriteBits(5,  this.reserved0, "reserved0"); 
			boxSize += stream.WriteClass( this.native_ptl, "native_ptl"); 
			boxSize += stream.WriteUInt16( this.max_picture_width, "max_picture_width"); 
			boxSize += stream.WriteUInt16( this.max_picture_height, "max_picture_height"); 
			boxSize += stream.WriteUInt16( this.avg_frame_rate, "avg_frame_rate"); 
		}
		boxSize += stream.WriteUInt8( this.num_of_arrays, "num_of_arrays"); 

		for (int j=0; j < num_of_arrays; j++)
		{
			boxSize += stream.WriteBit( this.array_completeness[j], "array_completeness"); 
			boxSize += stream.WriteBits(2,  this.reserved1[j], "reserved1"); 
			boxSize += stream.WriteBits(5,  this.NAL_unit_type[j], "NAL_unit_type"); 

			if (NAL_unit_type[j] != DCI_NUT  &&  NAL_unit_type[j] != OPI_NUT)
			{
				boxSize += stream.WriteUInt16( this.num_nalus[j], "num_nalus"); 

				for (int i=0; i< num_nalus[j]; i++)
				{
					boxSize += stream.WriteUInt16( this.nal_unit_length[j][i], "nal_unit_length"); 
					boxSize += stream.WriteBits((uint)(8*nal_unit_length[j][i] ),  this.nal_unit[j][i], "nal_unit"); 
				}
			}
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		const int OPI_NUT = 12;
		const int DCI_NUT = 13;

		boxSize += 5; // reserved
		boxSize += 2; // LengthSizeMinusOne
		boxSize += 1; // ptl_present_flag

		if (ptl_present_flag)
		{
			boxSize += 9; // ols_idx
			boxSize += 3; // num_sublayers
			boxSize += 2; // constant_frame_rate
			boxSize += 2; // chroma_format_idc
			boxSize += 3; // bit_depth_minus8
			boxSize += 5; // reserved0
			boxSize += IsoStream.CalculateClassSize(native_ptl); // native_ptl
			boxSize += 16; // max_picture_width
			boxSize += 16; // max_picture_height
			boxSize += 16; // avg_frame_rate
		}
		boxSize += 8; // num_of_arrays

		for (int j=0; j < num_of_arrays; j++)
		{
			boxSize += 1; // array_completeness
			boxSize += 2; // reserved1
			boxSize += 5; // NAL_unit_type

			if (NAL_unit_type[j] != DCI_NUT  &&  NAL_unit_type[j] != OPI_NUT)
			{
				boxSize += 16; // num_nalus

				for (int i=0; i< num_nalus[j]; i++)
				{
					boxSize += 16; // nal_unit_length
					boxSize += (ulong)(8*nal_unit_length[j][i] ); // nal_unit
				}
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class MVDDecoderConfigurationRecord { 
unsigned int(8) configurationVersion = 1; 
unsigned int(8) AVCProfileIndication; 
unsigned int(8) profile_compatibility; 
unsigned int(8) AVCLevelIndication;  
 bit(1) complete_representation; 
 bit(1) explicit_au_track; 
bit(4) reserved = '1111'b; 
unsigned int(2) lengthSizeMinusOne;  
bit(1) reserved = '0'b; 
unsigned int(7) numOfSequenceParameterSets; 
for (i=0; i< numOfSequenceParameterSets; i++) { 
unsigned int(16) sequenceParameterSetLength ; 
  bit(8*sequenceParameterSetLength) sequenceParameterSetNALUnit; 
 } 
unsigned int(8) numOfPictureParameterSets; 
for (i=0; i< numOfPictureParameterSets; i++) { 
  unsigned int(16) pictureParameterSetLength; 
  bit(8*pictureParameterSetLength) pictureParameterSetNALUnit; 
 } 
}
*/
public partial class MVDDecoderConfigurationRecord : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "MVDDecoderConfigurationRecord"; } }

	protected byte configurationVersion = 1; 
	public byte ConfigurationVersion { get { return this.configurationVersion; } set { this.configurationVersion = value; } }

	protected byte AVCProfileIndication; 
	public byte _AVCProfileIndication { get { return this.AVCProfileIndication; } set { this.AVCProfileIndication = value; } }

	protected byte profile_compatibility; 
	public byte ProfileCompatibility { get { return this.profile_compatibility; } set { this.profile_compatibility = value; } }

	protected byte AVCLevelIndication; 
	public byte _AVCLevelIndication { get { return this.AVCLevelIndication; } set { this.AVCLevelIndication = value; } }

	protected bool complete_representation; 
	public bool CompleteRepresentation { get { return this.complete_representation; } set { this.complete_representation = value; } }

	protected bool explicit_au_track; 
	public bool ExplicitAuTrack { get { return this.explicit_au_track; } set { this.explicit_au_track = value; } }

	protected byte reserved = 0b1111; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte lengthSizeMinusOne; 
	public byte LengthSizeMinusOne { get { return this.lengthSizeMinusOne; } set { this.lengthSizeMinusOne = value; } }

	protected bool reserved0 = false; 
	public bool Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected byte numOfSequenceParameterSets; 
	public byte NumOfSequenceParameterSets { get { return this.numOfSequenceParameterSets; } set { this.numOfSequenceParameterSets = value; } }

	protected ushort[] sequenceParameterSetLength; 
	public ushort[] SequenceParameterSetLength { get { return this.sequenceParameterSetLength; } set { this.sequenceParameterSetLength = value; } }

	protected byte[][] sequenceParameterSetNALUnit; 
	public byte[][] SequenceParameterSetNALUnit { get { return this.sequenceParameterSetNALUnit; } set { this.sequenceParameterSetNALUnit = value; } }

	protected byte numOfPictureParameterSets; 
	public byte NumOfPictureParameterSets { get { return this.numOfPictureParameterSets; } set { this.numOfPictureParameterSets = value; } }

	protected ushort[] pictureParameterSetLength; 
	public ushort[] PictureParameterSetLength { get { return this.pictureParameterSetLength; } set { this.pictureParameterSetLength = value; } }

	protected byte[][] pictureParameterSetNALUnit; 
	public byte[][] PictureParameterSetNALUnit { get { return this.pictureParameterSetNALUnit; } set { this.pictureParameterSetNALUnit = value; } }

	public MVDDecoderConfigurationRecord(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.configurationVersion, "configurationVersion"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.AVCProfileIndication, "AVCProfileIndication"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.profile_compatibility, "profile_compatibility"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.AVCLevelIndication, "AVCLevelIndication"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.complete_representation, "complete_representation"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.explicit_au_track, "explicit_au_track"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.lengthSizeMinusOne, "lengthSizeMinusOne"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved0, "reserved0"); 
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.numOfSequenceParameterSets, "numOfSequenceParameterSets"); 

		this.sequenceParameterSetLength = new ushort[IsoStream.GetInt( numOfSequenceParameterSets)];
		this.sequenceParameterSetNALUnit = new byte[IsoStream.GetInt( numOfSequenceParameterSets)][];
		for (int i=0; i< numOfSequenceParameterSets; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.sequenceParameterSetLength[i], "sequenceParameterSetLength"); 
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(8*sequenceParameterSetLength[i] ),  out this.sequenceParameterSetNALUnit[i], "sequenceParameterSetNALUnit"); 
		}
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.numOfPictureParameterSets, "numOfPictureParameterSets"); 

		this.pictureParameterSetLength = new ushort[IsoStream.GetInt( numOfPictureParameterSets)];
		this.pictureParameterSetNALUnit = new byte[IsoStream.GetInt( numOfPictureParameterSets)][];
		for (int i=0; i< numOfPictureParameterSets; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.pictureParameterSetLength[i], "pictureParameterSetLength"); 
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(8*pictureParameterSetLength[i] ),  out this.pictureParameterSetNALUnit[i], "pictureParameterSetNALUnit"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt8( this.configurationVersion, "configurationVersion"); 
		boxSize += stream.WriteUInt8( this.AVCProfileIndication, "AVCProfileIndication"); 
		boxSize += stream.WriteUInt8( this.profile_compatibility, "profile_compatibility"); 
		boxSize += stream.WriteUInt8( this.AVCLevelIndication, "AVCLevelIndication"); 
		boxSize += stream.WriteBit( this.complete_representation, "complete_representation"); 
		boxSize += stream.WriteBit( this.explicit_au_track, "explicit_au_track"); 
		boxSize += stream.WriteBits(4,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(2,  this.lengthSizeMinusOne, "lengthSizeMinusOne"); 
		boxSize += stream.WriteBit( this.reserved0, "reserved0"); 
		boxSize += stream.WriteBits(7,  this.numOfSequenceParameterSets, "numOfSequenceParameterSets"); 

		for (int i=0; i< numOfSequenceParameterSets; i++)
		{
			boxSize += stream.WriteUInt16( this.sequenceParameterSetLength[i], "sequenceParameterSetLength"); 
			boxSize += stream.WriteBits((uint)(8*sequenceParameterSetLength[i] ),  this.sequenceParameterSetNALUnit[i], "sequenceParameterSetNALUnit"); 
		}
		boxSize += stream.WriteUInt8( this.numOfPictureParameterSets, "numOfPictureParameterSets"); 

		for (int i=0; i< numOfPictureParameterSets; i++)
		{
			boxSize += stream.WriteUInt16( this.pictureParameterSetLength[i], "pictureParameterSetLength"); 
			boxSize += stream.WriteBits((uint)(8*pictureParameterSetLength[i] ),  this.pictureParameterSetNALUnit[i], "pictureParameterSetNALUnit"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 8; // configurationVersion
		boxSize += 8; // AVCProfileIndication
		boxSize += 8; // profile_compatibility
		boxSize += 8; // AVCLevelIndication
		boxSize += 1; // complete_representation
		boxSize += 1; // explicit_au_track
		boxSize += 4; // reserved
		boxSize += 2; // lengthSizeMinusOne
		boxSize += 1; // reserved0
		boxSize += 7; // numOfSequenceParameterSets

		for (int i=0; i< numOfSequenceParameterSets; i++)
		{
			boxSize += 16; // sequenceParameterSetLength
			boxSize += (ulong)(8*sequenceParameterSetLength[i] ); // sequenceParameterSetNALUnit
		}
		boxSize += 8; // numOfPictureParameterSets

		for (int i=0; i< numOfPictureParameterSets; i++)
		{
			boxSize += 16; // pictureParameterSetLength
			boxSize += (ulong)(8*pictureParameterSetLength[i] ); // pictureParameterSetNALUnit
		}
		return boxSize;
	}
}


/*
class VvcOperatingPointsRecord { 
unsigned int(8) num_profile_tier_level_minus1;
for (i=0; i<=num_profile_tier_level_minus1; i++) { 
 unsigned int(8) ptl_max_temporal_id[i]; 
 VvcPTLRecord(ptl_max_temporal_id[i]+1) ptl[i];
} 
unsigned int(1) all_independent_layers_flag; 
bit(7) reserved = 0; 
if (all_independent_layers_flag){ 
 unsigned int(1) each_layer_is_an_ols_flag; 
 bit(7) reserved = 0; 
} 
else 
 unsigned int(8) ols_mode_idc; 
unsigned int(16) num_operating_points; 
for (i=0; i<num_operating_points; i++) { 
 unsigned int(16) output_layer_set_idx; 
 unsigned int(8) ptl_idx; 
 unsigned int(8) max_temporal_id; 
 unsigned int(8) layer_count; 
 for (j=0; j<layer_count; j++) { 
  unsigned int(6) layer_id; 
  unsigned int(1) is_outputlayer;
  bit(1) reserved = 0;
 }
 bit(6) reserved = 0; 
 unsigned int(1) frame_rate_info_flag;
 unsigned int(1) bit_rate_info_flag;
 if (frame_rate_info_flag) { 
  unsigned int(16) avgFrameRate; 
  bit(6) reserved = 0; 
  unsigned int(2) constantFrameRate;
 } 
 if (bit_rate_info_flag) { 
  unsigned int(32) maxBitRate; 
  unsigned int(32) avgBitRate;
 }
}
unsigned int(8) max_layer_count; 
for (i=0; i<max_layer_count; i++) { 
 unsigned int(8) layerID; 
 unsigned int(8) num_direct_ref_layers; 
 for (j=0; j<num_direct_ref_layers; j++) 
  unsigned int(8) direct_ref_layerID; 
 unsigned int(8) max_tid_il_ref_pics_plus1; 
 }
}

*/
public partial class VvcOperatingPointsRecord : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "VvcOperatingPointsRecord"; } }

	protected byte num_profile_tier_level_minus1; 
	public byte NumProfileTierLevelMinus1 { get { return this.num_profile_tier_level_minus1; } set { this.num_profile_tier_level_minus1 = value; } }

	protected byte[] ptl_max_temporal_id; 
	public byte[] PtlMaxTemporalId { get { return this.ptl_max_temporal_id; } set { this.ptl_max_temporal_id = value; } }

	protected VvcPTLRecord[] ptl; 
	public VvcPTLRecord[] Ptl { get { return this.ptl; } set { this.ptl = value; } }

	protected bool all_independent_layers_flag; 
	public bool AllIndependentLayersFlag { get { return this.all_independent_layers_flag; } set { this.all_independent_layers_flag = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected bool each_layer_is_an_ols_flag; 
	public bool EachLayerIsAnOlsFlag { get { return this.each_layer_is_an_ols_flag; } set { this.each_layer_is_an_ols_flag = value; } }

	protected byte reserved0 = 0; 
	public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected byte ols_mode_idc; 
	public byte OlsModeIdc { get { return this.ols_mode_idc; } set { this.ols_mode_idc = value; } }

	protected ushort num_operating_points; 
	public ushort NumOperatingPoints { get { return this.num_operating_points; } set { this.num_operating_points = value; } }

	protected ushort[] output_layer_set_idx; 
	public ushort[] OutputLayerSetIdx { get { return this.output_layer_set_idx; } set { this.output_layer_set_idx = value; } }

	protected byte[] ptl_idx; 
	public byte[] PtlIdx { get { return this.ptl_idx; } set { this.ptl_idx = value; } }

	protected byte[] max_temporal_id; 
	public byte[] MaxTemporalId { get { return this.max_temporal_id; } set { this.max_temporal_id = value; } }

	protected byte[] layer_count; 
	public byte[] LayerCount { get { return this.layer_count; } set { this.layer_count = value; } }

	protected byte[][] layer_id; 
	public byte[][] LayerId { get { return this.layer_id; } set { this.layer_id = value; } }

	protected bool[][] is_outputlayer; 
	public bool[][] IsOutputlayer { get { return this.is_outputlayer; } set { this.is_outputlayer = value; } }

	protected bool[][] reserved1; 
	public bool[][] Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected byte[] reserved00; 
	public byte[] Reserved00 { get { return this.reserved00; } set { this.reserved00 = value; } }

	protected bool[] frame_rate_info_flag; 
	public bool[] FrameRateInfoFlag { get { return this.frame_rate_info_flag; } set { this.frame_rate_info_flag = value; } }

	protected bool[] bit_rate_info_flag; 
	public bool[] BitRateInfoFlag { get { return this.bit_rate_info_flag; } set { this.bit_rate_info_flag = value; } }

	protected ushort[] avgFrameRate; 
	public ushort[] AvgFrameRate { get { return this.avgFrameRate; } set { this.avgFrameRate = value; } }

	protected byte[] reserved10; 
	public byte[] Reserved10 { get { return this.reserved10; } set { this.reserved10 = value; } }

	protected byte[] constantFrameRate; 
	public byte[] ConstantFrameRate { get { return this.constantFrameRate; } set { this.constantFrameRate = value; } }

	protected uint[] maxBitRate; 
	public uint[] MaxBitRate { get { return this.maxBitRate; } set { this.maxBitRate = value; } }

	protected uint[] avgBitRate; 
	public uint[] AvgBitRate { get { return this.avgBitRate; } set { this.avgBitRate = value; } }

	protected byte max_layer_count; 
	public byte MaxLayerCount { get { return this.max_layer_count; } set { this.max_layer_count = value; } }

	protected byte[] layerID; 
	public byte[] LayerID { get { return this.layerID; } set { this.layerID = value; } }

	protected byte[] num_direct_ref_layers; 
	public byte[] NumDirectRefLayers { get { return this.num_direct_ref_layers; } set { this.num_direct_ref_layers = value; } }

	protected byte[][] direct_ref_layerID; 
	public byte[][] DirectRefLayerID { get { return this.direct_ref_layerID; } set { this.direct_ref_layerID = value; } }

	protected byte[] max_tid_il_ref_pics_plus1; 
	public byte[] MaxTidIlRefPicsPlus1 { get { return this.max_tid_il_ref_pics_plus1; } set { this.max_tid_il_ref_pics_plus1 = value; } }

	public VvcOperatingPointsRecord(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.num_profile_tier_level_minus1, "num_profile_tier_level_minus1"); 

		this.ptl_max_temporal_id = new byte[IsoStream.GetInt(num_profile_tier_level_minus1 + 1)];
		this.ptl = new VvcPTLRecord[IsoStream.GetInt(num_profile_tier_level_minus1 + 1)];
		for (int i=0; i<=num_profile_tier_level_minus1; i++)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.ptl_max_temporal_id[i], "ptl_max_temporal_id"); 
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new VvcPTLRecord((byte)(ptl_max_temporal_id[i]+1)),  out this.ptl[i], "ptl"); 
		}
		boxSize += stream.ReadBit(boxSize, readSize,  out this.all_independent_layers_flag, "all_independent_layers_flag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.reserved, "reserved"); 

		if (all_independent_layers_flag)
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.each_layer_is_an_ols_flag, "each_layer_is_an_ols_flag"); 
			boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.reserved0, "reserved0"); 
		}

		else 
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.ols_mode_idc, "ols_mode_idc"); 
		}
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.num_operating_points, "num_operating_points"); 

		this.output_layer_set_idx = new ushort[IsoStream.GetInt(num_operating_points)];
		this.ptl_idx = new byte[IsoStream.GetInt(num_operating_points)];
		this.max_temporal_id = new byte[IsoStream.GetInt(num_operating_points)];
		this.layer_count = new byte[IsoStream.GetInt(num_operating_points)];
		this.layer_id = new byte[IsoStream.GetInt(num_operating_points)][];
		this.is_outputlayer = new bool[IsoStream.GetInt(num_operating_points)][];
		this.reserved1 = new bool[IsoStream.GetInt(num_operating_points)][];
		this.reserved00 = new byte[IsoStream.GetInt(num_operating_points)];
		this.frame_rate_info_flag = new bool[IsoStream.GetInt(num_operating_points)];
		this.bit_rate_info_flag = new bool[IsoStream.GetInt(num_operating_points)];
		this.avgFrameRate = new ushort[IsoStream.GetInt(num_operating_points)];
		this.reserved10 = new byte[IsoStream.GetInt(num_operating_points)];
		this.constantFrameRate = new byte[IsoStream.GetInt(num_operating_points)];
		this.maxBitRate = new uint[IsoStream.GetInt(num_operating_points)];
		this.avgBitRate = new uint[IsoStream.GetInt(num_operating_points)];
		for (int i=0; i<num_operating_points; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.output_layer_set_idx[i], "output_layer_set_idx"); 
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.ptl_idx[i], "ptl_idx"); 
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.max_temporal_id[i], "max_temporal_id"); 
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.layer_count[i], "layer_count"); 

			this.layer_id[i] = new byte[IsoStream.GetInt(layer_count[i])];
			this.is_outputlayer[i] = new bool[IsoStream.GetInt(layer_count[i])];
			this.reserved1[i] = new bool[IsoStream.GetInt(layer_count[i])];
			for (int j=0; j<layer_count[i]; j++)
			{
				boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.layer_id[i][j], "layer_id"); 
				boxSize += stream.ReadBit(boxSize, readSize,  out this.is_outputlayer[i][j], "is_outputlayer"); 
				boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved1[i][j], "reserved1"); 
			}
			boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved00[i], "reserved00"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.frame_rate_info_flag[i], "frame_rate_info_flag"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.bit_rate_info_flag[i], "bit_rate_info_flag"); 

			if (frame_rate_info_flag[i])
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.avgFrameRate[i], "avgFrameRate"); 
				boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved10[i], "reserved10"); 
				boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.constantFrameRate[i], "constantFrameRate"); 
			}

			if (bit_rate_info_flag[i])
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.maxBitRate[i], "maxBitRate"); 
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.avgBitRate[i], "avgBitRate"); 
			}
		}
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.max_layer_count, "max_layer_count"); 

		this.layerID = new byte[IsoStream.GetInt(max_layer_count)];
		this.num_direct_ref_layers = new byte[IsoStream.GetInt(max_layer_count)];
		this.direct_ref_layerID = new byte[IsoStream.GetInt(max_layer_count)][];
		this.max_tid_il_ref_pics_plus1 = new byte[IsoStream.GetInt(max_layer_count)];
		for (int i=0; i<max_layer_count; i++)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.layerID[i], "layerID"); 
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.num_direct_ref_layers[i], "num_direct_ref_layers"); 

			this.direct_ref_layerID[i] = new byte[IsoStream.GetInt(num_direct_ref_layers[i])];
			for (int j=0; j<num_direct_ref_layers[i]; j++)
			{
				boxSize += stream.ReadUInt8(boxSize, readSize,  out this.direct_ref_layerID[i][j], "direct_ref_layerID"); 
			}
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.max_tid_il_ref_pics_plus1[i], "max_tid_il_ref_pics_plus1"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt8( this.num_profile_tier_level_minus1, "num_profile_tier_level_minus1"); 

		for (int i=0; i<=num_profile_tier_level_minus1; i++)
		{
			boxSize += stream.WriteUInt8( this.ptl_max_temporal_id[i], "ptl_max_temporal_id"); 
			boxSize += stream.WriteClass( this.ptl[i], "ptl"); 
		}
		boxSize += stream.WriteBit( this.all_independent_layers_flag, "all_independent_layers_flag"); 
		boxSize += stream.WriteBits(7,  this.reserved, "reserved"); 

		if (all_independent_layers_flag)
		{
			boxSize += stream.WriteBit( this.each_layer_is_an_ols_flag, "each_layer_is_an_ols_flag"); 
			boxSize += stream.WriteBits(7,  this.reserved0, "reserved0"); 
		}

		else 
		{
			boxSize += stream.WriteUInt8( this.ols_mode_idc, "ols_mode_idc"); 
		}
		boxSize += stream.WriteUInt16( this.num_operating_points, "num_operating_points"); 

		for (int i=0; i<num_operating_points; i++)
		{
			boxSize += stream.WriteUInt16( this.output_layer_set_idx[i], "output_layer_set_idx"); 
			boxSize += stream.WriteUInt8( this.ptl_idx[i], "ptl_idx"); 
			boxSize += stream.WriteUInt8( this.max_temporal_id[i], "max_temporal_id"); 
			boxSize += stream.WriteUInt8( this.layer_count[i], "layer_count"); 

			for (int j=0; j<layer_count[i]; j++)
			{
				boxSize += stream.WriteBits(6,  this.layer_id[i][j], "layer_id"); 
				boxSize += stream.WriteBit( this.is_outputlayer[i][j], "is_outputlayer"); 
				boxSize += stream.WriteBit( this.reserved1[i][j], "reserved1"); 
			}
			boxSize += stream.WriteBits(6,  this.reserved00[i], "reserved00"); 
			boxSize += stream.WriteBit( this.frame_rate_info_flag[i], "frame_rate_info_flag"); 
			boxSize += stream.WriteBit( this.bit_rate_info_flag[i], "bit_rate_info_flag"); 

			if (frame_rate_info_flag[i])
			{
				boxSize += stream.WriteUInt16( this.avgFrameRate[i], "avgFrameRate"); 
				boxSize += stream.WriteBits(6,  this.reserved10[i], "reserved10"); 
				boxSize += stream.WriteBits(2,  this.constantFrameRate[i], "constantFrameRate"); 
			}

			if (bit_rate_info_flag[i])
			{
				boxSize += stream.WriteUInt32( this.maxBitRate[i], "maxBitRate"); 
				boxSize += stream.WriteUInt32( this.avgBitRate[i], "avgBitRate"); 
			}
		}
		boxSize += stream.WriteUInt8( this.max_layer_count, "max_layer_count"); 

		for (int i=0; i<max_layer_count; i++)
		{
			boxSize += stream.WriteUInt8( this.layerID[i], "layerID"); 
			boxSize += stream.WriteUInt8( this.num_direct_ref_layers[i], "num_direct_ref_layers"); 

			for (int j=0; j<num_direct_ref_layers[i]; j++)
			{
				boxSize += stream.WriteUInt8( this.direct_ref_layerID[i][j], "direct_ref_layerID"); 
			}
			boxSize += stream.WriteUInt8( this.max_tid_il_ref_pics_plus1[i], "max_tid_il_ref_pics_plus1"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 8; // num_profile_tier_level_minus1

		for (int i=0; i<=num_profile_tier_level_minus1; i++)
		{
			boxSize += 8; // ptl_max_temporal_id
			boxSize += IsoStream.CalculateClassSize(ptl); // ptl
		}
		boxSize += 1; // all_independent_layers_flag
		boxSize += 7; // reserved

		if (all_independent_layers_flag)
		{
			boxSize += 1; // each_layer_is_an_ols_flag
			boxSize += 7; // reserved0
		}

		else 
		{
			boxSize += 8; // ols_mode_idc
		}
		boxSize += 16; // num_operating_points

		for (int i=0; i<num_operating_points; i++)
		{
			boxSize += 16; // output_layer_set_idx
			boxSize += 8; // ptl_idx
			boxSize += 8; // max_temporal_id
			boxSize += 8; // layer_count

			for (int j=0; j<layer_count[i]; j++)
			{
				boxSize += 6; // layer_id
				boxSize += 1; // is_outputlayer
				boxSize += 1; // reserved1
			}
			boxSize += 6; // reserved00
			boxSize += 1; // frame_rate_info_flag
			boxSize += 1; // bit_rate_info_flag

			if (frame_rate_info_flag[i])
			{
				boxSize += 16; // avgFrameRate
				boxSize += 6; // reserved10
				boxSize += 2; // constantFrameRate
			}

			if (bit_rate_info_flag[i])
			{
				boxSize += 32; // maxBitRate
				boxSize += 32; // avgBitRate
			}
		}
		boxSize += 8; // max_layer_count

		for (int i=0; i<max_layer_count; i++)
		{
			boxSize += 8; // layerID
			boxSize += 8; // num_direct_ref_layers

			for (int j=0; j<num_direct_ref_layers[i]; j++)
			{
				boxSize += 8; // direct_ref_layerID
			}
			boxSize += 8; // max_tid_il_ref_pics_plus1
		}
		return boxSize;
	}
}


/*
aligned(8) class EVCDecoderConfigurationRecord {
unsigned int(8) configurationVersion=1;
unsigned int(8) profile_idc;
unsigned int(8) level_idc;
 unsigned int(32) toolset_idc;
unsigned int(2) chroma_format_idc;
 unsigned int(3) bit_depth_luma_minus8;
unsigned int(3) bit_depth_chroma_minus8;
unsigned int(32) pic_width_in_luma_samples;
unsigned int(32) pic_height_in_luma_samples;
unsigned int(5) reserved='00000'b;
unsigned int(1) sps_in_stream;
 unsigned int(1) pps_in_stream;
unsigned int(1) aps_in_stream;
 unsigned int(8) numOfArrays;
 for (j=0; j<numOfArrays; j++) {
bit(2) reserved='00'b;
unsigned int(6) NAL_unit_type;
 unsigned int(16) numNalus;
for (i=0; i<numNalus; i++) {
 unsigned int(16) nalUnitLength;
bit(8*nalUnitLength) nalUnit;
}
}
}
*/
public partial class EVCDecoderConfigurationRecord : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "EVCDecoderConfigurationRecord"; } }

	protected byte configurationVersion =1; 
	public byte ConfigurationVersion { get { return this.configurationVersion; } set { this.configurationVersion = value; } }

	protected byte profile_idc; 
	public byte ProfileIdc { get { return this.profile_idc; } set { this.profile_idc = value; } }

	protected byte level_idc; 
	public byte LevelIdc { get { return this.level_idc; } set { this.level_idc = value; } }

	protected uint toolset_idc; 
	public uint ToolsetIdc { get { return this.toolset_idc; } set { this.toolset_idc = value; } }

	protected byte chroma_format_idc; 
	public byte ChromaFormatIdc { get { return this.chroma_format_idc; } set { this.chroma_format_idc = value; } }

	protected byte bit_depth_luma_minus8; 
	public byte BitDepthLumaMinus8 { get { return this.bit_depth_luma_minus8; } set { this.bit_depth_luma_minus8 = value; } }

	protected byte bit_depth_chroma_minus8; 
	public byte BitDepthChromaMinus8 { get { return this.bit_depth_chroma_minus8; } set { this.bit_depth_chroma_minus8 = value; } }

	protected uint pic_width_in_luma_samples; 
	public uint PicWidthInLumaSamples { get { return this.pic_width_in_luma_samples; } set { this.pic_width_in_luma_samples = value; } }

	protected uint pic_height_in_luma_samples; 
	public uint PicHeightInLumaSamples { get { return this.pic_height_in_luma_samples; } set { this.pic_height_in_luma_samples = value; } }

	protected byte reserved =0b00000; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected bool sps_in_stream; 
	public bool SpsInStream { get { return this.sps_in_stream; } set { this.sps_in_stream = value; } }

	protected bool pps_in_stream; 
	public bool PpsInStream { get { return this.pps_in_stream; } set { this.pps_in_stream = value; } }

	protected bool aps_in_stream; 
	public bool ApsInStream { get { return this.aps_in_stream; } set { this.aps_in_stream = value; } }

	protected byte numOfArrays; 
	public byte NumOfArrays { get { return this.numOfArrays; } set { this.numOfArrays = value; } }

	protected byte[] reserved0; 
	public byte[] Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected byte[] NAL_unit_type; 
	public byte[] NALUnitType { get { return this.NAL_unit_type; } set { this.NAL_unit_type = value; } }

	protected ushort[] numNalus; 
	public ushort[] NumNalus { get { return this.numNalus; } set { this.numNalus = value; } }

	protected ushort[][] nalUnitLength; 
	public ushort[][] NalUnitLength { get { return this.nalUnitLength; } set { this.nalUnitLength = value; } }

	protected byte[][][] nalUnit; 
	public byte[][][] NalUnit { get { return this.nalUnit; } set { this.nalUnit = value; } }

	public EVCDecoderConfigurationRecord(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.configurationVersion, "configurationVersion"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.profile_idc, "profile_idc"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.level_idc, "level_idc"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.toolset_idc, "toolset_idc"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.chroma_format_idc, "chroma_format_idc"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.bit_depth_luma_minus8, "bit_depth_luma_minus8"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.bit_depth_chroma_minus8, "bit_depth_chroma_minus8"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.pic_width_in_luma_samples, "pic_width_in_luma_samples"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.pic_height_in_luma_samples, "pic_height_in_luma_samples"); 
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.sps_in_stream, "sps_in_stream"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.pps_in_stream, "pps_in_stream"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.aps_in_stream, "aps_in_stream"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.numOfArrays, "numOfArrays"); 

		this.reserved0 = new byte[IsoStream.GetInt(numOfArrays)];
		this.NAL_unit_type = new byte[IsoStream.GetInt(numOfArrays)];
		this.numNalus = new ushort[IsoStream.GetInt(numOfArrays)];
		this.nalUnitLength = new ushort[IsoStream.GetInt(numOfArrays)][];
		this.nalUnit = new byte[IsoStream.GetInt(numOfArrays)][][];
		for (int j=0; j<numOfArrays; j++)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.reserved0[j], "reserved0"); 
			boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.NAL_unit_type[j], "NAL_unit_type"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.numNalus[j], "numNalus"); 

			this.nalUnitLength[j] = new ushort[IsoStream.GetInt(numNalus[j])];
			this.nalUnit[j] = new byte[IsoStream.GetInt(numNalus[j])][];
			for (int i=0; i<numNalus[j]; i++)
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.nalUnitLength[j][i], "nalUnitLength"); 
				boxSize += stream.ReadBits(boxSize, readSize, (uint)(8*nalUnitLength[j][i] ),  out this.nalUnit[j][i], "nalUnit"); 
			}
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt8( this.configurationVersion, "configurationVersion"); 
		boxSize += stream.WriteUInt8( this.profile_idc, "profile_idc"); 
		boxSize += stream.WriteUInt8( this.level_idc, "level_idc"); 
		boxSize += stream.WriteUInt32( this.toolset_idc, "toolset_idc"); 
		boxSize += stream.WriteBits(2,  this.chroma_format_idc, "chroma_format_idc"); 
		boxSize += stream.WriteBits(3,  this.bit_depth_luma_minus8, "bit_depth_luma_minus8"); 
		boxSize += stream.WriteBits(3,  this.bit_depth_chroma_minus8, "bit_depth_chroma_minus8"); 
		boxSize += stream.WriteUInt32( this.pic_width_in_luma_samples, "pic_width_in_luma_samples"); 
		boxSize += stream.WriteUInt32( this.pic_height_in_luma_samples, "pic_height_in_luma_samples"); 
		boxSize += stream.WriteBits(5,  this.reserved, "reserved"); 
		boxSize += stream.WriteBit( this.sps_in_stream, "sps_in_stream"); 
		boxSize += stream.WriteBit( this.pps_in_stream, "pps_in_stream"); 
		boxSize += stream.WriteBit( this.aps_in_stream, "aps_in_stream"); 
		boxSize += stream.WriteUInt8( this.numOfArrays, "numOfArrays"); 

		for (int j=0; j<numOfArrays; j++)
		{
			boxSize += stream.WriteBits(2,  this.reserved0[j], "reserved0"); 
			boxSize += stream.WriteBits(6,  this.NAL_unit_type[j], "NAL_unit_type"); 
			boxSize += stream.WriteUInt16( this.numNalus[j], "numNalus"); 

			for (int i=0; i<numNalus[j]; i++)
			{
				boxSize += stream.WriteUInt16( this.nalUnitLength[j][i], "nalUnitLength"); 
				boxSize += stream.WriteBits((uint)(8*nalUnitLength[j][i] ),  this.nalUnit[j][i], "nalUnit"); 
			}
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 8; // configurationVersion
		boxSize += 8; // profile_idc
		boxSize += 8; // level_idc
		boxSize += 32; // toolset_idc
		boxSize += 2; // chroma_format_idc
		boxSize += 3; // bit_depth_luma_minus8
		boxSize += 3; // bit_depth_chroma_minus8
		boxSize += 32; // pic_width_in_luma_samples
		boxSize += 32; // pic_height_in_luma_samples
		boxSize += 5; // reserved
		boxSize += 1; // sps_in_stream
		boxSize += 1; // pps_in_stream
		boxSize += 1; // aps_in_stream
		boxSize += 8; // numOfArrays

		for (int j=0; j<numOfArrays; j++)
		{
			boxSize += 2; // reserved0
			boxSize += 6; // NAL_unit_type
			boxSize += 16; // numNalus

			for (int i=0; i<numNalus[j]; i++)
			{
				boxSize += 16; // nalUnitLength
				boxSize += (ulong)(8*nalUnitLength[j][i] ); // nalUnit
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class LHEVCDecoderConfigurationRecord {
unsigned int(8) configurationVersion = 1;
unsigned int(2) general_profile_space;
unsigned int(1) general_tier_flag;
unsigned int(5) general_profile_idc;
unsigned int(32) general_profile_compatibility_flags;
unsigned int(48) general_constraint_indicator_flags;
unsigned int(8) general_level_idc;
bit(1) complete_representation;
bit(3) reserved = '111'b;
unsigned int(12) min_spatial_segmentation_idc;
bit(6) reserved = '111111'b;
unsigned int(2) parallelismType;
bit(6) reserved = '111111'b;
unsigned int(2) chromaFormat;
bit(5) reserved = '11111'b;
unsigned int(3) bitDepthLumaMinus8;
bit(5) reserved = '11111'b;
unsigned int(3) bitDepthChromaMinus8;
bit(16) avgFrameRate;
bit(2) constantFrameRate;
bit(3) numTemporalLayers;
bit(1) temporalIdNested;
unsigned int(2) lengthSizeMinusOne;
unsigned int(8) numOfArrays;
for (j = 0; j <numOfArrays; j ++) {
bit(1) array_completeness;
unsigned int(1) reserved = 0;
unsigned int(6) NAL_unit_type;
unsigned int(16) numNalus;
for (i = 0; i <numNalus; i ++) {
unsigned int(16) nalUnitLength;
bit(8*nalUnitLength) nalUnit;
}
}
unsigned int(16) operationPointIdx;
}
*/
public partial class LHEVCDecoderConfigurationRecord : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "LHEVCDecoderConfigurationRecord"; } }

	protected byte configurationVersion = 1; 
	public byte ConfigurationVersion { get { return this.configurationVersion; } set { this.configurationVersion = value; } }

	protected byte general_profile_space; 
	public byte GeneralProfileSpace { get { return this.general_profile_space; } set { this.general_profile_space = value; } }

	protected bool general_tier_flag; 
	public bool GeneralTierFlag { get { return this.general_tier_flag; } set { this.general_tier_flag = value; } }

	protected byte general_profile_idc; 
	public byte GeneralProfileIdc { get { return this.general_profile_idc; } set { this.general_profile_idc = value; } }

	protected uint general_profile_compatibility_flags; 
	public uint GeneralProfileCompatibilityFlags { get { return this.general_profile_compatibility_flags; } set { this.general_profile_compatibility_flags = value; } }

	protected ulong general_constraint_indicator_flags; 
	public ulong GeneralConstraintIndicatorFlags { get { return this.general_constraint_indicator_flags; } set { this.general_constraint_indicator_flags = value; } }

	protected byte general_level_idc; 
	public byte GeneralLevelIdc { get { return this.general_level_idc; } set { this.general_level_idc = value; } }

	protected bool complete_representation; 
	public bool CompleteRepresentation { get { return this.complete_representation; } set { this.complete_representation = value; } }

	protected byte reserved = 0b111; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected ushort min_spatial_segmentation_idc; 
	public ushort MinSpatialSegmentationIdc { get { return this.min_spatial_segmentation_idc; } set { this.min_spatial_segmentation_idc = value; } }

	protected byte reserved0 = 0b111111; 
	public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected byte parallelismType; 
	public byte ParallelismType { get { return this.parallelismType; } set { this.parallelismType = value; } }

	protected byte reserved1 = 0b111111; 
	public byte Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected byte chromaFormat; 
	public byte ChromaFormat { get { return this.chromaFormat; } set { this.chromaFormat = value; } }

	protected byte reserved2 = 0b11111; 
	public byte Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

	protected byte bitDepthLumaMinus8; 
	public byte BitDepthLumaMinus8 { get { return this.bitDepthLumaMinus8; } set { this.bitDepthLumaMinus8 = value; } }

	protected byte reserved3 = 0b11111; 
	public byte Reserved3 { get { return this.reserved3; } set { this.reserved3 = value; } }

	protected byte bitDepthChromaMinus8; 
	public byte BitDepthChromaMinus8 { get { return this.bitDepthChromaMinus8; } set { this.bitDepthChromaMinus8 = value; } }

	protected ushort avgFrameRate; 
	public ushort AvgFrameRate { get { return this.avgFrameRate; } set { this.avgFrameRate = value; } }

	protected byte constantFrameRate; 
	public byte ConstantFrameRate { get { return this.constantFrameRate; } set { this.constantFrameRate = value; } }

	protected byte numTemporalLayers; 
	public byte NumTemporalLayers { get { return this.numTemporalLayers; } set { this.numTemporalLayers = value; } }

	protected bool temporalIdNested; 
	public bool TemporalIdNested { get { return this.temporalIdNested; } set { this.temporalIdNested = value; } }

	protected byte lengthSizeMinusOne; 
	public byte LengthSizeMinusOne { get { return this.lengthSizeMinusOne; } set { this.lengthSizeMinusOne = value; } }

	protected byte numOfArrays; 
	public byte NumOfArrays { get { return this.numOfArrays; } set { this.numOfArrays = value; } }

	protected bool[] array_completeness; 
	public bool[] ArrayCompleteness { get { return this.array_completeness; } set { this.array_completeness = value; } }

	protected bool[] reserved4; 
	public bool[] Reserved4 { get { return this.reserved4; } set { this.reserved4 = value; } }

	protected byte[] NAL_unit_type; 
	public byte[] NALUnitType { get { return this.NAL_unit_type; } set { this.NAL_unit_type = value; } }

	protected ushort[] numNalus; 
	public ushort[] NumNalus { get { return this.numNalus; } set { this.numNalus = value; } }

	protected ushort[][] nalUnitLength; 
	public ushort[][] NalUnitLength { get { return this.nalUnitLength; } set { this.nalUnitLength = value; } }

	protected byte[][][] nalUnit; 
	public byte[][][] NalUnit { get { return this.nalUnit; } set { this.nalUnit = value; } }

	protected ushort operationPointIdx; 
	public ushort OperationPointIdx { get { return this.operationPointIdx; } set { this.operationPointIdx = value; } }

	public LHEVCDecoderConfigurationRecord(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.configurationVersion, "configurationVersion"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.general_profile_space, "general_profile_space"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.general_tier_flag, "general_tier_flag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.general_profile_idc, "general_profile_idc"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.general_profile_compatibility_flags, "general_profile_compatibility_flags"); 
		boxSize += stream.ReadUInt48(boxSize, readSize,  out this.general_constraint_indicator_flags, "general_constraint_indicator_flags"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.general_level_idc, "general_level_idc"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.complete_representation, "complete_representation"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 12,  out this.min_spatial_segmentation_idc, "min_spatial_segmentation_idc"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved0, "reserved0"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.parallelismType, "parallelismType"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved1, "reserved1"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.chromaFormat, "chromaFormat"); 
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.reserved2, "reserved2"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.bitDepthLumaMinus8, "bitDepthLumaMinus8"); 
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.reserved3, "reserved3"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.bitDepthChromaMinus8, "bitDepthChromaMinus8"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.avgFrameRate, "avgFrameRate"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.constantFrameRate, "constantFrameRate"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.numTemporalLayers, "numTemporalLayers"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.temporalIdNested, "temporalIdNested"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.lengthSizeMinusOne, "lengthSizeMinusOne"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.numOfArrays, "numOfArrays"); 

		this.array_completeness = new bool[IsoStream.GetInt(numOfArrays)];
		this.reserved4 = new bool[IsoStream.GetInt(numOfArrays)];
		this.NAL_unit_type = new byte[IsoStream.GetInt(numOfArrays)];
		this.numNalus = new ushort[IsoStream.GetInt(numOfArrays)];
		this.nalUnitLength = new ushort[IsoStream.GetInt(numOfArrays)][];
		this.nalUnit = new byte[IsoStream.GetInt(numOfArrays)][][];
		for (int j = 0; j <numOfArrays; j ++)
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.array_completeness[j], "array_completeness"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved4[j], "reserved4"); 
			boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.NAL_unit_type[j], "NAL_unit_type"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.numNalus[j], "numNalus"); 

			this.nalUnitLength[j] = new ushort[IsoStream.GetInt(numNalus[j])];
			this.nalUnit[j] = new byte[IsoStream.GetInt(numNalus[j])][];
			for (int i = 0; i <numNalus[j]; i ++)
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.nalUnitLength[j][i], "nalUnitLength"); 
				boxSize += stream.ReadBits(boxSize, readSize, (uint)(8*nalUnitLength[j][i] ),  out this.nalUnit[j][i], "nalUnit"); 
			}
		}
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.operationPointIdx, "operationPointIdx"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt8( this.configurationVersion, "configurationVersion"); 
		boxSize += stream.WriteBits(2,  this.general_profile_space, "general_profile_space"); 
		boxSize += stream.WriteBit( this.general_tier_flag, "general_tier_flag"); 
		boxSize += stream.WriteBits(5,  this.general_profile_idc, "general_profile_idc"); 
		boxSize += stream.WriteUInt32( this.general_profile_compatibility_flags, "general_profile_compatibility_flags"); 
		boxSize += stream.WriteUInt48( this.general_constraint_indicator_flags, "general_constraint_indicator_flags"); 
		boxSize += stream.WriteUInt8( this.general_level_idc, "general_level_idc"); 
		boxSize += stream.WriteBit( this.complete_representation, "complete_representation"); 
		boxSize += stream.WriteBits(3,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(12,  this.min_spatial_segmentation_idc, "min_spatial_segmentation_idc"); 
		boxSize += stream.WriteBits(6,  this.reserved0, "reserved0"); 
		boxSize += stream.WriteBits(2,  this.parallelismType, "parallelismType"); 
		boxSize += stream.WriteBits(6,  this.reserved1, "reserved1"); 
		boxSize += stream.WriteBits(2,  this.chromaFormat, "chromaFormat"); 
		boxSize += stream.WriteBits(5,  this.reserved2, "reserved2"); 
		boxSize += stream.WriteBits(3,  this.bitDepthLumaMinus8, "bitDepthLumaMinus8"); 
		boxSize += stream.WriteBits(5,  this.reserved3, "reserved3"); 
		boxSize += stream.WriteBits(3,  this.bitDepthChromaMinus8, "bitDepthChromaMinus8"); 
		boxSize += stream.WriteUInt16( this.avgFrameRate, "avgFrameRate"); 
		boxSize += stream.WriteBits(2,  this.constantFrameRate, "constantFrameRate"); 
		boxSize += stream.WriteBits(3,  this.numTemporalLayers, "numTemporalLayers"); 
		boxSize += stream.WriteBit( this.temporalIdNested, "temporalIdNested"); 
		boxSize += stream.WriteBits(2,  this.lengthSizeMinusOne, "lengthSizeMinusOne"); 
		boxSize += stream.WriteUInt8( this.numOfArrays, "numOfArrays"); 

		for (int j = 0; j <numOfArrays; j ++)
		{
			boxSize += stream.WriteBit( this.array_completeness[j], "array_completeness"); 
			boxSize += stream.WriteBit( this.reserved4[j], "reserved4"); 
			boxSize += stream.WriteBits(6,  this.NAL_unit_type[j], "NAL_unit_type"); 
			boxSize += stream.WriteUInt16( this.numNalus[j], "numNalus"); 

			for (int i = 0; i <numNalus[j]; i ++)
			{
				boxSize += stream.WriteUInt16( this.nalUnitLength[j][i], "nalUnitLength"); 
				boxSize += stream.WriteBits((uint)(8*nalUnitLength[j][i] ),  this.nalUnit[j][i], "nalUnit"); 
			}
		}
		boxSize += stream.WriteUInt16( this.operationPointIdx, "operationPointIdx"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 8; // configurationVersion
		boxSize += 2; // general_profile_space
		boxSize += 1; // general_tier_flag
		boxSize += 5; // general_profile_idc
		boxSize += 32; // general_profile_compatibility_flags
		boxSize += 48; // general_constraint_indicator_flags
		boxSize += 8; // general_level_idc
		boxSize += 1; // complete_representation
		boxSize += 3; // reserved
		boxSize += 12; // min_spatial_segmentation_idc
		boxSize += 6; // reserved0
		boxSize += 2; // parallelismType
		boxSize += 6; // reserved1
		boxSize += 2; // chromaFormat
		boxSize += 5; // reserved2
		boxSize += 3; // bitDepthLumaMinus8
		boxSize += 5; // reserved3
		boxSize += 3; // bitDepthChromaMinus8
		boxSize += 16; // avgFrameRate
		boxSize += 2; // constantFrameRate
		boxSize += 3; // numTemporalLayers
		boxSize += 1; // temporalIdNested
		boxSize += 2; // lengthSizeMinusOne
		boxSize += 8; // numOfArrays

		for (int j = 0; j <numOfArrays; j ++)
		{
			boxSize += 1; // array_completeness
			boxSize += 1; // reserved4
			boxSize += 6; // NAL_unit_type
			boxSize += 16; // numNalus

			for (int i = 0; i <numNalus[j]; i ++)
			{
				boxSize += 16; // nalUnitLength
				boxSize += (ulong)(8*nalUnitLength[j][i] ); // nalUnit
			}
		}
		boxSize += 16; // operationPointIdx
		return boxSize;
	}
}


/*
class IroiInfoBox extends Box('iroi'){
	unsigned int(2) iroi_type;
	bit(6) reserved = 0;
	if(iroi_type == 0) { 
		unsigned int(8) grid_roi_mb_width;
		unsigned int(8) grid_roi_mb_height;
	}
	else if(iroi_type == 1){
		unsigned int(24) num_roi;
		for(i=1; i<= num_roi; i++) {
			unsigned int(32) top_left_mb;
			unsigned int(8) roi_mb_width;
			unsigned int(8) roi_mb_height;
		}
	}
}
*/
public partial class IroiInfoBox : Box
{
	public const string TYPE = "iroi";
	public override string DisplayName { get { return "IroiInfoBox"; } }

	protected byte iroi_type; 
	public byte IroiType { get { return this.iroi_type; } set { this.iroi_type = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte grid_roi_mb_width; 
	public byte GridRoiMbWidth { get { return this.grid_roi_mb_width; } set { this.grid_roi_mb_width = value; } }

	protected byte grid_roi_mb_height; 
	public byte GridRoiMbHeight { get { return this.grid_roi_mb_height; } set { this.grid_roi_mb_height = value; } }

	protected uint num_roi; 
	public uint NumRoi { get { return this.num_roi; } set { this.num_roi = value; } }

	protected uint[] top_left_mb; 
	public uint[] TopLeftMb { get { return this.top_left_mb; } set { this.top_left_mb = value; } }

	protected byte[] roi_mb_width; 
	public byte[] RoiMbWidth { get { return this.roi_mb_width; } set { this.roi_mb_width = value; } }

	protected byte[] roi_mb_height; 
	public byte[] RoiMbHeight { get { return this.roi_mb_height; } set { this.roi_mb_height = value; } }

	public IroiInfoBox(): base(IsoStream.FromFourCC("iroi"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.iroi_type, "iroi_type"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved, "reserved"); 

		if (iroi_type == 0)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.grid_roi_mb_width, "grid_roi_mb_width"); 
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.grid_roi_mb_height, "grid_roi_mb_height"); 
		}

		else if (iroi_type == 1)
		{
			boxSize += stream.ReadUInt24(boxSize, readSize,  out this.num_roi, "num_roi"); 

			this.top_left_mb = new uint[IsoStream.GetInt( num_roi)];
			this.roi_mb_width = new byte[IsoStream.GetInt( num_roi)];
			this.roi_mb_height = new byte[IsoStream.GetInt( num_roi)];
			for (int i=0; i< num_roi; i++)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.top_left_mb[i], "top_left_mb"); 
				boxSize += stream.ReadUInt8(boxSize, readSize,  out this.roi_mb_width[i], "roi_mb_width"); 
				boxSize += stream.ReadUInt8(boxSize, readSize,  out this.roi_mb_height[i], "roi_mb_height"); 
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(2,  this.iroi_type, "iroi_type"); 
		boxSize += stream.WriteBits(6,  this.reserved, "reserved"); 

		if (iroi_type == 0)
		{
			boxSize += stream.WriteUInt8( this.grid_roi_mb_width, "grid_roi_mb_width"); 
			boxSize += stream.WriteUInt8( this.grid_roi_mb_height, "grid_roi_mb_height"); 
		}

		else if (iroi_type == 1)
		{
			boxSize += stream.WriteUInt24( this.num_roi, "num_roi"); 

			for (int i=0; i< num_roi; i++)
			{
				boxSize += stream.WriteUInt32( this.top_left_mb[i], "top_left_mb"); 
				boxSize += stream.WriteUInt8( this.roi_mb_width[i], "roi_mb_width"); 
				boxSize += stream.WriteUInt8( this.roi_mb_height[i], "roi_mb_height"); 
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 2; // iroi_type
		boxSize += 6; // reserved

		if (iroi_type == 0)
		{
			boxSize += 8; // grid_roi_mb_width
			boxSize += 8; // grid_roi_mb_height
		}

		else if (iroi_type == 1)
		{
			boxSize += 24; // num_roi

			for (int i=0; i< num_roi; i++)
			{
				boxSize += 32; // top_left_mb
				boxSize += 8; // roi_mb_width
				boxSize += 8; // roi_mb_height
			}
		}
		return boxSize;
	}
}


/*
class TierDependencyBox extends Box('ldep'){
	unsigned int(16) entry_count; 
	for (i=0; i < entry_count; i++)
		unsigned int(16) dependencyTierId;
}
*/
public partial class TierDependencyBox : Box
{
	public const string TYPE = "ldep";
	public override string DisplayName { get { return "TierDependencyBox"; } }

	protected ushort entry_count; 
	public ushort EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected ushort[] dependencyTierId; 
	public ushort[] DependencyTierId { get { return this.dependencyTierId; } set { this.dependencyTierId = value; } }

	public TierDependencyBox(): base(IsoStream.FromFourCC("ldep"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.entry_count, "entry_count"); 

		this.dependencyTierId = new ushort[IsoStream.GetInt( entry_count)];
		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.dependencyTierId[i], "dependencyTierId"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.entry_count, "entry_count"); 

		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.WriteUInt16( this.dependencyTierId[i], "dependencyTierId"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // entry_count

		for (int i=0; i < entry_count; i++)
		{
			boxSize += 16; // dependencyTierId
		}
		return boxSize;
	}
}


/*
class SVCDependencyRangeBox extends Box('svdr') {
	unsigned int(3) min_dependency_id;
	unsigned int(3) min_temporal_id;
	bit(6) reserved = 0;
	unsigned int(4) min_quality_id;
	unsigned int(3) max_dependency_id;
	unsigned int(3) max_temporal_id;
	bit(6) reserved = 0;
	unsigned int(4) max_quality_id;
}
*/
public partial class SVCDependencyRangeBox : Box
{
	public const string TYPE = "svdr";
	public override string DisplayName { get { return "SVCDependencyRangeBox"; } }

	protected byte min_dependency_id; 
	public byte MinDependencyId { get { return this.min_dependency_id; } set { this.min_dependency_id = value; } }

	protected byte min_temporal_id; 
	public byte MinTemporalId { get { return this.min_temporal_id; } set { this.min_temporal_id = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte min_quality_id; 
	public byte MinQualityId { get { return this.min_quality_id; } set { this.min_quality_id = value; } }

	protected byte max_dependency_id; 
	public byte MaxDependencyId { get { return this.max_dependency_id; } set { this.max_dependency_id = value; } }

	protected byte max_temporal_id; 
	public byte MaxTemporalId { get { return this.max_temporal_id; } set { this.max_temporal_id = value; } }

	protected byte reserved0 = 0; 
	public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected byte max_quality_id; 
	public byte MaxQualityId { get { return this.max_quality_id; } set { this.max_quality_id = value; } }

	public SVCDependencyRangeBox(): base(IsoStream.FromFourCC("svdr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.min_dependency_id, "min_dependency_id"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.min_temporal_id, "min_temporal_id"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.min_quality_id, "min_quality_id"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.max_dependency_id, "max_dependency_id"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.max_temporal_id, "max_temporal_id"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved0, "reserved0"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.max_quality_id, "max_quality_id"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(3,  this.min_dependency_id, "min_dependency_id"); 
		boxSize += stream.WriteBits(3,  this.min_temporal_id, "min_temporal_id"); 
		boxSize += stream.WriteBits(6,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(4,  this.min_quality_id, "min_quality_id"); 
		boxSize += stream.WriteBits(3,  this.max_dependency_id, "max_dependency_id"); 
		boxSize += stream.WriteBits(3,  this.max_temporal_id, "max_temporal_id"); 
		boxSize += stream.WriteBits(6,  this.reserved0, "reserved0"); 
		boxSize += stream.WriteBits(4,  this.max_quality_id, "max_quality_id"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 3; // min_dependency_id
		boxSize += 3; // min_temporal_id
		boxSize += 6; // reserved
		boxSize += 4; // min_quality_id
		boxSize += 3; // max_dependency_id
		boxSize += 3; // max_temporal_id
		boxSize += 6; // reserved0
		boxSize += 4; // max_quality_id
		return boxSize;
	}
}


/*
class InitialParameterSetBox extends Box ('svip') {
	unsigned int(8) sps_id_count;
	for (i=0; i< sps_id_count; i++)
		unsigned int(8) SPS_index;
	unsigned int(8) pps_id_count;
	for (i=0; i< pps_id_count; i++)
		unsigned int(8) PPS_index;
}
*/
public partial class InitialParameterSetBox : Box
{
	public const string TYPE = "svip";
	public override string DisplayName { get { return "InitialParameterSetBox"; } }

	protected byte sps_id_count; 
	public byte SpsIdCount { get { return this.sps_id_count; } set { this.sps_id_count = value; } }

	protected byte[] SPS_index; 
	public byte[] SPSIndex { get { return this.SPS_index; } set { this.SPS_index = value; } }

	protected byte pps_id_count; 
	public byte PpsIdCount { get { return this.pps_id_count; } set { this.pps_id_count = value; } }

	protected byte[] PPS_index; 
	public byte[] PPSIndex { get { return this.PPS_index; } set { this.PPS_index = value; } }

	public InitialParameterSetBox(): base(IsoStream.FromFourCC("svip"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.sps_id_count, "sps_id_count"); 

		this.SPS_index = new byte[IsoStream.GetInt( sps_id_count)];
		for (int i=0; i< sps_id_count; i++)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.SPS_index[i], "SPS_index"); 
		}
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.pps_id_count, "pps_id_count"); 

		this.PPS_index = new byte[IsoStream.GetInt( pps_id_count)];
		for (int i=0; i< pps_id_count; i++)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.PPS_index[i], "PPS_index"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.sps_id_count, "sps_id_count"); 

		for (int i=0; i< sps_id_count; i++)
		{
			boxSize += stream.WriteUInt8( this.SPS_index[i], "SPS_index"); 
		}
		boxSize += stream.WriteUInt8( this.pps_id_count, "pps_id_count"); 

		for (int i=0; i< pps_id_count; i++)
		{
			boxSize += stream.WriteUInt8( this.PPS_index[i], "PPS_index"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // sps_id_count

		for (int i=0; i< sps_id_count; i++)
		{
			boxSize += 8; // SPS_index
		}
		boxSize += 8; // pps_id_count

		for (int i=0; i< pps_id_count; i++)
		{
			boxSize += 8; // PPS_index
		}
		return boxSize;
	}
}


/*
class PriorityRangeBox extends Box('svpr') {
	bit(2) reserved1 = 0;
	unsigned int(6) min_priorityId;
	bit(2) reserved2 = 0;
	unsigned int(6) max_priorityId;
}
*/
public partial class PriorityRangeBox : Box
{
	public const string TYPE = "svpr";
	public override string DisplayName { get { return "PriorityRangeBox"; } }

	protected byte reserved1 = 0; 
	public byte Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected byte min_priorityId; 
	public byte MinPriorityId { get { return this.min_priorityId; } set { this.min_priorityId = value; } }

	protected byte reserved2 = 0; 
	public byte Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

	protected byte max_priorityId; 
	public byte MaxPriorityId { get { return this.max_priorityId; } set { this.max_priorityId = value; } }

	public PriorityRangeBox(): base(IsoStream.FromFourCC("svpr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.reserved1, "reserved1"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.min_priorityId, "min_priorityId"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.reserved2, "reserved2"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.max_priorityId, "max_priorityId"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(2,  this.reserved1, "reserved1"); 
		boxSize += stream.WriteBits(6,  this.min_priorityId, "min_priorityId"); 
		boxSize += stream.WriteBits(2,  this.reserved2, "reserved2"); 
		boxSize += stream.WriteBits(6,  this.max_priorityId, "max_priorityId"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 2; // reserved1
		boxSize += 6; // min_priorityId
		boxSize += 2; // reserved2
		boxSize += 6; // max_priorityId
		return boxSize;
	}
}


/*
class TranscodingInfoBox extends Box('tran'){
	bit(4) reserved = 0;
	unsigned int(2) conversion_idc;
	unsigned int(1) cavlc_info_present_flag;
	unsigned int(1) cabac_info_present_flag;
	if(cavlc_info_present_flag){
		unsigned int(24) cavlc_profile_level_idc;
		unsigned int(32) cavlc_max_bitrate;
		unsigned int(32) cavlc_avg_bitrate;
	}
	if(cabac_info_present_flag){
		unsigned int(24) cabac_profile_level_idc;
		unsigned int(32) cabac_max_bitrate;
		unsigned int(32) cabac_avg_bitrate;
	}
}
*/
public partial class TranscodingInfoBox : Box
{
	public const string TYPE = "tran";
	public override string DisplayName { get { return "TranscodingInfoBox"; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte conversion_idc; 
	public byte ConversionIdc { get { return this.conversion_idc; } set { this.conversion_idc = value; } }

	protected bool cavlc_info_present_flag; 
	public bool CavlcInfoPresentFlag { get { return this.cavlc_info_present_flag; } set { this.cavlc_info_present_flag = value; } }

	protected bool cabac_info_present_flag; 
	public bool CabacInfoPresentFlag { get { return this.cabac_info_present_flag; } set { this.cabac_info_present_flag = value; } }

	protected uint cavlc_profile_level_idc; 
	public uint CavlcProfileLevelIdc { get { return this.cavlc_profile_level_idc; } set { this.cavlc_profile_level_idc = value; } }

	protected uint cavlc_max_bitrate; 
	public uint CavlcMaxBitrate { get { return this.cavlc_max_bitrate; } set { this.cavlc_max_bitrate = value; } }

	protected uint cavlc_avg_bitrate; 
	public uint CavlcAvgBitrate { get { return this.cavlc_avg_bitrate; } set { this.cavlc_avg_bitrate = value; } }

	protected uint cabac_profile_level_idc; 
	public uint CabacProfileLevelIdc { get { return this.cabac_profile_level_idc; } set { this.cabac_profile_level_idc = value; } }

	protected uint cabac_max_bitrate; 
	public uint CabacMaxBitrate { get { return this.cabac_max_bitrate; } set { this.cabac_max_bitrate = value; } }

	protected uint cabac_avg_bitrate; 
	public uint CabacAvgBitrate { get { return this.cabac_avg_bitrate; } set { this.cabac_avg_bitrate = value; } }

	public TranscodingInfoBox(): base(IsoStream.FromFourCC("tran"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.conversion_idc, "conversion_idc"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.cavlc_info_present_flag, "cavlc_info_present_flag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.cabac_info_present_flag, "cabac_info_present_flag"); 

		if (cavlc_info_present_flag)
		{
			boxSize += stream.ReadUInt24(boxSize, readSize,  out this.cavlc_profile_level_idc, "cavlc_profile_level_idc"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.cavlc_max_bitrate, "cavlc_max_bitrate"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.cavlc_avg_bitrate, "cavlc_avg_bitrate"); 
		}

		if (cabac_info_present_flag)
		{
			boxSize += stream.ReadUInt24(boxSize, readSize,  out this.cabac_profile_level_idc, "cabac_profile_level_idc"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.cabac_max_bitrate, "cabac_max_bitrate"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.cabac_avg_bitrate, "cabac_avg_bitrate"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(4,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(2,  this.conversion_idc, "conversion_idc"); 
		boxSize += stream.WriteBit( this.cavlc_info_present_flag, "cavlc_info_present_flag"); 
		boxSize += stream.WriteBit( this.cabac_info_present_flag, "cabac_info_present_flag"); 

		if (cavlc_info_present_flag)
		{
			boxSize += stream.WriteUInt24( this.cavlc_profile_level_idc, "cavlc_profile_level_idc"); 
			boxSize += stream.WriteUInt32( this.cavlc_max_bitrate, "cavlc_max_bitrate"); 
			boxSize += stream.WriteUInt32( this.cavlc_avg_bitrate, "cavlc_avg_bitrate"); 
		}

		if (cabac_info_present_flag)
		{
			boxSize += stream.WriteUInt24( this.cabac_profile_level_idc, "cabac_profile_level_idc"); 
			boxSize += stream.WriteUInt32( this.cabac_max_bitrate, "cabac_max_bitrate"); 
			boxSize += stream.WriteUInt32( this.cabac_avg_bitrate, "cabac_avg_bitrate"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 4; // reserved
		boxSize += 2; // conversion_idc
		boxSize += 1; // cavlc_info_present_flag
		boxSize += 1; // cabac_info_present_flag

		if (cavlc_info_present_flag)
		{
			boxSize += 24; // cavlc_profile_level_idc
			boxSize += 32; // cavlc_max_bitrate
			boxSize += 32; // cavlc_avg_bitrate
		}

		if (cabac_info_present_flag)
		{
			boxSize += 24; // cabac_profile_level_idc
			boxSize += 32; // cabac_max_bitrate
			boxSize += 32; // cabac_avg_bitrate
		}
		return boxSize;
	}
}


/*
class RectRegionBox extends Box('rrgn'){
	unsigned int(16) base_region_tierID;
	unsigned int(1) dynamic_rect;
	bit(7) reserved = 0;
	if(dynamic_rect == 0) { 
		unsigned int(16) horizontal_offset;
		unsigned int(16) vertical_offset;
		unsigned int(16) region_width;
		unsigned int(16) region_height;
	}
}
*/
public partial class RectRegionBox : Box
{
	public const string TYPE = "rrgn";
	public override string DisplayName { get { return "RectRegionBox"; } }

	protected ushort base_region_tierID; 
	public ushort BaseRegionTierID { get { return this.base_region_tierID; } set { this.base_region_tierID = value; } }

	protected bool dynamic_rect; 
	public bool DynamicRect { get { return this.dynamic_rect; } set { this.dynamic_rect = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected ushort horizontal_offset; 
	public ushort HorizontalOffset { get { return this.horizontal_offset; } set { this.horizontal_offset = value; } }

	protected ushort vertical_offset; 
	public ushort VerticalOffset { get { return this.vertical_offset; } set { this.vertical_offset = value; } }

	protected ushort region_width; 
	public ushort RegionWidth { get { return this.region_width; } set { this.region_width = value; } }

	protected ushort region_height; 
	public ushort RegionHeight { get { return this.region_height; } set { this.region_height = value; } }

	public RectRegionBox(): base(IsoStream.FromFourCC("rrgn"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.base_region_tierID, "base_region_tierID"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.dynamic_rect, "dynamic_rect"); 
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.reserved, "reserved"); 

		if (dynamic_rect == false)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.horizontal_offset, "horizontal_offset"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.vertical_offset, "vertical_offset"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.region_width, "region_width"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.region_height, "region_height"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.base_region_tierID, "base_region_tierID"); 
		boxSize += stream.WriteBit( this.dynamic_rect, "dynamic_rect"); 
		boxSize += stream.WriteBits(7,  this.reserved, "reserved"); 

		if (dynamic_rect == false)
		{
			boxSize += stream.WriteUInt16( this.horizontal_offset, "horizontal_offset"); 
			boxSize += stream.WriteUInt16( this.vertical_offset, "vertical_offset"); 
			boxSize += stream.WriteUInt16( this.region_width, "region_width"); 
			boxSize += stream.WriteUInt16( this.region_height, "region_height"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // base_region_tierID
		boxSize += 1; // dynamic_rect
		boxSize += 7; // reserved

		if (dynamic_rect == false)
		{
			boxSize += 16; // horizontal_offset
			boxSize += 16; // vertical_offset
			boxSize += 16; // region_width
			boxSize += 16; // region_height
		}
		return boxSize;
	}
}


/*
class BufferingBox extends Box('buff'){
	unsigned int(16) 		operating_point_count
;	for (i = 0; i < operating_point_count; i++){
		unsigned int (32) 	byte_rate;
		unsigned int (32) 	cpb_size;
		unsigned int (32) 	dpb_size;
		unsigned int (32)		init_cpb_delay;
		unsigned int (32) 	init_dpb_delay;
	}
}
*/
public partial class BufferingBox : Box
{
	public const string TYPE = "buff";
	public override string DisplayName { get { return "BufferingBox"; } }

	protected ushort operating_point_count; 
	public ushort OperatingPointCount { get { return this.operating_point_count; } set { this.operating_point_count = value; } }

	protected uint[] byte_rate; 
	public uint[] ByteRate { get { return this.byte_rate; } set { this.byte_rate = value; } }

	protected uint[] cpb_size; 
	public uint[] CpbSize { get { return this.cpb_size; } set { this.cpb_size = value; } }

	protected uint[] dpb_size; 
	public uint[] DpbSize { get { return this.dpb_size; } set { this.dpb_size = value; } }

	protected uint[] init_cpb_delay; 
	public uint[] InitCpbDelay { get { return this.init_cpb_delay; } set { this.init_cpb_delay = value; } }

	protected uint[] init_dpb_delay; 
	public uint[] InitDpbDelay { get { return this.init_dpb_delay; } set { this.init_dpb_delay = value; } }

	public BufferingBox(): base(IsoStream.FromFourCC("buff"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.operating_point_count, "operating_point_count"); 

		this.byte_rate = new uint[IsoStream.GetInt( operating_point_count)];
		this.cpb_size = new uint[IsoStream.GetInt( operating_point_count)];
		this.dpb_size = new uint[IsoStream.GetInt( operating_point_count)];
		this.init_cpb_delay = new uint[IsoStream.GetInt( operating_point_count)];
		this.init_dpb_delay = new uint[IsoStream.GetInt( operating_point_count)];
		for (int i = 0; i < operating_point_count; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.byte_rate[i], "byte_rate"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.cpb_size[i], "cpb_size"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.dpb_size[i], "dpb_size"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.init_cpb_delay[i], "init_cpb_delay"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.init_dpb_delay[i], "init_dpb_delay"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.operating_point_count, "operating_point_count"); 

		for (int i = 0; i < operating_point_count; i++)
		{
			boxSize += stream.WriteUInt32( this.byte_rate[i], "byte_rate"); 
			boxSize += stream.WriteUInt32( this.cpb_size[i], "cpb_size"); 
			boxSize += stream.WriteUInt32( this.dpb_size[i], "dpb_size"); 
			boxSize += stream.WriteUInt32( this.init_cpb_delay[i], "init_cpb_delay"); 
			boxSize += stream.WriteUInt32( this.init_dpb_delay[i], "init_dpb_delay"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // operating_point_count

		for (int i = 0; i < operating_point_count; i++)
		{
			boxSize += 32; // byte_rate
			boxSize += 32; // cpb_size
			boxSize += 32; // dpb_size
			boxSize += 32; // init_cpb_delay
			boxSize += 32; // init_dpb_delay
		}
		return boxSize;
	}
}


/*
aligned(8) class MVCSubTrackViewBox
	extends FullBox('mstv', 0, 0) {
	unsigned int(16) item_count;
	for(i = 0; i< item_count; i++) {
		unsigned int(10)	view_id;
		unsigned int(4)	temporal_id;
		unsigned int(2)	reserved;
	}
}
*/
public partial class MVCSubTrackViewBox : FullBox
{
	public const string TYPE = "mstv";
	public override string DisplayName { get { return "MVCSubTrackViewBox"; } }

	protected ushort item_count; 
	public ushort ItemCount { get { return this.item_count; } set { this.item_count = value; } }

	protected ushort[] view_id; 
	public ushort[] ViewId { get { return this.view_id; } set { this.view_id = value; } }

	protected byte[] temporal_id; 
	public byte[] TemporalId { get { return this.temporal_id; } set { this.temporal_id = value; } }

	protected byte[] reserved; 
	public byte[] Reserved { get { return this.reserved; } set { this.reserved = value; } }

	public MVCSubTrackViewBox(): base(IsoStream.FromFourCC("mstv"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.item_count, "item_count"); 

		this.view_id = new ushort[IsoStream.GetInt( item_count)];
		this.temporal_id = new byte[IsoStream.GetInt( item_count)];
		this.reserved = new byte[IsoStream.GetInt( item_count)];
		for (int i = 0; i< item_count; i++)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 10,  out this.view_id[i], "view_id"); 
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.temporal_id[i], "temporal_id"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.reserved[i], "reserved"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.item_count, "item_count"); 

		for (int i = 0; i< item_count; i++)
		{
			boxSize += stream.WriteBits(10,  this.view_id[i], "view_id"); 
			boxSize += stream.WriteBits(4,  this.temporal_id[i], "temporal_id"); 
			boxSize += stream.WriteBits(2,  this.reserved[i], "reserved"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // item_count

		for (int i = 0; i< item_count; i++)
		{
			boxSize += 10; // view_id
			boxSize += 4; // temporal_id
			boxSize += 2; // reserved
		}
		return boxSize;
	}
}


/*
aligned(8) class MultiviewGroupBox extends FullBox('mvcg', version = 0, flags) {
	unsigned int(32) multiview_group_id;
	unsigned int(16) num_entries;
	bit(8) reserved = 0;
	for(i=0; i<num_entries; i++) {
		unsigned int(8) entry_type;
		if (entry_type == 0)
			unsigned int(32) track_id;
		else if (entry_type == 1) {
			unsigned int(32) track_id;
			unsigned int(16) tier_id;
		}
		else if (entry_type == 2) {
			bit(6) reserved1 = 0;
			unsigned int(10) output_view_id;
		}
		else if (entry_type == 3) {
			bit(6) reserved2 = 0;
			unsigned int(10) start_view_id;
			unsigned int(16) view_count;
		}
	}
	TierInfoBox subset_stream_info; 			// optional
	MultiviewRelationAttributeBox relation_attributes; // optional
	TierBitRateBox subset_stream_bit_rate; // optional
	BufferingBox subset_stream_buffering; 	// optional
	MultiviewSceneInfoBox multiview_scene_info; 			// optional
}
*/
public partial class MultiviewGroupBox : FullBox
{
	public const string TYPE = "mvcg";
	public override string DisplayName { get { return "MultiviewGroupBox"; } }

	protected uint multiview_group_id; 
	public uint MultiviewGroupId { get { return this.multiview_group_id; } set { this.multiview_group_id = value; } }

	protected ushort num_entries; 
	public ushort NumEntries { get { return this.num_entries; } set { this.num_entries = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte[] entry_type; 
	public byte[] EntryType { get { return this.entry_type; } set { this.entry_type = value; } }

	protected uint[] track_id; 
	public uint[] TrackId { get { return this.track_id; } set { this.track_id = value; } }

	protected ushort[] tier_id; 
	public ushort[] TierId { get { return this.tier_id; } set { this.tier_id = value; } }

	protected byte[] reserved1; 
	public byte[] Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected ushort[] output_view_id; 
	public ushort[] OutputViewId { get { return this.output_view_id; } set { this.output_view_id = value; } }

	protected byte[] reserved2; 
	public byte[] Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

	protected ushort[] start_view_id; 
	public ushort[] StartViewId { get { return this.start_view_id; } set { this.start_view_id = value; } }

	protected ushort[] view_count; 
	public ushort[] ViewCount { get { return this.view_count; } set { this.view_count = value; } }
	public TierInfoBox SubsetStreamInfo { get { return this.children.OfType<TierInfoBox>().FirstOrDefault(); } }
	public MultiviewRelationAttributeBox RelationAttributes { get { return this.children.OfType<MultiviewRelationAttributeBox>().FirstOrDefault(); } }
	public TierBitRateBox SubsetStreamBitRate { get { return this.children.OfType<TierBitRateBox>().FirstOrDefault(); } }
	public BufferingBox SubsetStreamBuffering { get { return this.children.OfType<BufferingBox>().FirstOrDefault(); } }
	public MultiviewSceneInfoBox MultiviewSceneInfo { get { return this.children.OfType<MultiviewSceneInfoBox>().FirstOrDefault(); } }

	public MultiviewGroupBox(uint flags = 0): base(IsoStream.FromFourCC("mvcg"), 0, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.multiview_group_id, "multiview_group_id"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.num_entries, "num_entries"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.reserved, "reserved"); 

		this.entry_type = new byte[IsoStream.GetInt(num_entries)];
		this.track_id = new uint[IsoStream.GetInt(num_entries)];
		this.tier_id = new ushort[IsoStream.GetInt(num_entries)];
		this.reserved1 = new byte[IsoStream.GetInt(num_entries)];
		this.output_view_id = new ushort[IsoStream.GetInt(num_entries)];
		this.reserved2 = new byte[IsoStream.GetInt(num_entries)];
		this.start_view_id = new ushort[IsoStream.GetInt(num_entries)];
		this.view_count = new ushort[IsoStream.GetInt(num_entries)];
		for (int i=0; i<num_entries; i++)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.entry_type[i], "entry_type"); 

			if (entry_type[i] == 0)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.track_id[i], "track_id"); 
			}

			else if (entry_type[i] == 1)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.track_id[i], "track_id"); 
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.tier_id[i], "tier_id"); 
			}

			else if (entry_type[i] == 2)
			{
				boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved1[i], "reserved1"); 
				boxSize += stream.ReadBits(boxSize, readSize, 10,  out this.output_view_id[i], "output_view_id"); 
			}

			else if (entry_type[i] == 3)
			{
				boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved2[i], "reserved2"); 
				boxSize += stream.ReadBits(boxSize, readSize, 10,  out this.start_view_id[i], "start_view_id"); 
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.view_count[i], "view_count"); 
			}
		}
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.subset_stream_info, "subset_stream_info"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.relation_attributes, "relation_attributes"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.subset_stream_bit_rate, "subset_stream_bit_rate"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.subset_stream_buffering, "subset_stream_buffering"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.multiview_scene_info, "multiview_scene_info"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.multiview_group_id, "multiview_group_id"); 
		boxSize += stream.WriteUInt16( this.num_entries, "num_entries"); 
		boxSize += stream.WriteUInt8( this.reserved, "reserved"); 

		for (int i=0; i<num_entries; i++)
		{
			boxSize += stream.WriteUInt8( this.entry_type[i], "entry_type"); 

			if (entry_type[i] == 0)
			{
				boxSize += stream.WriteUInt32( this.track_id[i], "track_id"); 
			}

			else if (entry_type[i] == 1)
			{
				boxSize += stream.WriteUInt32( this.track_id[i], "track_id"); 
				boxSize += stream.WriteUInt16( this.tier_id[i], "tier_id"); 
			}

			else if (entry_type[i] == 2)
			{
				boxSize += stream.WriteBits(6,  this.reserved1[i], "reserved1"); 
				boxSize += stream.WriteBits(10,  this.output_view_id[i], "output_view_id"); 
			}

			else if (entry_type[i] == 3)
			{
				boxSize += stream.WriteBits(6,  this.reserved2[i], "reserved2"); 
				boxSize += stream.WriteBits(10,  this.start_view_id[i], "start_view_id"); 
				boxSize += stream.WriteUInt16( this.view_count[i], "view_count"); 
			}
		}
		// boxSize += stream.WriteBox( this.subset_stream_info, "subset_stream_info"); // optional
		// boxSize += stream.WriteBox( this.relation_attributes, "relation_attributes"); // optional
		// boxSize += stream.WriteBox( this.subset_stream_bit_rate, "subset_stream_bit_rate"); // optional
		// boxSize += stream.WriteBox( this.subset_stream_buffering, "subset_stream_buffering"); // optional
		// boxSize += stream.WriteBox( this.multiview_scene_info, "multiview_scene_info"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // multiview_group_id
		boxSize += 16; // num_entries
		boxSize += 8; // reserved

		for (int i=0; i<num_entries; i++)
		{
			boxSize += 8; // entry_type

			if (entry_type[i] == 0)
			{
				boxSize += 32; // track_id
			}

			else if (entry_type[i] == 1)
			{
				boxSize += 32; // track_id
				boxSize += 16; // tier_id
			}

			else if (entry_type[i] == 2)
			{
				boxSize += 6; // reserved1
				boxSize += 10; // output_view_id
			}

			else if (entry_type[i] == 3)
			{
				boxSize += 6; // reserved2
				boxSize += 10; // start_view_id
				boxSize += 16; // view_count
			}
		}
		// boxSize += IsoStream.CalculateBoxSize(subset_stream_info); // subset_stream_info
		// boxSize += IsoStream.CalculateBoxSize(relation_attributes); // relation_attributes
		// boxSize += IsoStream.CalculateBoxSize(subset_stream_bit_rate); // subset_stream_bit_rate
		// boxSize += IsoStream.CalculateBoxSize(subset_stream_buffering); // subset_stream_buffering
		// boxSize += IsoStream.CalculateBoxSize(multiview_scene_info); // multiview_scene_info
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class MultiviewInformationBox
	extends FullBox('mvci', version = 0, flags) {
}
*/
public partial class MultiviewInformationBox : FullBox
{
	public const string TYPE = "mvci";
	public override string DisplayName { get { return "MultiviewInformationBox"; } }

	public MultiviewInformationBox(uint flags = 0): base(IsoStream.FromFourCC("mvci"), 0, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class MVDDepthResolutionBox extends Box('3dpr')
{
	unsigned int(16) depth_width;
	unsigned int(16) depth_height;
/* The following 5 fields are collectively optional; they are either all present or all absent. When grid_pos_num_views is not present, the for loop is not present, equivalent to grid_pos_num_views equal to 0. These fields may be present or absent whenever the box is present (e.g., in MVCDConfigurationBox or A3DConfigurationBox). *//*
	unsigned int(16) depth_hor_mult_minus1; // optional
	unsigned int(16) depth_ver_mult_minus1; // optional
	unsigned int(4) depth_hor_rsh; // optional
	unsigned int(4) depth_ver_rsh; // optional
	unsigned int(16) grid_pos_num_views; // optional
	for(i = 0; i < grid_pos_num_views; i++) {
		bit(6) reserved=0;
		unsigned int(10) grid_pos_view_id[i];
		signed int(16) grid_pos_x[grid_pos_view_id[i]];
		signed int(16) grid_pos_y[grid_pos_view_id[i]];
	}
}
*/
public partial class MVDDepthResolutionBox : Box
{
	public const string TYPE = "3dpr";
	public override string DisplayName { get { return "MVDDepthResolutionBox"; } }

	protected ushort depth_width; 
	public ushort DepthWidth { get { return this.depth_width; } set { this.depth_width = value; } }

	protected ushort depth_height; 
	public ushort DepthHeight { get { return this.depth_height; } set { this.depth_height = value; } }

	protected ushort depth_hor_mult_minus1;  //  optional
	public ushort DepthHorMultMinus1 { get { return this.depth_hor_mult_minus1; } set { this.depth_hor_mult_minus1 = value; } }

	protected ushort depth_ver_mult_minus1;  //  optional
	public ushort DepthVerMultMinus1 { get { return this.depth_ver_mult_minus1; } set { this.depth_ver_mult_minus1 = value; } }

	protected byte depth_hor_rsh;  //  optional
	public byte DepthHorRsh { get { return this.depth_hor_rsh; } set { this.depth_hor_rsh = value; } }

	protected byte depth_ver_rsh;  //  optional
	public byte DepthVerRsh { get { return this.depth_ver_rsh; } set { this.depth_ver_rsh = value; } }

	protected ushort grid_pos_num_views;  //  optional
	public ushort GridPosNumViews { get { return this.grid_pos_num_views; } set { this.grid_pos_num_views = value; } }

	protected byte[] reserved; 
	public byte[] Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected ushort[] grid_pos_view_id; 
	public ushort[] GridPosViewId { get { return this.grid_pos_view_id; } set { this.grid_pos_view_id = value; } }

	protected short[] grid_pos_x; 
	public short[] GridPosx { get { return this.grid_pos_x; } set { this.grid_pos_x = value; } }

	protected short[] grid_pos_y; 
	public short[] GridPosy { get { return this.grid_pos_y; } set { this.grid_pos_y = value; } }

	public MVDDepthResolutionBox(): base(IsoStream.FromFourCC("3dpr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.depth_width, "depth_width"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.depth_height, "depth_height"); 
		/*  The following 5 fields are collectively optional; they are either all present or all absent. When grid_pos_num_views is not present, the for loop is not present, equivalent to grid_pos_num_views equal to 0. These fields may be present or absent whenever the box is present (e.g., in MVCDConfigurationBox or A3DConfigurationBox).  */
		if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadUInt16(boxSize, readSize,  out this.depth_hor_mult_minus1, "depth_hor_mult_minus1"); // optional
		if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadUInt16(boxSize, readSize,  out this.depth_ver_mult_minus1, "depth_ver_mult_minus1"); // optional
		if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.depth_hor_rsh, "depth_hor_rsh"); // optional
		if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.depth_ver_rsh, "depth_ver_rsh"); // optional
		if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadUInt16(boxSize, readSize,  out this.grid_pos_num_views, "grid_pos_num_views"); // optional

		this.reserved = new byte[IsoStream.GetInt( grid_pos_num_views)];
		this.grid_pos_view_id = new ushort[IsoStream.GetInt( grid_pos_num_views)];
		this.grid_pos_x = new short[IsoStream.GetInt( grid_pos_num_views)];
		this.grid_pos_y = new short[IsoStream.GetInt( grid_pos_num_views)];
		for (int i = 0; i < grid_pos_num_views; i++)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved[i], "reserved"); 
			boxSize += stream.ReadBits(boxSize, readSize, 10,  out this.grid_pos_view_id[i], "grid_pos_view_id"); 
			boxSize += stream.ReadInt16(boxSize, readSize,  out this.grid_pos_x[grid_pos_view_id[i]], "grid_pos_x"); 
			boxSize += stream.ReadInt16(boxSize, readSize,  out this.grid_pos_y[grid_pos_view_id[i]], "grid_pos_y"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.depth_width, "depth_width"); 
		boxSize += stream.WriteUInt16( this.depth_height, "depth_height"); 
		/*  The following 5 fields are collectively optional; they are either all present or all absent. When grid_pos_num_views is not present, the for loop is not present, equivalent to grid_pos_num_views equal to 0. These fields may be present or absent whenever the box is present (e.g., in MVCDConfigurationBox or A3DConfigurationBox).  */
		boxSize += stream.WriteUInt16( this.depth_hor_mult_minus1, "depth_hor_mult_minus1"); // optional
		boxSize += stream.WriteUInt16( this.depth_ver_mult_minus1, "depth_ver_mult_minus1"); // optional
		boxSize += stream.WriteBits(4,  this.depth_hor_rsh, "depth_hor_rsh"); // optional
		boxSize += stream.WriteBits(4,  this.depth_ver_rsh, "depth_ver_rsh"); // optional
		boxSize += stream.WriteUInt16( this.grid_pos_num_views, "grid_pos_num_views"); // optional

		for (int i = 0; i < grid_pos_num_views; i++)
		{
			boxSize += stream.WriteBits(6,  this.reserved[i], "reserved"); 
			boxSize += stream.WriteBits(10,  this.grid_pos_view_id[i], "grid_pos_view_id"); 
			boxSize += stream.WriteInt16( this.grid_pos_x[grid_pos_view_id[i]], "grid_pos_x"); 
			boxSize += stream.WriteInt16( this.grid_pos_y[grid_pos_view_id[i]], "grid_pos_y"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // depth_width
		boxSize += 16; // depth_height
		/*  The following 5 fields are collectively optional; they are either all present or all absent. When grid_pos_num_views is not present, the for loop is not present, equivalent to grid_pos_num_views equal to 0. These fields may be present or absent whenever the box is present (e.g., in MVCDConfigurationBox or A3DConfigurationBox).  */
		boxSize += 16; // depth_hor_mult_minus1
		boxSize += 16; // depth_ver_mult_minus1
		boxSize += 4; // depth_hor_rsh
		boxSize += 4; // depth_ver_rsh
		boxSize += 16; // grid_pos_num_views

		for (int i = 0; i < grid_pos_num_views; i++)
		{
			boxSize += 6; // reserved
			boxSize += 10; // grid_pos_view_id
			boxSize += 16; // grid_pos_x
			boxSize += 16; // grid_pos_y
		}
		return boxSize;
	}
}


/*
aligned(8) class MultiviewRelationAttributeBox
	extends FullBox('mvra', version = 0, flags) {
	bit(16) reserved1 = 0;
	unsigned int(16) num_common_attributes;
	for (i=0; i<num_common_attributes; i++) {
		unsigned int(32) common_attribute; 
		unsigned int(32) common_value;
	}
	bit(16) reserved2 = 0;
	unsigned int(16) num_differentiating_attributes;
	for (i=0; i<num_differentiating_attributes; i++)
		unsigned int(32) differentiating_attribute;
}
*/
public partial class MultiviewRelationAttributeBox : FullBox
{
	public const string TYPE = "mvra";
	public override string DisplayName { get { return "MultiviewRelationAttributeBox"; } }

	protected ushort reserved1 = 0; 
	public ushort Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected ushort num_common_attributes; 
	public ushort NumCommonAttributes { get { return this.num_common_attributes; } set { this.num_common_attributes = value; } }

	protected uint[] common_attribute; 
	public uint[] CommonAttribute { get { return this.common_attribute; } set { this.common_attribute = value; } }

	protected uint[] common_value; 
	public uint[] CommonValue { get { return this.common_value; } set { this.common_value = value; } }

	protected ushort reserved2 = 0; 
	public ushort Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

	protected ushort num_differentiating_attributes; 
	public ushort NumDifferentiatingAttributes { get { return this.num_differentiating_attributes; } set { this.num_differentiating_attributes = value; } }

	protected uint[] differentiating_attribute; 
	public uint[] DifferentiatingAttribute { get { return this.differentiating_attribute; } set { this.differentiating_attribute = value; } }

	public MultiviewRelationAttributeBox(uint flags = 0): base(IsoStream.FromFourCC("mvra"), 0, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.reserved1, "reserved1"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.num_common_attributes, "num_common_attributes"); 

		this.common_attribute = new uint[IsoStream.GetInt(num_common_attributes)];
		this.common_value = new uint[IsoStream.GetInt(num_common_attributes)];
		for (int i=0; i<num_common_attributes; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.common_attribute[i], "common_attribute"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.common_value[i], "common_value"); 
		}
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.reserved2, "reserved2"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.num_differentiating_attributes, "num_differentiating_attributes"); 

		this.differentiating_attribute = new uint[IsoStream.GetInt(num_differentiating_attributes)];
		for (int i=0; i<num_differentiating_attributes; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.differentiating_attribute[i], "differentiating_attribute"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.reserved1, "reserved1"); 
		boxSize += stream.WriteUInt16( this.num_common_attributes, "num_common_attributes"); 

		for (int i=0; i<num_common_attributes; i++)
		{
			boxSize += stream.WriteUInt32( this.common_attribute[i], "common_attribute"); 
			boxSize += stream.WriteUInt32( this.common_value[i], "common_value"); 
		}
		boxSize += stream.WriteUInt16( this.reserved2, "reserved2"); 
		boxSize += stream.WriteUInt16( this.num_differentiating_attributes, "num_differentiating_attributes"); 

		for (int i=0; i<num_differentiating_attributes; i++)
		{
			boxSize += stream.WriteUInt32( this.differentiating_attribute[i], "differentiating_attribute"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // reserved1
		boxSize += 16; // num_common_attributes

		for (int i=0; i<num_common_attributes; i++)
		{
			boxSize += 32; // common_attribute
			boxSize += 32; // common_value
		}
		boxSize += 16; // reserved2
		boxSize += 16; // num_differentiating_attributes

		for (int i=0; i<num_differentiating_attributes; i++)
		{
			boxSize += 32; // differentiating_attribute
		}
		return boxSize;
	}
}


/*
aligned(8) class SampleDependencyBox 
	extends FullBox('sdep', version = 0, 0) {
	for (i=0; i < sample_count; i++){
		unsigned int(16) dependency_count;
		for (k=0; k < dependency_count; k++) {
			signed int(16) relative_sample_number;
		}
	}
}
*/
public partial class SampleDependencyBox : FullBox
{
	public const string TYPE = "sdep";
	public override string DisplayName { get { return "SampleDependencyBox"; } }

	protected ushort[] dependency_count; 
	public ushort[] DependencyCount { get { return this.dependency_count; } set { this.dependency_count = value; } }

	protected short[][] relative_sample_number; 
	public short[][] RelativeSampleNumber { get { return this.relative_sample_number; } set { this.relative_sample_number = value; } }

	public SampleDependencyBox(): base(IsoStream.FromFourCC("sdep"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		int sample_count = 0; // TODO: taken from the stsz sample_count


		this.dependency_count = new ushort[IsoStream.GetInt( sample_count)];
		this.relative_sample_number = new short[IsoStream.GetInt( sample_count)][];
		for (int i=0; i < sample_count; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.dependency_count[i], "dependency_count"); 

			this.relative_sample_number[i] = new short[IsoStream.GetInt( dependency_count[i])];
			for (int k=0; k < dependency_count[i]; k++)
			{
				boxSize += stream.ReadInt16(boxSize, readSize,  out this.relative_sample_number[i][k], "relative_sample_number"); 
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		int sample_count = 0; // TODO: taken from the stsz sample_count


		for (int i=0; i < sample_count; i++)
		{
			boxSize += stream.WriteUInt16( this.dependency_count[i], "dependency_count"); 

			for (int k=0; k < dependency_count[i]; k++)
			{
				boxSize += stream.WriteInt16( this.relative_sample_number[i][k], "relative_sample_number"); 
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		int sample_count = 0; // TODO: taken from the stsz sample_count


		for (int i=0; i < sample_count; i++)
		{
			boxSize += 16; // dependency_count

			for (int k=0; k < dependency_count[i]; k++)
			{
				boxSize += 16; // relative_sample_number
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class SeiInformationBox extends Box('seii') {
	unsigned int(16) numRequiredSEIs;
	for (i = 0; i < numRequiredSEIs; i++) {
	unsigned int(16) requiredSEI_ID;
	}
	unsigned int(16) numNotRequiredSEIs;
	for (i = 0; i < numNotRequiredSEIs; i++) {
	unsigned int(16) notrequiredSEI_ID;
	}
}
*/
public partial class SeiInformationBox : Box
{
	public const string TYPE = "seii";
	public override string DisplayName { get { return "SeiInformationBox"; } }

	protected ushort numRequiredSEIs; 
	public ushort NumRequiredSEIs { get { return this.numRequiredSEIs; } set { this.numRequiredSEIs = value; } }

	protected ushort[] requiredSEI_ID; 
	public ushort[] RequiredSEIID { get { return this.requiredSEI_ID; } set { this.requiredSEI_ID = value; } }

	protected ushort numNotRequiredSEIs; 
	public ushort NumNotRequiredSEIs { get { return this.numNotRequiredSEIs; } set { this.numNotRequiredSEIs = value; } }

	protected ushort[] notrequiredSEI_ID; 
	public ushort[] NotrequiredSEIID { get { return this.notrequiredSEI_ID; } set { this.notrequiredSEI_ID = value; } }

	public SeiInformationBox(): base(IsoStream.FromFourCC("seii"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.numRequiredSEIs, "numRequiredSEIs"); 

		this.requiredSEI_ID = new ushort[IsoStream.GetInt( numRequiredSEIs)];
		for (int i = 0; i < numRequiredSEIs; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.requiredSEI_ID[i], "requiredSEI_ID"); 
		}
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.numNotRequiredSEIs, "numNotRequiredSEIs"); 

		this.notrequiredSEI_ID = new ushort[IsoStream.GetInt( numNotRequiredSEIs)];
		for (int i = 0; i < numNotRequiredSEIs; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.notrequiredSEI_ID[i], "notrequiredSEI_ID"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.numRequiredSEIs, "numRequiredSEIs"); 

		for (int i = 0; i < numRequiredSEIs; i++)
		{
			boxSize += stream.WriteUInt16( this.requiredSEI_ID[i], "requiredSEI_ID"); 
		}
		boxSize += stream.WriteUInt16( this.numNotRequiredSEIs, "numNotRequiredSEIs"); 

		for (int i = 0; i < numNotRequiredSEIs; i++)
		{
			boxSize += stream.WriteUInt16( this.notrequiredSEI_ID[i], "notrequiredSEI_ID"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // numRequiredSEIs

		for (int i = 0; i < numRequiredSEIs; i++)
		{
			boxSize += 16; // requiredSEI_ID
		}
		boxSize += 16; // numNotRequiredSEIs

		for (int i = 0; i < numNotRequiredSEIs; i++)
		{
			boxSize += 16; // notrequiredSEI_ID
		}
		return boxSize;
	}
}


/*
aligned(8) class SVCSubTrackLayerBox
	extends FullBox('sstl', 0, 0) {
	unsigned int(16) item_count;
	for(i = 0; i< item_count; i++) {
		unsigned int(3)	dependency_id;
		unsigned int(4)	quality_id;
		unsigned int(3)	temporal_id;
		unsigned int(6)	priority_id;
		unsigned int(2)	dependency_id_range;
		unsigned int(2) 	quality_id_range;
		unsigned int(2)	temporal_id_range;
		unsigned int(2)	priority_id_range;
	}
}
*/
public partial class SVCSubTrackLayerBox : FullBox
{
	public const string TYPE = "sstl";
	public override string DisplayName { get { return "SVCSubTrackLayerBox"; } }

	protected ushort item_count; 
	public ushort ItemCount { get { return this.item_count; } set { this.item_count = value; } }

	protected byte[] dependency_id; 
	public byte[] DependencyId { get { return this.dependency_id; } set { this.dependency_id = value; } }

	protected byte[] quality_id; 
	public byte[] QualityId { get { return this.quality_id; } set { this.quality_id = value; } }

	protected byte[] temporal_id; 
	public byte[] TemporalId { get { return this.temporal_id; } set { this.temporal_id = value; } }

	protected byte[] priority_id; 
	public byte[] PriorityId { get { return this.priority_id; } set { this.priority_id = value; } }

	protected byte[] dependency_id_range; 
	public byte[] DependencyIdRange { get { return this.dependency_id_range; } set { this.dependency_id_range = value; } }

	protected byte[] quality_id_range; 
	public byte[] QualityIdRange { get { return this.quality_id_range; } set { this.quality_id_range = value; } }

	protected byte[] temporal_id_range; 
	public byte[] TemporalIdRange { get { return this.temporal_id_range; } set { this.temporal_id_range = value; } }

	protected byte[] priority_id_range; 
	public byte[] PriorityIdRange { get { return this.priority_id_range; } set { this.priority_id_range = value; } }

	public SVCSubTrackLayerBox(): base(IsoStream.FromFourCC("sstl"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.item_count, "item_count"); 

		this.dependency_id = new byte[IsoStream.GetInt( item_count)];
		this.quality_id = new byte[IsoStream.GetInt( item_count)];
		this.temporal_id = new byte[IsoStream.GetInt( item_count)];
		this.priority_id = new byte[IsoStream.GetInt( item_count)];
		this.dependency_id_range = new byte[IsoStream.GetInt( item_count)];
		this.quality_id_range = new byte[IsoStream.GetInt( item_count)];
		this.temporal_id_range = new byte[IsoStream.GetInt( item_count)];
		this.priority_id_range = new byte[IsoStream.GetInt( item_count)];
		for (int i = 0; i< item_count; i++)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.dependency_id[i], "dependency_id"); 
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.quality_id[i], "quality_id"); 
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.temporal_id[i], "temporal_id"); 
			boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.priority_id[i], "priority_id"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.dependency_id_range[i], "dependency_id_range"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.quality_id_range[i], "quality_id_range"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.temporal_id_range[i], "temporal_id_range"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.priority_id_range[i], "priority_id_range"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.item_count, "item_count"); 

		for (int i = 0; i< item_count; i++)
		{
			boxSize += stream.WriteBits(3,  this.dependency_id[i], "dependency_id"); 
			boxSize += stream.WriteBits(4,  this.quality_id[i], "quality_id"); 
			boxSize += stream.WriteBits(3,  this.temporal_id[i], "temporal_id"); 
			boxSize += stream.WriteBits(6,  this.priority_id[i], "priority_id"); 
			boxSize += stream.WriteBits(2,  this.dependency_id_range[i], "dependency_id_range"); 
			boxSize += stream.WriteBits(2,  this.quality_id_range[i], "quality_id_range"); 
			boxSize += stream.WriteBits(2,  this.temporal_id_range[i], "temporal_id_range"); 
			boxSize += stream.WriteBits(2,  this.priority_id_range[i], "priority_id_range"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // item_count

		for (int i = 0; i< item_count; i++)
		{
			boxSize += 3; // dependency_id
			boxSize += 4; // quality_id
			boxSize += 3; // temporal_id
			boxSize += 6; // priority_id
			boxSize += 2; // dependency_id_range
			boxSize += 2; // quality_id_range
			boxSize += 2; // temporal_id_range
			boxSize += 2; // priority_id_range
		}
		return boxSize;
	}
}


/*
aligned(8) class MVCSubTrackMultiviewGroupBox
	extends FullBox('stmg', 0, 0) {
	unsigned int(16) item_count;
	for(i = 0; i< item_count; i++) {
		unsigned int(32)	MultiviewGroupId;
	}
}
*/
public partial class MVCSubTrackMultiviewGroupBox : FullBox
{
	public const string TYPE = "stmg";
	public override string DisplayName { get { return "MVCSubTrackMultiviewGroupBox"; } }

	protected ushort item_count; 
	public ushort ItemCount { get { return this.item_count; } set { this.item_count = value; } }

	protected uint[] MultiviewGroupId; 
	public uint[] _MultiviewGroupId { get { return this.MultiviewGroupId; } set { this.MultiviewGroupId = value; } }

	public MVCSubTrackMultiviewGroupBox(): base(IsoStream.FromFourCC("stmg"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.item_count, "item_count"); 

		this.MultiviewGroupId = new uint[IsoStream.GetInt( item_count)];
		for (int i = 0; i< item_count; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.MultiviewGroupId[i], "MultiviewGroupId"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.item_count, "item_count"); 

		for (int i = 0; i< item_count; i++)
		{
			boxSize += stream.WriteUInt32( this.MultiviewGroupId[i], "MultiviewGroupId"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // item_count

		for (int i = 0; i< item_count; i++)
		{
			boxSize += 32; // MultiviewGroupId
		}
		return boxSize;
	}
}


/*
aligned(8) class SubTrackTierBox
	extends FullBox('stti', 0, 0) {
	unsigned int(16) item_count;
	for(i = 0; i< item_count; i++) {
		unsigned int(16)	tierID;
	}
}
*/
public partial class SubTrackTierBox : FullBox
{
	public const string TYPE = "stti";
	public override string DisplayName { get { return "SubTrackTierBox"; } }

	protected ushort item_count; 
	public ushort ItemCount { get { return this.item_count; } set { this.item_count = value; } }

	protected ushort[] tierID; 
	public ushort[] TierID { get { return this.tierID; } set { this.tierID = value; } }

	public SubTrackTierBox(): base(IsoStream.FromFourCC("stti"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.item_count, "item_count"); 

		this.tierID = new ushort[IsoStream.GetInt( item_count)];
		for (int i = 0; i< item_count; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.tierID[i], "tierID"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.item_count, "item_count"); 

		for (int i = 0; i< item_count; i++)
		{
			boxSize += stream.WriteUInt16( this.tierID[i], "tierID"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // item_count

		for (int i = 0; i< item_count; i++)
		{
			boxSize += 16; // tierID
		}
		return boxSize;
	}
}


/*
aligned(8) class MultiviewGroupRelationBox() extends FullBox('swtc', version = 0, flags) {
	unsigned int(32) num_entries;
	for (i=0; i<num_entries; i++)
		unsigned int(32) multiview_group_id;
	MultiviewRelationAttributeBox relation_attributes;
}
*/
public partial class MultiviewGroupRelationBox : FullBox
{
	public const string TYPE = "swtc";
	public override string DisplayName { get { return "MultiviewGroupRelationBox"; } }

	protected uint num_entries; 
	public uint NumEntries { get { return this.num_entries; } set { this.num_entries = value; } }

	protected uint[] multiview_group_id; 
	public uint[] MultiviewGroupId { get { return this.multiview_group_id; } set { this.multiview_group_id = value; } }
	public MultiviewRelationAttributeBox RelationAttributes { get { return this.children.OfType<MultiviewRelationAttributeBox>().FirstOrDefault(); } }

	public MultiviewGroupRelationBox(uint flags = 0): base(IsoStream.FromFourCC("swtc"), 0, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.num_entries, "num_entries"); 

		this.multiview_group_id = new uint[IsoStream.GetInt(num_entries)];
		for (int i=0; i<num_entries; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.multiview_group_id[i], "multiview_group_id"); 
		}
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.relation_attributes, "relation_attributes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.num_entries, "num_entries"); 

		for (int i=0; i<num_entries; i++)
		{
			boxSize += stream.WriteUInt32( this.multiview_group_id[i], "multiview_group_id"); 
		}
		// boxSize += stream.WriteBox( this.relation_attributes, "relation_attributes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // num_entries

		for (int i=0; i<num_entries; i++)
		{
			boxSize += 32; // multiview_group_id
		}
		// boxSize += IsoStream.CalculateBoxSize(relation_attributes); // relation_attributes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class TierBitRateBox extends Box('tibr'){ 
	unsigned int(32) baseBitRate;
	unsigned int(32) maxBitRate;
	unsigned int(32) avgBitRate;

	unsigned int(32) tierBaseBitRate;
	unsigned int(32) tierMaxBitRate;
	unsigned int(32) tierAvgBitRate;
}
*/
public partial class TierBitRateBox : Box
{
	public const string TYPE = "tibr";
	public override string DisplayName { get { return "TierBitRateBox"; } }

	protected uint baseBitRate; 
	public uint BaseBitRate { get { return this.baseBitRate; } set { this.baseBitRate = value; } }

	protected uint maxBitRate; 
	public uint MaxBitRate { get { return this.maxBitRate; } set { this.maxBitRate = value; } }

	protected uint avgBitRate; 
	public uint AvgBitRate { get { return this.avgBitRate; } set { this.avgBitRate = value; } }

	protected uint tierBaseBitRate; 
	public uint TierBaseBitRate { get { return this.tierBaseBitRate; } set { this.tierBaseBitRate = value; } }

	protected uint tierMaxBitRate; 
	public uint TierMaxBitRate { get { return this.tierMaxBitRate; } set { this.tierMaxBitRate = value; } }

	protected uint tierAvgBitRate; 
	public uint TierAvgBitRate { get { return this.tierAvgBitRate; } set { this.tierAvgBitRate = value; } }

	public TierBitRateBox(): base(IsoStream.FromFourCC("tibr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.baseBitRate, "baseBitRate"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.maxBitRate, "maxBitRate"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.avgBitRate, "avgBitRate"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.tierBaseBitRate, "tierBaseBitRate"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.tierMaxBitRate, "tierMaxBitRate"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.tierAvgBitRate, "tierAvgBitRate"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.baseBitRate, "baseBitRate"); 
		boxSize += stream.WriteUInt32( this.maxBitRate, "maxBitRate"); 
		boxSize += stream.WriteUInt32( this.avgBitRate, "avgBitRate"); 
		boxSize += stream.WriteUInt32( this.tierBaseBitRate, "tierBaseBitRate"); 
		boxSize += stream.WriteUInt32( this.tierMaxBitRate, "tierMaxBitRate"); 
		boxSize += stream.WriteUInt32( this.tierAvgBitRate, "tierAvgBitRate"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // baseBitRate
		boxSize += 32; // maxBitRate
		boxSize += 32; // avgBitRate
		boxSize += 32; // tierBaseBitRate
		boxSize += 32; // tierMaxBitRate
		boxSize += 32; // tierAvgBitRate
		return boxSize;
	}
}


/*
class TierInfoBox extends Box('tiri'){ //Mandatory Box
	unsigned int(16) tierID;
	unsigned int(8) profileIndication;
	unsigned int(8) profile_compatibility;
	unsigned int(8) levelIndication;
	bit(8) reserved = 0;

	unsigned int(16) visualWidth;
	unsigned int(16) visualHeight;

	unsigned int(2) discardable;
	unsigned int(2) constantFrameRate;
	bit(4) reserved = 0;
	unsigned int(16) frameRate;
}
*/
public partial class TierInfoBox : Box
{
	public const string TYPE = "tiri";
	public override string DisplayName { get { return "TierInfoBox"; } }

	protected ushort tierID; 
	public ushort TierID { get { return this.tierID; } set { this.tierID = value; } }

	protected byte profileIndication; 
	public byte ProfileIndication { get { return this.profileIndication; } set { this.profileIndication = value; } }

	protected byte profile_compatibility; 
	public byte ProfileCompatibility { get { return this.profile_compatibility; } set { this.profile_compatibility = value; } }

	protected byte levelIndication; 
	public byte LevelIndication { get { return this.levelIndication; } set { this.levelIndication = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected ushort visualWidth; 
	public ushort VisualWidth { get { return this.visualWidth; } set { this.visualWidth = value; } }

	protected ushort visualHeight; 
	public ushort VisualHeight { get { return this.visualHeight; } set { this.visualHeight = value; } }

	protected byte discardable; 
	public byte Discardable { get { return this.discardable; } set { this.discardable = value; } }

	protected byte constantFrameRate; 
	public byte ConstantFrameRate { get { return this.constantFrameRate; } set { this.constantFrameRate = value; } }

	protected byte reserved0 = 0; 
	public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected ushort frameRate; 
	public ushort FrameRate { get { return this.frameRate; } set { this.frameRate = value; } }

	public TierInfoBox(): base(IsoStream.FromFourCC("tiri"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		/* Mandatory Box */
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.tierID, "tierID"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.profileIndication, "profileIndication"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.profile_compatibility, "profile_compatibility"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.levelIndication, "levelIndication"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.visualWidth, "visualWidth"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.visualHeight, "visualHeight"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.discardable, "discardable"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.constantFrameRate, "constantFrameRate"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.reserved0, "reserved0"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.frameRate, "frameRate"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		/* Mandatory Box */
		boxSize += stream.WriteUInt16( this.tierID, "tierID"); 
		boxSize += stream.WriteUInt8( this.profileIndication, "profileIndication"); 
		boxSize += stream.WriteUInt8( this.profile_compatibility, "profile_compatibility"); 
		boxSize += stream.WriteUInt8( this.levelIndication, "levelIndication"); 
		boxSize += stream.WriteUInt8( this.reserved, "reserved"); 
		boxSize += stream.WriteUInt16( this.visualWidth, "visualWidth"); 
		boxSize += stream.WriteUInt16( this.visualHeight, "visualHeight"); 
		boxSize += stream.WriteBits(2,  this.discardable, "discardable"); 
		boxSize += stream.WriteBits(2,  this.constantFrameRate, "constantFrameRate"); 
		boxSize += stream.WriteBits(4,  this.reserved0, "reserved0"); 
		boxSize += stream.WriteUInt16( this.frameRate, "frameRate"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		/* Mandatory Box */
		boxSize += 16; // tierID
		boxSize += 8; // profileIndication
		boxSize += 8; // profile_compatibility
		boxSize += 8; // levelIndication
		boxSize += 8; // reserved
		boxSize += 16; // visualWidth
		boxSize += 16; // visualHeight
		boxSize += 2; // discardable
		boxSize += 2; // constantFrameRate
		boxSize += 4; // reserved0
		boxSize += 16; // frameRate
		return boxSize;
	}
}


/*
aligned(8) class TileSubTrackGroupBox extends FullBox('tstb', 0, 0) {
	unsigned int(16) item_count;
	for(i = 0; i< item_count; i++) {
		unsigned int(16) tileGroupID;
	}
}
*/
public partial class TileSubTrackGroupBox : FullBox
{
	public const string TYPE = "tstb";
	public override string DisplayName { get { return "TileSubTrackGroupBox"; } }

	protected ushort item_count; 
	public ushort ItemCount { get { return this.item_count; } set { this.item_count = value; } }

	protected ushort[] tileGroupID; 
	public ushort[] TileGroupID { get { return this.tileGroupID; } set { this.tileGroupID = value; } }

	public TileSubTrackGroupBox(): base(IsoStream.FromFourCC("tstb"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.item_count, "item_count"); 

		this.tileGroupID = new ushort[IsoStream.GetInt( item_count)];
		for (int i = 0; i< item_count; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.tileGroupID[i], "tileGroupID"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.item_count, "item_count"); 

		for (int i = 0; i< item_count; i++)
		{
			boxSize += stream.WriteUInt16( this.tileGroupID[i], "tileGroupID"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // item_count

		for (int i = 0; i< item_count; i++)
		{
			boxSize += 16; // tileGroupID
		}
		return boxSize;
	}
}


/*
class MultiviewSceneInfoBox extends Box ('vwdi') 
{
	unsigned int(8) 	max_disparity;
}
*/
public partial class MultiviewSceneInfoBox : Box
{
	public const string TYPE = "vwdi";
	public override string DisplayName { get { return "MultiviewSceneInfoBox"; } }

	protected byte max_disparity; 
	public byte MaxDisparity { get { return this.max_disparity; } set { this.max_disparity = value; } }

	public MultiviewSceneInfoBox(): base(IsoStream.FromFourCC("vwdi"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.max_disparity, "max_disparity"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.max_disparity, "max_disparity"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // max_disparity
		return boxSize;
	}
}


/*
class MVCDConfigurationBox extends Box('mvdC') {
	MVDDecoderConfigurationRecord MVDConfig;
	MVDDepthResolutionBox mvdDepthRes;	//Optional
}
*/
public partial class MVCDConfigurationBox : Box
{
	public const string TYPE = "mvdC";
	public override string DisplayName { get { return "MVCDConfigurationBox"; } }

	protected MVDDecoderConfigurationRecord MVDConfig; 
	public MVDDecoderConfigurationRecord _MVDConfig { get { return this.MVDConfig; } set { this.MVDConfig = value; } }
	public MVDDepthResolutionBox MvdDepthRes { get { return this.children.OfType<MVDDepthResolutionBox>().FirstOrDefault(); } }

	public MVCDConfigurationBox(): base(IsoStream.FromFourCC("mvdC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new MVDDecoderConfigurationRecord(),  out this.MVDConfig, "MVDConfig"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvdDepthRes, "mvdDepthRes"); //Optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.MVDConfig, "MVDConfig"); 
		// boxSize += stream.WriteBox( this.mvdDepthRes, "mvdDepthRes"); //Optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(MVDConfig); // MVDConfig
		// boxSize += IsoStream.CalculateBoxSize(mvdDepthRes); // mvdDepthRes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class A3DConfigurationBox extends Box('a3dC') {
	MVDDecoderConfigurationRecord MVDConfig;
	MVDDepthResolutionBox mvdDepthRes;	//Optional
}
*/
public partial class A3DConfigurationBox : Box
{
	public const string TYPE = "a3dC";
	public override string DisplayName { get { return "A3DConfigurationBox"; } }

	protected MVDDecoderConfigurationRecord MVDConfig; 
	public MVDDecoderConfigurationRecord _MVDConfig { get { return this.MVDConfig; } set { this.MVDConfig = value; } }
	public MVDDepthResolutionBox MvdDepthRes { get { return this.children.OfType<MVDDepthResolutionBox>().FirstOrDefault(); } }

	public A3DConfigurationBox(): base(IsoStream.FromFourCC("a3dC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new MVDDecoderConfigurationRecord(),  out this.MVDConfig, "MVDConfig"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvdDepthRes, "mvdDepthRes"); //Optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.MVDConfig, "MVDConfig"); 
		// boxSize += stream.WriteBox( this.mvdDepthRes, "mvdDepthRes"); //Optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(MVDConfig); // MVDConfig
		// boxSize += IsoStream.CalculateBoxSize(mvdDepthRes); // mvdDepthRes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class ViewIdentifierBox extends FullBox ('vwid', version=0, flags) 
{
	unsigned int(2) 	reserved6 = 0;
	unsigned int(3) 	min_temporal_id;
	unsigned int(3) 	max_temporal_id;
	unsigned int(16)	num_views;
	for (i=0; i<num_views; i++) {
		unsigned int(6) 	reserved1 = 0;
		unsigned int(10) 	view_id[i];
		unsigned int(6) 	reserved2 = 0;
		unsigned int(10) 	view_order_index;
		unsigned int(1)	texture_in_stream[i];
		unsigned int(1)	texture_in_track[i];
		unsigned int(1)	depth_in_stream[i];
		unsigned int(1)	depth_in_track[i];
		unsigned int(2) 	base_view_type;
		unsigned int(10) 	num_ref_views;
		for (j = 0; j < num_ref_views; j++) {
			unsigned int(4) 	reserved5 = 0;
			unsigned int(2) 	dependent_component_idc[i][j];
			unsigned int(10) 	ref_view_id[i][j];
		}
	}
}
*/
public partial class ViewIdentifierBox : FullBox
{
	public const string TYPE = "vwid";
	public override string DisplayName { get { return "ViewIdentifierBox"; } }

	protected byte reserved6 = 0; 
	public byte Reserved6 { get { return this.reserved6; } set { this.reserved6 = value; } }

	protected byte min_temporal_id; 
	public byte MinTemporalId { get { return this.min_temporal_id; } set { this.min_temporal_id = value; } }

	protected byte max_temporal_id; 
	public byte MaxTemporalId { get { return this.max_temporal_id; } set { this.max_temporal_id = value; } }

	protected ushort num_views; 
	public ushort NumViews { get { return this.num_views; } set { this.num_views = value; } }

	protected byte[] reserved1; 
	public byte[] Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected ushort[] view_id; 
	public ushort[] ViewId { get { return this.view_id; } set { this.view_id = value; } }

	protected byte[] reserved2; 
	public byte[] Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

	protected ushort[] view_order_index; 
	public ushort[] ViewOrderIndex { get { return this.view_order_index; } set { this.view_order_index = value; } }

	protected bool[] texture_in_stream; 
	public bool[] TextureInStream { get { return this.texture_in_stream; } set { this.texture_in_stream = value; } }

	protected bool[] texture_in_track; 
	public bool[] TextureInTrack { get { return this.texture_in_track; } set { this.texture_in_track = value; } }

	protected bool[] depth_in_stream; 
	public bool[] DepthInStream { get { return this.depth_in_stream; } set { this.depth_in_stream = value; } }

	protected bool[] depth_in_track; 
	public bool[] DepthInTrack { get { return this.depth_in_track; } set { this.depth_in_track = value; } }

	protected byte[] base_view_type; 
	public byte[] BaseViewType { get { return this.base_view_type; } set { this.base_view_type = value; } }

	protected ushort[] num_ref_views; 
	public ushort[] NumRefViews { get { return this.num_ref_views; } set { this.num_ref_views = value; } }

	protected byte[][] reserved5; 
	public byte[][] Reserved5 { get { return this.reserved5; } set { this.reserved5 = value; } }

	protected byte[][] dependent_component_idc; 
	public byte[][] DependentComponentIdc { get { return this.dependent_component_idc; } set { this.dependent_component_idc = value; } }

	protected ushort[][] ref_view_id; 
	public ushort[][] RefViewId { get { return this.ref_view_id; } set { this.ref_view_id = value; } }

	public ViewIdentifierBox(uint flags = 0): base(IsoStream.FromFourCC("vwid"), 0, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.reserved6, "reserved6"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.min_temporal_id, "min_temporal_id"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.max_temporal_id, "max_temporal_id"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.num_views, "num_views"); 

		this.reserved1 = new byte[IsoStream.GetInt(num_views)];
		this.view_id = new ushort[IsoStream.GetInt(num_views)];
		this.reserved2 = new byte[IsoStream.GetInt(num_views)];
		this.view_order_index = new ushort[IsoStream.GetInt(num_views)];
		this.texture_in_stream = new bool[IsoStream.GetInt(num_views)];
		this.texture_in_track = new bool[IsoStream.GetInt(num_views)];
		this.depth_in_stream = new bool[IsoStream.GetInt(num_views)];
		this.depth_in_track = new bool[IsoStream.GetInt(num_views)];
		this.base_view_type = new byte[IsoStream.GetInt(num_views)];
		this.num_ref_views = new ushort[IsoStream.GetInt(num_views)];
		this.reserved5 = new byte[IsoStream.GetInt(num_views)][];
		this.dependent_component_idc = new byte[IsoStream.GetInt(num_views)][];
		this.ref_view_id = new ushort[IsoStream.GetInt(num_views)][];
		for (int i=0; i<num_views; i++)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved1[i], "reserved1"); 
			boxSize += stream.ReadBits(boxSize, readSize, 10,  out this.view_id[i], "view_id"); 
			boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved2[i], "reserved2"); 
			boxSize += stream.ReadBits(boxSize, readSize, 10,  out this.view_order_index[i], "view_order_index"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.texture_in_stream[i], "texture_in_stream"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.texture_in_track[i], "texture_in_track"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.depth_in_stream[i], "depth_in_stream"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.depth_in_track[i], "depth_in_track"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.base_view_type[i], "base_view_type"); 
			boxSize += stream.ReadBits(boxSize, readSize, 10,  out this.num_ref_views[i], "num_ref_views"); 

			this.reserved5[i] = new byte[IsoStream.GetInt( num_ref_views[i])];
			this.dependent_component_idc[i] = new byte[IsoStream.GetInt( num_ref_views[i])];
			this.ref_view_id[i] = new ushort[IsoStream.GetInt( num_ref_views[i])];
			for (int j = 0; j < num_ref_views[i]; j++)
			{
				boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.reserved5[i][j], "reserved5"); 
				boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.dependent_component_idc[i][j], "dependent_component_idc"); 
				boxSize += stream.ReadBits(boxSize, readSize, 10,  out this.ref_view_id[i][j], "ref_view_id"); 
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(2,  this.reserved6, "reserved6"); 
		boxSize += stream.WriteBits(3,  this.min_temporal_id, "min_temporal_id"); 
		boxSize += stream.WriteBits(3,  this.max_temporal_id, "max_temporal_id"); 
		boxSize += stream.WriteUInt16( this.num_views, "num_views"); 

		for (int i=0; i<num_views; i++)
		{
			boxSize += stream.WriteBits(6,  this.reserved1[i], "reserved1"); 
			boxSize += stream.WriteBits(10,  this.view_id[i], "view_id"); 
			boxSize += stream.WriteBits(6,  this.reserved2[i], "reserved2"); 
			boxSize += stream.WriteBits(10,  this.view_order_index[i], "view_order_index"); 
			boxSize += stream.WriteBit( this.texture_in_stream[i], "texture_in_stream"); 
			boxSize += stream.WriteBit( this.texture_in_track[i], "texture_in_track"); 
			boxSize += stream.WriteBit( this.depth_in_stream[i], "depth_in_stream"); 
			boxSize += stream.WriteBit( this.depth_in_track[i], "depth_in_track"); 
			boxSize += stream.WriteBits(2,  this.base_view_type[i], "base_view_type"); 
			boxSize += stream.WriteBits(10,  this.num_ref_views[i], "num_ref_views"); 

			for (int j = 0; j < num_ref_views[i]; j++)
			{
				boxSize += stream.WriteBits(4,  this.reserved5[i][j], "reserved5"); 
				boxSize += stream.WriteBits(2,  this.dependent_component_idc[i][j], "dependent_component_idc"); 
				boxSize += stream.WriteBits(10,  this.ref_view_id[i][j], "ref_view_id"); 
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 2; // reserved6
		boxSize += 3; // min_temporal_id
		boxSize += 3; // max_temporal_id
		boxSize += 16; // num_views

		for (int i=0; i<num_views; i++)
		{
			boxSize += 6; // reserved1
			boxSize += 10; // view_id
			boxSize += 6; // reserved2
			boxSize += 10; // view_order_index
			boxSize += 1; // texture_in_stream
			boxSize += 1; // texture_in_track
			boxSize += 1; // depth_in_stream
			boxSize += 1; // depth_in_track
			boxSize += 2; // base_view_type
			boxSize += 10; // num_ref_views

			for (int j = 0; j < num_ref_views[i]; j++)
			{
				boxSize += 4; // reserved5
				boxSize += 2; // dependent_component_idc
				boxSize += 10; // ref_view_id
			}
		}
		return boxSize;
	}
}


/*
class MVCConfigurationBox extends Box('mvcC') {
	MVCDecoderConfigurationRecord() MVCConfig;
}
*/
public partial class MVCConfigurationBox : Box
{
	public const string TYPE = "mvcC";
	public override string DisplayName { get { return "MVCConfigurationBox"; } }

	protected MVCDecoderConfigurationRecord MVCConfig; 
	public MVCDecoderConfigurationRecord _MVCConfig { get { return this.MVCConfig; } set { this.MVCConfig = value; } }

	public MVCConfigurationBox(): base(IsoStream.FromFourCC("mvcC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new MVCDecoderConfigurationRecord(),  out this.MVCConfig, "MVCConfig"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.MVCConfig, "MVCConfig"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(MVCConfig); // MVCConfig
		return boxSize;
	}
}


/*
class AVCConfigurationBox extends Box('avcC') {
	AVCDecoderConfigurationRecord() AVCConfig;
}
*/
public partial class AVCConfigurationBox : Box
{
	public const string TYPE = "avcC";
	public override string DisplayName { get { return "AVCConfigurationBox"; } }

	protected AVCDecoderConfigurationRecord AVCConfig; 
	public AVCDecoderConfigurationRecord _AVCConfig { get { return this.AVCConfig; } set { this.AVCConfig = value; } }

	public AVCConfigurationBox(): base(IsoStream.FromFourCC("avcC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new AVCDecoderConfigurationRecord(),  out this.AVCConfig, "AVCConfig"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.AVCConfig, "AVCConfig"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(AVCConfig); // AVCConfig
		return boxSize;
	}
}


/*
class HEVCConfigurationBox extends Box('hvcC') {
	HEVCDecoderConfigurationRecord() HEVCConfig;
}
*/
public partial class HEVCConfigurationBox : Box
{
	public const string TYPE = "hvcC";
	public override string DisplayName { get { return "HEVCConfigurationBox"; } }

	protected HEVCDecoderConfigurationRecord HEVCConfig; 
	public HEVCDecoderConfigurationRecord _HEVCConfig { get { return this.HEVCConfig; } set { this.HEVCConfig = value; } }

	public HEVCConfigurationBox(): base(IsoStream.FromFourCC("hvcC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new HEVCDecoderConfigurationRecord(),  out this.HEVCConfig, "HEVCConfig"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.HEVCConfig, "HEVCConfig"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(HEVCConfig); // HEVCConfig
		return boxSize;
	}
}


/*
class LHEVCConfigurationBox extends Box('lhvC') {
	LHEVCDecoderConfigurationRecord() LHEVCConfig;
}
*/
public partial class LHEVCConfigurationBox : Box
{
	public const string TYPE = "lhvC";
	public override string DisplayName { get { return "LHEVCConfigurationBox"; } }

	protected LHEVCDecoderConfigurationRecord LHEVCConfig; 
	public LHEVCDecoderConfigurationRecord _LHEVCConfig { get { return this.LHEVCConfig; } set { this.LHEVCConfig = value; } }

	public LHEVCConfigurationBox(): base(IsoStream.FromFourCC("lhvC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new LHEVCDecoderConfigurationRecord(),  out this.LHEVCConfig, "LHEVCConfig"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.LHEVCConfig, "LHEVCConfig"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(LHEVCConfig); // LHEVCConfig
		return boxSize;
	}
}


/*
class MPEG4ExtensionDescriptorsBox extends Box('m4ds') {
	Descriptor Descr[0 .. 255];
}
*/
public partial class MPEG4ExtensionDescriptorsBox : Box
{
	public const string TYPE = "m4ds";
	public override string DisplayName { get { return "MPEG4ExtensionDescriptorsBox"; } }

	protected Descriptor[] Descr; 
	public Descriptor[] _Descr { get { return this.Descr; } set { this.Descr = value; } }

	public MPEG4ExtensionDescriptorsBox(): base(IsoStream.FromFourCC("m4ds"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadDescriptor(boxSize, readSize, this,  out this.Descr, "Descr"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteDescriptor( this.Descr, "Descr"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateDescriptorSize(Descr); // Descr
		return boxSize;
	}
}


/*
class SVCConfigurationBox extends Box('svcC') {
	SVCDecoderConfigurationRecord() SVCConfig;
}
*/
public partial class SVCConfigurationBox : Box
{
	public const string TYPE = "svcC";
	public override string DisplayName { get { return "SVCConfigurationBox"; } }

	protected SVCDecoderConfigurationRecord SVCConfig; 
	public SVCDecoderConfigurationRecord _SVCConfig { get { return this.SVCConfig; } set { this.SVCConfig = value; } }

	public SVCConfigurationBox(): base(IsoStream.FromFourCC("svcC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new SVCDecoderConfigurationRecord(),  out this.SVCConfig, "SVCConfig"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.SVCConfig, "SVCConfig"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(SVCConfig); // SVCConfig
		return boxSize;
	}
}


/*
class ScalabilityInformationSEIBox extends Box('seib', size)
{
	unsigned int(8*size-64)	scalinfosei; 
}
*/
public partial class ScalabilityInformationSEIBox : Box
{
	public const string TYPE = "seib";
	public override string DisplayName { get { return "ScalabilityInformationSEIBox"; } }

	protected byte[] scalinfosei; 
	public byte[] Scalinfosei { get { return this.scalinfosei; } set { this.scalinfosei = value; } }

	public ScalabilityInformationSEIBox(ulong size = 0): base(IsoStream.FromFourCC("seib"), size)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, (uint)(8*size-64 ),  out this.scalinfosei, "scalinfosei"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits((uint)(8*size-64 ),  this.scalinfosei, "scalinfosei"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += (ulong)(8*size-64 ); // scalinfosei
		return boxSize;
	}
}


/*
class SVCPriorityAssignmentBox extends Box('svcP')
{
	unsigned int(8)	method_count;
	string PriorityAssignmentURI[method_count]; 
}
*/
public partial class SVCPriorityAssignmentBox : Box
{
	public const string TYPE = "svcP";
	public override string DisplayName { get { return "SVCPriorityAssignmentBox"; } }

	protected byte method_count; 
	public byte MethodCount { get { return this.method_count; } set { this.method_count = value; } }

	protected BinaryUTF8String[] PriorityAssignmentURI; 
	public BinaryUTF8String[] _PriorityAssignmentURI { get { return this.PriorityAssignmentURI; } set { this.PriorityAssignmentURI = value; } }

	public SVCPriorityAssignmentBox(): base(IsoStream.FromFourCC("svcP"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.method_count, "method_count"); 
		boxSize += stream.ReadStringZeroTerminatedArray(boxSize, readSize, (uint)(method_count),  out this.PriorityAssignmentURI, "PriorityAssignmentURI"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.method_count, "method_count"); 
		boxSize += stream.WriteStringZeroTerminatedArray((uint)(method_count),  this.PriorityAssignmentURI, "PriorityAssignmentURI"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // method_count
		boxSize += IsoStream.CalculateStringSize(PriorityAssignmentURI); // PriorityAssignmentURI
		return boxSize;
	}
}


/*
class ViewScalabilityInformationSEIBox extends Box('vsib', size)
{
	unsigned int(8*size-64)	mvcscalinfosei; 
}
*/
public partial class ViewScalabilityInformationSEIBox : Box
{
	public const string TYPE = "vsib";
	public override string DisplayName { get { return "ViewScalabilityInformationSEIBox"; } }

	protected byte[] mvcscalinfosei; 
	public byte[] Mvcscalinfosei { get { return this.mvcscalinfosei; } set { this.mvcscalinfosei = value; } }

	public ViewScalabilityInformationSEIBox(ulong size = 0): base(IsoStream.FromFourCC("vsib"), size)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, (uint)(8*size-64 ),  out this.mvcscalinfosei, "mvcscalinfosei"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits((uint)(8*size-64 ),  this.mvcscalinfosei, "mvcscalinfosei"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += (ulong)(8*size-64 ); // mvcscalinfosei
		return boxSize;
	}
}


/*
class MVDScalabilityInformationSEIBox extends Box('3sib', size)
{
	unsigned int(8*size-64)	mvdscalinfosei;
}
*/
public partial class MVDScalabilityInformationSEIBox : Box
{
	public const string TYPE = "3sib";
	public override string DisplayName { get { return "MVDScalabilityInformationSEIBox"; } }

	protected byte[] mvdscalinfosei; 
	public byte[] Mvdscalinfosei { get { return this.mvdscalinfosei; } set { this.mvdscalinfosei = value; } }

	public MVDScalabilityInformationSEIBox(ulong size = 0): base(IsoStream.FromFourCC("3sib"), size)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, (uint)(8*size-64 ),  out this.mvdscalinfosei, "mvdscalinfosei"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits((uint)(8*size-64 ),  this.mvdscalinfosei, "mvdscalinfosei"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += (ulong)(8*size-64 ); // mvdscalinfosei
		return boxSize;
	}
}


/*
class MVCViewPriorityAssignmentBox extends Box('mvcP')
{
	unsigned int(8)	method_count;
	string PriorityAssignmentURI[method_count]; 
}
*/
public partial class MVCViewPriorityAssignmentBox : Box
{
	public const string TYPE = "mvcP";
	public override string DisplayName { get { return "MVCViewPriorityAssignmentBox"; } }

	protected byte method_count; 
	public byte MethodCount { get { return this.method_count; } set { this.method_count = value; } }

	protected BinaryUTF8String[] PriorityAssignmentURI; 
	public BinaryUTF8String[] _PriorityAssignmentURI { get { return this.PriorityAssignmentURI; } set { this.PriorityAssignmentURI = value; } }

	public MVCViewPriorityAssignmentBox(): base(IsoStream.FromFourCC("mvcP"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.method_count, "method_count"); 
		boxSize += stream.ReadStringZeroTerminatedArray(boxSize, readSize, (uint)(method_count),  out this.PriorityAssignmentURI, "PriorityAssignmentURI"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.method_count, "method_count"); 
		boxSize += stream.WriteStringZeroTerminatedArray((uint)(method_count),  this.PriorityAssignmentURI, "PriorityAssignmentURI"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // method_count
		boxSize += IsoStream.CalculateStringSize(PriorityAssignmentURI); // PriorityAssignmentURI
		return boxSize;
	}
}


/*
class HEVCTileConfigurationBox extends Box('hvtC') {
	HEVCTileTierLevelConfigurationRecord() HEVCTileTierLevelConfig;
}
*/
public partial class HEVCTileConfigurationBox : Box
{
	public const string TYPE = "hvtC";
	public override string DisplayName { get { return "HEVCTileConfigurationBox"; } }

	protected HEVCTileTierLevelConfigurationRecord HEVCTileTierLevelConfig; 
	public HEVCTileTierLevelConfigurationRecord _HEVCTileTierLevelConfig { get { return this.HEVCTileTierLevelConfig; } set { this.HEVCTileTierLevelConfig = value; } }

	public HEVCTileConfigurationBox(): base(IsoStream.FromFourCC("hvtC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new HEVCTileTierLevelConfigurationRecord(),  out this.HEVCTileTierLevelConfig, "HEVCTileTierLevelConfig"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.HEVCTileTierLevelConfig, "HEVCTileTierLevelConfig"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(HEVCTileTierLevelConfig); // HEVCTileTierLevelConfig
		return boxSize;
	}
}


/*
class EVCConfigurationBox extends Box('evcC') {
	EVCDecoderConfigurationRecord() EVCConfig;
}
*/
public partial class EVCConfigurationBox : Box
{
	public const string TYPE = "evcC";
	public override string DisplayName { get { return "EVCConfigurationBox"; } }

	protected EVCDecoderConfigurationRecord EVCConfig; 
	public EVCDecoderConfigurationRecord _EVCConfig { get { return this.EVCConfig; } set { this.EVCConfig = value; } }

	public EVCConfigurationBox(): base(IsoStream.FromFourCC("evcC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new EVCDecoderConfigurationRecord(),  out this.EVCConfig, "EVCConfig"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.EVCConfig, "EVCConfig"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(EVCConfig); // EVCConfig
		return boxSize;
	}
}


/*
class SVCPriorityLayerInfoBox extends Box('qlif'){
	unsigned int(8) pr_layer_num;
	for(j=0; j< pr_layer_num; j++){
		unsigned int(8) pr_layer;
		unsigned int(24) profile_level_idc;
		unsigned int(32) max_bitrate;
		unsigned int(32) avg_bitrate;
	}
}
*/
public partial class SVCPriorityLayerInfoBox : Box
{
	public const string TYPE = "qlif";
	public override string DisplayName { get { return "SVCPriorityLayerInfoBox"; } }

	protected byte pr_layer_num; 
	public byte PrLayerNum { get { return this.pr_layer_num; } set { this.pr_layer_num = value; } }

	protected byte[] pr_layer; 
	public byte[] PrLayer { get { return this.pr_layer; } set { this.pr_layer = value; } }

	protected uint[] profile_level_idc; 
	public uint[] ProfileLevelIdc { get { return this.profile_level_idc; } set { this.profile_level_idc = value; } }

	protected uint[] max_bitrate; 
	public uint[] MaxBitrate { get { return this.max_bitrate; } set { this.max_bitrate = value; } }

	protected uint[] avg_bitrate; 
	public uint[] AvgBitrate { get { return this.avg_bitrate; } set { this.avg_bitrate = value; } }

	public SVCPriorityLayerInfoBox(): base(IsoStream.FromFourCC("qlif"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.pr_layer_num, "pr_layer_num"); 

		this.pr_layer = new byte[IsoStream.GetInt( pr_layer_num)];
		this.profile_level_idc = new uint[IsoStream.GetInt( pr_layer_num)];
		this.max_bitrate = new uint[IsoStream.GetInt( pr_layer_num)];
		this.avg_bitrate = new uint[IsoStream.GetInt( pr_layer_num)];
		for (int j=0; j< pr_layer_num; j++)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.pr_layer[j], "pr_layer"); 
			boxSize += stream.ReadUInt24(boxSize, readSize,  out this.profile_level_idc[j], "profile_level_idc"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.max_bitrate[j], "max_bitrate"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.avg_bitrate[j], "avg_bitrate"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.pr_layer_num, "pr_layer_num"); 

		for (int j=0; j< pr_layer_num; j++)
		{
			boxSize += stream.WriteUInt8( this.pr_layer[j], "pr_layer"); 
			boxSize += stream.WriteUInt24( this.profile_level_idc[j], "profile_level_idc"); 
			boxSize += stream.WriteUInt32( this.max_bitrate[j], "max_bitrate"); 
			boxSize += stream.WriteUInt32( this.avg_bitrate[j], "avg_bitrate"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // pr_layer_num

		for (int j=0; j< pr_layer_num; j++)
		{
			boxSize += 8; // pr_layer
			boxSize += 24; // profile_level_idc
			boxSize += 32; // max_bitrate
			boxSize += 32; // avg_bitrate
		}
		return boxSize;
	}
}


/*
class VvcConfigurationBox extends FullBox('vvcC',version=0,flags) {
	VvcDecoderConfigurationRecord() VvcConfig;
}
*/
public partial class VvcConfigurationBox : FullBox
{
	public const string TYPE = "vvcC";
	public override string DisplayName { get { return "VvcConfigurationBox"; } }

	protected VvcDecoderConfigurationRecord VvcConfig; 
	public VvcDecoderConfigurationRecord _VvcConfig { get { return this.VvcConfig; } set { this.VvcConfig = value; } }

	public VvcConfigurationBox(uint flags = 0): base(IsoStream.FromFourCC("vvcC"), 0, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new VvcDecoderConfigurationRecord(),  out this.VvcConfig, "VvcConfig"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.VvcConfig, "VvcConfig"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(VvcConfig); // VvcConfig
		return boxSize;
	}
}


/*
class VvcNALUConfigBox extends FullBox('vvnC',version=0,flags) {
	unsigned int(6) reserved=0;
	unsigned int(2) LengthSizeMinusOne;
}
*/
public partial class VvcNALUConfigBox : FullBox
{
	public const string TYPE = "vvnC";
	public override string DisplayName { get { return "VvcNALUConfigBox"; } }

	protected byte reserved =0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte LengthSizeMinusOne; 
	public byte _LengthSizeMinusOne { get { return this.LengthSizeMinusOne; } set { this.LengthSizeMinusOne = value; } }

	public VvcNALUConfigBox(uint flags = 0): base(IsoStream.FromFourCC("vvnC"), 0, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.LengthSizeMinusOne, "LengthSizeMinusOne"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(6,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(2,  this.LengthSizeMinusOne, "LengthSizeMinusOne"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 6; // reserved
		boxSize += 2; // LengthSizeMinusOne
		return boxSize;
	}
}


/*
class DefaultHevcExtractorConstructorBox extends FullBox('dhec'){
	unsigned int(32) num_entries;
	for (i=1; i<= num_entries; i++) { 
		unsigned int(8) constructor_type;
		unsigned int(8) constructor_flags; 
		if( constructor_type == 0 ) 
			SampleConstructor();
		else if( constructor_type == 2 ) 
			InlineConstructor();
		else if( constructor_type == 3 ) 
			SampleConstructorFromTrackGroup();
		else if( constructor_type == 6 ) 
			NALUStartInlineConstructor ();
	}
}
*/
public partial class DefaultHevcExtractorConstructorBox : FullBox
{
	public const string TYPE = "dhec";
	public override string DisplayName { get { return "DefaultHevcExtractorConstructorBox"; } }

	protected uint num_entries; 
	public uint NumEntries { get { return this.num_entries; } set { this.num_entries = value; } }

	protected byte[] constructor_type; 
	public byte[] ConstructorType { get { return this.constructor_type; } set { this.constructor_type = value; } }

	protected byte[] constructor_flags; 
	public byte[] ConstructorFlags { get { return this.constructor_flags; } set { this.constructor_flags = value; } }
	public IEnumerable<SampleConstructor> _SampleConstructor { get { return this.children.OfType<SampleConstructor>(); } }
	public IEnumerable<InlineConstructor> _InlineConstructor { get { return this.children.OfType<InlineConstructor>(); } }
	public IEnumerable<SampleConstructorFromTrackGroup> _SampleConstructorFromTrackGroup { get { return this.children.OfType<SampleConstructorFromTrackGroup>(); } }
	public IEnumerable<NALUStartInlineConstructor> _NALUStartInlineConstructor { get { return this.children.OfType<NALUStartInlineConstructor>(); } }

	public DefaultHevcExtractorConstructorBox(): base(IsoStream.FromFourCC("dhec"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.num_entries, "num_entries"); 

		this.constructor_type = new byte[IsoStream.GetInt( num_entries)];
		this.constructor_flags = new byte[IsoStream.GetInt( num_entries)];
		for (int i=0; i< num_entries; i++)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.constructor_type[i], "constructor_type"); 
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.constructor_flags[i], "constructor_flags"); 

			if ( constructor_type[i] == 0 )
			{
				// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.SampleConstructor[i], "SampleConstructor"); 
			}

			else if ( constructor_type[i] == 2 )
			{
				// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.InlineConstructor[i], "InlineConstructor"); 
			}

			else if ( constructor_type[i] == 3 )
			{
				// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.SampleConstructorFromTrackGroup[i], "SampleConstructorFromTrackGroup"); 
			}

			else if ( constructor_type[i] == 6 )
			{
				// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.NALUStartInlineConstructor[i], "NALUStartInlineConstructor"); 
			}
		}
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.num_entries, "num_entries"); 

		for (int i=0; i< num_entries; i++)
		{
			boxSize += stream.WriteUInt8( this.constructor_type[i], "constructor_type"); 
			boxSize += stream.WriteUInt8( this.constructor_flags[i], "constructor_flags"); 

			if ( constructor_type[i] == 0 )
			{
				// boxSize += stream.WriteBox( this.SampleConstructor[i], "SampleConstructor"); 
			}

			else if ( constructor_type[i] == 2 )
			{
				// boxSize += stream.WriteBox( this.InlineConstructor[i], "InlineConstructor"); 
			}

			else if ( constructor_type[i] == 3 )
			{
				// boxSize += stream.WriteBox( this.SampleConstructorFromTrackGroup[i], "SampleConstructorFromTrackGroup"); 
			}

			else if ( constructor_type[i] == 6 )
			{
				// boxSize += stream.WriteBox( this.NALUStartInlineConstructor[i], "NALUStartInlineConstructor"); 
			}
		}
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // num_entries

		for (int i=0; i< num_entries; i++)
		{
			boxSize += 8; // constructor_type
			boxSize += 8; // constructor_flags

			if ( constructor_type[i] == 0 )
			{
				// boxSize += IsoStream.CalculateBoxSize(SampleConstructor); // SampleConstructor
			}

			else if ( constructor_type[i] == 2 )
			{
				// boxSize += IsoStream.CalculateBoxSize(InlineConstructor); // InlineConstructor
			}

			else if ( constructor_type[i] == 3 )
			{
				// boxSize += IsoStream.CalculateBoxSize(SampleConstructorFromTrackGroup); // SampleConstructorFromTrackGroup
			}

			else if ( constructor_type[i] == 6 )
			{
				// boxSize += IsoStream.CalculateBoxSize(NALUStartInlineConstructor); // NALUStartInlineConstructor
			}
		}
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class SVCMetadataSampleConfigBox extends FullBox('svmC')
{
	int i;		// local variable, not a field
	unsigned int(8) sample_statement_type;	/* normally group, or seq *//*
	unsigned int(8) default_statement_type;
	unsigned int(8) default_statement_length;
	unsigned int(8) entry_count;
	for (i=1; i<=entry_count; i++) {
		unsigned int(8) statement_type;	// from the user extension ranges
		string statement_namespace;
	}
}
*/
public partial class SVCMetadataSampleConfigBox : FullBox
{
	public const string TYPE = "svmC";
	public override string DisplayName { get { return "SVCMetadataSampleConfigBox"; } }

	protected byte sample_statement_type; 
	public byte SampleStatementType { get { return this.sample_statement_type; } set { this.sample_statement_type = value; } }

	protected byte default_statement_type; 
	public byte DefaultStatementType { get { return this.default_statement_type; } set { this.default_statement_type = value; } }

	protected byte default_statement_length; 
	public byte DefaultStatementLength { get { return this.default_statement_length; } set { this.default_statement_length = value; } }

	protected byte entry_count; 
	public byte EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected byte[] statement_type;  //  from the user extension ranges
	public byte[] StatementType { get { return this.statement_type; } set { this.statement_type = value; } }

	protected BinaryUTF8String[] statement_namespace; 
	public BinaryUTF8String[] StatementNamespace { get { return this.statement_namespace; } set { this.statement_namespace = value; } }

	public SVCMetadataSampleConfigBox(): base(IsoStream.FromFourCC("svmC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.sample_statement_type, "sample_statement_type"); 
		/*  normally group, or seq  */
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.default_statement_type, "default_statement_type"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.default_statement_length, "default_statement_length"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.entry_count, "entry_count"); 

		this.statement_type = new byte[IsoStream.GetInt(entry_count)];
		this.statement_namespace = new BinaryUTF8String[IsoStream.GetInt(entry_count)];
		for (int i=0; i<entry_count; i++)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.statement_type[i], "statement_type"); // from the user extension ranges
			boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.statement_namespace[i], "statement_namespace"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		
		boxSize += stream.WriteUInt8( this.sample_statement_type, "sample_statement_type"); 
		/*  normally group, or seq  */
		boxSize += stream.WriteUInt8( this.default_statement_type, "default_statement_type"); 
		boxSize += stream.WriteUInt8( this.default_statement_length, "default_statement_length"); 
		boxSize += stream.WriteUInt8( this.entry_count, "entry_count"); 

		for (int i=0; i<entry_count; i++)
		{
			boxSize += stream.WriteUInt8( this.statement_type[i], "statement_type"); // from the user extension ranges
			boxSize += stream.WriteStringZeroTerminated( this.statement_namespace[i], "statement_namespace"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		
		boxSize += 8; // sample_statement_type
		/*  normally group, or seq  */
		boxSize += 8; // default_statement_type
		boxSize += 8; // default_statement_length
		boxSize += 8; // entry_count

		for (int i=0; i<entry_count; i++)
		{
			boxSize += 8; // statement_type
			boxSize += IsoStream.CalculateStringSize(statement_namespace); // statement_namespace
		}
		return boxSize;
	}
}


/*
class EVCSliceComponentTrackConfigurationBox extends Box('evsC') {
	EVCSliceComponentTrackConfigurationRecord() config;
}
*/
public partial class EVCSliceComponentTrackConfigurationBox : Box
{
	public const string TYPE = "evsC";
	public override string DisplayName { get { return "EVCSliceComponentTrackConfigurationBox"; } }

	protected EVCSliceComponentTrackConfigurationRecord config; 
	public EVCSliceComponentTrackConfigurationRecord Config { get { return this.config; } set { this.config = value; } }

	public EVCSliceComponentTrackConfigurationBox(): base(IsoStream.FromFourCC("evsC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new EVCSliceComponentTrackConfigurationRecord(),  out this.config, "config"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.config, "config"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(config); // config
		return boxSize;
	}
}


/*
class HEVCSampleEntry() extends VisualSampleEntry ('hvc1'){
	HEVCConfigurationBox	config;
	MPEG4ExtensionDescriptorsBox () descr;	// optional
}
*/
public partial class HEVCSampleEntry : VisualSampleEntry
{
	public const string TYPE = "hvc1";
	public override string DisplayName { get { return "HEVCSampleEntry"; } }
	public HEVCConfigurationBox Config { get { return this.children.OfType<HEVCConfigurationBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }

	public HEVCSampleEntry(): base(IsoStream.FromFourCC("hvc1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class HEVCLHVCSampleEntry() extends HEVCSampleEntry() {
	LHEVCConfigurationBox		lhvcconfig;
}
*/
public partial class HEVCLHVCSampleEntry : HEVCSampleEntry
{
	public override string DisplayName { get { return "HEVCLHVCSampleEntry"; } }
	public LHEVCConfigurationBox Lhvcconfig { get { return this.children.OfType<LHEVCConfigurationBox>().FirstOrDefault(); } }

	public HEVCLHVCSampleEntry(): base()
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.lhvcconfig, "lhvcconfig"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.lhvcconfig, "lhvcconfig"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(lhvcconfig); // lhvcconfig
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class HEVCSampleEntry() extends VisualSampleEntry ('hvc2'){
	HEVCConfigurationBox	config;
	MPEG4ExtensionDescriptorsBox () descr;	// optional
}
*/
public partial class HEVCSampleEntryhvc2Dup : VisualSampleEntry
{
	public const string TYPE = "hvc2";
	public override string DisplayName { get { return "HEVCSampleEntryhvc2Dup"; } }
	public HEVCConfigurationBox Config { get { return this.children.OfType<HEVCConfigurationBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }

	public HEVCSampleEntryhvc2Dup(): base(IsoStream.FromFourCC("hvc2"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class HEVCSampleEntry() extends VisualSampleEntry ('hvc3'){
	HEVCConfigurationBox	config;
	MPEG4ExtensionDescriptorsBox () descr;	// optional
}
*/
public partial class HEVCSampleEntryhvc3Dup : VisualSampleEntry
{
	public const string TYPE = "hvc3";
	public override string DisplayName { get { return "HEVCSampleEntryhvc3Dup"; } }
	public HEVCConfigurationBox Config { get { return this.children.OfType<HEVCConfigurationBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }

	public HEVCSampleEntryhvc3Dup(): base(IsoStream.FromFourCC("hvc3"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class LHEVCSampleEntry() extends VisualSampleEntry ('lhv1') {
	LHEVCConfigurationBox		lhvcconfig;
	MPEG4ExtensionDescriptorsBox () descr;	// optional
}
*/
public partial class LHEVCSampleEntry : VisualSampleEntry
{
	public const string TYPE = "lhv1";
	public override string DisplayName { get { return "LHEVCSampleEntry"; } }
	public LHEVCConfigurationBox Lhvcconfig { get { return this.children.OfType<LHEVCConfigurationBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }

	public LHEVCSampleEntry(): base(IsoStream.FromFourCC("lhv1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.lhvcconfig, "lhvcconfig"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.lhvcconfig, "lhvcconfig"); 
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(lhvcconfig); // lhvcconfig
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class LHEVCSampleEntry() extends VisualSampleEntry ('lhe1') {
	LHEVCConfigurationBox		lhvcconfig;
	MPEG4ExtensionDescriptorsBox () descr;	// optional
}
*/
public partial class LHEVCSampleEntrylhe1Dup : VisualSampleEntry
{
	public const string TYPE = "lhe1";
	public override string DisplayName { get { return "LHEVCSampleEntrylhe1Dup"; } }
	public LHEVCConfigurationBox Lhvcconfig { get { return this.children.OfType<LHEVCConfigurationBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }

	public LHEVCSampleEntrylhe1Dup(): base(IsoStream.FromFourCC("lhe1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.lhvcconfig, "lhvcconfig"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.lhvcconfig, "lhvcconfig"); 
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(lhvcconfig); // lhvcconfig
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class HEVCSampleEntry() extends VisualSampleEntry ('hev1'){
	HEVCConfigurationBox	config;
	MPEG4ExtensionDescriptorsBox () descr;	// optional
}
*/
public partial class HEVCSampleEntryhev1Dup : VisualSampleEntry
{
	public const string TYPE = "hev1";
	public override string DisplayName { get { return "HEVCSampleEntryhev1Dup"; } }
	public HEVCConfigurationBox Config { get { return this.children.OfType<HEVCConfigurationBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }

	public HEVCSampleEntryhev1Dup(): base(IsoStream.FromFourCC("hev1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class HEVCSampleEntry() extends VisualSampleEntry ('hev2'){
	HEVCConfigurationBox	config;
	MPEG4ExtensionDescriptorsBox () descr;	// optional
}
*/
public partial class HEVCSampleEntryhev2Dup : VisualSampleEntry
{
	public const string TYPE = "hev2";
	public override string DisplayName { get { return "HEVCSampleEntryhev2Dup"; } }
	public HEVCConfigurationBox Config { get { return this.children.OfType<HEVCConfigurationBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }

	public HEVCSampleEntryhev2Dup(): base(IsoStream.FromFourCC("hev2"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class HEVCSampleEntry() extends VisualSampleEntry ('hev3'){
	HEVCConfigurationBox	config;
	MPEG4ExtensionDescriptorsBox () descr;	// optional
}
*/
public partial class HEVCSampleEntryhev3Dup : VisualSampleEntry
{
	public const string TYPE = "hev3";
	public override string DisplayName { get { return "HEVCSampleEntryhev3Dup"; } }
	public HEVCConfigurationBox Config { get { return this.children.OfType<HEVCConfigurationBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }

	public HEVCSampleEntryhev3Dup(): base(IsoStream.FromFourCC("hev3"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class AVCParameterSampleEntry() extends VisualSampleEntry ('avcp'){
	AVCConfigurationBox	config;
}
*/
public partial class AVCParameterSampleEntry : VisualSampleEntry
{
	public const string TYPE = "avcp";
	public override string DisplayName { get { return "AVCParameterSampleEntry"; } }
	public AVCConfigurationBox Config { get { return this.children.OfType<AVCConfigurationBox>().FirstOrDefault(); } }

	public AVCParameterSampleEntry(): base(IsoStream.FromFourCC("avcp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class AVCSampleEntry() extends VisualSampleEntry (type) {
	AVCConfigurationBox	config;
	MPEG4ExtensionDescriptorsBox () descr;	// optional
}
*/
public partial class AVCSampleEntry : VisualSampleEntry
{
	public override string DisplayName { get { return "AVCSampleEntry"; } }
	public AVCConfigurationBox Config { get { return this.children.OfType<AVCConfigurationBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }

	public AVCSampleEntry(uint type): base(type)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class AVCMVCSampleEntry() extends AVCSampleEntry ('avc1') {
	ViewScalabilityInformationSEIBox	scalability;	// optional
	ViewIdentifierBox		view_identifiers;	// optional
	MVCConfigurationBox	mvcconfig;		// optional
	MVCViewPriorityAssignmentBox	view_priority_method;	// optional
	IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
	ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
	MVCDConfigurationBox	mvcdconfig;	// optional
	MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
	A3DConfigurationBox	a3dconfig;	// optional
}
*/
public partial class AVCMVCSampleEntry : AVCSampleEntry
{
	public const string TYPE = "avc1";
	public override string DisplayName { get { return "AVCMVCSampleEntry"; } }
	public ViewScalabilityInformationSEIBox Scalability { get { return this.children.OfType<ViewScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public ViewIdentifierBox ViewIdentifiers { get { return this.children.OfType<ViewIdentifierBox>().FirstOrDefault(); } }
	public MVCConfigurationBox Mvcconfig { get { return this.children.OfType<MVCConfigurationBox>().FirstOrDefault(); } }
	public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return this.children.OfType<MVCViewPriorityAssignmentBox>().FirstOrDefault(); } }
	public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.children.OfType<IntrinsicCameraParametersBox>().FirstOrDefault(); } }
	public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.children.OfType<ExtrinsicCameraParametersBox>().FirstOrDefault(); } }
	public MVCDConfigurationBox Mvcdconfig { get { return this.children.OfType<MVCDConfigurationBox>().FirstOrDefault(); } }
	public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.children.OfType<MVDScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public A3DConfigurationBox A3dconfig { get { return this.children.OfType<A3DConfigurationBox>().FirstOrDefault(); } }

	public AVCMVCSampleEntry(): base(IsoStream.FromFourCC("avc1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scalability, "scalability"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_identifiers, "view_identifiers"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcconfig, "mvcconfig"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_priority_method, "view_priority_method"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcdconfig, "mvcdconfig"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.scalability, "scalability"); // optional
		// boxSize += stream.WriteBox( this.view_identifiers, "view_identifiers"); // optional
		// boxSize += stream.WriteBox( this.mvcconfig, "mvcconfig"); // optional
		// boxSize += stream.WriteBox( this.view_priority_method, "view_priority_method"); // optional
		// boxSize += stream.WriteBox( this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.mvcdconfig, "mvcdconfig"); // optional
		// boxSize += stream.WriteBox( this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.WriteBox( this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(scalability); // scalability
		// boxSize += IsoStream.CalculateBoxSize(view_identifiers); // view_identifiers
		// boxSize += IsoStream.CalculateBoxSize(mvcconfig); // mvcconfig
		// boxSize += IsoStream.CalculateBoxSize(view_priority_method); // view_priority_method
		// boxSize += IsoStream.CalculateBoxSize(intrinsic_camera_params); // intrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(extrinsic_camera_params); // extrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(mvcdconfig); // mvcdconfig
		// boxSize += IsoStream.CalculateBoxSize(mvdscalinfosei); // mvdscalinfosei
		// boxSize += IsoStream.CalculateBoxSize(a3dconfig); // a3dconfig
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class AVCMVCSampleEntry() extends AVCSampleEntry ('avc3') {
	ViewScalabilityInformationSEIBox	scalability;	// optional
	ViewIdentifierBox		view_identifiers;	// optional
	MVCConfigurationBox	mvcconfig;		// optional
	MVCViewPriorityAssignmentBox	view_priority_method;	// optional
	IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
	ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
	MVCDConfigurationBox	mvcdconfig;	// optional
	MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
	A3DConfigurationBox	a3dconfig;	// optional
}
*/
public partial class AVCMVCSampleEntryavc3Dup : AVCSampleEntry
{
	public const string TYPE = "avc3";
	public override string DisplayName { get { return "AVCMVCSampleEntryavc3Dup"; } }
	public ViewScalabilityInformationSEIBox Scalability { get { return this.children.OfType<ViewScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public ViewIdentifierBox ViewIdentifiers { get { return this.children.OfType<ViewIdentifierBox>().FirstOrDefault(); } }
	public MVCConfigurationBox Mvcconfig { get { return this.children.OfType<MVCConfigurationBox>().FirstOrDefault(); } }
	public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return this.children.OfType<MVCViewPriorityAssignmentBox>().FirstOrDefault(); } }
	public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.children.OfType<IntrinsicCameraParametersBox>().FirstOrDefault(); } }
	public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.children.OfType<ExtrinsicCameraParametersBox>().FirstOrDefault(); } }
	public MVCDConfigurationBox Mvcdconfig { get { return this.children.OfType<MVCDConfigurationBox>().FirstOrDefault(); } }
	public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.children.OfType<MVDScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public A3DConfigurationBox A3dconfig { get { return this.children.OfType<A3DConfigurationBox>().FirstOrDefault(); } }

	public AVCMVCSampleEntryavc3Dup(): base(IsoStream.FromFourCC("avc3"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scalability, "scalability"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_identifiers, "view_identifiers"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcconfig, "mvcconfig"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_priority_method, "view_priority_method"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcdconfig, "mvcdconfig"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.scalability, "scalability"); // optional
		// boxSize += stream.WriteBox( this.view_identifiers, "view_identifiers"); // optional
		// boxSize += stream.WriteBox( this.mvcconfig, "mvcconfig"); // optional
		// boxSize += stream.WriteBox( this.view_priority_method, "view_priority_method"); // optional
		// boxSize += stream.WriteBox( this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.mvcdconfig, "mvcdconfig"); // optional
		// boxSize += stream.WriteBox( this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.WriteBox( this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(scalability); // scalability
		// boxSize += IsoStream.CalculateBoxSize(view_identifiers); // view_identifiers
		// boxSize += IsoStream.CalculateBoxSize(mvcconfig); // mvcconfig
		// boxSize += IsoStream.CalculateBoxSize(view_priority_method); // view_priority_method
		// boxSize += IsoStream.CalculateBoxSize(intrinsic_camera_params); // intrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(extrinsic_camera_params); // extrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(mvcdconfig); // mvcdconfig
		// boxSize += IsoStream.CalculateBoxSize(mvdscalinfosei); // mvdscalinfosei
		// boxSize += IsoStream.CalculateBoxSize(a3dconfig); // a3dconfig
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class AVC2SampleEntry() extends VisualSampleEntry (type) {
	AVCConfigurationBox	config;
	MPEG4ExtensionDescriptorsBox () descr;	// optional
}
*/
public partial class AVC2SampleEntry : VisualSampleEntry
{
	public override string DisplayName { get { return "AVC2SampleEntry"; } }
	public AVCConfigurationBox Config { get { return this.children.OfType<AVCConfigurationBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }

	public AVC2SampleEntry(uint type): base(type)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class AVC2MVCSampleEntry() extends AVC2SampleEntry ('avc2') {
	ViewScalabilityInformationSEIBox	scalability;	// optional
	ViewIdentifierBox		view_identifiers;	// optional
	MVCConfigurationBox	mvcconfig;		// optional
	MVCViewPriorityAssignmentBox	view_priority_method;	// optional
	IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
	ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
	MVCDConfigurationBox	mvcdconfig;	// optional
	MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
	A3DConfigurationBox	a3dconfig;	// optional
}
*/
public partial class AVC2MVCSampleEntry : AVC2SampleEntry
{
	public const string TYPE = "avc2";
	public override string DisplayName { get { return "AVC2MVCSampleEntry"; } }
	public ViewScalabilityInformationSEIBox Scalability { get { return this.children.OfType<ViewScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public ViewIdentifierBox ViewIdentifiers { get { return this.children.OfType<ViewIdentifierBox>().FirstOrDefault(); } }
	public MVCConfigurationBox Mvcconfig { get { return this.children.OfType<MVCConfigurationBox>().FirstOrDefault(); } }
	public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return this.children.OfType<MVCViewPriorityAssignmentBox>().FirstOrDefault(); } }
	public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.children.OfType<IntrinsicCameraParametersBox>().FirstOrDefault(); } }
	public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.children.OfType<ExtrinsicCameraParametersBox>().FirstOrDefault(); } }
	public MVCDConfigurationBox Mvcdconfig { get { return this.children.OfType<MVCDConfigurationBox>().FirstOrDefault(); } }
	public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.children.OfType<MVDScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public A3DConfigurationBox A3dconfig { get { return this.children.OfType<A3DConfigurationBox>().FirstOrDefault(); } }

	public AVC2MVCSampleEntry(): base(IsoStream.FromFourCC("avc2"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scalability, "scalability"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_identifiers, "view_identifiers"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcconfig, "mvcconfig"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_priority_method, "view_priority_method"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcdconfig, "mvcdconfig"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.scalability, "scalability"); // optional
		// boxSize += stream.WriteBox( this.view_identifiers, "view_identifiers"); // optional
		// boxSize += stream.WriteBox( this.mvcconfig, "mvcconfig"); // optional
		// boxSize += stream.WriteBox( this.view_priority_method, "view_priority_method"); // optional
		// boxSize += stream.WriteBox( this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.mvcdconfig, "mvcdconfig"); // optional
		// boxSize += stream.WriteBox( this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.WriteBox( this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(scalability); // scalability
		// boxSize += IsoStream.CalculateBoxSize(view_identifiers); // view_identifiers
		// boxSize += IsoStream.CalculateBoxSize(mvcconfig); // mvcconfig
		// boxSize += IsoStream.CalculateBoxSize(view_priority_method); // view_priority_method
		// boxSize += IsoStream.CalculateBoxSize(intrinsic_camera_params); // intrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(extrinsic_camera_params); // extrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(mvcdconfig); // mvcdconfig
		// boxSize += IsoStream.CalculateBoxSize(mvdscalinfosei); // mvdscalinfosei
		// boxSize += IsoStream.CalculateBoxSize(a3dconfig); // a3dconfig
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class AVC2MVCSampleEntry() extends AVC2SampleEntry ('avc4') {
	ViewScalabilityInformationSEIBox	scalability;	// optional
	ViewIdentifierBox		view_identifiers;	// optional
	MVCConfigurationBox	mvcconfig;		// optional
	MVCViewPriorityAssignmentBox	view_priority_method;	// optional
	IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
	ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
	MVCDConfigurationBox	mvcdconfig;	// optional
	MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
	A3DConfigurationBox	a3dconfig;	// optional
}
*/
public partial class AVC2MVCSampleEntryavc4Dup : AVC2SampleEntry
{
	public const string TYPE = "avc4";
	public override string DisplayName { get { return "AVC2MVCSampleEntryavc4Dup"; } }
	public ViewScalabilityInformationSEIBox Scalability { get { return this.children.OfType<ViewScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public ViewIdentifierBox ViewIdentifiers { get { return this.children.OfType<ViewIdentifierBox>().FirstOrDefault(); } }
	public MVCConfigurationBox Mvcconfig { get { return this.children.OfType<MVCConfigurationBox>().FirstOrDefault(); } }
	public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return this.children.OfType<MVCViewPriorityAssignmentBox>().FirstOrDefault(); } }
	public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.children.OfType<IntrinsicCameraParametersBox>().FirstOrDefault(); } }
	public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.children.OfType<ExtrinsicCameraParametersBox>().FirstOrDefault(); } }
	public MVCDConfigurationBox Mvcdconfig { get { return this.children.OfType<MVCDConfigurationBox>().FirstOrDefault(); } }
	public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.children.OfType<MVDScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public A3DConfigurationBox A3dconfig { get { return this.children.OfType<A3DConfigurationBox>().FirstOrDefault(); } }

	public AVC2MVCSampleEntryavc4Dup(): base(IsoStream.FromFourCC("avc4"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scalability, "scalability"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_identifiers, "view_identifiers"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcconfig, "mvcconfig"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_priority_method, "view_priority_method"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcdconfig, "mvcdconfig"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.scalability, "scalability"); // optional
		// boxSize += stream.WriteBox( this.view_identifiers, "view_identifiers"); // optional
		// boxSize += stream.WriteBox( this.mvcconfig, "mvcconfig"); // optional
		// boxSize += stream.WriteBox( this.view_priority_method, "view_priority_method"); // optional
		// boxSize += stream.WriteBox( this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.mvcdconfig, "mvcdconfig"); // optional
		// boxSize += stream.WriteBox( this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.WriteBox( this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(scalability); // scalability
		// boxSize += IsoStream.CalculateBoxSize(view_identifiers); // view_identifiers
		// boxSize += IsoStream.CalculateBoxSize(mvcconfig); // mvcconfig
		// boxSize += IsoStream.CalculateBoxSize(view_priority_method); // view_priority_method
		// boxSize += IsoStream.CalculateBoxSize(intrinsic_camera_params); // intrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(extrinsic_camera_params); // extrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(mvcdconfig); // mvcdconfig
		// boxSize += IsoStream.CalculateBoxSize(mvdscalinfosei); // mvdscalinfosei
		// boxSize += IsoStream.CalculateBoxSize(a3dconfig); // a3dconfig
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class MVCSampleEntry() extends VisualSampleEntry ('mvc1') {
	MVCConfigurationBox	mvcconfig; 			// mandatory
	ViewScalabilityInformationSEIBox	scalability;	// optional
	ViewIdentifierBox	view_identifiers;		// mandatory
	MPEG4ExtensionDescriptorsBox descr;		// optional
	MVCViewPriorityAssignmentBox	view_priority_method;	// optional
	IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
	ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
	MVCDConfigurationBox	mvcdconfig;	// optional
	MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
	A3DConfigurationBox	a3dconfig;	// optional
}
*/
public partial class MVCSampleEntry : VisualSampleEntry
{
	public const string TYPE = "mvc1";
	public override string DisplayName { get { return "MVCSampleEntry"; } }
	public MVCConfigurationBox Mvcconfig { get { return this.children.OfType<MVCConfigurationBox>().FirstOrDefault(); } }
	public ViewScalabilityInformationSEIBox Scalability { get { return this.children.OfType<ViewScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public ViewIdentifierBox ViewIdentifiers { get { return this.children.OfType<ViewIdentifierBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }
	public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return this.children.OfType<MVCViewPriorityAssignmentBox>().FirstOrDefault(); } }
	public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.children.OfType<IntrinsicCameraParametersBox>().FirstOrDefault(); } }
	public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.children.OfType<ExtrinsicCameraParametersBox>().FirstOrDefault(); } }
	public MVCDConfigurationBox Mvcdconfig { get { return this.children.OfType<MVCDConfigurationBox>().FirstOrDefault(); } }
	public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.children.OfType<MVDScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public A3DConfigurationBox A3dconfig { get { return this.children.OfType<A3DConfigurationBox>().FirstOrDefault(); } }

	public MVCSampleEntry(): base(IsoStream.FromFourCC("mvc1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcconfig, "mvcconfig"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scalability, "scalability"); // optional
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_identifiers, "view_identifiers"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_priority_method, "view_priority_method"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcdconfig, "mvcdconfig"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.mvcconfig, "mvcconfig"); // mandatory
		// boxSize += stream.WriteBox( this.scalability, "scalability"); // optional
		// boxSize += stream.WriteBox( this.view_identifiers, "view_identifiers"); // mandatory
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		// boxSize += stream.WriteBox( this.view_priority_method, "view_priority_method"); // optional
		// boxSize += stream.WriteBox( this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.mvcdconfig, "mvcdconfig"); // optional
		// boxSize += stream.WriteBox( this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.WriteBox( this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(mvcconfig); // mvcconfig
		// boxSize += IsoStream.CalculateBoxSize(scalability); // scalability
		// boxSize += IsoStream.CalculateBoxSize(view_identifiers); // view_identifiers
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		// boxSize += IsoStream.CalculateBoxSize(view_priority_method); // view_priority_method
		// boxSize += IsoStream.CalculateBoxSize(intrinsic_camera_params); // intrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(extrinsic_camera_params); // extrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(mvcdconfig); // mvcdconfig
		// boxSize += IsoStream.CalculateBoxSize(mvdscalinfosei); // mvdscalinfosei
		// boxSize += IsoStream.CalculateBoxSize(a3dconfig); // a3dconfig
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class MVCSampleEntry() extends VisualSampleEntry ('mvc2') {
	MVCConfigurationBox	mvcconfig; 			// mandatory
	ViewScalabilityInformationSEIBox	scalability;	// optional
	ViewIdentifierBox	view_identifiers;		// mandatory
	MPEG4ExtensionDescriptorsBox descr;		// optional
	MVCViewPriorityAssignmentBox	view_priority_method;	// optional
	IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
	ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
	MVCDConfigurationBox	mvcdconfig;	// optional
	MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
	A3DConfigurationBox	a3dconfig;	// optional
}
*/
public partial class MVCSampleEntrymvc2Dup : VisualSampleEntry
{
	public const string TYPE = "mvc2";
	public override string DisplayName { get { return "MVCSampleEntrymvc2Dup"; } }
	public MVCConfigurationBox Mvcconfig { get { return this.children.OfType<MVCConfigurationBox>().FirstOrDefault(); } }
	public ViewScalabilityInformationSEIBox Scalability { get { return this.children.OfType<ViewScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public ViewIdentifierBox ViewIdentifiers { get { return this.children.OfType<ViewIdentifierBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }
	public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return this.children.OfType<MVCViewPriorityAssignmentBox>().FirstOrDefault(); } }
	public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.children.OfType<IntrinsicCameraParametersBox>().FirstOrDefault(); } }
	public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.children.OfType<ExtrinsicCameraParametersBox>().FirstOrDefault(); } }
	public MVCDConfigurationBox Mvcdconfig { get { return this.children.OfType<MVCDConfigurationBox>().FirstOrDefault(); } }
	public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.children.OfType<MVDScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public A3DConfigurationBox A3dconfig { get { return this.children.OfType<A3DConfigurationBox>().FirstOrDefault(); } }

	public MVCSampleEntrymvc2Dup(): base(IsoStream.FromFourCC("mvc2"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcconfig, "mvcconfig"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scalability, "scalability"); // optional
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_identifiers, "view_identifiers"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_priority_method, "view_priority_method"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcdconfig, "mvcdconfig"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.mvcconfig, "mvcconfig"); // mandatory
		// boxSize += stream.WriteBox( this.scalability, "scalability"); // optional
		// boxSize += stream.WriteBox( this.view_identifiers, "view_identifiers"); // mandatory
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		// boxSize += stream.WriteBox( this.view_priority_method, "view_priority_method"); // optional
		// boxSize += stream.WriteBox( this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.mvcdconfig, "mvcdconfig"); // optional
		// boxSize += stream.WriteBox( this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.WriteBox( this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(mvcconfig); // mvcconfig
		// boxSize += IsoStream.CalculateBoxSize(scalability); // scalability
		// boxSize += IsoStream.CalculateBoxSize(view_identifiers); // view_identifiers
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		// boxSize += IsoStream.CalculateBoxSize(view_priority_method); // view_priority_method
		// boxSize += IsoStream.CalculateBoxSize(intrinsic_camera_params); // intrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(extrinsic_camera_params); // extrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(mvcdconfig); // mvcdconfig
		// boxSize += IsoStream.CalculateBoxSize(mvdscalinfosei); // mvdscalinfosei
		// boxSize += IsoStream.CalculateBoxSize(a3dconfig); // a3dconfig
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class MVCSampleEntry() extends VisualSampleEntry ('mvc3') {
	MVCConfigurationBox	mvcconfig; 			// mandatory
	ViewScalabilityInformationSEIBox	scalability;	// optional
	ViewIdentifierBox	view_identifiers;		// mandatory
	MPEG4ExtensionDescriptorsBox descr;		// optional
	MVCViewPriorityAssignmentBox	view_priority_method;	// optional
	IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
	ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
	MVCDConfigurationBox	mvcdconfig;	// optional
	MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
	A3DConfigurationBox	a3dconfig;	// optional
}
*/
public partial class MVCSampleEntrymvc3Dup : VisualSampleEntry
{
	public const string TYPE = "mvc3";
	public override string DisplayName { get { return "MVCSampleEntrymvc3Dup"; } }
	public MVCConfigurationBox Mvcconfig { get { return this.children.OfType<MVCConfigurationBox>().FirstOrDefault(); } }
	public ViewScalabilityInformationSEIBox Scalability { get { return this.children.OfType<ViewScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public ViewIdentifierBox ViewIdentifiers { get { return this.children.OfType<ViewIdentifierBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }
	public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return this.children.OfType<MVCViewPriorityAssignmentBox>().FirstOrDefault(); } }
	public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.children.OfType<IntrinsicCameraParametersBox>().FirstOrDefault(); } }
	public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.children.OfType<ExtrinsicCameraParametersBox>().FirstOrDefault(); } }
	public MVCDConfigurationBox Mvcdconfig { get { return this.children.OfType<MVCDConfigurationBox>().FirstOrDefault(); } }
	public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.children.OfType<MVDScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public A3DConfigurationBox A3dconfig { get { return this.children.OfType<A3DConfigurationBox>().FirstOrDefault(); } }

	public MVCSampleEntrymvc3Dup(): base(IsoStream.FromFourCC("mvc3"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcconfig, "mvcconfig"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scalability, "scalability"); // optional
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_identifiers, "view_identifiers"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_priority_method, "view_priority_method"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcdconfig, "mvcdconfig"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.mvcconfig, "mvcconfig"); // mandatory
		// boxSize += stream.WriteBox( this.scalability, "scalability"); // optional
		// boxSize += stream.WriteBox( this.view_identifiers, "view_identifiers"); // mandatory
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		// boxSize += stream.WriteBox( this.view_priority_method, "view_priority_method"); // optional
		// boxSize += stream.WriteBox( this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.mvcdconfig, "mvcdconfig"); // optional
		// boxSize += stream.WriteBox( this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.WriteBox( this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(mvcconfig); // mvcconfig
		// boxSize += IsoStream.CalculateBoxSize(scalability); // scalability
		// boxSize += IsoStream.CalculateBoxSize(view_identifiers); // view_identifiers
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		// boxSize += IsoStream.CalculateBoxSize(view_priority_method); // view_priority_method
		// boxSize += IsoStream.CalculateBoxSize(intrinsic_camera_params); // intrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(extrinsic_camera_params); // extrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(mvcdconfig); // mvcdconfig
		// boxSize += IsoStream.CalculateBoxSize(mvdscalinfosei); // mvdscalinfosei
		// boxSize += IsoStream.CalculateBoxSize(a3dconfig); // a3dconfig
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class MVCSampleEntry() extends VisualSampleEntry ('mvc4') {
	MVCConfigurationBox	mvcconfig; 			// mandatory
	ViewScalabilityInformationSEIBox	scalability;	// optional
	ViewIdentifierBox	view_identifiers;		// mandatory
	MPEG4ExtensionDescriptorsBox descr;		// optional
	MVCViewPriorityAssignmentBox	view_priority_method;	// optional
	IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
	ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
	MVCDConfigurationBox	mvcdconfig;	// optional
	MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
	A3DConfigurationBox	a3dconfig;	// optional
}
*/
public partial class MVCSampleEntrymvc4Dup : VisualSampleEntry
{
	public const string TYPE = "mvc4";
	public override string DisplayName { get { return "MVCSampleEntrymvc4Dup"; } }
	public MVCConfigurationBox Mvcconfig { get { return this.children.OfType<MVCConfigurationBox>().FirstOrDefault(); } }
	public ViewScalabilityInformationSEIBox Scalability { get { return this.children.OfType<ViewScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public ViewIdentifierBox ViewIdentifiers { get { return this.children.OfType<ViewIdentifierBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }
	public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return this.children.OfType<MVCViewPriorityAssignmentBox>().FirstOrDefault(); } }
	public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.children.OfType<IntrinsicCameraParametersBox>().FirstOrDefault(); } }
	public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.children.OfType<ExtrinsicCameraParametersBox>().FirstOrDefault(); } }
	public MVCDConfigurationBox Mvcdconfig { get { return this.children.OfType<MVCDConfigurationBox>().FirstOrDefault(); } }
	public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.children.OfType<MVDScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public A3DConfigurationBox A3dconfig { get { return this.children.OfType<A3DConfigurationBox>().FirstOrDefault(); } }

	public MVCSampleEntrymvc4Dup(): base(IsoStream.FromFourCC("mvc4"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcconfig, "mvcconfig"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scalability, "scalability"); // optional
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_identifiers, "view_identifiers"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_priority_method, "view_priority_method"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcdconfig, "mvcdconfig"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.mvcconfig, "mvcconfig"); // mandatory
		// boxSize += stream.WriteBox( this.scalability, "scalability"); // optional
		// boxSize += stream.WriteBox( this.view_identifiers, "view_identifiers"); // mandatory
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		// boxSize += stream.WriteBox( this.view_priority_method, "view_priority_method"); // optional
		// boxSize += stream.WriteBox( this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.mvcdconfig, "mvcdconfig"); // optional
		// boxSize += stream.WriteBox( this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.WriteBox( this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(mvcconfig); // mvcconfig
		// boxSize += IsoStream.CalculateBoxSize(scalability); // scalability
		// boxSize += IsoStream.CalculateBoxSize(view_identifiers); // view_identifiers
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		// boxSize += IsoStream.CalculateBoxSize(view_priority_method); // view_priority_method
		// boxSize += IsoStream.CalculateBoxSize(intrinsic_camera_params); // intrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(extrinsic_camera_params); // extrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(mvcdconfig); // mvcdconfig
		// boxSize += IsoStream.CalculateBoxSize(mvdscalinfosei); // mvdscalinfosei
		// boxSize += IsoStream.CalculateBoxSize(a3dconfig); // a3dconfig
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class MVCDSampleEntry() extends VisualSampleEntry ('mvd1') {
	MVCDConfigurationBox	mvcdconfig;		// mandatory
	MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
	ViewIdentifierBox	view_identifiers;		// mandatory
	MPEG4ExtensionDescriptorsBox descr;		// optional
	IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
	ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
	A3DConfigurationBox	a3dconfig;	// optional
}

*/
public partial class MVCDSampleEntry : VisualSampleEntry
{
	public const string TYPE = "mvd1";
	public override string DisplayName { get { return "MVCDSampleEntry"; } }
	public MVCDConfigurationBox Mvcdconfig { get { return this.children.OfType<MVCDConfigurationBox>().FirstOrDefault(); } }
	public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.children.OfType<MVDScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public ViewIdentifierBox ViewIdentifiers { get { return this.children.OfType<ViewIdentifierBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }
	public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.children.OfType<IntrinsicCameraParametersBox>().FirstOrDefault(); } }
	public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.children.OfType<ExtrinsicCameraParametersBox>().FirstOrDefault(); } }
	public A3DConfigurationBox A3dconfig { get { return this.children.OfType<A3DConfigurationBox>().FirstOrDefault(); } }

	public MVCDSampleEntry(): base(IsoStream.FromFourCC("mvd1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcdconfig, "mvcdconfig"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_identifiers, "view_identifiers"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.mvcdconfig, "mvcdconfig"); // mandatory
		// boxSize += stream.WriteBox( this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.WriteBox( this.view_identifiers, "view_identifiers"); // mandatory
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		// boxSize += stream.WriteBox( this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(mvcdconfig); // mvcdconfig
		// boxSize += IsoStream.CalculateBoxSize(mvdscalinfosei); // mvdscalinfosei
		// boxSize += IsoStream.CalculateBoxSize(view_identifiers); // view_identifiers
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		// boxSize += IsoStream.CalculateBoxSize(intrinsic_camera_params); // intrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(extrinsic_camera_params); // extrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(a3dconfig); // a3dconfig
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class MVCDSampleEntry() extends VisualSampleEntry ('mvd2') {
	MVCDConfigurationBox	mvcdconfig;		// mandatory
	MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
	ViewIdentifierBox	view_identifiers;		// mandatory
	MPEG4ExtensionDescriptorsBox descr;		// optional
	IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
	ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
	A3DConfigurationBox	a3dconfig;	// optional
}

*/
public partial class MVCDSampleEntrymvd2Dup : VisualSampleEntry
{
	public const string TYPE = "mvd2";
	public override string DisplayName { get { return "MVCDSampleEntrymvd2Dup"; } }
	public MVCDConfigurationBox Mvcdconfig { get { return this.children.OfType<MVCDConfigurationBox>().FirstOrDefault(); } }
	public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.children.OfType<MVDScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public ViewIdentifierBox ViewIdentifiers { get { return this.children.OfType<ViewIdentifierBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }
	public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.children.OfType<IntrinsicCameraParametersBox>().FirstOrDefault(); } }
	public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.children.OfType<ExtrinsicCameraParametersBox>().FirstOrDefault(); } }
	public A3DConfigurationBox A3dconfig { get { return this.children.OfType<A3DConfigurationBox>().FirstOrDefault(); } }

	public MVCDSampleEntrymvd2Dup(): base(IsoStream.FromFourCC("mvd2"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcdconfig, "mvcdconfig"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_identifiers, "view_identifiers"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.mvcdconfig, "mvcdconfig"); // mandatory
		// boxSize += stream.WriteBox( this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.WriteBox( this.view_identifiers, "view_identifiers"); // mandatory
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		// boxSize += stream.WriteBox( this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(mvcdconfig); // mvcdconfig
		// boxSize += IsoStream.CalculateBoxSize(mvdscalinfosei); // mvdscalinfosei
		// boxSize += IsoStream.CalculateBoxSize(view_identifiers); // view_identifiers
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		// boxSize += IsoStream.CalculateBoxSize(intrinsic_camera_params); // intrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(extrinsic_camera_params); // extrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(a3dconfig); // a3dconfig
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class MVCDSampleEntry() extends VisualSampleEntry ('mvd3') {
	MVCDConfigurationBox	mvcdconfig;		// mandatory
	MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
	ViewIdentifierBox	view_identifiers;		// mandatory
	MPEG4ExtensionDescriptorsBox descr;		// optional
	IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
	ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
	A3DConfigurationBox	a3dconfig;	// optional
}

*/
public partial class MVCDSampleEntrymvd3Dup : VisualSampleEntry
{
	public const string TYPE = "mvd3";
	public override string DisplayName { get { return "MVCDSampleEntrymvd3Dup"; } }
	public MVCDConfigurationBox Mvcdconfig { get { return this.children.OfType<MVCDConfigurationBox>().FirstOrDefault(); } }
	public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.children.OfType<MVDScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public ViewIdentifierBox ViewIdentifiers { get { return this.children.OfType<ViewIdentifierBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }
	public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.children.OfType<IntrinsicCameraParametersBox>().FirstOrDefault(); } }
	public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.children.OfType<ExtrinsicCameraParametersBox>().FirstOrDefault(); } }
	public A3DConfigurationBox A3dconfig { get { return this.children.OfType<A3DConfigurationBox>().FirstOrDefault(); } }

	public MVCDSampleEntrymvd3Dup(): base(IsoStream.FromFourCC("mvd3"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcdconfig, "mvcdconfig"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_identifiers, "view_identifiers"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.mvcdconfig, "mvcdconfig"); // mandatory
		// boxSize += stream.WriteBox( this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.WriteBox( this.view_identifiers, "view_identifiers"); // mandatory
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		// boxSize += stream.WriteBox( this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(mvcdconfig); // mvcdconfig
		// boxSize += IsoStream.CalculateBoxSize(mvdscalinfosei); // mvdscalinfosei
		// boxSize += IsoStream.CalculateBoxSize(view_identifiers); // view_identifiers
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		// boxSize += IsoStream.CalculateBoxSize(intrinsic_camera_params); // intrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(extrinsic_camera_params); // extrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(a3dconfig); // a3dconfig
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class MVCDSampleEntry() extends VisualSampleEntry ('mvd4') {
	MVCDConfigurationBox	mvcdconfig;		// mandatory
	MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
	ViewIdentifierBox	view_identifiers;		// mandatory
	MPEG4ExtensionDescriptorsBox descr;		// optional
	IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
	ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
	A3DConfigurationBox	a3dconfig;	// optional
}

*/
public partial class MVCDSampleEntrymvd4Dup : VisualSampleEntry
{
	public const string TYPE = "mvd4";
	public override string DisplayName { get { return "MVCDSampleEntrymvd4Dup"; } }
	public MVCDConfigurationBox Mvcdconfig { get { return this.children.OfType<MVCDConfigurationBox>().FirstOrDefault(); } }
	public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.children.OfType<MVDScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public ViewIdentifierBox ViewIdentifiers { get { return this.children.OfType<ViewIdentifierBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }
	public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.children.OfType<IntrinsicCameraParametersBox>().FirstOrDefault(); } }
	public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.children.OfType<ExtrinsicCameraParametersBox>().FirstOrDefault(); } }
	public A3DConfigurationBox A3dconfig { get { return this.children.OfType<A3DConfigurationBox>().FirstOrDefault(); } }

	public MVCDSampleEntrymvd4Dup(): base(IsoStream.FromFourCC("mvd4"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvcdconfig, "mvcdconfig"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_identifiers, "view_identifiers"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.mvcdconfig, "mvcdconfig"); // mandatory
		// boxSize += stream.WriteBox( this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.WriteBox( this.view_identifiers, "view_identifiers"); // mandatory
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		// boxSize += stream.WriteBox( this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.a3dconfig, "a3dconfig"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(mvcdconfig); // mvcdconfig
		// boxSize += IsoStream.CalculateBoxSize(mvdscalinfosei); // mvdscalinfosei
		// boxSize += IsoStream.CalculateBoxSize(view_identifiers); // view_identifiers
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		// boxSize += IsoStream.CalculateBoxSize(intrinsic_camera_params); // intrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(extrinsic_camera_params); // extrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(a3dconfig); // a3dconfig
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class A3DSampleEntry() extends VisualSampleEntry ('a3d1') {
	A3DConfigurationBox	a3dconfig;		// mandatory
	MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
	ViewIdentifierBox	view_identifiers;		// mandatory
	MPEG4ExtensionDescriptorsBox descr;		// optional
	IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
	ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
}
*/
public partial class A3DSampleEntry : VisualSampleEntry
{
	public const string TYPE = "a3d1";
	public override string DisplayName { get { return "A3DSampleEntry"; } }
	public A3DConfigurationBox A3dconfig { get { return this.children.OfType<A3DConfigurationBox>().FirstOrDefault(); } }
	public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.children.OfType<MVDScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public ViewIdentifierBox ViewIdentifiers { get { return this.children.OfType<ViewIdentifierBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }
	public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.children.OfType<IntrinsicCameraParametersBox>().FirstOrDefault(); } }
	public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.children.OfType<ExtrinsicCameraParametersBox>().FirstOrDefault(); } }

	public A3DSampleEntry(): base(IsoStream.FromFourCC("a3d1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.a3dconfig, "a3dconfig"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_identifiers, "view_identifiers"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.a3dconfig, "a3dconfig"); // mandatory
		// boxSize += stream.WriteBox( this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.WriteBox( this.view_identifiers, "view_identifiers"); // mandatory
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		// boxSize += stream.WriteBox( this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(a3dconfig); // a3dconfig
		// boxSize += IsoStream.CalculateBoxSize(mvdscalinfosei); // mvdscalinfosei
		// boxSize += IsoStream.CalculateBoxSize(view_identifiers); // view_identifiers
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		// boxSize += IsoStream.CalculateBoxSize(intrinsic_camera_params); // intrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(extrinsic_camera_params); // extrinsic_camera_params
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class A3DSampleEntry() extends VisualSampleEntry ('a3d2') {
	A3DConfigurationBox	a3dconfig;		// mandatory
	MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
	ViewIdentifierBox	view_identifiers;		// mandatory
	MPEG4ExtensionDescriptorsBox descr;		// optional
	IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
	ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
}
*/
public partial class A3DSampleEntrya3d2Dup : VisualSampleEntry
{
	public const string TYPE = "a3d2";
	public override string DisplayName { get { return "A3DSampleEntrya3d2Dup"; } }
	public A3DConfigurationBox A3dconfig { get { return this.children.OfType<A3DConfigurationBox>().FirstOrDefault(); } }
	public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.children.OfType<MVDScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public ViewIdentifierBox ViewIdentifiers { get { return this.children.OfType<ViewIdentifierBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }
	public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.children.OfType<IntrinsicCameraParametersBox>().FirstOrDefault(); } }
	public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.children.OfType<ExtrinsicCameraParametersBox>().FirstOrDefault(); } }

	public A3DSampleEntrya3d2Dup(): base(IsoStream.FromFourCC("a3d2"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.a3dconfig, "a3dconfig"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_identifiers, "view_identifiers"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.a3dconfig, "a3dconfig"); // mandatory
		// boxSize += stream.WriteBox( this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.WriteBox( this.view_identifiers, "view_identifiers"); // mandatory
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		// boxSize += stream.WriteBox( this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(a3dconfig); // a3dconfig
		// boxSize += IsoStream.CalculateBoxSize(mvdscalinfosei); // mvdscalinfosei
		// boxSize += IsoStream.CalculateBoxSize(view_identifiers); // view_identifiers
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		// boxSize += IsoStream.CalculateBoxSize(intrinsic_camera_params); // intrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(extrinsic_camera_params); // extrinsic_camera_params
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class A3DSampleEntry() extends VisualSampleEntry ('a3d3') {
	A3DConfigurationBox	a3dconfig;		// mandatory
	MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
	ViewIdentifierBox	view_identifiers;		// mandatory
	MPEG4ExtensionDescriptorsBox descr;		// optional
	IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
	ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
}
*/
public partial class A3DSampleEntrya3d3Dup : VisualSampleEntry
{
	public const string TYPE = "a3d3";
	public override string DisplayName { get { return "A3DSampleEntrya3d3Dup"; } }
	public A3DConfigurationBox A3dconfig { get { return this.children.OfType<A3DConfigurationBox>().FirstOrDefault(); } }
	public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.children.OfType<MVDScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public ViewIdentifierBox ViewIdentifiers { get { return this.children.OfType<ViewIdentifierBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }
	public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.children.OfType<IntrinsicCameraParametersBox>().FirstOrDefault(); } }
	public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.children.OfType<ExtrinsicCameraParametersBox>().FirstOrDefault(); } }

	public A3DSampleEntrya3d3Dup(): base(IsoStream.FromFourCC("a3d3"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.a3dconfig, "a3dconfig"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_identifiers, "view_identifiers"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.a3dconfig, "a3dconfig"); // mandatory
		// boxSize += stream.WriteBox( this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.WriteBox( this.view_identifiers, "view_identifiers"); // mandatory
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		// boxSize += stream.WriteBox( this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(a3dconfig); // a3dconfig
		// boxSize += IsoStream.CalculateBoxSize(mvdscalinfosei); // mvdscalinfosei
		// boxSize += IsoStream.CalculateBoxSize(view_identifiers); // view_identifiers
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		// boxSize += IsoStream.CalculateBoxSize(intrinsic_camera_params); // intrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(extrinsic_camera_params); // extrinsic_camera_params
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class A3DSampleEntry() extends VisualSampleEntry ('a3d4') {
	A3DConfigurationBox	a3dconfig;		// mandatory
	MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
	ViewIdentifierBox	view_identifiers;		// mandatory
	MPEG4ExtensionDescriptorsBox descr;		// optional
	IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
	ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
}
*/
public partial class A3DSampleEntrya3d4Dup : VisualSampleEntry
{
	public const string TYPE = "a3d4";
	public override string DisplayName { get { return "A3DSampleEntrya3d4Dup"; } }
	public A3DConfigurationBox A3dconfig { get { return this.children.OfType<A3DConfigurationBox>().FirstOrDefault(); } }
	public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.children.OfType<MVDScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public ViewIdentifierBox ViewIdentifiers { get { return this.children.OfType<ViewIdentifierBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }
	public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.children.OfType<IntrinsicCameraParametersBox>().FirstOrDefault(); } }
	public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.children.OfType<ExtrinsicCameraParametersBox>().FirstOrDefault(); } }

	public A3DSampleEntrya3d4Dup(): base(IsoStream.FromFourCC("a3d4"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.a3dconfig, "a3dconfig"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.view_identifiers, "view_identifiers"); // mandatory
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.a3dconfig, "a3dconfig"); // mandatory
		// boxSize += stream.WriteBox( this.mvdscalinfosei, "mvdscalinfosei"); // optional
		// boxSize += stream.WriteBox( this.view_identifiers, "view_identifiers"); // mandatory
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		// boxSize += stream.WriteBox( this.intrinsic_camera_params, "intrinsic_camera_params"); // optional
		// boxSize += stream.WriteBox( this.extrinsic_camera_params, "extrinsic_camera_params"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(a3dconfig); // a3dconfig
		// boxSize += IsoStream.CalculateBoxSize(mvdscalinfosei); // mvdscalinfosei
		// boxSize += IsoStream.CalculateBoxSize(view_identifiers); // view_identifiers
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		// boxSize += IsoStream.CalculateBoxSize(intrinsic_camera_params); // intrinsic_camera_params
		// boxSize += IsoStream.CalculateBoxSize(extrinsic_camera_params); // extrinsic_camera_params
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class AVCSVCSampleEntry() extends AVCSampleEntry ('avc1' or 'avc3') {
	SVCConfigurationBox	svcconfig;			// optional
	ScalabilityInformationSEIBox	scalability;	// optional
	SVCPriorityAssignmentBox	method;			// optional
}
*/
public partial class AVCSVCSampleEntry : AVCSampleEntry
{
	public const string TYPE = "avc1";
	public override string DisplayName { get { return "AVCSVCSampleEntry"; } }
	public SVCConfigurationBox Svcconfig { get { return this.children.OfType<SVCConfigurationBox>().FirstOrDefault(); } }
	public ScalabilityInformationSEIBox Scalability { get { return this.children.OfType<ScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public SVCPriorityAssignmentBox Method { get { return this.children.OfType<SVCPriorityAssignmentBox>().FirstOrDefault(); } }

	public AVCSVCSampleEntry(): base(IsoStream.FromFourCC("avc1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.svcconfig, "svcconfig"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scalability, "scalability"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.method, "method"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.svcconfig, "svcconfig"); // optional
		// boxSize += stream.WriteBox( this.scalability, "scalability"); // optional
		// boxSize += stream.WriteBox( this.method, "method"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(svcconfig); // svcconfig
		// boxSize += IsoStream.CalculateBoxSize(scalability); // scalability
		// boxSize += IsoStream.CalculateBoxSize(method); // method
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*

*/
public partial class AVCSVCSampleEntryavc3Dup : AVCSampleEntry
{
	public const string TYPE = "avc3";
	public override string DisplayName { get { return "AVCSVCSampleEntryavc3Dup"; } }
	public SVCConfigurationBox Svcconfig { get { return this.children.OfType<SVCConfigurationBox>().FirstOrDefault(); } }
	public ScalabilityInformationSEIBox Scalability { get { return this.children.OfType<ScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public SVCPriorityAssignmentBox Method { get { return this.children.OfType<SVCPriorityAssignmentBox>().FirstOrDefault(); } }

	public AVCSVCSampleEntryavc3Dup(): base(IsoStream.FromFourCC("avc3"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.svcconfig, "svcconfig"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scalability, "scalability"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.method, "method"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.svcconfig, "svcconfig"); // optional
		// boxSize += stream.WriteBox( this.scalability, "scalability"); // optional
		// boxSize += stream.WriteBox( this.method, "method"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(svcconfig); // svcconfig
		// boxSize += IsoStream.CalculateBoxSize(scalability); // scalability
		// boxSize += IsoStream.CalculateBoxSize(method); // method
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class AVC2SVCSampleEntry() extends AVC2SampleEntry('avc2' or 'avc4') {
	SVCConfigurationBox	svcconfig;			// optional
	ScalabilityInformationSEIBox	scalability;	// optional
	SVCPriorityAssignmentBox	method;			// optional
}
*/
public partial class AVC2SVCSampleEntry : AVC2SampleEntry
{
	public const string TYPE = "avc2";
	public override string DisplayName { get { return "AVC2SVCSampleEntry"; } }
	public SVCConfigurationBox Svcconfig { get { return this.children.OfType<SVCConfigurationBox>().FirstOrDefault(); } }
	public ScalabilityInformationSEIBox Scalability { get { return this.children.OfType<ScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public SVCPriorityAssignmentBox Method { get { return this.children.OfType<SVCPriorityAssignmentBox>().FirstOrDefault(); } }

	public AVC2SVCSampleEntry(): base(IsoStream.FromFourCC("avc2"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.svcconfig, "svcconfig"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scalability, "scalability"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.method, "method"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.svcconfig, "svcconfig"); // optional
		// boxSize += stream.WriteBox( this.scalability, "scalability"); // optional
		// boxSize += stream.WriteBox( this.method, "method"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(svcconfig); // svcconfig
		// boxSize += IsoStream.CalculateBoxSize(scalability); // scalability
		// boxSize += IsoStream.CalculateBoxSize(method); // method
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*

*/
public partial class AVC2SVCSampleEntryavc4Dup : AVC2SampleEntry
{
	public const string TYPE = "avc4";
	public override string DisplayName { get { return "AVC2SVCSampleEntryavc4Dup"; } }
	public SVCConfigurationBox Svcconfig { get { return this.children.OfType<SVCConfigurationBox>().FirstOrDefault(); } }
	public ScalabilityInformationSEIBox Scalability { get { return this.children.OfType<ScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public SVCPriorityAssignmentBox Method { get { return this.children.OfType<SVCPriorityAssignmentBox>().FirstOrDefault(); } }

	public AVC2SVCSampleEntryavc4Dup(): base(IsoStream.FromFourCC("avc4"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.svcconfig, "svcconfig"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scalability, "scalability"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.method, "method"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.svcconfig, "svcconfig"); // optional
		// boxSize += stream.WriteBox( this.scalability, "scalability"); // optional
		// boxSize += stream.WriteBox( this.method, "method"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(svcconfig); // svcconfig
		// boxSize += IsoStream.CalculateBoxSize(scalability); // scalability
		// boxSize += IsoStream.CalculateBoxSize(method); // method
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
// Use this if the track is NOT AVC compatible
class SVCSampleEntry() extends VisualSampleEntry ('svc1' or 'svc2') {
	SVCConfigurationBox		svcconfig;
	MPEG4ExtensionDescriptorsBox descr;	// optional
	ScalabilityInformationSEIBox	scalability;	// optional
	SVCPriorityAssignmentBox	method;			// optional
}
*/
public partial class SVCSampleEntry : VisualSampleEntry
{
	public const string TYPE = "svc1";
	public override string DisplayName { get { return "SVCSampleEntry"; } }
	public SVCConfigurationBox Svcconfig { get { return this.children.OfType<SVCConfigurationBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }
	public ScalabilityInformationSEIBox Scalability { get { return this.children.OfType<ScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public SVCPriorityAssignmentBox Method { get { return this.children.OfType<SVCPriorityAssignmentBox>().FirstOrDefault(); } }

	public SVCSampleEntry(): base(IsoStream.FromFourCC("svc1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.svcconfig, "svcconfig"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scalability, "scalability"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.method, "method"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.svcconfig, "svcconfig"); 
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		// boxSize += stream.WriteBox( this.scalability, "scalability"); // optional
		// boxSize += stream.WriteBox( this.method, "method"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(svcconfig); // svcconfig
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		// boxSize += IsoStream.CalculateBoxSize(scalability); // scalability
		// boxSize += IsoStream.CalculateBoxSize(method); // method
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*

*/
public partial class SVCSampleEntrysvc2Dup : VisualSampleEntry
{
	public const string TYPE = "svc2";
	public override string DisplayName { get { return "SVCSampleEntrysvc2Dup"; } }
	public SVCConfigurationBox Svcconfig { get { return this.children.OfType<SVCConfigurationBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }
	public ScalabilityInformationSEIBox Scalability { get { return this.children.OfType<ScalabilityInformationSEIBox>().FirstOrDefault(); } }
	public SVCPriorityAssignmentBox Method { get { return this.children.OfType<SVCPriorityAssignmentBox>().FirstOrDefault(); } }

	public SVCSampleEntrysvc2Dup(): base(IsoStream.FromFourCC("svc2"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.svcconfig, "svcconfig"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.scalability, "scalability"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.method, "method"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.svcconfig, "svcconfig"); 
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		// boxSize += stream.WriteBox( this.scalability, "scalability"); // optional
		// boxSize += stream.WriteBox( this.method, "method"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(svcconfig); // svcconfig
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		// boxSize += IsoStream.CalculateBoxSize(scalability); // scalability
		// boxSize += IsoStream.CalculateBoxSize(method); // method
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class HEVCTileSampleEntry() extends VisualSampleEntry ('hvt1'){
	HEVCTileConfigurationBox	config(); // optional
}
*/
public partial class HEVCTileSampleEntry : VisualSampleEntry
{
	public const string TYPE = "hvt1";
	public override string DisplayName { get { return "HEVCTileSampleEntry"; } }
	public HEVCTileConfigurationBox Config { get { return this.children.OfType<HEVCTileConfigurationBox>().FirstOrDefault(); } }

	public HEVCTileSampleEntry(): base(IsoStream.FromFourCC("hvt1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class LHEVCTileSampleEntry() extends VisualSampleEntry ('lht1'){
}
*/
public partial class LHEVCTileSampleEntry : VisualSampleEntry
{
	public const string TYPE = "lht1";
	public override string DisplayName { get { return "LHEVCTileSampleEntry"; } }

	public LHEVCTileSampleEntry(): base(IsoStream.FromFourCC("lht1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
class HEVCTileSSHInfoSampleEntry() extends VisualSampleEntry ('hvt3'){
	HEVCTileConfigurationBox config(); // optional 
}
*/
public partial class HEVCTileSSHInfoSampleEntry : VisualSampleEntry
{
	public const string TYPE = "hvt3";
	public override string DisplayName { get { return "HEVCTileSSHInfoSampleEntry"; } }
	public HEVCTileConfigurationBox Config { get { return this.children.OfType<HEVCTileConfigurationBox>().FirstOrDefault(); } }

	public HEVCTileSSHInfoSampleEntry(): base(IsoStream.FromFourCC("hvt3"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); // optional 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); // optional 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class HEVCSliceSegmentDataSampleEntry() extends VisualSampleEntry ('hvt2'){
	HEVCTileConfigurationBox	config(); // optional
}
*/
public partial class HEVCSliceSegmentDataSampleEntry : VisualSampleEntry
{
	public const string TYPE = "hvt2";
	public override string DisplayName { get { return "HEVCSliceSegmentDataSampleEntry"; } }
	public HEVCTileConfigurationBox Config { get { return this.children.OfType<HEVCTileConfigurationBox>().FirstOrDefault(); } }

	public HEVCSliceSegmentDataSampleEntry(): base(IsoStream.FromFourCC("hvt2"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class VvcSampleEntry() extends VisualSampleEntry ('vvc1' or 'vvi1') {
	VvcConfigurationBox	config;
	MPEG4ExtensionDescriptorsBox () descr;	// optional
}
*/
public partial class VvcSampleEntry : VisualSampleEntry
{
	public const string TYPE = "vvc1";
	public override string DisplayName { get { return "VvcSampleEntry"; } }
	public VvcConfigurationBox Config { get { return this.children.OfType<VvcConfigurationBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }

	public VvcSampleEntry(): base(IsoStream.FromFourCC("vvc1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*

*/
public partial class VvcSampleEntryvvi1Dup : VisualSampleEntry
{
	public const string TYPE = "vvi1";
	public override string DisplayName { get { return "VvcSampleEntryvvi1Dup"; } }
	public VvcConfigurationBox Config { get { return this.children.OfType<VvcConfigurationBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }

	public VvcSampleEntryvvi1Dup(): base(IsoStream.FromFourCC("vvi1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class VvcSubpicSampleEntry() extends VisualSampleEntry ('vvs1') {
	VvcNALUConfigBox config;
}
*/
public partial class VvcSubpicSampleEntry : VisualSampleEntry
{
	public const string TYPE = "vvs1";
	public override string DisplayName { get { return "VvcSubpicSampleEntry"; } }
	public VvcNALUConfigBox Config { get { return this.children.OfType<VvcNALUConfigBox>().FirstOrDefault(); } }

	public VvcSubpicSampleEntry(): base(IsoStream.FromFourCC("vvs1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class VvcNonVCLSampleEntry() extends VisualSampleEntry ('vvcN') {
	VvcNALUConfigBox config;
}
*/
public partial class VvcNonVCLSampleEntry : VisualSampleEntry
{
	public const string TYPE = "vvcN";
	public override string DisplayName { get { return "VvcNonVCLSampleEntry"; } }
	public VvcNALUConfigBox Config { get { return this.children.OfType<VvcNALUConfigBox>().FirstOrDefault(); } }

	public VvcNonVCLSampleEntry(): base(IsoStream.FromFourCC("vvcN"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class EVCSampleEntry() extends VisualSampleEntry('evc1'){
	EVCConfigurationBox	config;
	MPEG4ExtensionDescriptorsBox() descr;	// optional
}
*/
public partial class EVCSampleEntry : VisualSampleEntry
{
	public const string TYPE = "evc1";
	public override string DisplayName { get { return "EVCSampleEntry"; } }
	public EVCConfigurationBox Config { get { return this.children.OfType<EVCConfigurationBox>().FirstOrDefault(); } }
	public MPEG4ExtensionDescriptorsBox Descr { get { return this.children.OfType<MPEG4ExtensionDescriptorsBox>().FirstOrDefault(); } }

	public EVCSampleEntry(): base(IsoStream.FromFourCC("evc1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.descr, "descr"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		// boxSize += stream.WriteBox( this.descr, "descr"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		// boxSize += IsoStream.CalculateBoxSize(descr); // descr
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class SVCMetaDataSampleEntry () extends MetaDataSampleEntry('svcM')
{
	SVCMetadataSampleConfigBox	config;
	SVCPriorityAssignmentBox	methods;		// optional
	SVCPriorityLayerInfoBox		priorities;	// optional
}
*/
public partial class SVCMetaDataSampleEntry : MetaDataSampleEntry
{
	public const string TYPE = "svcM";
	public override string DisplayName { get { return "SVCMetaDataSampleEntry"; } }
	public SVCMetadataSampleConfigBox Config { get { return this.children.OfType<SVCMetadataSampleConfigBox>().FirstOrDefault(); } }
	public SVCPriorityAssignmentBox Methods { get { return this.children.OfType<SVCPriorityAssignmentBox>().FirstOrDefault(); } }
	public SVCPriorityLayerInfoBox Priorities { get { return this.children.OfType<SVCPriorityLayerInfoBox>().FirstOrDefault(); } }

	public SVCMetaDataSampleEntry(): base(IsoStream.FromFourCC("svcM"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.methods, "methods"); // optional
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.priorities, "priorities"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		// boxSize += stream.WriteBox( this.methods, "methods"); // optional
		// boxSize += stream.WriteBox( this.priorities, "priorities"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		// boxSize += IsoStream.CalculateBoxSize(methods); // methods
		// boxSize += IsoStream.CalculateBoxSize(priorities); // priorities
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class EVCSliceComponentTrackSampleEntry() 
      extends VisualSampleEntry ('evs1' or 'evs2'){
	EVCSliceComponentTrackConfigurationBox	config;
}
*/
public partial class EVCSliceComponentTrackSampleEntry : VisualSampleEntry
{
	public const string TYPE = "evs1";
	public override string DisplayName { get { return "EVCSliceComponentTrackSampleEntry"; } }
	public EVCSliceComponentTrackConfigurationBox Config { get { return this.children.OfType<EVCSliceComponentTrackConfigurationBox>().FirstOrDefault(); } }

	public EVCSliceComponentTrackSampleEntry(): base(IsoStream.FromFourCC("evs1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*

*/
public partial class EVCSliceComponentTrackSampleEntryevs2Dup : VisualSampleEntry
{
	public const string TYPE = "evs2";
	public override string DisplayName { get { return "EVCSliceComponentTrackSampleEntryevs2Dup"; } }
	public EVCSliceComponentTrackConfigurationBox Config { get { return this.children.OfType<EVCSliceComponentTrackConfigurationBox>().FirstOrDefault(); } }

	public EVCSliceComponentTrackSampleEntryevs2Dup(): base(IsoStream.FromFourCC("evs2"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class SubpicCommonGroupBox extends EntityToGroupBox('acgl',0,0)
{	unsigned int(1) level_is_present_flag;
	unsigned int(1) level_is_static_flag;
	bit(6) reserved = 0;
	if( level_is_present_flag )
		unsigned int(8) level_idc;
	if( level_is_static_flag == 0 )
		unsigned_int(32) level_info_entity_idx;
	unsigned int(16) num_active_tracks;
}
*/
public partial class SubpicCommonGroupBox : EntityToGroupBox
{
	public const string TYPE = "acgl";
	public override string DisplayName { get { return "SubpicCommonGroupBox"; } }

	protected bool level_is_present_flag; 
	public bool LevelIsPresentFlag { get { return this.level_is_present_flag; } set { this.level_is_present_flag = value; } }

	protected bool level_is_static_flag; 
	public bool LevelIsStaticFlag { get { return this.level_is_static_flag; } set { this.level_is_static_flag = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte level_idc; 
	public byte LevelIdc { get { return this.level_idc; } set { this.level_idc = value; } }

	protected uint level_info_entity_idx; 
	public uint LevelInfoEntityIdx { get { return this.level_info_entity_idx; } set { this.level_info_entity_idx = value; } }

	protected ushort num_active_tracks; 
	public ushort NumActiveTracks { get { return this.num_active_tracks; } set { this.num_active_tracks = value; } }

	public SubpicCommonGroupBox(): base(IsoStream.FromFourCC("acgl"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.level_is_present_flag, "level_is_present_flag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.level_is_static_flag, "level_is_static_flag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved, "reserved"); 

		if ( level_is_present_flag )
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.level_idc, "level_idc"); 
		}

		if ( level_is_static_flag == false )
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.level_info_entity_idx, "level_info_entity_idx"); 
		}
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.num_active_tracks, "num_active_tracks"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.level_is_present_flag, "level_is_present_flag"); 
		boxSize += stream.WriteBit( this.level_is_static_flag, "level_is_static_flag"); 
		boxSize += stream.WriteBits(6,  this.reserved, "reserved"); 

		if ( level_is_present_flag )
		{
			boxSize += stream.WriteUInt8( this.level_idc, "level_idc"); 
		}

		if ( level_is_static_flag == false )
		{
			boxSize += stream.WriteUInt32( this.level_info_entity_idx, "level_info_entity_idx"); 
		}
		boxSize += stream.WriteUInt16( this.num_active_tracks, "num_active_tracks"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // level_is_present_flag
		boxSize += 1; // level_is_static_flag
		boxSize += 6; // reserved

		if ( level_is_present_flag )
		{
			boxSize += 8; // level_idc
		}

		if ( level_is_static_flag == false )
		{
			boxSize += 32; // level_info_entity_idx
		}
		boxSize += 16; // num_active_tracks
		return boxSize;
	}
}


/*
aligned(8) class SubpicMultipleGroupsBox extends EntityToGroupBox('amgl',0,0)
{
	unsigned int(1) level_is_present_flag;
	unsigned int(1) level_is_static_flag;
	bit(7) reserved = 0;
	if( level_is_present_flag )
		unsigned int(8) level_idc;
	if( level_is_static_flag == 0 )
		unsigned_int(32) level_info_entity_idx;
	unsigned int(16) num_subgroup_ids;
	subgroupIdLen = (num_subgroup_ids >= (1 << 8)) ? 16 : 8;
	for (i = 0; i < num_entities_in_group; i++)
		unsigned int(subgroupIdLen) track_subgroup_id[i];
	for (i = 0; i < num_subgroup_ids; i++)
		unsigned int(16) num_active_tracks[i];
}
*/
public partial class SubpicMultipleGroupsBox : EntityToGroupBox
{
	public const string TYPE = "amgl";
	public override string DisplayName { get { return "SubpicMultipleGroupsBox"; } }

	protected bool level_is_present_flag; 
	public bool LevelIsPresentFlag { get { return this.level_is_present_flag; } set { this.level_is_present_flag = value; } }

	protected bool level_is_static_flag; 
	public bool LevelIsStaticFlag { get { return this.level_is_static_flag; } set { this.level_is_static_flag = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte level_idc; 
	public byte LevelIdc { get { return this.level_idc; } set { this.level_idc = value; } }

	protected uint level_info_entity_idx; 
	public uint LevelInfoEntityIdx { get { return this.level_info_entity_idx; } set { this.level_info_entity_idx = value; } }

	protected ushort num_subgroup_ids; 
	public ushort NumSubgroupIds { get { return this.num_subgroup_ids; } set { this.num_subgroup_ids = value; } }

	protected byte[][] track_subgroup_id; 
	public byte[][] TrackSubgroupId { get { return this.track_subgroup_id; } set { this.track_subgroup_id = value; } }

	protected ushort[] num_active_tracks; 
	public ushort[] NumActiveTracks { get { return this.num_active_tracks; } set { this.num_active_tracks = value; } }

	public SubpicMultipleGroupsBox(): base(IsoStream.FromFourCC("amgl"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.level_is_present_flag, "level_is_present_flag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.level_is_static_flag, "level_is_static_flag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.reserved, "reserved"); 

		if ( level_is_present_flag )
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.level_idc, "level_idc"); 
		}

		if ( level_is_static_flag == false )
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.level_info_entity_idx, "level_info_entity_idx"); 
		}
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.num_subgroup_ids, "num_subgroup_ids"); 
		ulong subgroupIdLen = (ulong)((num_subgroup_ids >= (1 << 8)) ? 16 : 8);

		this.track_subgroup_id = new byte[IsoStream.GetInt( num_entities_in_group)][];
		for (int i = 0; i < num_entities_in_group; i++)
		{
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(subgroupIdLen ),  out this.track_subgroup_id[i], "track_subgroup_id"); 
		}

		this.num_active_tracks = new ushort[IsoStream.GetInt( num_subgroup_ids)];
		for (int i = 0; i < num_subgroup_ids; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.num_active_tracks[i], "num_active_tracks"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.level_is_present_flag, "level_is_present_flag"); 
		boxSize += stream.WriteBit( this.level_is_static_flag, "level_is_static_flag"); 
		boxSize += stream.WriteBits(7,  this.reserved, "reserved"); 

		if ( level_is_present_flag )
		{
			boxSize += stream.WriteUInt8( this.level_idc, "level_idc"); 
		}

		if ( level_is_static_flag == false )
		{
			boxSize += stream.WriteUInt32( this.level_info_entity_idx, "level_info_entity_idx"); 
		}
		boxSize += stream.WriteUInt16( this.num_subgroup_ids, "num_subgroup_ids"); 
		ulong subgroupIdLen = (ulong)((num_subgroup_ids >= (1 << 8)) ? 16 : 8);

		for (int i = 0; i < num_entities_in_group; i++)
		{
			boxSize += stream.WriteBits((uint)(subgroupIdLen ),  this.track_subgroup_id[i], "track_subgroup_id"); 
		}

		for (int i = 0; i < num_subgroup_ids; i++)
		{
			boxSize += stream.WriteUInt16( this.num_active_tracks[i], "num_active_tracks"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // level_is_present_flag
		boxSize += 1; // level_is_static_flag
		boxSize += 7; // reserved

		if ( level_is_present_flag )
		{
			boxSize += 8; // level_idc
		}

		if ( level_is_static_flag == false )
		{
			boxSize += 32; // level_info_entity_idx
		}
		boxSize += 16; // num_subgroup_ids
		ulong subgroupIdLen = (ulong)((num_subgroup_ids >= (1 << 8)) ? 16 : 8);

		for (int i = 0; i < num_entities_in_group; i++)
		{
			boxSize += (ulong)(subgroupIdLen ); // track_subgroup_id
		}

		for (int i = 0; i < num_subgroup_ids; i++)
		{
			boxSize += 16; // num_active_tracks
		}
		return boxSize;
	}
}


/*
aligned(8) class OperatingPointGroupBox extends EntityToGroupBox('opeg',0,0)
{
	unsigned int(8) num_profile_tier_level_minus1;
	for (i=0; i<=num_profile_tier_level_minus1; i++)
		VvcPTLRecord(0) opeg_ptl[i];
	bit(6) reserved = 0;
	unsigned int(1) incomplete_operating_points_flag;
	unsigned int(9) num_olss;
	for (i=0; i<num_olss; i++) {
		unsigned int(8) ptl_idx[i];
		unsigned int(9) ols_idx[i];
		unsigned int(6) layer_count[i];
		bit(1) reserved = 0;
		unsigned int(1) layer_info_present_flag[i];
		if (layer_info_present_flag[i]) {
			for (j=0; j<layer_count[i]; j++) {
				unsigned int(6) layer_id[i][j];
				unsigned int(1) is_output_layer[i][j];
				bit(1) reserved = 0;
			}
		}
	}
	bit(4) reserved = 0;
	unsigned int(12) num_operating_points;
	for (i=0; i<num_operating_points; i++) {
		unsigned int(9) ols_loop_entry_idx;
		unsigned int(3) max_temporal_id;
		unsigned int(1) frame_rate_info_flag;
		unsigned int(1) bit_rate_info_flag;
		if (incomplete_operating_points_flag) {
			unsigned int(2) op_availability_idc;
		}
		else
			bit(2) reserved = 0;
		bit(3) reserved = 0;
		unsigned int(2) chroma_format_idc;
		unsigned int(3) bit_depth_minus8;
		unsigned_int(16) max_picture_width;
		unsigned_int(16) max_picture_height;
		if (frame_rate_info_flag) {
			unsigned int(16) avg_frame_rate;
			bit(6) reserved = 0;
			unsigned int(2) constant_frame_rate;
		}
		if (bit_rate_info_flag) {
			unsigned int(32) max_bit_rate;
			unsigned int(32) avg_bit_rate;
		}
		unsigned int(8) entity_count;
		for (j=0; j<entity_count; j++)
			unsigned int(8) entity_idx;
	}
}
*/
public partial class OperatingPointGroupBox : EntityToGroupBox
{
	public const string TYPE = "opeg";
	public override string DisplayName { get { return "OperatingPointGroupBox"; } }

	protected byte num_profile_tier_level_minus1; 
	public byte NumProfileTierLevelMinus1 { get { return this.num_profile_tier_level_minus1; } set { this.num_profile_tier_level_minus1 = value; } }

	protected VvcPTLRecord[] opeg_ptl; 
	public VvcPTLRecord[] OpegPtl { get { return this.opeg_ptl; } set { this.opeg_ptl = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected bool incomplete_operating_points_flag; 
	public bool IncompleteOperatingPointsFlag { get { return this.incomplete_operating_points_flag; } set { this.incomplete_operating_points_flag = value; } }

	protected ushort num_olss; 
	public ushort NumOlss { get { return this.num_olss; } set { this.num_olss = value; } }

	protected byte[] ptl_idx; 
	public byte[] PtlIdx { get { return this.ptl_idx; } set { this.ptl_idx = value; } }

	protected ushort[] ols_idx; 
	public ushort[] OlsIdx { get { return this.ols_idx; } set { this.ols_idx = value; } }

	protected byte[] layer_count; 
	public byte[] LayerCount { get { return this.layer_count; } set { this.layer_count = value; } }

	protected bool[] reserved0; 
	public bool[] Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected bool[] layer_info_present_flag; 
	public bool[] LayerInfoPresentFlag { get { return this.layer_info_present_flag; } set { this.layer_info_present_flag = value; } }

	protected byte[][] layer_id; 
	public byte[][] LayerId { get { return this.layer_id; } set { this.layer_id = value; } }

	protected bool[][] is_output_layer; 
	public bool[][] IsOutputLayer { get { return this.is_output_layer; } set { this.is_output_layer = value; } }

	protected bool[][] reserved00; 
	public bool[][] Reserved00 { get { return this.reserved00; } set { this.reserved00 = value; } }

	protected byte reserved1 = 0; 
	public byte Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected ushort num_operating_points; 
	public ushort NumOperatingPoints { get { return this.num_operating_points; } set { this.num_operating_points = value; } }

	protected ushort[] ols_loop_entry_idx; 
	public ushort[] OlsLoopEntryIdx { get { return this.ols_loop_entry_idx; } set { this.ols_loop_entry_idx = value; } }

	protected byte[] max_temporal_id; 
	public byte[] MaxTemporalId { get { return this.max_temporal_id; } set { this.max_temporal_id = value; } }

	protected bool[] frame_rate_info_flag; 
	public bool[] FrameRateInfoFlag { get { return this.frame_rate_info_flag; } set { this.frame_rate_info_flag = value; } }

	protected bool[] bit_rate_info_flag; 
	public bool[] BitRateInfoFlag { get { return this.bit_rate_info_flag; } set { this.bit_rate_info_flag = value; } }

	protected byte[] op_availability_idc; 
	public byte[] OpAvailabilityIdc { get { return this.op_availability_idc; } set { this.op_availability_idc = value; } }

	protected byte[] reserved2; 
	public byte[] Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

	protected byte[] reserved01; 
	public byte[] Reserved01 { get { return this.reserved01; } set { this.reserved01 = value; } }

	protected byte[] chroma_format_idc; 
	public byte[] ChromaFormatIdc { get { return this.chroma_format_idc; } set { this.chroma_format_idc = value; } }

	protected byte[] bit_depth_minus8; 
	public byte[] BitDepthMinus8 { get { return this.bit_depth_minus8; } set { this.bit_depth_minus8 = value; } }

	protected ushort[] max_picture_width; 
	public ushort[] MaxPictureWidth { get { return this.max_picture_width; } set { this.max_picture_width = value; } }

	protected ushort[] max_picture_height; 
	public ushort[] MaxPictureHeight { get { return this.max_picture_height; } set { this.max_picture_height = value; } }

	protected ushort[] avg_frame_rate; 
	public ushort[] AvgFrameRate { get { return this.avg_frame_rate; } set { this.avg_frame_rate = value; } }

	protected byte[] reserved10; 
	public byte[] Reserved10 { get { return this.reserved10; } set { this.reserved10 = value; } }

	protected byte[] constant_frame_rate; 
	public byte[] ConstantFrameRate { get { return this.constant_frame_rate; } set { this.constant_frame_rate = value; } }

	protected uint[] max_bit_rate; 
	public uint[] MaxBitRate { get { return this.max_bit_rate; } set { this.max_bit_rate = value; } }

	protected uint[] avg_bit_rate; 
	public uint[] AvgBitRate { get { return this.avg_bit_rate; } set { this.avg_bit_rate = value; } }

	protected byte[] entity_count; 
	public byte[] EntityCount { get { return this.entity_count; } set { this.entity_count = value; } }

	protected byte[][] entity_idx; 
	public byte[][] EntityIdx { get { return this.entity_idx; } set { this.entity_idx = value; } }

	public OperatingPointGroupBox(): base(IsoStream.FromFourCC("opeg"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.num_profile_tier_level_minus1, "num_profile_tier_level_minus1"); 

		this.opeg_ptl = new VvcPTLRecord[IsoStream.GetInt(num_profile_tier_level_minus1 + 1)];
		for (int i=0; i<=num_profile_tier_level_minus1; i++)
		{
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new VvcPTLRecord(0),  out this.opeg_ptl[i], "opeg_ptl"); 
		}
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.incomplete_operating_points_flag, "incomplete_operating_points_flag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 9,  out this.num_olss, "num_olss"); 

		this.ptl_idx = new byte[IsoStream.GetInt(num_olss)];
		this.ols_idx = new ushort[IsoStream.GetInt(num_olss)];
		this.layer_count = new byte[IsoStream.GetInt(num_olss)];
		this.reserved0 = new bool[IsoStream.GetInt(num_olss)];
		this.layer_info_present_flag = new bool[IsoStream.GetInt(num_olss)];
		this.layer_id = new byte[IsoStream.GetInt(num_olss)][];
		this.is_output_layer = new bool[IsoStream.GetInt(num_olss)][];
		this.reserved00 = new bool[IsoStream.GetInt(num_olss)][];
		for (int i=0; i<num_olss; i++)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.ptl_idx[i], "ptl_idx"); 
			boxSize += stream.ReadBits(boxSize, readSize, 9,  out this.ols_idx[i], "ols_idx"); 
			boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.layer_count[i], "layer_count"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved0[i], "reserved0"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.layer_info_present_flag[i], "layer_info_present_flag"); 

			if (layer_info_present_flag[i])
			{

				this.layer_id[i] = new byte[IsoStream.GetInt(layer_count[i])];
				this.is_output_layer[i] = new bool[IsoStream.GetInt(layer_count[i])];
				this.reserved00[i] = new bool[IsoStream.GetInt(layer_count[i])];
				for (int j=0; j<layer_count[i]; j++)
				{
					boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.layer_id[i][j], "layer_id"); 
					boxSize += stream.ReadBit(boxSize, readSize,  out this.is_output_layer[i][j], "is_output_layer"); 
					boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved00[i][j], "reserved00"); 
				}
			}
		}
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.reserved1, "reserved1"); 
		boxSize += stream.ReadBits(boxSize, readSize, 12,  out this.num_operating_points, "num_operating_points"); 

		this.ols_loop_entry_idx = new ushort[IsoStream.GetInt(num_operating_points)];
		this.max_temporal_id = new byte[IsoStream.GetInt(num_operating_points)];
		this.frame_rate_info_flag = new bool[IsoStream.GetInt(num_operating_points)];
		this.bit_rate_info_flag = new bool[IsoStream.GetInt(num_operating_points)];
		this.op_availability_idc = new byte[IsoStream.GetInt(num_operating_points)];
		this.reserved2 = new byte[IsoStream.GetInt(num_operating_points)];
		this.reserved01 = new byte[IsoStream.GetInt(num_operating_points)];
		this.chroma_format_idc = new byte[IsoStream.GetInt(num_operating_points)];
		this.bit_depth_minus8 = new byte[IsoStream.GetInt(num_operating_points)];
		this.max_picture_width = new ushort[IsoStream.GetInt(num_operating_points)];
		this.max_picture_height = new ushort[IsoStream.GetInt(num_operating_points)];
		this.avg_frame_rate = new ushort[IsoStream.GetInt(num_operating_points)];
		this.reserved10 = new byte[IsoStream.GetInt(num_operating_points)];
		this.constant_frame_rate = new byte[IsoStream.GetInt(num_operating_points)];
		this.max_bit_rate = new uint[IsoStream.GetInt(num_operating_points)];
		this.avg_bit_rate = new uint[IsoStream.GetInt(num_operating_points)];
		this.entity_count = new byte[IsoStream.GetInt(num_operating_points)];
		this.entity_idx = new byte[IsoStream.GetInt(num_operating_points)][];
		for (int i=0; i<num_operating_points; i++)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 9,  out this.ols_loop_entry_idx[i], "ols_loop_entry_idx"); 
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.max_temporal_id[i], "max_temporal_id"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.frame_rate_info_flag[i], "frame_rate_info_flag"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.bit_rate_info_flag[i], "bit_rate_info_flag"); 

			if (incomplete_operating_points_flag)
			{
				boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.op_availability_idc[i], "op_availability_idc"); 
			}

			else 
			{
				boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.reserved2[i], "reserved2"); 
			}
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.reserved01[i], "reserved01"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.chroma_format_idc[i], "chroma_format_idc"); 
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.bit_depth_minus8[i], "bit_depth_minus8"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.max_picture_width[i], "max_picture_width"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.max_picture_height[i], "max_picture_height"); 

			if (frame_rate_info_flag[i])
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.avg_frame_rate[i], "avg_frame_rate"); 
				boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved10[i], "reserved10"); 
				boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.constant_frame_rate[i], "constant_frame_rate"); 
			}

			if (bit_rate_info_flag[i])
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.max_bit_rate[i], "max_bit_rate"); 
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.avg_bit_rate[i], "avg_bit_rate"); 
			}
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.entity_count[i], "entity_count"); 

			this.entity_idx[i] = new byte[IsoStream.GetInt(entity_count[i])];
			for (int j=0; j<entity_count[i]; j++)
			{
				boxSize += stream.ReadUInt8(boxSize, readSize,  out this.entity_idx[i][j], "entity_idx"); 
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.num_profile_tier_level_minus1, "num_profile_tier_level_minus1"); 

		for (int i=0; i<=num_profile_tier_level_minus1; i++)
		{
			boxSize += stream.WriteClass( this.opeg_ptl[i], "opeg_ptl"); 
		}
		boxSize += stream.WriteBits(6,  this.reserved, "reserved"); 
		boxSize += stream.WriteBit( this.incomplete_operating_points_flag, "incomplete_operating_points_flag"); 
		boxSize += stream.WriteBits(9,  this.num_olss, "num_olss"); 

		for (int i=0; i<num_olss; i++)
		{
			boxSize += stream.WriteUInt8( this.ptl_idx[i], "ptl_idx"); 
			boxSize += stream.WriteBits(9,  this.ols_idx[i], "ols_idx"); 
			boxSize += stream.WriteBits(6,  this.layer_count[i], "layer_count"); 
			boxSize += stream.WriteBit( this.reserved0[i], "reserved0"); 
			boxSize += stream.WriteBit( this.layer_info_present_flag[i], "layer_info_present_flag"); 

			if (layer_info_present_flag[i])
			{

				for (int j=0; j<layer_count[i]; j++)
				{
					boxSize += stream.WriteBits(6,  this.layer_id[i][j], "layer_id"); 
					boxSize += stream.WriteBit( this.is_output_layer[i][j], "is_output_layer"); 
					boxSize += stream.WriteBit( this.reserved00[i][j], "reserved00"); 
				}
			}
		}
		boxSize += stream.WriteBits(4,  this.reserved1, "reserved1"); 
		boxSize += stream.WriteBits(12,  this.num_operating_points, "num_operating_points"); 

		for (int i=0; i<num_operating_points; i++)
		{
			boxSize += stream.WriteBits(9,  this.ols_loop_entry_idx[i], "ols_loop_entry_idx"); 
			boxSize += stream.WriteBits(3,  this.max_temporal_id[i], "max_temporal_id"); 
			boxSize += stream.WriteBit( this.frame_rate_info_flag[i], "frame_rate_info_flag"); 
			boxSize += stream.WriteBit( this.bit_rate_info_flag[i], "bit_rate_info_flag"); 

			if (incomplete_operating_points_flag)
			{
				boxSize += stream.WriteBits(2,  this.op_availability_idc[i], "op_availability_idc"); 
			}

			else 
			{
				boxSize += stream.WriteBits(2,  this.reserved2[i], "reserved2"); 
			}
			boxSize += stream.WriteBits(3,  this.reserved01[i], "reserved01"); 
			boxSize += stream.WriteBits(2,  this.chroma_format_idc[i], "chroma_format_idc"); 
			boxSize += stream.WriteBits(3,  this.bit_depth_minus8[i], "bit_depth_minus8"); 
			boxSize += stream.WriteUInt16( this.max_picture_width[i], "max_picture_width"); 
			boxSize += stream.WriteUInt16( this.max_picture_height[i], "max_picture_height"); 

			if (frame_rate_info_flag[i])
			{
				boxSize += stream.WriteUInt16( this.avg_frame_rate[i], "avg_frame_rate"); 
				boxSize += stream.WriteBits(6,  this.reserved10[i], "reserved10"); 
				boxSize += stream.WriteBits(2,  this.constant_frame_rate[i], "constant_frame_rate"); 
			}

			if (bit_rate_info_flag[i])
			{
				boxSize += stream.WriteUInt32( this.max_bit_rate[i], "max_bit_rate"); 
				boxSize += stream.WriteUInt32( this.avg_bit_rate[i], "avg_bit_rate"); 
			}
			boxSize += stream.WriteUInt8( this.entity_count[i], "entity_count"); 

			for (int j=0; j<entity_count[i]; j++)
			{
				boxSize += stream.WriteUInt8( this.entity_idx[i][j], "entity_idx"); 
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // num_profile_tier_level_minus1

		for (int i=0; i<=num_profile_tier_level_minus1; i++)
		{
			boxSize += IsoStream.CalculateClassSize(opeg_ptl); // opeg_ptl
		}
		boxSize += 6; // reserved
		boxSize += 1; // incomplete_operating_points_flag
		boxSize += 9; // num_olss

		for (int i=0; i<num_olss; i++)
		{
			boxSize += 8; // ptl_idx
			boxSize += 9; // ols_idx
			boxSize += 6; // layer_count
			boxSize += 1; // reserved0
			boxSize += 1; // layer_info_present_flag

			if (layer_info_present_flag[i])
			{

				for (int j=0; j<layer_count[i]; j++)
				{
					boxSize += 6; // layer_id
					boxSize += 1; // is_output_layer
					boxSize += 1; // reserved00
				}
			}
		}
		boxSize += 4; // reserved1
		boxSize += 12; // num_operating_points

		for (int i=0; i<num_operating_points; i++)
		{
			boxSize += 9; // ols_loop_entry_idx
			boxSize += 3; // max_temporal_id
			boxSize += 1; // frame_rate_info_flag
			boxSize += 1; // bit_rate_info_flag

			if (incomplete_operating_points_flag)
			{
				boxSize += 2; // op_availability_idc
			}

			else 
			{
				boxSize += 2; // reserved2
			}
			boxSize += 3; // reserved01
			boxSize += 2; // chroma_format_idc
			boxSize += 3; // bit_depth_minus8
			boxSize += 16; // max_picture_width
			boxSize += 16; // max_picture_height

			if (frame_rate_info_flag[i])
			{
				boxSize += 16; // avg_frame_rate
				boxSize += 6; // reserved10
				boxSize += 2; // constant_frame_rate
			}

			if (bit_rate_info_flag[i])
			{
				boxSize += 32; // max_bit_rate
				boxSize += 32; // avg_bit_rate
			}
			boxSize += 8; // entity_count

			for (int j=0; j<entity_count[i]; j++)
			{
				boxSize += 8; // entity_idx
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class SwitchableTracksGroupBox extends EntityToGroupBox('swtk',0,0)
{
	for (i = 0; i < num_entities_in_group; i++)
		unsigned int(16) track_switch_hierarchy_id[i];
}
*/
public partial class SwitchableTracksGroupBox : EntityToGroupBox
{
	public const string TYPE = "swtk";
	public override string DisplayName { get { return "SwitchableTracksGroupBox"; } }

	protected ushort[] track_switch_hierarchy_id; 
	public ushort[] TrackSwitchHierarchyId { get { return this.track_switch_hierarchy_id; } set { this.track_switch_hierarchy_id = value; } }

	public SwitchableTracksGroupBox(): base(IsoStream.FromFourCC("swtk"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		this.track_switch_hierarchy_id = new ushort[IsoStream.GetInt( num_entities_in_group)];
		for (int i = 0; i < num_entities_in_group; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.track_switch_hierarchy_id[i], "track_switch_hierarchy_id"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		for (int i = 0; i < num_entities_in_group; i++)
		{
			boxSize += stream.WriteUInt16( this.track_switch_hierarchy_id[i], "track_switch_hierarchy_id"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		for (int i = 0; i < num_entities_in_group; i++)
		{
			boxSize += 16; // track_switch_hierarchy_id
		}
		return boxSize;
	}
}


/*
aligned(8) class EntityToGroupBox('vvcb', version, flags)
extends FullBox('vvcb', version, flags) {
	unsigned int(32) group_id;
	unsigned int(32) num_entities_in_group;
	for(i=0; i<num_entities_in_group; i++)
		unsigned int(32) entity_id;
// the remaining data may be specified for a particular grouping_type
}
*/
public partial class EntityToGroupBoxvvcbDup : FullBox
{
	public const string TYPE = "vvcb";
	public override string DisplayName { get { return "EntityToGroupBoxvvcbDup"; } }

	protected uint group_id; 
	public uint GroupId { get { return this.group_id; } set { this.group_id = value; } }

	protected uint num_entities_in_group; 
	public uint NumEntitiesInGroup { get { return this.num_entities_in_group; } set { this.num_entities_in_group = value; } }

	protected uint[] entity_id;  //  the remaining data may be specified for a particular grouping_type
	public uint[] EntityId { get { return this.entity_id; } set { this.entity_id = value; } }

	public EntityToGroupBoxvvcbDup(byte version = 0, uint flags = 0): base(IsoStream.FromFourCC("vvcb"), version, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.group_id, "group_id"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.num_entities_in_group, "num_entities_in_group"); 

		this.entity_id = new uint[IsoStream.GetInt(num_entities_in_group)];
		for (int i=0; i<num_entities_in_group; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entity_id[i], "entity_id"); // the remaining data may be specified for a particular grouping_type
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.group_id, "group_id"); 
		boxSize += stream.WriteUInt32( this.num_entities_in_group, "num_entities_in_group"); 

		for (int i=0; i<num_entities_in_group; i++)
		{
			boxSize += stream.WriteUInt32( this.entity_id[i], "entity_id"); // the remaining data may be specified for a particular grouping_type
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // group_id
		boxSize += 32; // num_entities_in_group

		for (int i=0; i<num_entities_in_group; i++)
		{
			boxSize += 32; // entity_id
		}
		return boxSize;
	}
}


/*
class AUDSampleEntry() extends VisualSampleGroupEntry ('aud ')
{
	bit(24) audNalUnit;
}
*/
public partial class AUDSampleEntry : VisualSampleGroupEntry
{
	public const string TYPE = "aud ";
	public override string DisplayName { get { return "AUDSampleEntry"; } }

	protected uint audNalUnit; 
	public uint AudNalUnit { get { return this.audNalUnit; } set { this.audNalUnit = value; } }

	public AUDSampleEntry(): base(IsoStream.FromFourCC("aud "))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt24(boxSize, readSize,  out this.audNalUnit, "audNalUnit"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt24( this.audNalUnit, "audNalUnit"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 24; // audNalUnit
		return boxSize;
	}
}


/*
class AVCLayerEntry() extends VisualSampleGroupEntry ('avll')
{
	unsigned int(8)  layerNumber;
	unsigned int(7)  reserved = 0;
	unsigned int(1)  accurateStatisticsFlag;
	unsigned int(16) avgBitRate;
	unsigned int(16) avgFrameRate;
}
*/
public partial class AVCLayerEntry : VisualSampleGroupEntry
{
	public const string TYPE = "avll";
	public override string DisplayName { get { return "AVCLayerEntry"; } }

	protected byte layerNumber; 
	public byte LayerNumber { get { return this.layerNumber; } set { this.layerNumber = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected bool accurateStatisticsFlag; 
	public bool AccurateStatisticsFlag { get { return this.accurateStatisticsFlag; } set { this.accurateStatisticsFlag = value; } }

	protected ushort avgBitRate; 
	public ushort AvgBitRate { get { return this.avgBitRate; } set { this.avgBitRate = value; } }

	protected ushort avgFrameRate; 
	public ushort AvgFrameRate { get { return this.avgFrameRate; } set { this.avgFrameRate = value; } }

	public AVCLayerEntry(): base(IsoStream.FromFourCC("avll"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.layerNumber, "layerNumber"); 
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.accurateStatisticsFlag, "accurateStatisticsFlag"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.avgBitRate, "avgBitRate"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.avgFrameRate, "avgFrameRate"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.layerNumber, "layerNumber"); 
		boxSize += stream.WriteBits(7,  this.reserved, "reserved"); 
		boxSize += stream.WriteBit( this.accurateStatisticsFlag, "accurateStatisticsFlag"); 
		boxSize += stream.WriteUInt16( this.avgBitRate, "avgBitRate"); 
		boxSize += stream.WriteUInt16( this.avgFrameRate, "avgFrameRate"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // layerNumber
		boxSize += 7; // reserved
		boxSize += 1; // accurateStatisticsFlag
		boxSize += 16; // avgBitRate
		boxSize += 16; // avgFrameRate
		return boxSize;
	}
}


/*
class DecodingCapabilityInformation extends VisualSampleGroupEntry ('dcfi') {
	unsigned int(16) dci_nal_unit_length;
	bit(8*dci_nal_unit_length) dci_nal_unit;
}
*/
public partial class DecodingCapabilityInformation : VisualSampleGroupEntry
{
	public const string TYPE = "dcfi";
	public override string DisplayName { get { return "DecodingCapabilityInformation"; } }

	protected ushort dci_nal_unit_length; 
	public ushort DciNalUnitLength { get { return this.dci_nal_unit_length; } set { this.dci_nal_unit_length = value; } }

	protected byte[] dci_nal_unit; 
	public byte[] DciNalUnit { get { return this.dci_nal_unit; } set { this.dci_nal_unit = value; } }

	public DecodingCapabilityInformation(): base(IsoStream.FromFourCC("dcfi"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.dci_nal_unit_length, "dci_nal_unit_length"); 
		boxSize += stream.ReadBits(boxSize, readSize, (uint)(8*dci_nal_unit_length ),  out this.dci_nal_unit, "dci_nal_unit"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.dci_nal_unit_length, "dci_nal_unit_length"); 
		boxSize += stream.WriteBits((uint)(8*dci_nal_unit_length ),  this.dci_nal_unit, "dci_nal_unit"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // dci_nal_unit_length
		boxSize += (ulong)(8*dci_nal_unit_length ); // dci_nal_unit
		return boxSize;
	}
}


/*
class DecodeRetimingEntry() extends VisualSampleGroupEntry ('dtrt') { 
	unsigned int(8) tierCount;
	for (i=1; i<=tierCount; i++) {
		unsigned int(16) tierID;
		signed int(16) delta;
	}
}
*/
public partial class DecodeRetimingEntry : VisualSampleGroupEntry
{
	public const string TYPE = "dtrt";
	public override string DisplayName { get { return "DecodeRetimingEntry"; } }

	protected byte tierCount; 
	public byte TierCount { get { return this.tierCount; } set { this.tierCount = value; } }

	protected ushort[] tierID; 
	public ushort[] TierID { get { return this.tierID; } set { this.tierID = value; } }

	protected short[] delta; 
	public short[] Delta { get { return this.delta; } set { this.delta = value; } }

	public DecodeRetimingEntry(): base(IsoStream.FromFourCC("dtrt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.tierCount, "tierCount"); 

		this.tierID = new ushort[IsoStream.GetInt(tierCount)];
		this.delta = new short[IsoStream.GetInt(tierCount)];
		for (int i=0; i<tierCount; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.tierID[i], "tierID"); 
			boxSize += stream.ReadInt16(boxSize, readSize,  out this.delta[i], "delta"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.tierCount, "tierCount"); 

		for (int i=0; i<tierCount; i++)
		{
			boxSize += stream.WriteUInt16( this.tierID[i], "tierID"); 
			boxSize += stream.WriteInt16( this.delta[i], "delta"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // tierCount

		for (int i=0; i<tierCount; i++)
		{
			boxSize += 16; // tierID
			boxSize += 16; // delta
		}
		return boxSize;
	}
}


/*
class EndOfBitstreamSampleEntry() extends VisualSampleGroupEntry ('eob ')
{
	bit(16) eobNalUnit;
}
*/
public partial class EndOfBitstreamSampleEntry : VisualSampleGroupEntry
{
	public const string TYPE = "eob ";
	public override string DisplayName { get { return "EndOfBitstreamSampleEntry"; } }

	protected ushort eobNalUnit; 
	public ushort EobNalUnit { get { return this.eobNalUnit; } set { this.eobNalUnit = value; } }

	public EndOfBitstreamSampleEntry(): base(IsoStream.FromFourCC("eob "))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.eobNalUnit, "eobNalUnit"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.eobNalUnit, "eobNalUnit"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // eobNalUnit
		return boxSize;
	}
}


/*
class EndOfSequenceSampleEntry() extends VisualSampleGroupEntry ('eos ')
{
	unsigned int(8) num_eos_nal_unit_minus1;
	for (i=0; i <= num_eos_nal_unit_minus1; i++)
		bit(16) eosNalUnit[i];
}
*/
public partial class EndOfSequenceSampleEntry : VisualSampleGroupEntry
{
	public const string TYPE = "eos ";
	public override string DisplayName { get { return "EndOfSequenceSampleEntry"; } }

	protected byte num_eos_nal_unit_minus1; 
	public byte NumEosNalUnitMinus1 { get { return this.num_eos_nal_unit_minus1; } set { this.num_eos_nal_unit_minus1 = value; } }

	protected ushort[] eosNalUnit; 
	public ushort[] EosNalUnit { get { return this.eosNalUnit; } set { this.eosNalUnit = value; } }

	public EndOfSequenceSampleEntry(): base(IsoStream.FromFourCC("eos "))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.num_eos_nal_unit_minus1, "num_eos_nal_unit_minus1"); 

		this.eosNalUnit = new ushort[IsoStream.GetInt( num_eos_nal_unit_minus1 + 1)];
		for (int i=0; i <= num_eos_nal_unit_minus1; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.eosNalUnit[i], "eosNalUnit"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.num_eos_nal_unit_minus1, "num_eos_nal_unit_minus1"); 

		for (int i=0; i <= num_eos_nal_unit_minus1; i++)
		{
			boxSize += stream.WriteUInt16( this.eosNalUnit[i], "eosNalUnit"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // num_eos_nal_unit_minus1

		for (int i=0; i <= num_eos_nal_unit_minus1; i++)
		{
			boxSize += 16; // eosNalUnit
		}
		return boxSize;
	}
}


/*
aligned(8) class LhvcExternalBaseLayerInfo() extends VisualSampleGroupEntry('lbli')
{
	bit(1) reserved = 1;
	unsigned int(1) bl_irap_pic_flag;
	unsigned int(6) bl_irap_nal_unit_type;
	signed   int(8) sample_offset;
}
*/
public partial class LhvcExternalBaseLayerInfo : VisualSampleGroupEntry
{
	public const string TYPE = "lbli";
	public override string DisplayName { get { return "LhvcExternalBaseLayerInfo"; } }

	protected bool reserved = true; 
	public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected bool bl_irap_pic_flag; 
	public bool BlIrapPicFlag { get { return this.bl_irap_pic_flag; } set { this.bl_irap_pic_flag = value; } }

	protected byte bl_irap_nal_unit_type; 
	public byte BlIrapNalUnitType { get { return this.bl_irap_nal_unit_type; } set { this.bl_irap_nal_unit_type = value; } }

	protected sbyte sample_offset; 
	public sbyte SampleOffset { get { return this.sample_offset; } set { this.sample_offset = value; } }

	public LhvcExternalBaseLayerInfo(): base(IsoStream.FromFourCC("lbli"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.bl_irap_pic_flag, "bl_irap_pic_flag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.bl_irap_nal_unit_type, "bl_irap_nal_unit_type"); 
		boxSize += stream.ReadInt8(boxSize, readSize,  out this.sample_offset, "sample_offset"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.reserved, "reserved"); 
		boxSize += stream.WriteBit( this.bl_irap_pic_flag, "bl_irap_pic_flag"); 
		boxSize += stream.WriteBits(6,  this.bl_irap_nal_unit_type, "bl_irap_nal_unit_type"); 
		boxSize += stream.WriteInt8( this.sample_offset, "sample_offset"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // reserved
		boxSize += 1; // bl_irap_pic_flag
		boxSize += 6; // bl_irap_nal_unit_type
		boxSize += 8; // sample_offset
		return boxSize;
	}
}


/*
class LayerInfoGroupEntry extends VisualSampleGroupEntry ('linf') {
	bit(2) reserved = 0;
	unsigned int(6) num_layers_in_track;
	for (i=0; i<num_layers_in_track; i++) {
		bit(2) reserved = 0;
		unsigned int(1) irap_gdr_pics_in_layer_only_flag;
		unsigned int(1) completeness_flag;
		unsigned int(6) layer_id;
		unsigned int(3) min_TemporalId;
		unsigned int(3) max_TemporalId;
		bit(1) reserved = 0;
		unsigned int(7) sub_layer_presence_flags;
	}
}
*/
public partial class LayerInfoGroupEntry : VisualSampleGroupEntry
{
	public const string TYPE = "linf";
	public override string DisplayName { get { return "LayerInfoGroupEntry"; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte num_layers_in_track; 
	public byte NumLayersInTrack { get { return this.num_layers_in_track; } set { this.num_layers_in_track = value; } }

	protected byte[] reserved0; 
	public byte[] Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected bool[] irap_gdr_pics_in_layer_only_flag; 
	public bool[] IrapGdrPicsInLayerOnlyFlag { get { return this.irap_gdr_pics_in_layer_only_flag; } set { this.irap_gdr_pics_in_layer_only_flag = value; } }

	protected bool[] completeness_flag; 
	public bool[] CompletenessFlag { get { return this.completeness_flag; } set { this.completeness_flag = value; } }

	protected byte[] layer_id; 
	public byte[] LayerId { get { return this.layer_id; } set { this.layer_id = value; } }

	protected byte[] min_TemporalId; 
	public byte[] MinTemporalId { get { return this.min_TemporalId; } set { this.min_TemporalId = value; } }

	protected byte[] max_TemporalId; 
	public byte[] MaxTemporalId { get { return this.max_TemporalId; } set { this.max_TemporalId = value; } }

	protected bool[] reserved00; 
	public bool[] Reserved00 { get { return this.reserved00; } set { this.reserved00 = value; } }

	protected byte[] sub_layer_presence_flags; 
	public byte[] SubLayerPresenceFlags { get { return this.sub_layer_presence_flags; } set { this.sub_layer_presence_flags = value; } }

	public LayerInfoGroupEntry(): base(IsoStream.FromFourCC("linf"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.num_layers_in_track, "num_layers_in_track"); 

		this.reserved0 = new byte[IsoStream.GetInt(num_layers_in_track)];
		this.irap_gdr_pics_in_layer_only_flag = new bool[IsoStream.GetInt(num_layers_in_track)];
		this.completeness_flag = new bool[IsoStream.GetInt(num_layers_in_track)];
		this.layer_id = new byte[IsoStream.GetInt(num_layers_in_track)];
		this.min_TemporalId = new byte[IsoStream.GetInt(num_layers_in_track)];
		this.max_TemporalId = new byte[IsoStream.GetInt(num_layers_in_track)];
		this.reserved00 = new bool[IsoStream.GetInt(num_layers_in_track)];
		this.sub_layer_presence_flags = new byte[IsoStream.GetInt(num_layers_in_track)];
		for (int i=0; i<num_layers_in_track; i++)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.reserved0[i], "reserved0"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.irap_gdr_pics_in_layer_only_flag[i], "irap_gdr_pics_in_layer_only_flag"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.completeness_flag[i], "completeness_flag"); 
			boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.layer_id[i], "layer_id"); 
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.min_TemporalId[i], "min_TemporalId"); 
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.max_TemporalId[i], "max_TemporalId"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved00[i], "reserved00"); 
			boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.sub_layer_presence_flags[i], "sub_layer_presence_flags"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(2,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(6,  this.num_layers_in_track, "num_layers_in_track"); 

		for (int i=0; i<num_layers_in_track; i++)
		{
			boxSize += stream.WriteBits(2,  this.reserved0[i], "reserved0"); 
			boxSize += stream.WriteBit( this.irap_gdr_pics_in_layer_only_flag[i], "irap_gdr_pics_in_layer_only_flag"); 
			boxSize += stream.WriteBit( this.completeness_flag[i], "completeness_flag"); 
			boxSize += stream.WriteBits(6,  this.layer_id[i], "layer_id"); 
			boxSize += stream.WriteBits(3,  this.min_TemporalId[i], "min_TemporalId"); 
			boxSize += stream.WriteBits(3,  this.max_TemporalId[i], "max_TemporalId"); 
			boxSize += stream.WriteBit( this.reserved00[i], "reserved00"); 
			boxSize += stream.WriteBits(7,  this.sub_layer_presence_flags[i], "sub_layer_presence_flags"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 2; // reserved
		boxSize += 6; // num_layers_in_track

		for (int i=0; i<num_layers_in_track; i++)
		{
			boxSize += 2; // reserved0
			boxSize += 1; // irap_gdr_pics_in_layer_only_flag
			boxSize += 1; // completeness_flag
			boxSize += 6; // layer_id
			boxSize += 3; // min_TemporalId
			boxSize += 3; // max_TemporalId
			boxSize += 1; // reserved00
			boxSize += 7; // sub_layer_presence_flags
		}
		return boxSize;
	}
}


/*
aligned(8) class VvcMixedNALUnitTypePicEntry() extends VisualSampleGroupEntry('minp')
{
	unsigned int(16) num_mix_nalu_pic_idx;
	for (i = 0; i < num_mix_nalu_pic_idx; i++){
		unsigned int(16) mix_subp_track_idx1[i];
		unsigned int(16) mix_subp_track_idx2[i];
	}
	unsigned int(10) pps_mix_nalu_types_in_pic_bit_pos;
	unsigned int(6) pps_id;
}
*/
public partial class VvcMixedNALUnitTypePicEntry : VisualSampleGroupEntry
{
	public const string TYPE = "minp";
	public override string DisplayName { get { return "VvcMixedNALUnitTypePicEntry"; } }

	protected ushort num_mix_nalu_pic_idx; 
	public ushort NumMixNaluPicIdx { get { return this.num_mix_nalu_pic_idx; } set { this.num_mix_nalu_pic_idx = value; } }

	protected ushort[] mix_subp_track_idx1; 
	public ushort[] MixSubpTrackIdx1 { get { return this.mix_subp_track_idx1; } set { this.mix_subp_track_idx1 = value; } }

	protected ushort[] mix_subp_track_idx2; 
	public ushort[] MixSubpTrackIdx2 { get { return this.mix_subp_track_idx2; } set { this.mix_subp_track_idx2 = value; } }

	protected ushort pps_mix_nalu_types_in_pic_bit_pos; 
	public ushort PpsMixNaluTypesInPicBitPos { get { return this.pps_mix_nalu_types_in_pic_bit_pos; } set { this.pps_mix_nalu_types_in_pic_bit_pos = value; } }

	protected byte pps_id; 
	public byte PpsId { get { return this.pps_id; } set { this.pps_id = value; } }

	public VvcMixedNALUnitTypePicEntry(): base(IsoStream.FromFourCC("minp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.num_mix_nalu_pic_idx, "num_mix_nalu_pic_idx"); 

		this.mix_subp_track_idx1 = new ushort[IsoStream.GetInt( num_mix_nalu_pic_idx)];
		this.mix_subp_track_idx2 = new ushort[IsoStream.GetInt( num_mix_nalu_pic_idx)];
		for (int i = 0; i < num_mix_nalu_pic_idx; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.mix_subp_track_idx1[i], "mix_subp_track_idx1"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.mix_subp_track_idx2[i], "mix_subp_track_idx2"); 
		}
		boxSize += stream.ReadBits(boxSize, readSize, 10,  out this.pps_mix_nalu_types_in_pic_bit_pos, "pps_mix_nalu_types_in_pic_bit_pos"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.pps_id, "pps_id"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.num_mix_nalu_pic_idx, "num_mix_nalu_pic_idx"); 

		for (int i = 0; i < num_mix_nalu_pic_idx; i++)
		{
			boxSize += stream.WriteUInt16( this.mix_subp_track_idx1[i], "mix_subp_track_idx1"); 
			boxSize += stream.WriteUInt16( this.mix_subp_track_idx2[i], "mix_subp_track_idx2"); 
		}
		boxSize += stream.WriteBits(10,  this.pps_mix_nalu_types_in_pic_bit_pos, "pps_mix_nalu_types_in_pic_bit_pos"); 
		boxSize += stream.WriteBits(6,  this.pps_id, "pps_id"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // num_mix_nalu_pic_idx

		for (int i = 0; i < num_mix_nalu_pic_idx; i++)
		{
			boxSize += 16; // mix_subp_track_idx1
			boxSize += 16; // mix_subp_track_idx2
		}
		boxSize += 10; // pps_mix_nalu_types_in_pic_bit_pos
		boxSize += 6; // pps_id
		return boxSize;
	}
}


/*
class MultiviewGroupEntry() extends VisualSampleGroupEntry ('mvif') { 
	unsigned int(8) groupID;
	unsigned int(8) primary_groupID;
	bit(4) reserved = 0;
	unsigned int(1) is_tl_switching_point;
	bit(3) reserved = 0;
	unsigned int(8) tl_switching_distance;
	
	if (groupID == primary_groupID)	// primary definition of tier
	{
		ViewIdentifierBox();			// Mandatory
		TierInfoBox(); 				// Mandatory
		TierDependencyBox(); 		// Mandatory
		PriorityRangeBox();			// Mandatory

		//Optional Boxes or fields may follow when defined later
		TierBitRateBox();						// optional
		BufferingBox();						// optional
		InitialParameterSetBox();			// optional
		ProtectionSchemeInfoBox();			// optional
		ViewPriorityBox();					// optional
	}
}
*/
public partial class MultiviewGroupEntry : VisualSampleGroupEntry
{
	public const string TYPE = "mvif";
	public override string DisplayName { get { return "MultiviewGroupEntry"; } }

	protected byte groupID; 
	public byte GroupID { get { return this.groupID; } set { this.groupID = value; } }

	protected byte primary_groupID; 
	public byte PrimaryGroupID { get { return this.primary_groupID; } set { this.primary_groupID = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected bool is_tl_switching_point; 
	public bool IsTlSwitchingPoint { get { return this.is_tl_switching_point; } set { this.is_tl_switching_point = value; } }

	protected byte reserved0 = 0; 
	public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected byte tl_switching_distance; 
	public byte TlSwitchingDistance { get { return this.tl_switching_distance; } set { this.tl_switching_distance = value; } }
	public ViewIdentifierBox _ViewIdentifierBox { get { return this.children.OfType<ViewIdentifierBox>().FirstOrDefault(); } }
	public TierInfoBox _TierInfoBox { get { return this.children.OfType<TierInfoBox>().FirstOrDefault(); } }
	public TierDependencyBox _TierDependencyBox { get { return this.children.OfType<TierDependencyBox>().FirstOrDefault(); } }
	public PriorityRangeBox _PriorityRangeBox { get { return this.children.OfType<PriorityRangeBox>().FirstOrDefault(); } }
	public TierBitRateBox _TierBitRateBox { get { return this.children.OfType<TierBitRateBox>().FirstOrDefault(); } }
	public BufferingBox _BufferingBox { get { return this.children.OfType<BufferingBox>().FirstOrDefault(); } }
	public InitialParameterSetBox _InitialParameterSetBox { get { return this.children.OfType<InitialParameterSetBox>().FirstOrDefault(); } }
	public ProtectionSchemeInfoBox _ProtectionSchemeInfoBox { get { return this.children.OfType<ProtectionSchemeInfoBox>().FirstOrDefault(); } }
	public ViewPriorityBox _ViewPriorityBox { get { return this.children.OfType<ViewPriorityBox>().FirstOrDefault(); } }

	public MultiviewGroupEntry(): base(IsoStream.FromFourCC("mvif"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.groupID, "groupID"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.primary_groupID, "primary_groupID"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.is_tl_switching_point, "is_tl_switching_point"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.reserved0, "reserved0"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.tl_switching_distance, "tl_switching_distance"); 

		if (groupID == primary_groupID)
		{
			// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.ViewIdentifierBox, "ViewIdentifierBox"); // Mandatory
			// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.TierInfoBox, "TierInfoBox"); // Mandatory
			// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.TierDependencyBox, "TierDependencyBox"); // Mandatory
			// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.PriorityRangeBox, "PriorityRangeBox"); // Mandatory
			/* Optional Boxes or fields may follow when defined later */
			// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.TierBitRateBox, "TierBitRateBox"); // optional
			// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.BufferingBox, "BufferingBox"); // optional
			// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.InitialParameterSetBox, "InitialParameterSetBox"); // optional
			// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.ProtectionSchemeInfoBox, "ProtectionSchemeInfoBox"); // optional
			// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.ViewPriorityBox, "ViewPriorityBox"); // optional
		}
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.groupID, "groupID"); 
		boxSize += stream.WriteUInt8( this.primary_groupID, "primary_groupID"); 
		boxSize += stream.WriteBits(4,  this.reserved, "reserved"); 
		boxSize += stream.WriteBit( this.is_tl_switching_point, "is_tl_switching_point"); 
		boxSize += stream.WriteBits(3,  this.reserved0, "reserved0"); 
		boxSize += stream.WriteUInt8( this.tl_switching_distance, "tl_switching_distance"); 

		if (groupID == primary_groupID)
		{
			// boxSize += stream.WriteBox( this.ViewIdentifierBox, "ViewIdentifierBox"); // Mandatory
			// boxSize += stream.WriteBox( this.TierInfoBox, "TierInfoBox"); // Mandatory
			// boxSize += stream.WriteBox( this.TierDependencyBox, "TierDependencyBox"); // Mandatory
			// boxSize += stream.WriteBox( this.PriorityRangeBox, "PriorityRangeBox"); // Mandatory
			/* Optional Boxes or fields may follow when defined later */
			// boxSize += stream.WriteBox( this.TierBitRateBox, "TierBitRateBox"); // optional
			// boxSize += stream.WriteBox( this.BufferingBox, "BufferingBox"); // optional
			// boxSize += stream.WriteBox( this.InitialParameterSetBox, "InitialParameterSetBox"); // optional
			// boxSize += stream.WriteBox( this.ProtectionSchemeInfoBox, "ProtectionSchemeInfoBox"); // optional
			// boxSize += stream.WriteBox( this.ViewPriorityBox, "ViewPriorityBox"); // optional
		}
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // groupID
		boxSize += 8; // primary_groupID
		boxSize += 4; // reserved
		boxSize += 1; // is_tl_switching_point
		boxSize += 3; // reserved0
		boxSize += 8; // tl_switching_distance

		if (groupID == primary_groupID)
		{
			// boxSize += IsoStream.CalculateBoxSize(ViewIdentifierBox); // ViewIdentifierBox
			// boxSize += IsoStream.CalculateBoxSize(TierInfoBox); // TierInfoBox
			// boxSize += IsoStream.CalculateBoxSize(TierDependencyBox); // TierDependencyBox
			// boxSize += IsoStream.CalculateBoxSize(PriorityRangeBox); // PriorityRangeBox
			/* Optional Boxes or fields may follow when defined later */
			// boxSize += IsoStream.CalculateBoxSize(TierBitRateBox); // TierBitRateBox
			// boxSize += IsoStream.CalculateBoxSize(BufferingBox); // BufferingBox
			// boxSize += IsoStream.CalculateBoxSize(InitialParameterSetBox); // InitialParameterSetBox
			// boxSize += IsoStream.CalculateBoxSize(ProtectionSchemeInfoBox); // ProtectionSchemeInfoBox
			// boxSize += IsoStream.CalculateBoxSize(ViewPriorityBox); // ViewPriorityBox
		}
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class NALUMapEntry() extends VisualSampleGroupEntry ('nalm') {
	bit(6) reserved = 0;
	unsigned int(1) large_size;
	unsigned int(1) rle;
	if (large_size) {
		unsigned int(16) entry_count;
	} else {
		unsigned int(8) entry_count;
	}
	for (i=1; i<= entry_count; i++) {
		if (rle) {
			if (large_size) {
				unsigned int(16) NALU_start_number;
			} else {
				unsigned int(8) NALU_start_number;
			}
		}
		unsigned int(16) groupID;
	}
}
*/
public partial class NALUMapEntry : VisualSampleGroupEntry
{
	public const string TYPE = "nalm";
	public override string DisplayName { get { return "NALUMapEntry"; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected bool large_size; 
	public bool LargeSize { get { return this.large_size; } set { this.large_size = value; } }

	protected bool rle; 
	public bool Rle { get { return this.rle; } set { this.rle = value; } }

	protected ushort entry_count; 
	public ushort EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected ushort[] NALU_start_number; 
	public ushort[] NALUStartNumber { get { return this.NALU_start_number; } set { this.NALU_start_number = value; } }

	protected ushort[] groupID; 
	public ushort[] GroupID { get { return this.groupID; } set { this.groupID = value; } }

	public NALUMapEntry(): base(IsoStream.FromFourCC("nalm"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.large_size, "large_size"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.rle, "rle"); 

		if (large_size)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.entry_count, "entry_count"); 
		}

		else 
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.entry_count, "entry_count"); 
		}

		this.NALU_start_number = new ushort[IsoStream.GetInt( entry_count)];
		this.groupID = new ushort[IsoStream.GetInt( entry_count)];
		for (int i=0; i< entry_count; i++)
		{

			if (rle)
			{

				if (large_size)
				{
					boxSize += stream.ReadUInt16(boxSize, readSize,  out this.NALU_start_number[i], "NALU_start_number"); 
				}

				else 
				{
					boxSize += stream.ReadUInt8(boxSize, readSize,  out this.NALU_start_number[i], "NALU_start_number"); 
				}
			}
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.groupID[i], "groupID"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(6,  this.reserved, "reserved"); 
		boxSize += stream.WriteBit( this.large_size, "large_size"); 
		boxSize += stream.WriteBit( this.rle, "rle"); 

		if (large_size)
		{
			boxSize += stream.WriteUInt16( this.entry_count, "entry_count"); 
		}

		else 
		{
			boxSize += stream.WriteUInt8( this.entry_count, "entry_count"); 
		}

		for (int i=0; i< entry_count; i++)
		{

			if (rle)
			{

				if (large_size)
				{
					boxSize += stream.WriteUInt16( this.NALU_start_number[i], "NALU_start_number"); 
				}

				else 
				{
					boxSize += stream.WriteUInt8( this.NALU_start_number[i], "NALU_start_number"); 
				}
			}
			boxSize += stream.WriteUInt16( this.groupID[i], "groupID"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 6; // reserved
		boxSize += 1; // large_size
		boxSize += 1; // rle

		if (large_size)
		{
			boxSize += 16; // entry_count
		}

		else 
		{
			boxSize += 8; // entry_count
		}

		for (int i=0; i< entry_count; i++)
		{

			if (rle)
			{

				if (large_size)
				{
					boxSize += 16; // NALU_start_number
				}

				else 
				{
					boxSize += 8; // NALU_start_number
				}
			}
			boxSize += 16; // groupID
		}
		return boxSize;
	}
}


/*
class OperatingPointsInformation extends VisualSampleGroupEntry ('oinf') {
	OperatingPointsRecord oinf;
}
*/
public partial class OperatingPointsInformation : VisualSampleGroupEntry
{
	public const string TYPE = "oinf";
	public override string DisplayName { get { return "OperatingPointsInformation"; } }

	protected OperatingPointsRecord oinf; 
	public OperatingPointsRecord Oinf { get { return this.oinf; } set { this.oinf = value; } }

	public OperatingPointsInformation(): base(IsoStream.FromFourCC("oinf"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new OperatingPointsRecord(),  out this.oinf, "oinf"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.oinf, "oinf"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(oinf); // oinf
		return boxSize;
	}
}


/*
class OperatingPointDecodeTimeHint()
extends VisualSampleGroupEntry ('opth')
{
	signed int(32) delta_time;
}

*/
public partial class OperatingPointDecodeTimeHint : VisualSampleGroupEntry
{
	public const string TYPE = "opth";
	public override string DisplayName { get { return "OperatingPointDecodeTimeHint"; } }

	protected int delta_time; 
	public int DeltaTime { get { return this.delta_time; } set { this.delta_time = value; } }

	public OperatingPointDecodeTimeHint(): base(IsoStream.FromFourCC("opth"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.delta_time, "delta_time"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt32( this.delta_time, "delta_time"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // delta_time
		return boxSize;
	}
}


/*
class ParameterSetNALUEntry() extends VisualSampleGroupEntry ('pase')
{
	unsigned int(16) ps_nalu_length;
	bit(8* ps_nalu_length) ps_nal_unit;
}
*/
public partial class ParameterSetNALUEntry : VisualSampleGroupEntry
{
	public const string TYPE = "pase";
	public override string DisplayName { get { return "ParameterSetNALUEntry"; } }

	protected ushort ps_nalu_length; 
	public ushort PsNaluLength { get { return this.ps_nalu_length; } set { this.ps_nalu_length = value; } }

	protected byte[] ps_nal_unit; 
	public byte[] PsNalUnit { get { return this.ps_nal_unit; } set { this.ps_nal_unit = value; } }

	public ParameterSetNALUEntry(): base(IsoStream.FromFourCC("pase"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.ps_nalu_length, "ps_nalu_length"); 
		boxSize += stream.ReadBits(boxSize, readSize, (uint)(8* ps_nalu_length ),  out this.ps_nal_unit, "ps_nal_unit"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.ps_nalu_length, "ps_nalu_length"); 
		boxSize += stream.WriteBits((uint)(8* ps_nalu_length ),  this.ps_nal_unit, "ps_nal_unit"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // ps_nalu_length
		boxSize += (ulong)(8* ps_nalu_length ); // ps_nal_unit
		return boxSize;
	}
}


/*
class PSSampleGroupEntry() extends VisualSampleGroupEntry ('pss1')
{
	unsigned int(1) sps_present;
	unsigned int(1) pps_present;
	unsigned int(1) aps_present;
	bit(5) reserved = 0;
}
*/
public partial class PSSampleGroupEntry : VisualSampleGroupEntry
{
	public const string TYPE = "pss1";
	public override string DisplayName { get { return "PSSampleGroupEntry"; } }

	protected bool sps_present; 
	public bool SpsPresent { get { return this.sps_present; } set { this.sps_present = value; } }

	protected bool pps_present; 
	public bool PpsPresent { get { return this.pps_present; } set { this.pps_present = value; } }

	protected bool aps_present; 
	public bool ApsPresent { get { return this.aps_present; } set { this.aps_present = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	public PSSampleGroupEntry(): base(IsoStream.FromFourCC("pss1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.sps_present, "sps_present"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.pps_present, "pps_present"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.aps_present, "aps_present"); 
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.sps_present, "sps_present"); 
		boxSize += stream.WriteBit( this.pps_present, "pps_present"); 
		boxSize += stream.WriteBit( this.aps_present, "aps_present"); 
		boxSize += stream.WriteBits(5,  this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // sps_present
		boxSize += 1; // pps_present
		boxSize += 1; // aps_present
		boxSize += 5; // reserved
		return boxSize;
	}
}


/*
aligned(8) class VvcRectRegionOrderEntry () extends VisualSampleGroupEntry('rror')
{
	unsigned int(1) subpic_id_info_flag;
	bit(7) reserved = 0;
	unsigned int(16) num_alternate_region_set;
	for (i = 0; i < num_alternate_region_set; i++) {
		unsigned int(16) num_regions_in_set[i];
		unsigned int(16) alternate_region_set_id[i];
		for (j = 0; j < num_regions_in_set[i]; j++)
			unsigned int(16) groupID[i][j];
	}
	unsigned int(16) num_regions_minus1;
	for (i = 0; i < num_regions_minus1; i++)
		unsigned int(16) region_id[i];
	if (subpic_id_info_flag)
		VVCSubpicIDRewritingInfomationStruct() subpic_id_rewriting_info;
}
*/
public partial class VvcRectRegionOrderEntry : VisualSampleGroupEntry
{
	public const string TYPE = "rror";
	public override string DisplayName { get { return "VvcRectRegionOrderEntry"; } }

	protected bool subpic_id_info_flag; 
	public bool SubpicIdInfoFlag { get { return this.subpic_id_info_flag; } set { this.subpic_id_info_flag = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected ushort num_alternate_region_set; 
	public ushort NumAlternateRegionSet { get { return this.num_alternate_region_set; } set { this.num_alternate_region_set = value; } }

	protected ushort[] num_regions_in_set; 
	public ushort[] NumRegionsInSet { get { return this.num_regions_in_set; } set { this.num_regions_in_set = value; } }

	protected ushort[] alternate_region_set_id; 
	public ushort[] AlternateRegionSetId { get { return this.alternate_region_set_id; } set { this.alternate_region_set_id = value; } }

	protected ushort[][] groupID; 
	public ushort[][] GroupID { get { return this.groupID; } set { this.groupID = value; } }

	protected ushort num_regions_minus1; 
	public ushort NumRegionsMinus1 { get { return this.num_regions_minus1; } set { this.num_regions_minus1 = value; } }

	protected ushort[] region_id; 
	public ushort[] RegionId { get { return this.region_id; } set { this.region_id = value; } }

	protected VVCSubpicIDRewritingInfomationStruct subpic_id_rewriting_info; 
	public VVCSubpicIDRewritingInfomationStruct SubpicIdRewritingInfo { get { return this.subpic_id_rewriting_info; } set { this.subpic_id_rewriting_info = value; } }

	public VvcRectRegionOrderEntry(): base(IsoStream.FromFourCC("rror"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.subpic_id_info_flag, "subpic_id_info_flag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.reserved, "reserved"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.num_alternate_region_set, "num_alternate_region_set"); 

		this.num_regions_in_set = new ushort[IsoStream.GetInt( num_alternate_region_set)];
		this.alternate_region_set_id = new ushort[IsoStream.GetInt( num_alternate_region_set)];
		this.groupID = new ushort[IsoStream.GetInt( num_alternate_region_set)][];
		for (int i = 0; i < num_alternate_region_set; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.num_regions_in_set[i], "num_regions_in_set"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.alternate_region_set_id[i], "alternate_region_set_id"); 

			this.groupID[i] = new ushort[IsoStream.GetInt( num_regions_in_set[i])];
			for (int j = 0; j < num_regions_in_set[i]; j++)
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.groupID[i][j], "groupID"); 
			}
		}
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.num_regions_minus1, "num_regions_minus1"); 

		this.region_id = new ushort[IsoStream.GetInt( num_regions_minus1 + 1)];
		for (int i = 0; i < num_regions_minus1; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.region_id[i], "region_id"); 
		}

		if (subpic_id_info_flag)
		{
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new VVCSubpicIDRewritingInfomationStruct(),  out this.subpic_id_rewriting_info, "subpic_id_rewriting_info"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.subpic_id_info_flag, "subpic_id_info_flag"); 
		boxSize += stream.WriteBits(7,  this.reserved, "reserved"); 
		boxSize += stream.WriteUInt16( this.num_alternate_region_set, "num_alternate_region_set"); 

		for (int i = 0; i < num_alternate_region_set; i++)
		{
			boxSize += stream.WriteUInt16( this.num_regions_in_set[i], "num_regions_in_set"); 
			boxSize += stream.WriteUInt16( this.alternate_region_set_id[i], "alternate_region_set_id"); 

			for (int j = 0; j < num_regions_in_set[i]; j++)
			{
				boxSize += stream.WriteUInt16( this.groupID[i][j], "groupID"); 
			}
		}
		boxSize += stream.WriteUInt16( this.num_regions_minus1, "num_regions_minus1"); 

		for (int i = 0; i < num_regions_minus1; i++)
		{
			boxSize += stream.WriteUInt16( this.region_id[i], "region_id"); 
		}

		if (subpic_id_info_flag)
		{
			boxSize += stream.WriteClass( this.subpic_id_rewriting_info, "subpic_id_rewriting_info"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // subpic_id_info_flag
		boxSize += 7; // reserved
		boxSize += 16; // num_alternate_region_set

		for (int i = 0; i < num_alternate_region_set; i++)
		{
			boxSize += 16; // num_regions_in_set
			boxSize += 16; // alternate_region_set_id

			for (int j = 0; j < num_regions_in_set[i]; j++)
			{
				boxSize += 16; // groupID
			}
		}
		boxSize += 16; // num_regions_minus1

		for (int i = 0; i < num_regions_minus1; i++)
		{
			boxSize += 16; // region_id
		}

		if (subpic_id_info_flag)
		{
			boxSize += IsoStream.CalculateClassSize(subpic_id_rewriting_info); // subpic_id_rewriting_info
		}
		return boxSize;
	}
}


/*
class ScalableGroupEntry() extends VisualSampleGroupEntry ('scif') { 
	unsigned int(8) groupID;
	unsigned int(8) primary_groupID;
	unsigned int(1) is_tier_IDR;
	unsigned int(1) noInterLayerPredFlag; 
	unsigned int(1) useRefBasePicFlag;
	unsigned int(1) storeBaseRepFlag; 
	unsigned int(1) is_tl_switching_point;
	bit(3) reserved = 0;
	unsigned int(8) tl_switching_distance;
	
	if (groupID == primary_groupID)	// primary definition of tier
	{
		TierInfoBox(); 				// Mandatory
		SVCDependencyRangeBox();	// Mandatory
		PriorityRangeBox();			// Mandatory

		//Optional Boxes or fields may follow when defined later
		TierBitRateBox();						// optional
		RectRegionBox();						// optional
		BufferingBox();						// optional
		TierDependencyBox(); 				// optional
		InitialParameterSetBox();			// optional
		IroiInfoBox();							// optional
		ProtectionSchemeInfoBox();			// optional
		TranscodingInfoBox();				// optional
	}
}
*/
public partial class ScalableGroupEntry : VisualSampleGroupEntry
{
	public const string TYPE = "scif";
	public override string DisplayName { get { return "ScalableGroupEntry"; } }

	protected byte groupID; 
	public byte GroupID { get { return this.groupID; } set { this.groupID = value; } }

	protected byte primary_groupID; 
	public byte PrimaryGroupID { get { return this.primary_groupID; } set { this.primary_groupID = value; } }

	protected bool is_tier_IDR; 
	public bool IsTierIDR { get { return this.is_tier_IDR; } set { this.is_tier_IDR = value; } }

	protected bool noInterLayerPredFlag; 
	public bool NoInterLayerPredFlag { get { return this.noInterLayerPredFlag; } set { this.noInterLayerPredFlag = value; } }

	protected bool useRefBasePicFlag; 
	public bool UseRefBasePicFlag { get { return this.useRefBasePicFlag; } set { this.useRefBasePicFlag = value; } }

	protected bool storeBaseRepFlag; 
	public bool StoreBaseRepFlag { get { return this.storeBaseRepFlag; } set { this.storeBaseRepFlag = value; } }

	protected bool is_tl_switching_point; 
	public bool IsTlSwitchingPoint { get { return this.is_tl_switching_point; } set { this.is_tl_switching_point = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte tl_switching_distance; 
	public byte TlSwitchingDistance { get { return this.tl_switching_distance; } set { this.tl_switching_distance = value; } }
	public TierInfoBox _TierInfoBox { get { return this.children.OfType<TierInfoBox>().FirstOrDefault(); } }
	public SVCDependencyRangeBox _SVCDependencyRangeBox { get { return this.children.OfType<SVCDependencyRangeBox>().FirstOrDefault(); } }
	public PriorityRangeBox _PriorityRangeBox { get { return this.children.OfType<PriorityRangeBox>().FirstOrDefault(); } }
	public TierBitRateBox _TierBitRateBox { get { return this.children.OfType<TierBitRateBox>().FirstOrDefault(); } }
	public RectRegionBox _RectRegionBox { get { return this.children.OfType<RectRegionBox>().FirstOrDefault(); } }
	public BufferingBox _BufferingBox { get { return this.children.OfType<BufferingBox>().FirstOrDefault(); } }
	public TierDependencyBox _TierDependencyBox { get { return this.children.OfType<TierDependencyBox>().FirstOrDefault(); } }
	public InitialParameterSetBox _InitialParameterSetBox { get { return this.children.OfType<InitialParameterSetBox>().FirstOrDefault(); } }
	public IroiInfoBox _IroiInfoBox { get { return this.children.OfType<IroiInfoBox>().FirstOrDefault(); } }
	public ProtectionSchemeInfoBox _ProtectionSchemeInfoBox { get { return this.children.OfType<ProtectionSchemeInfoBox>().FirstOrDefault(); } }
	public TranscodingInfoBox _TranscodingInfoBox { get { return this.children.OfType<TranscodingInfoBox>().FirstOrDefault(); } }

	public ScalableGroupEntry(): base(IsoStream.FromFourCC("scif"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.groupID, "groupID"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.primary_groupID, "primary_groupID"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.is_tier_IDR, "is_tier_IDR"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.noInterLayerPredFlag, "noInterLayerPredFlag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.useRefBasePicFlag, "useRefBasePicFlag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.storeBaseRepFlag, "storeBaseRepFlag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.is_tl_switching_point, "is_tl_switching_point"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.reserved, "reserved"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.tl_switching_distance, "tl_switching_distance"); 

		if (groupID == primary_groupID)
		{
			// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.TierInfoBox, "TierInfoBox"); // Mandatory
			// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.SVCDependencyRangeBox, "SVCDependencyRangeBox"); // Mandatory
			// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.PriorityRangeBox, "PriorityRangeBox"); // Mandatory
			/* Optional Boxes or fields may follow when defined later */
			// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.TierBitRateBox, "TierBitRateBox"); // optional
			// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.RectRegionBox, "RectRegionBox"); // optional
			// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.BufferingBox, "BufferingBox"); // optional
			// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.TierDependencyBox, "TierDependencyBox"); // optional
			// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.InitialParameterSetBox, "InitialParameterSetBox"); // optional
			// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.IroiInfoBox, "IroiInfoBox"); // optional
			// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.ProtectionSchemeInfoBox, "ProtectionSchemeInfoBox"); // optional
			// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.TranscodingInfoBox, "TranscodingInfoBox"); // optional
		}
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.groupID, "groupID"); 
		boxSize += stream.WriteUInt8( this.primary_groupID, "primary_groupID"); 
		boxSize += stream.WriteBit( this.is_tier_IDR, "is_tier_IDR"); 
		boxSize += stream.WriteBit( this.noInterLayerPredFlag, "noInterLayerPredFlag"); 
		boxSize += stream.WriteBit( this.useRefBasePicFlag, "useRefBasePicFlag"); 
		boxSize += stream.WriteBit( this.storeBaseRepFlag, "storeBaseRepFlag"); 
		boxSize += stream.WriteBit( this.is_tl_switching_point, "is_tl_switching_point"); 
		boxSize += stream.WriteBits(3,  this.reserved, "reserved"); 
		boxSize += stream.WriteUInt8( this.tl_switching_distance, "tl_switching_distance"); 

		if (groupID == primary_groupID)
		{
			// boxSize += stream.WriteBox( this.TierInfoBox, "TierInfoBox"); // Mandatory
			// boxSize += stream.WriteBox( this.SVCDependencyRangeBox, "SVCDependencyRangeBox"); // Mandatory
			// boxSize += stream.WriteBox( this.PriorityRangeBox, "PriorityRangeBox"); // Mandatory
			/* Optional Boxes or fields may follow when defined later */
			// boxSize += stream.WriteBox( this.TierBitRateBox, "TierBitRateBox"); // optional
			// boxSize += stream.WriteBox( this.RectRegionBox, "RectRegionBox"); // optional
			// boxSize += stream.WriteBox( this.BufferingBox, "BufferingBox"); // optional
			// boxSize += stream.WriteBox( this.TierDependencyBox, "TierDependencyBox"); // optional
			// boxSize += stream.WriteBox( this.InitialParameterSetBox, "InitialParameterSetBox"); // optional
			// boxSize += stream.WriteBox( this.IroiInfoBox, "IroiInfoBox"); // optional
			// boxSize += stream.WriteBox( this.ProtectionSchemeInfoBox, "ProtectionSchemeInfoBox"); // optional
			// boxSize += stream.WriteBox( this.TranscodingInfoBox, "TranscodingInfoBox"); // optional
		}
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // groupID
		boxSize += 8; // primary_groupID
		boxSize += 1; // is_tier_IDR
		boxSize += 1; // noInterLayerPredFlag
		boxSize += 1; // useRefBasePicFlag
		boxSize += 1; // storeBaseRepFlag
		boxSize += 1; // is_tl_switching_point
		boxSize += 3; // reserved
		boxSize += 8; // tl_switching_distance

		if (groupID == primary_groupID)
		{
			// boxSize += IsoStream.CalculateBoxSize(TierInfoBox); // TierInfoBox
			// boxSize += IsoStream.CalculateBoxSize(SVCDependencyRangeBox); // SVCDependencyRangeBox
			// boxSize += IsoStream.CalculateBoxSize(PriorityRangeBox); // PriorityRangeBox
			/* Optional Boxes or fields may follow when defined later */
			// boxSize += IsoStream.CalculateBoxSize(TierBitRateBox); // TierBitRateBox
			// boxSize += IsoStream.CalculateBoxSize(RectRegionBox); // RectRegionBox
			// boxSize += IsoStream.CalculateBoxSize(BufferingBox); // BufferingBox
			// boxSize += IsoStream.CalculateBoxSize(TierDependencyBox); // TierDependencyBox
			// boxSize += IsoStream.CalculateBoxSize(InitialParameterSetBox); // InitialParameterSetBox
			// boxSize += IsoStream.CalculateBoxSize(IroiInfoBox); // IroiInfoBox
			// boxSize += IsoStream.CalculateBoxSize(ProtectionSchemeInfoBox); // ProtectionSchemeInfoBox
			// boxSize += IsoStream.CalculateBoxSize(TranscodingInfoBox); // TranscodingInfoBox
		}
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class ScalableNALUMapEntry() extends VisualSampleGroupEntry ('scnm') { 
	bit(8) reserved = 0;
	unsigned int(8) NALU_count;
	for (i=1; i<= NALU_count; i++)
		unsigned int(8) groupID;
	}

*/
public partial class ScalableNALUMapEntry : VisualSampleGroupEntry
{
	public const string TYPE = "scnm";
	public override string DisplayName { get { return "ScalableNALUMapEntry"; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte NALU_count; 
	public byte NALUCount { get { return this.NALU_count; } set { this.NALU_count = value; } }

	protected byte[] groupID; 
	public byte[] GroupID { get { return this.groupID; } set { this.groupID = value; } }

	public ScalableNALUMapEntry(): base(IsoStream.FromFourCC("scnm"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.NALU_count, "NALU_count"); 

		this.groupID = new byte[IsoStream.GetInt( NALU_count)];
		for (int i=0; i< NALU_count; i++)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.groupID[i], "groupID"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.reserved, "reserved"); 
		boxSize += stream.WriteUInt8( this.NALU_count, "NALU_count"); 

		for (int i=0; i< NALU_count; i++)
		{
			boxSize += stream.WriteUInt8( this.groupID[i], "groupID"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // reserved
		boxSize += 8; // NALU_count

		for (int i=0; i< NALU_count; i++)
		{
			boxSize += 8; // groupID
		}
		return boxSize;
	}
}


/*
aligned(8) class VvcSubpicIDEntry() extends VisualSampleGroupEntry('spid')
{
	unsigned int(1) rect_region_flag;
	bit(2) reserved = 0;
	unsigned int(1) continuous_id_flag;
	unsigned int(12) num_subpics_minus1;
	for (i = 0; i <= num_subpics_minus1; i++) {
		if ((continuous_id_flag && i == 0) || !continuous_id_flag)
			unsigned int(16) subpic_id[i];
		if (rect_region_flag)
			unsigned int(16) groupID[i];
	}
}
*/
public partial class VvcSubpicIDEntry : VisualSampleGroupEntry
{
	public const string TYPE = "spid";
	public override string DisplayName { get { return "VvcSubpicIDEntry"; } }

	protected bool rect_region_flag; 
	public bool RectRegionFlag { get { return this.rect_region_flag; } set { this.rect_region_flag = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected bool continuous_id_flag; 
	public bool ContinuousIdFlag { get { return this.continuous_id_flag; } set { this.continuous_id_flag = value; } }

	protected ushort num_subpics_minus1; 
	public ushort NumSubpicsMinus1 { get { return this.num_subpics_minus1; } set { this.num_subpics_minus1 = value; } }

	protected ushort[] subpic_id; 
	public ushort[] SubpicId { get { return this.subpic_id; } set { this.subpic_id = value; } }

	protected ushort[] groupID; 
	public ushort[] GroupID { get { return this.groupID; } set { this.groupID = value; } }

	public VvcSubpicIDEntry(): base(IsoStream.FromFourCC("spid"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.rect_region_flag, "rect_region_flag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.continuous_id_flag, "continuous_id_flag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 12,  out this.num_subpics_minus1, "num_subpics_minus1"); 

		this.subpic_id = new ushort[IsoStream.GetInt( num_subpics_minus1 + 1)];
		this.groupID = new ushort[IsoStream.GetInt( num_subpics_minus1 + 1)];
		for (int i = 0; i <= num_subpics_minus1; i++)
		{

			if ((continuous_id_flag && i == 0) || !continuous_id_flag)
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.subpic_id[i], "subpic_id"); 
			}

			if (rect_region_flag)
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.groupID[i], "groupID"); 
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.rect_region_flag, "rect_region_flag"); 
		boxSize += stream.WriteBits(2,  this.reserved, "reserved"); 
		boxSize += stream.WriteBit( this.continuous_id_flag, "continuous_id_flag"); 
		boxSize += stream.WriteBits(12,  this.num_subpics_minus1, "num_subpics_minus1"); 

		for (int i = 0; i <= num_subpics_minus1; i++)
		{

			if ((continuous_id_flag && i == 0) || !continuous_id_flag)
			{
				boxSize += stream.WriteUInt16( this.subpic_id[i], "subpic_id"); 
			}

			if (rect_region_flag)
			{
				boxSize += stream.WriteUInt16( this.groupID[i], "groupID"); 
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // rect_region_flag
		boxSize += 2; // reserved
		boxSize += 1; // continuous_id_flag
		boxSize += 12; // num_subpics_minus1

		for (int i = 0; i <= num_subpics_minus1; i++)
		{

			if ((continuous_id_flag && i == 0) || !continuous_id_flag)
			{
				boxSize += 16; // subpic_id
			}

			if (rect_region_flag)
			{
				boxSize += 16; // groupID
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class SubpicLevelInfoEntry() extends VisualSampleGroupEntry('spli')
{
	unsigned int(8) level_idc;
}
*/
public partial class SubpicLevelInfoEntry : VisualSampleGroupEntry
{
	public const string TYPE = "spli";
	public override string DisplayName { get { return "SubpicLevelInfoEntry"; } }

	protected byte level_idc; 
	public byte LevelIdc { get { return this.level_idc; } set { this.level_idc = value; } }

	public SubpicLevelInfoEntry(): base(IsoStream.FromFourCC("spli"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.level_idc, "level_idc"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.level_idc, "level_idc"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // level_idc
		return boxSize;
	}
}


/*
aligned(8) class VvcSubpicOrderEntry() extends VisualSampleGroupEntry('spor')
{
	unsigned int(1) subpic_id_info_flag;
	unsigned int(15) num_subpic_ref_idx;
	for (i = 0; i < num_subpic_ref_idx; i++)
		unsigned int(16) subp_track_ref_idx[i];
	if (subpic_id_info_flag)
		VVCSubpicIDRewritingInfomationStruct() subpic_id_rewriting_info;
}
*/
public partial class VvcSubpicOrderEntry : VisualSampleGroupEntry
{
	public const string TYPE = "spor";
	public override string DisplayName { get { return "VvcSubpicOrderEntry"; } }

	protected bool subpic_id_info_flag; 
	public bool SubpicIdInfoFlag { get { return this.subpic_id_info_flag; } set { this.subpic_id_info_flag = value; } }

	protected ushort num_subpic_ref_idx; 
	public ushort NumSubpicRefIdx { get { return this.num_subpic_ref_idx; } set { this.num_subpic_ref_idx = value; } }

	protected ushort[] subp_track_ref_idx; 
	public ushort[] SubpTrackRefIdx { get { return this.subp_track_ref_idx; } set { this.subp_track_ref_idx = value; } }

	protected VVCSubpicIDRewritingInfomationStruct subpic_id_rewriting_info; 
	public VVCSubpicIDRewritingInfomationStruct SubpicIdRewritingInfo { get { return this.subpic_id_rewriting_info; } set { this.subpic_id_rewriting_info = value; } }

	public VvcSubpicOrderEntry(): base(IsoStream.FromFourCC("spor"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.subpic_id_info_flag, "subpic_id_info_flag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 15,  out this.num_subpic_ref_idx, "num_subpic_ref_idx"); 

		this.subp_track_ref_idx = new ushort[IsoStream.GetInt( num_subpic_ref_idx)];
		for (int i = 0; i < num_subpic_ref_idx; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.subp_track_ref_idx[i], "subp_track_ref_idx"); 
		}

		if (subpic_id_info_flag)
		{
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new VVCSubpicIDRewritingInfomationStruct(),  out this.subpic_id_rewriting_info, "subpic_id_rewriting_info"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.subpic_id_info_flag, "subpic_id_info_flag"); 
		boxSize += stream.WriteBits(15,  this.num_subpic_ref_idx, "num_subpic_ref_idx"); 

		for (int i = 0; i < num_subpic_ref_idx; i++)
		{
			boxSize += stream.WriteUInt16( this.subp_track_ref_idx[i], "subp_track_ref_idx"); 
		}

		if (subpic_id_info_flag)
		{
			boxSize += stream.WriteClass( this.subpic_id_rewriting_info, "subpic_id_rewriting_info"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // subpic_id_info_flag
		boxSize += 15; // num_subpic_ref_idx

		for (int i = 0; i < num_subpic_ref_idx; i++)
		{
			boxSize += 16; // subp_track_ref_idx
		}

		if (subpic_id_info_flag)
		{
			boxSize += IsoStream.CalculateClassSize(subpic_id_rewriting_info); // subpic_id_rewriting_info
		}
		return boxSize;
	}
}


/*
class StepwiseTemporalLayerEntry() extends VisualSampleGroupEntry ('stsa')
{
}
*/
public partial class StepwiseTemporalLayerEntry : VisualSampleGroupEntry
{
	public const string TYPE = "stsa";
	public override string DisplayName { get { return "StepwiseTemporalLayerEntry"; } }

	public StepwiseTemporalLayerEntry(): base(IsoStream.FromFourCC("stsa"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
class VvcSubpicLayoutMapEntry() extends VisualSampleGroupEntry ('sulm') {
	unsigned int(32) groupID_info_4cc;
	unsigned int(16) entry_count_minus1;
	for(i=0; i <= entry_count_minus1; i++)
		unsigned int(16) groupID;
}
*/
public partial class VvcSubpicLayoutMapEntry : VisualSampleGroupEntry
{
	public const string TYPE = "sulm";
	public override string DisplayName { get { return "VvcSubpicLayoutMapEntry"; } }

	protected uint groupID_info_4cc; 
	public uint GroupIDInfo4cc { get { return this.groupID_info_4cc; } set { this.groupID_info_4cc = value; } }

	protected ushort entry_count_minus1; 
	public ushort EntryCountMinus1 { get { return this.entry_count_minus1; } set { this.entry_count_minus1 = value; } }

	protected ushort[] groupID; 
	public ushort[] GroupID { get { return this.groupID; } set { this.groupID = value; } }

	public VvcSubpicLayoutMapEntry(): base(IsoStream.FromFourCC("sulm"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.groupID_info_4cc, "groupID_info_4cc"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.entry_count_minus1, "entry_count_minus1"); 

		this.groupID = new ushort[IsoStream.GetInt( entry_count_minus1 + 1)];
		for (int i=0; i <= entry_count_minus1; i++)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.groupID[i], "groupID"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.groupID_info_4cc, "groupID_info_4cc"); 
		boxSize += stream.WriteUInt16( this.entry_count_minus1, "entry_count_minus1"); 

		for (int i=0; i <= entry_count_minus1; i++)
		{
			boxSize += stream.WriteUInt16( this.groupID[i], "groupID"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // groupID_info_4cc
		boxSize += 16; // entry_count_minus1

		for (int i=0; i <= entry_count_minus1; i++)
		{
			boxSize += 16; // groupID
		}
		return boxSize;
	}
}


/*
class SyncSampleEntry() extends VisualSampleGroupEntry ('sync')
{
		bit(2) reserved = 0;
		unsigned int(6) NAL_unit_type;
}
*/
public partial class SyncSampleEntry : VisualSampleGroupEntry
{
	public const string TYPE = "sync";
	public override string DisplayName { get { return "SyncSampleEntry"; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte NAL_unit_type; 
	public byte NALUnitType { get { return this.NAL_unit_type; } set { this.NAL_unit_type = value; } }

	public SyncSampleEntry(): base(IsoStream.FromFourCC("sync"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.NAL_unit_type, "NAL_unit_type"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(2,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(6,  this.NAL_unit_type, "NAL_unit_type"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 2; // reserved
		boxSize += 6; // NAL_unit_type
		return boxSize;
	}
}


/*
class RectangularRegionGroupEntry() extends VisualSampleGroupEntry ('trif')
{
	unsigned int(16) groupID;
	unsigned int(1) rect_region_flag;
	if (!rect_region_flag)
		bit(7)  reserved = 0;
	else {
		unsigned int(2) independent_idc;
		unsigned int(1) full_picture;
		unsigned int(1) filtering_disabled;
		unsigned int(1) has_dependency_list;
		bit(2)  reserved = 0;
		if (!full_picture) {
			unsigned int(16) horizontal_offset;
			unsigned int(16) vertical_offset;
		}
		unsigned int(16) region_width;
		unsigned int(16) region_height;
		if (has_dependency_list) {
			unsigned int(16) dependency_rect_region_count;
			for (i=1; i<= dependency_rect_region_count; i++)
				unsigned int(16) dependencyRectRegionGroupID;
	}
}
}
*/
public partial class RectangularRegionGroupEntry : VisualSampleGroupEntry
{
	public const string TYPE = "trif";
	public override string DisplayName { get { return "RectangularRegionGroupEntry"; } }

	protected ushort groupID; 
	public ushort GroupID { get { return this.groupID; } set { this.groupID = value; } }

	protected bool rect_region_flag; 
	public bool RectRegionFlag { get { return this.rect_region_flag; } set { this.rect_region_flag = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte independent_idc; 
	public byte IndependentIdc { get { return this.independent_idc; } set { this.independent_idc = value; } }

	protected bool full_picture; 
	public bool FullPicture { get { return this.full_picture; } set { this.full_picture = value; } }

	protected bool filtering_disabled; 
	public bool FilteringDisabled { get { return this.filtering_disabled; } set { this.filtering_disabled = value; } }

	protected bool has_dependency_list; 
	public bool HasDependencyList { get { return this.has_dependency_list; } set { this.has_dependency_list = value; } }

	protected byte reserved0 = 0; 
	public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected ushort horizontal_offset; 
	public ushort HorizontalOffset { get { return this.horizontal_offset; } set { this.horizontal_offset = value; } }

	protected ushort vertical_offset; 
	public ushort VerticalOffset { get { return this.vertical_offset; } set { this.vertical_offset = value; } }

	protected ushort region_width; 
	public ushort RegionWidth { get { return this.region_width; } set { this.region_width = value; } }

	protected ushort region_height; 
	public ushort RegionHeight { get { return this.region_height; } set { this.region_height = value; } }

	protected ushort dependency_rect_region_count; 
	public ushort DependencyRectRegionCount { get { return this.dependency_rect_region_count; } set { this.dependency_rect_region_count = value; } }

	protected ushort[] dependencyRectRegionGroupID; 
	public ushort[] DependencyRectRegionGroupID { get { return this.dependencyRectRegionGroupID; } set { this.dependencyRectRegionGroupID = value; } }

	public RectangularRegionGroupEntry(): base(IsoStream.FromFourCC("trif"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.groupID, "groupID"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.rect_region_flag, "rect_region_flag"); 

		if (!rect_region_flag)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.reserved, "reserved"); 
		}

		else 
		{
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.independent_idc, "independent_idc"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.full_picture, "full_picture"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.filtering_disabled, "filtering_disabled"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.has_dependency_list, "has_dependency_list"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.reserved0, "reserved0"); 

			if (!full_picture)
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.horizontal_offset, "horizontal_offset"); 
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.vertical_offset, "vertical_offset"); 
			}
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.region_width, "region_width"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.region_height, "region_height"); 

			if (has_dependency_list)
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.dependency_rect_region_count, "dependency_rect_region_count"); 

				this.dependencyRectRegionGroupID = new ushort[IsoStream.GetInt( dependency_rect_region_count)];
				for (int i=0; i< dependency_rect_region_count; i++)
				{
					boxSize += stream.ReadUInt16(boxSize, readSize,  out this.dependencyRectRegionGroupID[i], "dependencyRectRegionGroupID"); 
				}
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.groupID, "groupID"); 
		boxSize += stream.WriteBit( this.rect_region_flag, "rect_region_flag"); 

		if (!rect_region_flag)
		{
			boxSize += stream.WriteBits(7,  this.reserved, "reserved"); 
		}

		else 
		{
			boxSize += stream.WriteBits(2,  this.independent_idc, "independent_idc"); 
			boxSize += stream.WriteBit( this.full_picture, "full_picture"); 
			boxSize += stream.WriteBit( this.filtering_disabled, "filtering_disabled"); 
			boxSize += stream.WriteBit( this.has_dependency_list, "has_dependency_list"); 
			boxSize += stream.WriteBits(2,  this.reserved0, "reserved0"); 

			if (!full_picture)
			{
				boxSize += stream.WriteUInt16( this.horizontal_offset, "horizontal_offset"); 
				boxSize += stream.WriteUInt16( this.vertical_offset, "vertical_offset"); 
			}
			boxSize += stream.WriteUInt16( this.region_width, "region_width"); 
			boxSize += stream.WriteUInt16( this.region_height, "region_height"); 

			if (has_dependency_list)
			{
				boxSize += stream.WriteUInt16( this.dependency_rect_region_count, "dependency_rect_region_count"); 

				for (int i=0; i< dependency_rect_region_count; i++)
				{
					boxSize += stream.WriteUInt16( this.dependencyRectRegionGroupID[i], "dependencyRectRegionGroupID"); 
				}
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // groupID
		boxSize += 1; // rect_region_flag

		if (!rect_region_flag)
		{
			boxSize += 7; // reserved
		}

		else 
		{
			boxSize += 2; // independent_idc
			boxSize += 1; // full_picture
			boxSize += 1; // filtering_disabled
			boxSize += 1; // has_dependency_list
			boxSize += 2; // reserved0

			if (!full_picture)
			{
				boxSize += 16; // horizontal_offset
				boxSize += 16; // vertical_offset
			}
			boxSize += 16; // region_width
			boxSize += 16; // region_height

			if (has_dependency_list)
			{
				boxSize += 16; // dependency_rect_region_count

				for (int i=0; i< dependency_rect_region_count; i++)
				{
					boxSize += 16; // dependencyRectRegionGroupID
				}
			}
		}
		return boxSize;
	}
}


/*
class TemporalSubLayerEntry() extends VisualSampleGroupEntry ('tsas')
{
}
*/
public partial class TemporalSubLayerEntry : VisualSampleGroupEntry
{
	public const string TYPE = "tsas";
	public override string DisplayName { get { return "TemporalSubLayerEntry"; } }

	public TemporalSubLayerEntry(): base(IsoStream.FromFourCC("tsas"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
class TemporalLayerEntry() extends VisualSampleGroupEntry ('tscl')
{
	unsigned int(8)  temporalLayerId;
	unsigned int(2)  tlprofile_space;
	unsigned int(1)  tltier_flag;
	unsigned int(5)  tlprofile_idc;
	unsigned int(32) tlprofile_compatibility_flags;
	unsigned int(48) tlconstraint_indicator_flags;
	unsigned int(8)  tllevel_idc;
	unsigned int(16) tlMaxBitRate;
	unsigned int(16) tlAvgBitRate;
	unsigned int(8)  tlConstantFrameRate;
	unsigned int(16) tlAvgFrameRate;
}
*/
public partial class TemporalLayerEntry : VisualSampleGroupEntry
{
	public const string TYPE = "tscl";
	public override string DisplayName { get { return "TemporalLayerEntry"; } }

	protected byte temporalLayerId; 
	public byte TemporalLayerId { get { return this.temporalLayerId; } set { this.temporalLayerId = value; } }

	protected byte tlprofile_space; 
	public byte TlprofileSpace { get { return this.tlprofile_space; } set { this.tlprofile_space = value; } }

	protected bool tltier_flag; 
	public bool TltierFlag { get { return this.tltier_flag; } set { this.tltier_flag = value; } }

	protected byte tlprofile_idc; 
	public byte TlprofileIdc { get { return this.tlprofile_idc; } set { this.tlprofile_idc = value; } }

	protected uint tlprofile_compatibility_flags; 
	public uint TlprofileCompatibilityFlags { get { return this.tlprofile_compatibility_flags; } set { this.tlprofile_compatibility_flags = value; } }

	protected ulong tlconstraint_indicator_flags; 
	public ulong TlconstraintIndicatorFlags { get { return this.tlconstraint_indicator_flags; } set { this.tlconstraint_indicator_flags = value; } }

	protected byte tllevel_idc; 
	public byte TllevelIdc { get { return this.tllevel_idc; } set { this.tllevel_idc = value; } }

	protected ushort tlMaxBitRate; 
	public ushort TlMaxBitRate { get { return this.tlMaxBitRate; } set { this.tlMaxBitRate = value; } }

	protected ushort tlAvgBitRate; 
	public ushort TlAvgBitRate { get { return this.tlAvgBitRate; } set { this.tlAvgBitRate = value; } }

	protected byte tlConstantFrameRate; 
	public byte TlConstantFrameRate { get { return this.tlConstantFrameRate; } set { this.tlConstantFrameRate = value; } }

	protected ushort tlAvgFrameRate; 
	public ushort TlAvgFrameRate { get { return this.tlAvgFrameRate; } set { this.tlAvgFrameRate = value; } }

	public TemporalLayerEntry(): base(IsoStream.FromFourCC("tscl"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.temporalLayerId, "temporalLayerId"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.tlprofile_space, "tlprofile_space"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.tltier_flag, "tltier_flag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.tlprofile_idc, "tlprofile_idc"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.tlprofile_compatibility_flags, "tlprofile_compatibility_flags"); 
		boxSize += stream.ReadUInt48(boxSize, readSize,  out this.tlconstraint_indicator_flags, "tlconstraint_indicator_flags"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.tllevel_idc, "tllevel_idc"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.tlMaxBitRate, "tlMaxBitRate"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.tlAvgBitRate, "tlAvgBitRate"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.tlConstantFrameRate, "tlConstantFrameRate"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.tlAvgFrameRate, "tlAvgFrameRate"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.temporalLayerId, "temporalLayerId"); 
		boxSize += stream.WriteBits(2,  this.tlprofile_space, "tlprofile_space"); 
		boxSize += stream.WriteBit( this.tltier_flag, "tltier_flag"); 
		boxSize += stream.WriteBits(5,  this.tlprofile_idc, "tlprofile_idc"); 
		boxSize += stream.WriteUInt32( this.tlprofile_compatibility_flags, "tlprofile_compatibility_flags"); 
		boxSize += stream.WriteUInt48( this.tlconstraint_indicator_flags, "tlconstraint_indicator_flags"); 
		boxSize += stream.WriteUInt8( this.tllevel_idc, "tllevel_idc"); 
		boxSize += stream.WriteUInt16( this.tlMaxBitRate, "tlMaxBitRate"); 
		boxSize += stream.WriteUInt16( this.tlAvgBitRate, "tlAvgBitRate"); 
		boxSize += stream.WriteUInt8( this.tlConstantFrameRate, "tlConstantFrameRate"); 
		boxSize += stream.WriteUInt16( this.tlAvgFrameRate, "tlAvgFrameRate"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // temporalLayerId
		boxSize += 2; // tlprofile_space
		boxSize += 1; // tltier_flag
		boxSize += 5; // tlprofile_idc
		boxSize += 32; // tlprofile_compatibility_flags
		boxSize += 48; // tlconstraint_indicator_flags
		boxSize += 8; // tllevel_idc
		boxSize += 16; // tlMaxBitRate
		boxSize += 16; // tlAvgBitRate
		boxSize += 8; // tlConstantFrameRate
		boxSize += 16; // tlAvgFrameRate
		return boxSize;
	}
}


/*
class ViewPriorityEntry() extends VisualSampleGroupEntry ('vipr')
{
	ViewPriorityBox();
}
*/
public partial class ViewPriorityEntry : VisualSampleGroupEntry
{
	public const string TYPE = "vipr";
	public override string DisplayName { get { return "ViewPriorityEntry"; } }
	public ViewPriorityBox _ViewPriorityBox { get { return this.children.OfType<ViewPriorityBox>().FirstOrDefault(); } }

	public ViewPriorityEntry(): base(IsoStream.FromFourCC("vipr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.ViewPriorityBox, "ViewPriorityBox"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.ViewPriorityBox, "ViewPriorityBox"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(ViewPriorityBox); // ViewPriorityBox
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class VvcOperatingPointsInformation extends VisualSampleGroupEntry ('vopi') {
	VvcOperatingPointsRecord oinf;
}
*/
public partial class VvcOperatingPointsInformation : VisualSampleGroupEntry
{
	public const string TYPE = "vopi";
	public override string DisplayName { get { return "VvcOperatingPointsInformation"; } }

	protected VvcOperatingPointsRecord oinf; 
	public VvcOperatingPointsRecord Oinf { get { return this.oinf; } set { this.oinf = value; } }

	public VvcOperatingPointsInformation(): base(IsoStream.FromFourCC("vopi"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new VvcOperatingPointsRecord(),  out this.oinf, "oinf"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.oinf, "oinf"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(oinf); // oinf
		return boxSize;
	}
}


/*
aligned(8) class AlteTrackGroupTypeBox() extends FullBox('alte', version = 0, flags = 0)
{
	unsigned int(32) track_group_id;
	// the remaining data may be specified 
	//  for a particular track_group_type
}
*/
public partial class AlteTrackGroupTypeBox : FullBox
{
	public const string TYPE = "alte";
	public override string DisplayName { get { return "AlteTrackGroupTypeBox"; } }

	protected uint track_group_id;  //  the remaining data may be specified 
	public uint TrackGroupId { get { return this.track_group_id; } set { this.track_group_id = value; } }

	public AlteTrackGroupTypeBox(): base(IsoStream.FromFourCC("alte"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.track_group_id, "track_group_id"); // the remaining data may be specified 
		/*   for a particular track_group_type */
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.track_group_id, "track_group_id"); // the remaining data may be specified 
		/*   for a particular track_group_type */
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // track_group_id
		/*   for a particular track_group_type */
		return boxSize;
	}
}


/*
aligned(8) class CstgTrackGroupTypeBox() extends FullBox('cstg', version = 0, flags = 0)
{
	unsigned int(32) track_group_id;
	// the remaining data may be specified 
	//  for a particular track_group_type
}
*/
public partial class CstgTrackGroupTypeBox : FullBox
{
	public const string TYPE = "cstg";
	public override string DisplayName { get { return "CstgTrackGroupTypeBox"; } }

	protected uint track_group_id;  //  the remaining data may be specified 
	public uint TrackGroupId { get { return this.track_group_id; } set { this.track_group_id = value; } }

	public CstgTrackGroupTypeBox(): base(IsoStream.FromFourCC("cstg"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.track_group_id, "track_group_id"); // the remaining data may be specified 
		/*   for a particular track_group_type */
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.track_group_id, "track_group_id"); // the remaining data may be specified 
		/*   for a particular track_group_type */
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // track_group_id
		/*   for a particular track_group_type */
		return boxSize;
	}
}


/*
aligned(8) class SnutTrackGroupTypeBox() extends FullBox('snut', version = 0, flags = 0)
{
	unsigned int(32) track_group_id;
	// the remaining data may be specified 
	//  for a particular track_group_type
}
*/
public partial class SnutTrackGroupTypeBox : FullBox
{
	public const string TYPE = "snut";
	public override string DisplayName { get { return "SnutTrackGroupTypeBox"; } }

	protected uint track_group_id;  //  the remaining data may be specified 
	public uint TrackGroupId { get { return this.track_group_id; } set { this.track_group_id = value; } }

	public SnutTrackGroupTypeBox(): base(IsoStream.FromFourCC("snut"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.track_group_id, "track_group_id"); // the remaining data may be specified 
		/*   for a particular track_group_type */
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.track_group_id, "track_group_id"); // the remaining data may be specified 
		/*   for a particular track_group_type */
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // track_group_id
		/*   for a particular track_group_type */
		return boxSize;
	}
}


/*
class SymbolicMusicSpecificConfig
{  // the bitstream header  
    bit(4) version; //version of this specification is 0b0000 
 
    unsigned int(12) pictureWidth; // rendering window X size 
    unsigned int(12) pictureHight; // rendering window Y size 
 
    bit(1) isScoreMultiwindow; // 0: one window only – 1: multiple windows 
 
    unsigned int(8) numberOfParts; // parts of the main score 
 
    unsigned int(3) notationFormat; // CWMN or other sets 
 
    vluimsbf8 urlMIDIStream_length; //length in bytes 
    byte(urlMIDIStream_length) urlMIDIStream; // reference to the MIDI stream, as url 
    bit(2) codingType; // coding of the XML chunks 
    vluimsbf8 length; //length in bits of decoder configuration, unsigned integer 
    // start of decoderConfiguration 
    if (codingType == 0b11) { 
       bit(3) decoderInitConfig; 
       if (decoderInitConfig == 0b000) { 
           bit(length-3)  decoderInit; 
       }
    } else
    {
      bit(length) reserved;
    }
    // end of decoderConfiguration 
    bit more_data; // 1 if yes, 0 if no 
    while (more_data)
    {
        aligned bit(3) chunk_type;
        bit(5) reserved; // for alignment 
        vluimsbf8 chunk_length;  // length of the chunk in byte 
        switch (chunk_type)
        {
            case 0b000:
                bit(8) sco[chunk_length];
                break;
            case 0b001:
                bit(8) part[chunk_length]; // ID of the part at which the following info refers 
                break;
            case 0b010:
                // this segment is always in binary as stated in Section 9 
                bit(8) sync[chunk_length];
                break;
            case 0b011:
                bit(8) fmt[chunk_length];
                break;
            case 0b100:
                bit(8) lyrics[chunk_length];
  break;
            case 0b101:
                // this segment is always in binary as stated in Section 11.4 
                bit(8) fon[chunk_length];
                break;
            case 0b110: // reserved;
            break;
            case 0b111: // reserved;
            break;
        }
        aligned bit(1) more_data;
        bit(7) reserved; //for alignment 
    } 
} 
*/
public partial class SymbolicMusicSpecificConfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "SymbolicMusicSpecificConfig"; } }

	protected byte version;  // version of this specification is 0b0000 
	public byte Version { get { return this.version; } set { this.version = value; } }

	protected ushort pictureWidth;  //  rendering window X size 
	public ushort PictureWidth { get { return this.pictureWidth; } set { this.pictureWidth = value; } }

	protected ushort pictureHight;  //  rendering window Y size 
	public ushort PictureHight { get { return this.pictureHight; } set { this.pictureHight = value; } }

	protected bool isScoreMultiwindow;  //  0: one window only – 1: multiple windows 
	public bool IsScoreMultiwindow { get { return this.isScoreMultiwindow; } set { this.isScoreMultiwindow = value; } }

	protected byte numberOfParts;  //  parts of the main score 
	public byte NumberOfParts { get { return this.numberOfParts; } set { this.numberOfParts = value; } }

	protected byte notationFormat;  //  CWMN or other sets 
	public byte NotationFormat { get { return this.notationFormat; } set { this.notationFormat = value; } }

	protected byte urlMIDIStream_length;  // length in bytes 
	public byte UrlMIDIStreamLength { get { return this.urlMIDIStream_length; } set { this.urlMIDIStream_length = value; } }

	protected byte[] urlMIDIStream;  //  reference to the MIDI stream, as url 
	public byte[] UrlMIDIStream { get { return this.urlMIDIStream; } set { this.urlMIDIStream = value; } }

	protected byte codingType;  //  coding of the XML chunks 
	public byte CodingType { get { return this.codingType; } set { this.codingType = value; } }

	protected byte length;  // length in bits of decoder configuration, unsigned integer 
	public byte Length { get { return this.length; } set { this.length = value; } }

	protected byte decoderInitConfig; 
	public byte DecoderInitConfig { get { return this.decoderInitConfig; } set { this.decoderInitConfig = value; } }

	protected byte[] decoderInit; 
	public byte[] DecoderInit { get { return this.decoderInit; } set { this.decoderInit = value; } }

	protected byte[] reserved; 
	public byte[] Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected bool more_data;  //  1 if yes, 0 if no 
	public bool MoreData { get { return this.more_data; } set { this.more_data = value; } }

	protected byte chunk_type; 
	public byte ChunkType { get { return this.chunk_type; } set { this.chunk_type = value; } }

	protected byte reserved0;  //  for alignment 
	public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected byte chunk_length;  //  length of the chunk in byte 
	public byte ChunkLength { get { return this.chunk_length; } set { this.chunk_length = value; } }

	protected byte[] sco; 
	public byte[] Sco { get { return this.sco; } set { this.sco = value; } }

	protected byte[] part;  //  ID of the part at which the following info refers 
	public byte[] Part { get { return this.part; } set { this.part = value; } }

	protected byte[] sync; 
	public byte[] Sync { get { return this.sync; } set { this.sync = value; } }

	protected byte[] fmt; 
	public byte[] Fmt { get { return this.fmt; } set { this.fmt = value; } }

	protected byte[] lyrics; 
	public byte[] Lyrics { get { return this.lyrics; } set { this.lyrics = value; } }

	protected byte[] fon; 
	public byte[] Fon { get { return this.fon; } set { this.fon = value; } }

	protected byte reserved00;  // for alignment 
	public byte Reserved00 { get { return this.reserved00; } set { this.reserved00 = value; } }

	public SymbolicMusicSpecificConfig(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		/*  the bitstream header   */
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.version, "version"); //version of this specification is 0b0000 
		boxSize += stream.ReadBits(boxSize, readSize, 12,  out this.pictureWidth, "pictureWidth"); // rendering window X size 
		boxSize += stream.ReadBits(boxSize, readSize, 12,  out this.pictureHight, "pictureHight"); // rendering window Y size 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.isScoreMultiwindow, "isScoreMultiwindow"); // 0: one window only – 1: multiple windows 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.numberOfParts, "numberOfParts"); // parts of the main score 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.notationFormat, "notationFormat"); // CWMN or other sets 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.urlMIDIStream_length, "urlMIDIStream_length"); //length in bytes 
		boxSize += stream.ReadBits(boxSize, readSize, (uint)(urlMIDIStream_length ),  out this.urlMIDIStream, "urlMIDIStream"); // reference to the MIDI stream, as url 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.codingType, "codingType"); // coding of the XML chunks 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.length, "length"); //length in bits of decoder configuration, unsigned integer 
		/*  start of decoderConfiguration  */

		if (codingType == 0b11)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.decoderInitConfig, "decoderInitConfig"); 

			if (decoderInitConfig == 0b000)
			{
				boxSize += stream.ReadBits(boxSize, readSize, (uint)(length-3 ),  out this.decoderInit, "decoderInit"); 
			}
		}

		else 
		{
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(length ),  out this.reserved, "reserved"); 
		}
		/*  end of decoderConfiguration  */
		boxSize += stream.ReadBit(boxSize, readSize,  out this.more_data, "more_data"); // 1 if yes, 0 if no 

		while (more_data)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.chunk_type, "chunk_type"); 
			boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.reserved0, "reserved0"); // for alignment 
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.chunk_length, "chunk_length"); // length of the chunk in byte 

			switch (chunk_type)
			{
				case 0b000:
				boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(chunk_length),  out this.sco, "sco"); 
				break;

				case 0b001:
				boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(chunk_length),  out this.part, "part"); // ID of the part at which the following info refers 
				break;

				case 0b010:
				/*  this segment is always in binary as stated in Section 9  */
				boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(chunk_length),  out this.sync, "sync"); 
				break;

				case 0b011:
				boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(chunk_length),  out this.fmt, "fmt"); 
				break;

				case 0b100:
				boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(chunk_length),  out this.lyrics, "lyrics"); 
				break;

				case 0b101:
				/*  this segment is always in binary as stated in Section 11.4  */
				boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(chunk_length),  out this.fon, "fon"); 
				break;

				case 0b110:
				/*  reserved; */
				break;

				case 0b111:
				/*  reserved; */
				break;

			}
			boxSize += stream.ReadBit(boxSize, readSize,  out this.more_data, "more_data"); 
			boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.reserved00, "reserved00"); //for alignment 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		/*  the bitstream header   */
		boxSize += stream.WriteBits(4,  this.version, "version"); //version of this specification is 0b0000 
		boxSize += stream.WriteBits(12,  this.pictureWidth, "pictureWidth"); // rendering window X size 
		boxSize += stream.WriteBits(12,  this.pictureHight, "pictureHight"); // rendering window Y size 
		boxSize += stream.WriteBit( this.isScoreMultiwindow, "isScoreMultiwindow"); // 0: one window only – 1: multiple windows 
		boxSize += stream.WriteUInt8( this.numberOfParts, "numberOfParts"); // parts of the main score 
		boxSize += stream.WriteBits(3,  this.notationFormat, "notationFormat"); // CWMN or other sets 
		boxSize += stream.WriteUInt8( this.urlMIDIStream_length, "urlMIDIStream_length"); //length in bytes 
		boxSize += stream.WriteBits((uint)(urlMIDIStream_length ),  this.urlMIDIStream, "urlMIDIStream"); // reference to the MIDI stream, as url 
		boxSize += stream.WriteBits(2,  this.codingType, "codingType"); // coding of the XML chunks 
		boxSize += stream.WriteUInt8( this.length, "length"); //length in bits of decoder configuration, unsigned integer 
		/*  start of decoderConfiguration  */

		if (codingType == 0b11)
		{
			boxSize += stream.WriteBits(3,  this.decoderInitConfig, "decoderInitConfig"); 

			if (decoderInitConfig == 0b000)
			{
				boxSize += stream.WriteBits((uint)(length-3 ),  this.decoderInit, "decoderInit"); 
			}
		}

		else 
		{
			boxSize += stream.WriteBits((uint)(length ),  this.reserved, "reserved"); 
		}
		/*  end of decoderConfiguration  */
		boxSize += stream.WriteBit( this.more_data, "more_data"); // 1 if yes, 0 if no 

		while (more_data)
		{
			boxSize += stream.WriteBits(3,  this.chunk_type, "chunk_type"); 
			boxSize += stream.WriteBits(5,  this.reserved0, "reserved0"); // for alignment 
			boxSize += stream.WriteUInt8( this.chunk_length, "chunk_length"); // length of the chunk in byte 

			switch (chunk_type)
			{
				case 0b000:
				boxSize += stream.WriteUInt8Array((uint)(chunk_length),  this.sco, "sco"); 
				break;

				case 0b001:
				boxSize += stream.WriteUInt8Array((uint)(chunk_length),  this.part, "part"); // ID of the part at which the following info refers 
				break;

				case 0b010:
				/*  this segment is always in binary as stated in Section 9  */
				boxSize += stream.WriteUInt8Array((uint)(chunk_length),  this.sync, "sync"); 
				break;

				case 0b011:
				boxSize += stream.WriteUInt8Array((uint)(chunk_length),  this.fmt, "fmt"); 
				break;

				case 0b100:
				boxSize += stream.WriteUInt8Array((uint)(chunk_length),  this.lyrics, "lyrics"); 
				break;

				case 0b101:
				/*  this segment is always in binary as stated in Section 11.4  */
				boxSize += stream.WriteUInt8Array((uint)(chunk_length),  this.fon, "fon"); 
				break;

				case 0b110:
				/*  reserved; */
				break;

				case 0b111:
				/*  reserved; */
				break;

			}
			boxSize += stream.WriteBit( this.more_data, "more_data"); 
			boxSize += stream.WriteBits(7,  this.reserved00, "reserved00"); //for alignment 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		/*  the bitstream header   */
		boxSize += 4; // version
		boxSize += 12; // pictureWidth
		boxSize += 12; // pictureHight
		boxSize += 1; // isScoreMultiwindow
		boxSize += 8; // numberOfParts
		boxSize += 3; // notationFormat
		boxSize += 8; // urlMIDIStream_length
		boxSize += (ulong)(urlMIDIStream_length ); // urlMIDIStream
		boxSize += 2; // codingType
		boxSize += 8; // length
		/*  start of decoderConfiguration  */

		if (codingType == 0b11)
		{
			boxSize += 3; // decoderInitConfig

			if (decoderInitConfig == 0b000)
			{
				boxSize += (ulong)(length-3 ); // decoderInit
			}
		}

		else 
		{
			boxSize += (ulong)(length ); // reserved
		}
		/*  end of decoderConfiguration  */
		boxSize += 1; // more_data

		while (more_data)
		{
			boxSize += 3; // chunk_type
			boxSize += 5; // reserved0
			boxSize += 8; // chunk_length

			switch (chunk_type)
			{
				case 0b000:
				boxSize += ((ulong)(chunk_length) * 8); // sco
				break;

				case 0b001:
				boxSize += ((ulong)(chunk_length) * 8); // part
				break;

				case 0b010:
				/*  this segment is always in binary as stated in Section 9  */
				boxSize += ((ulong)(chunk_length) * 8); // sync
				break;

				case 0b011:
				boxSize += ((ulong)(chunk_length) * 8); // fmt
				break;

				case 0b100:
				boxSize += ((ulong)(chunk_length) * 8); // lyrics
				break;

				case 0b101:
				/*  this segment is always in binary as stated in Section 11.4  */
				boxSize += ((ulong)(chunk_length) * 8); // fon
				break;

				case 0b110:
				/*  reserved; */
				break;

				case 0b111:
				/*  reserved; */
				break;

			}
			boxSize += 1; // more_data
			boxSize += 7; // reserved00
		}
		return boxSize;
	}
}


/*
class AudioSpecificConfig() extends BaseDescriptor : bit(8) tag=DecSpecificInfoTag {
  GetAudioObjectType() audioObjectType;
  bslbf(4) samplingFrequencyIndex;
  if(samplingFrequencyIndex == 0xf ) {
    uimsbf(24) samplingFrequency;
  }
  bslbf(4) channelConfiguration;
  sbrPresentFlag = -1;
  psPresentFlag = -1;

  if (audioObjectType == 5 || audioObjectType == 29) {
    extensionAudioObjectType = 5;
    sbrPresentFlag = 1;
    if (audioObjectType == 29) {
      psPresentFlag = 1;
    }
    uimsbf(4) extensionSamplingFrequencyIndex;
    if (extensionSamplingFrequencyIndex == 0xf)
      uimsbf(24) extensionSamplingFrequency;
    GetAudioObjectType() audioObjectType;
    if (audioObjectType == 22)
      uimsbf(4) extensionChannelConfiguration;
  }
  else {
    extensionAudioObjectType = 0;
  }
  switch (audioObjectType) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 17:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      GASpecificConfig(samplingFrequencyIndex, channelConfiguration, audioObjectType);
      break;
    case 8:
      CelpSpecificConfig(samplingFrequencyIndex);
      break;
    case 9:
      HvxcSpecificConfig();
      break;
    case 12:
      TTSSpecificConfig();
      break;
    case 13:
    case 14:
    case 15:
    case 16:
      StructuredAudioSpecificConfig();
      break;
    case 24:
      ErrorResilientCelpSpecificConfig(samplingFrequencyIndex);
      break;
    case 25:
      ErrorResilientHvxcSpecificConfig();
      break;
    case 26:
    case 27:
      ParametricSpecificConfig();
      break;
    case 28:
      SSCSpecificConfig(channelConfiguration);
      break;
    case 30:
      uimsbf(1) sacPayloadEmbedding;
      SpatialSpecificConfig();
      break;
    case 32:
    case 33:
    case 34:
      MPEG_1_2_SpecificConfig();
      break;
    case 35:
      DSTSpecificConfig(channelConfiguration);
      break;
    case 36:
      bslbf(5) fillBits;
      ALSSpecificConfig();
      break;
    case 37:
    case 38:
      SLSSpecificConfig(samplingFrequencyIndex, channelConfiguration, audioObjectType);
      break;
    case 39:
      ELDSpecificConfig(channelConfiguration);
      break;
    case 40:
    case 41:
      SymbolicMusicSpecificConfig();
      break;
    default:
      /* reserved *//*
      break;
  }
  switch (audioObjectType) {
    case 17:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 39:
      bslbf(2) epConfig;
      if (epConfig == 2 || epConfig == 3) {
        ErrorProtectionSpecificConfig();
      }
      if (epConfig == 3) {
        bslbf(1) directMapping;
        if (!directMapping) {
          /* tbd *//*
        }
      }
      break;
  }
  if (extensionAudioObjectType != 5 && bits_to_decode() >= 16) {
    bslbf(11) syncExtensionType;
    if (syncExtensionType == 0x2b7) {
      GetAudioObjectType() extensionAudioObjectType;
      if (extensionAudioObjectType == 5) {
        uimsbf(1) sbrPresentFlag;
        if (sbrPresentFlag == 1) {
          uimsbf(4) extensionSamplingFrequencyIndex;
          if (extensionSamplingFrequencyIndex == 0xf) {
            uimsbf(24) extensionSamplingFrequency;
          }
          if (bits_to_decode() >= 12) {
            bslbf(11) syncExtensionType;
            if (syncExtensionType == 0x548) {
              uimsbf(1) psPresentFlag;
            }
          }
        }
      }
      if (extensionAudioObjectType == 22) {
        uimsbf(1) sbrPresentFlag;
        if (sbrPresentFlag == 1) {
          uimsbf(4) extensionSamplingFrequencyIndex;
          if (extensionSamplingFrequencyIndex == 0xf) {
            uimsbf(24) extensionSamplingFrequency;
          }
        }
        uimsbf(4) extensionChannelConfiguration;
      }
    }
  }   
}


*/
public partial class AudioSpecificConfig : BaseDescriptor
{
	public const byte TYPE = DescriptorTags.DecSpecificInfoTag;
	public override string DisplayName { get { return "AudioSpecificConfig"; } }

	protected GetAudioObjectType audioObjectType; 
	public GetAudioObjectType AudioObjectType { get { return this.audioObjectType; } set { this.audioObjectType = value; } }

	protected byte samplingFrequencyIndex; 
	public byte SamplingFrequencyIndex { get { return this.samplingFrequencyIndex; } set { this.samplingFrequencyIndex = value; } }

	protected uint samplingFrequency; 
	public uint SamplingFrequency { get { return this.samplingFrequency; } set { this.samplingFrequency = value; } }

	protected byte channelConfiguration; 
	public byte ChannelConfiguration { get { return this.channelConfiguration; } set { this.channelConfiguration = value; } }

	protected byte extensionSamplingFrequencyIndex; 
	public byte ExtensionSamplingFrequencyIndex { get { return this.extensionSamplingFrequencyIndex; } set { this.extensionSamplingFrequencyIndex = value; } }

	protected uint extensionSamplingFrequency; 
	public uint ExtensionSamplingFrequency { get { return this.extensionSamplingFrequency; } set { this.extensionSamplingFrequency = value; } }

	protected byte extensionChannelConfiguration; 
	public byte ExtensionChannelConfiguration { get { return this.extensionChannelConfiguration; } set { this.extensionChannelConfiguration = value; } }

	protected GASpecificConfig GASpecificConfig; 
	public GASpecificConfig _GASpecificConfig { get { return this.GASpecificConfig; } set { this.GASpecificConfig = value; } }

	protected CelpSpecificConfig CelpSpecificConfig; 
	public CelpSpecificConfig _CelpSpecificConfig { get { return this.CelpSpecificConfig; } set { this.CelpSpecificConfig = value; } }

	protected HvxcSpecificConfig HvxcSpecificConfig; 
	public HvxcSpecificConfig _HvxcSpecificConfig { get { return this.HvxcSpecificConfig; } set { this.HvxcSpecificConfig = value; } }

	protected TTSSpecificConfig TTSSpecificConfig; 
	public TTSSpecificConfig _TTSSpecificConfig { get { return this.TTSSpecificConfig; } set { this.TTSSpecificConfig = value; } }

	protected StructuredAudioSpecificConfig StructuredAudioSpecificConfig; 
	public StructuredAudioSpecificConfig _StructuredAudioSpecificConfig { get { return this.StructuredAudioSpecificConfig; } set { this.StructuredAudioSpecificConfig = value; } }

	protected ErrorResilientCelpSpecificConfig ErrorResilientCelpSpecificConfig; 
	public ErrorResilientCelpSpecificConfig _ErrorResilientCelpSpecificConfig { get { return this.ErrorResilientCelpSpecificConfig; } set { this.ErrorResilientCelpSpecificConfig = value; } }

	protected ErrorResilientHvxcSpecificConfig ErrorResilientHvxcSpecificConfig; 
	public ErrorResilientHvxcSpecificConfig _ErrorResilientHvxcSpecificConfig { get { return this.ErrorResilientHvxcSpecificConfig; } set { this.ErrorResilientHvxcSpecificConfig = value; } }

	protected ParametricSpecificConfig ParametricSpecificConfig; 
	public ParametricSpecificConfig _ParametricSpecificConfig { get { return this.ParametricSpecificConfig; } set { this.ParametricSpecificConfig = value; } }

	protected SSCSpecificConfig SSCSpecificConfig; 
	public SSCSpecificConfig _SSCSpecificConfig { get { return this.SSCSpecificConfig; } set { this.SSCSpecificConfig = value; } }

	protected bool sacPayloadEmbedding; 
	public bool SacPayloadEmbedding { get { return this.sacPayloadEmbedding; } set { this.sacPayloadEmbedding = value; } }

	protected SpatialSpecificConfig SpatialSpecificConfig; 
	public SpatialSpecificConfig _SpatialSpecificConfig { get { return this.SpatialSpecificConfig; } set { this.SpatialSpecificConfig = value; } }

	protected MPEG_1_2_SpecificConfig MPEG_1_2_SpecificConfig; 
	public MPEG_1_2_SpecificConfig MPEG12SpecificConfig { get { return this.MPEG_1_2_SpecificConfig; } set { this.MPEG_1_2_SpecificConfig = value; } }

	protected DSTSpecificConfig DSTSpecificConfig; 
	public DSTSpecificConfig _DSTSpecificConfig { get { return this.DSTSpecificConfig; } set { this.DSTSpecificConfig = value; } }

	protected byte fillBits; 
	public byte FillBits { get { return this.fillBits; } set { this.fillBits = value; } }

	protected ALSSpecificConfig ALSSpecificConfig; 
	public ALSSpecificConfig _ALSSpecificConfig { get { return this.ALSSpecificConfig; } set { this.ALSSpecificConfig = value; } }

	protected SLSSpecificConfig SLSSpecificConfig; 
	public SLSSpecificConfig _SLSSpecificConfig { get { return this.SLSSpecificConfig; } set { this.SLSSpecificConfig = value; } }

	protected ELDSpecificConfig ELDSpecificConfig; 
	public ELDSpecificConfig _ELDSpecificConfig { get { return this.ELDSpecificConfig; } set { this.ELDSpecificConfig = value; } }

	protected SymbolicMusicSpecificConfig SymbolicMusicSpecificConfig; 
	public SymbolicMusicSpecificConfig _SymbolicMusicSpecificConfig { get { return this.SymbolicMusicSpecificConfig; } set { this.SymbolicMusicSpecificConfig = value; } }

	protected byte epConfig; 
	public byte EpConfig { get { return this.epConfig; } set { this.epConfig = value; } }

	protected ErrorProtectionSpecificConfig ErrorProtectionSpecificConfig; 
	public ErrorProtectionSpecificConfig _ErrorProtectionSpecificConfig { get { return this.ErrorProtectionSpecificConfig; } set { this.ErrorProtectionSpecificConfig = value; } }

	protected bool directMapping; 
	public bool DirectMapping { get { return this.directMapping; } set { this.directMapping = value; } }

	protected ushort syncExtensionType; 
	public ushort SyncExtensionType { get { return this.syncExtensionType; } set { this.syncExtensionType = value; } }

	protected GetAudioObjectType extensionAudioObjectType= new GetAudioObjectType(); 
	public GetAudioObjectType ExtensionAudioObjectType { get { return this.extensionAudioObjectType; } set { this.extensionAudioObjectType = value; } }

	protected bool sbrPresentFlag; 
	public bool SbrPresentFlag { get { return this.sbrPresentFlag; } set { this.sbrPresentFlag = value; } }

	protected bool psPresentFlag; 
	public bool PsPresentFlag { get { return this.psPresentFlag; } set { this.psPresentFlag = value; } }

	public AudioSpecificConfig(): base(DescriptorTags.DecSpecificInfoTag)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new GetAudioObjectType(),  out this.audioObjectType, "audioObjectType"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.samplingFrequencyIndex, "samplingFrequencyIndex"); 

		if (samplingFrequencyIndex == 0xf )
		{
			boxSize += stream.ReadUInt24(boxSize, readSize,  out this.samplingFrequency, "samplingFrequency"); 
		}
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.channelConfiguration, "channelConfiguration"); 
		sbrPresentFlag = false;
		psPresentFlag = false;

		if (audioObjectType.AudioObjectType == 5 || audioObjectType.AudioObjectType == 29)
		{
			extensionAudioObjectType.AudioObjectType = 5;
			sbrPresentFlag = true;

			if (audioObjectType.AudioObjectType == 29)
			{
				psPresentFlag = true;
			}
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.extensionSamplingFrequencyIndex, "extensionSamplingFrequencyIndex"); 

			if (extensionSamplingFrequencyIndex == 0xf)
			{
				boxSize += stream.ReadUInt24(boxSize, readSize,  out this.extensionSamplingFrequency, "extensionSamplingFrequency"); 
			}
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new GetAudioObjectType(),  out this.audioObjectType, "audioObjectType"); 

			if (audioObjectType.AudioObjectType == 22)
			{
				boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.extensionChannelConfiguration, "extensionChannelConfiguration"); 
			}
		}

		else 
		{
			extensionAudioObjectType.AudioObjectType = 0;
		}

		switch (audioObjectType.AudioObjectType)
		{
			case 1:
			case 2:
			case 3:
			case 4:
			case 6:
			case 7:
			case 17:
			case 19:
			case 20:
			case 21:
			case 22:
			case 23:
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new GASpecificConfig(samplingFrequencyIndex, channelConfiguration, audioObjectType.AudioObjectType),  out this.GASpecificConfig, "GASpecificConfig"); 
			break;

			case 8:
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new CelpSpecificConfig(samplingFrequencyIndex),  out this.CelpSpecificConfig, "CelpSpecificConfig"); 
			break;

			case 9:
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new HvxcSpecificConfig(),  out this.HvxcSpecificConfig, "HvxcSpecificConfig"); 
			break;

			case 12:
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new TTSSpecificConfig(),  out this.TTSSpecificConfig, "TTSSpecificConfig"); 
			break;

			case 13:
			case 14:
			case 15:
			case 16:
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new StructuredAudioSpecificConfig(),  out this.StructuredAudioSpecificConfig, "StructuredAudioSpecificConfig"); 
			break;

			case 24:
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new ErrorResilientCelpSpecificConfig(samplingFrequencyIndex),  out this.ErrorResilientCelpSpecificConfig, "ErrorResilientCelpSpecificConfig"); 
			break;

			case 25:
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new ErrorResilientHvxcSpecificConfig(),  out this.ErrorResilientHvxcSpecificConfig, "ErrorResilientHvxcSpecificConfig"); 
			break;

			case 26:
			case 27:
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new ParametricSpecificConfig(),  out this.ParametricSpecificConfig, "ParametricSpecificConfig"); 
			break;

			case 28:
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new SSCSpecificConfig(channelConfiguration),  out this.SSCSpecificConfig, "SSCSpecificConfig"); 
			break;

			case 30:
			boxSize += stream.ReadBit(boxSize, readSize,  out this.sacPayloadEmbedding, "sacPayloadEmbedding"); 
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new SpatialSpecificConfig(),  out this.SpatialSpecificConfig, "SpatialSpecificConfig"); 
			break;

			case 32:
			case 33:
			case 34:
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new MPEG_1_2_SpecificConfig(),  out this.MPEG_1_2_SpecificConfig, "MPEG_1_2_SpecificConfig"); 
			break;

			case 35:
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new DSTSpecificConfig(channelConfiguration),  out this.DSTSpecificConfig, "DSTSpecificConfig"); 
			break;

			case 36:
			boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.fillBits, "fillBits"); 
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new ALSSpecificConfig(),  out this.ALSSpecificConfig, "ALSSpecificConfig"); 
			break;

			case 37:
			case 38:
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new SLSSpecificConfig(samplingFrequencyIndex, channelConfiguration, audioObjectType.AudioObjectType),  out this.SLSSpecificConfig, "SLSSpecificConfig"); 
			break;

			case 39:
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new ELDSpecificConfig(channelConfiguration),  out this.ELDSpecificConfig, "ELDSpecificConfig"); 
			break;

			case 40:
			case 41:
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new SymbolicMusicSpecificConfig(),  out this.SymbolicMusicSpecificConfig, "SymbolicMusicSpecificConfig"); 
			break;

			default:

			/*  reserved  */
			break;

		}

		switch (audioObjectType.AudioObjectType)
		{
			case 17:
			case 19:
			case 20:
			case 21:
			case 22:
			case 23:
			case 24:
			case 25:
			case 26:
			case 27:
			case 39:
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.epConfig, "epConfig"); 

			if (epConfig == 2 || epConfig == 3)
			{
				boxSize += stream.ReadClass(boxSize, readSize, this, () => new ErrorProtectionSpecificConfig(),  out this.ErrorProtectionSpecificConfig, "ErrorProtectionSpecificConfig"); 
			}

			if (epConfig == 3)
			{
				boxSize += stream.ReadBit(boxSize, readSize,  out this.directMapping, "directMapping"); 

				if (!directMapping)
				{
					/*  tbd  */
				}
			}
			break;

		}

		if (extensionAudioObjectType.AudioObjectType != 5 && IsoStream.BitsToDecode(boxSize, readSize) >= 16)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 11,  out this.syncExtensionType, "syncExtensionType"); 

			if (syncExtensionType == 0x2b7)
			{
				boxSize += stream.ReadClass(boxSize, readSize, this, () => new GetAudioObjectType(),  out this.extensionAudioObjectType, "extensionAudioObjectType"); 

				if (extensionAudioObjectType.AudioObjectType == 5)
				{
					boxSize += stream.ReadBit(boxSize, readSize,  out this.sbrPresentFlag, "sbrPresentFlag"); 

					if (sbrPresentFlag == true)
					{
						boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.extensionSamplingFrequencyIndex, "extensionSamplingFrequencyIndex"); 

						if (extensionSamplingFrequencyIndex == 0xf)
						{
							boxSize += stream.ReadUInt24(boxSize, readSize,  out this.extensionSamplingFrequency, "extensionSamplingFrequency"); 
						}

						if (IsoStream.BitsToDecode(boxSize, readSize) >= 12)
						{
							boxSize += stream.ReadBits(boxSize, readSize, 11,  out this.syncExtensionType, "syncExtensionType"); 

							if (syncExtensionType == 0x548)
							{
								boxSize += stream.ReadBit(boxSize, readSize,  out this.psPresentFlag, "psPresentFlag"); 
							}
						}
					}
				}

				if (extensionAudioObjectType.AudioObjectType == 22)
				{
					boxSize += stream.ReadBit(boxSize, readSize,  out this.sbrPresentFlag, "sbrPresentFlag"); 

					if (sbrPresentFlag == true)
					{
						boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.extensionSamplingFrequencyIndex, "extensionSamplingFrequencyIndex"); 

						if (extensionSamplingFrequencyIndex == 0xf)
						{
							boxSize += stream.ReadUInt24(boxSize, readSize,  out this.extensionSamplingFrequency, "extensionSamplingFrequency"); 
						}
					}
					boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.extensionChannelConfiguration, "extensionChannelConfiguration"); 
				}
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.audioObjectType, "audioObjectType"); 
		boxSize += stream.WriteBits(4,  this.samplingFrequencyIndex, "samplingFrequencyIndex"); 

		if (samplingFrequencyIndex == 0xf )
		{
			boxSize += stream.WriteUInt24( this.samplingFrequency, "samplingFrequency"); 
		}
		boxSize += stream.WriteBits(4,  this.channelConfiguration, "channelConfiguration"); 
		sbrPresentFlag = false;
		psPresentFlag = false;

		if (audioObjectType.AudioObjectType == 5 || audioObjectType.AudioObjectType == 29)
		{
			extensionAudioObjectType.AudioObjectType = 5;
			sbrPresentFlag = true;

			if (audioObjectType.AudioObjectType == 29)
			{
				psPresentFlag = true;
			}
			boxSize += stream.WriteBits(4,  this.extensionSamplingFrequencyIndex, "extensionSamplingFrequencyIndex"); 

			if (extensionSamplingFrequencyIndex == 0xf)
			{
				boxSize += stream.WriteUInt24( this.extensionSamplingFrequency, "extensionSamplingFrequency"); 
			}
			boxSize += stream.WriteClass( this.audioObjectType, "audioObjectType"); 

			if (audioObjectType.AudioObjectType == 22)
			{
				boxSize += stream.WriteBits(4,  this.extensionChannelConfiguration, "extensionChannelConfiguration"); 
			}
		}

		else 
		{
			extensionAudioObjectType.AudioObjectType = 0;
		}

		switch (audioObjectType.AudioObjectType)
		{
			case 1:
			case 2:
			case 3:
			case 4:
			case 6:
			case 7:
			case 17:
			case 19:
			case 20:
			case 21:
			case 22:
			case 23:
			boxSize += stream.WriteClass( this.GASpecificConfig, "GASpecificConfig"); 
			break;

			case 8:
			boxSize += stream.WriteClass( this.CelpSpecificConfig, "CelpSpecificConfig"); 
			break;

			case 9:
			boxSize += stream.WriteClass( this.HvxcSpecificConfig, "HvxcSpecificConfig"); 
			break;

			case 12:
			boxSize += stream.WriteClass( this.TTSSpecificConfig, "TTSSpecificConfig"); 
			break;

			case 13:
			case 14:
			case 15:
			case 16:
			boxSize += stream.WriteClass( this.StructuredAudioSpecificConfig, "StructuredAudioSpecificConfig"); 
			break;

			case 24:
			boxSize += stream.WriteClass( this.ErrorResilientCelpSpecificConfig, "ErrorResilientCelpSpecificConfig"); 
			break;

			case 25:
			boxSize += stream.WriteClass( this.ErrorResilientHvxcSpecificConfig, "ErrorResilientHvxcSpecificConfig"); 
			break;

			case 26:
			case 27:
			boxSize += stream.WriteClass( this.ParametricSpecificConfig, "ParametricSpecificConfig"); 
			break;

			case 28:
			boxSize += stream.WriteClass( this.SSCSpecificConfig, "SSCSpecificConfig"); 
			break;

			case 30:
			boxSize += stream.WriteBit( this.sacPayloadEmbedding, "sacPayloadEmbedding"); 
			boxSize += stream.WriteClass( this.SpatialSpecificConfig, "SpatialSpecificConfig"); 
			break;

			case 32:
			case 33:
			case 34:
			boxSize += stream.WriteClass( this.MPEG_1_2_SpecificConfig, "MPEG_1_2_SpecificConfig"); 
			break;

			case 35:
			boxSize += stream.WriteClass( this.DSTSpecificConfig, "DSTSpecificConfig"); 
			break;

			case 36:
			boxSize += stream.WriteBits(5,  this.fillBits, "fillBits"); 
			boxSize += stream.WriteClass( this.ALSSpecificConfig, "ALSSpecificConfig"); 
			break;

			case 37:
			case 38:
			boxSize += stream.WriteClass( this.SLSSpecificConfig, "SLSSpecificConfig"); 
			break;

			case 39:
			boxSize += stream.WriteClass( this.ELDSpecificConfig, "ELDSpecificConfig"); 
			break;

			case 40:
			case 41:
			boxSize += stream.WriteClass( this.SymbolicMusicSpecificConfig, "SymbolicMusicSpecificConfig"); 
			break;

			default:

			/*  reserved  */
			break;

		}

		switch (audioObjectType.AudioObjectType)
		{
			case 17:
			case 19:
			case 20:
			case 21:
			case 22:
			case 23:
			case 24:
			case 25:
			case 26:
			case 27:
			case 39:
			boxSize += stream.WriteBits(2,  this.epConfig, "epConfig"); 

			if (epConfig == 2 || epConfig == 3)
			{
				boxSize += stream.WriteClass( this.ErrorProtectionSpecificConfig, "ErrorProtectionSpecificConfig"); 
			}

			if (epConfig == 3)
			{
				boxSize += stream.WriteBit( this.directMapping, "directMapping"); 

				if (!directMapping)
				{
					/*  tbd  */
				}
			}
			break;

		}

		if (extensionAudioObjectType.AudioObjectType != 5 && IsoStream.BitsToDecode(boxSize, SizeOfInstance) >= 16)
		{
			boxSize += stream.WriteBits(11,  this.syncExtensionType, "syncExtensionType"); 

			if (syncExtensionType == 0x2b7)
			{
				boxSize += stream.WriteClass( this.extensionAudioObjectType, "extensionAudioObjectType"); 

				if (extensionAudioObjectType.AudioObjectType == 5)
				{
					boxSize += stream.WriteBit( this.sbrPresentFlag, "sbrPresentFlag"); 

					if (sbrPresentFlag == true)
					{
						boxSize += stream.WriteBits(4,  this.extensionSamplingFrequencyIndex, "extensionSamplingFrequencyIndex"); 

						if (extensionSamplingFrequencyIndex == 0xf)
						{
							boxSize += stream.WriteUInt24( this.extensionSamplingFrequency, "extensionSamplingFrequency"); 
						}

						if (IsoStream.BitsToDecode(boxSize, SizeOfInstance) >= 12)
						{
							boxSize += stream.WriteBits(11,  this.syncExtensionType, "syncExtensionType"); 

							if (syncExtensionType == 0x548)
							{
								boxSize += stream.WriteBit( this.psPresentFlag, "psPresentFlag"); 
							}
						}
					}
				}

				if (extensionAudioObjectType.AudioObjectType == 22)
				{
					boxSize += stream.WriteBit( this.sbrPresentFlag, "sbrPresentFlag"); 

					if (sbrPresentFlag == true)
					{
						boxSize += stream.WriteBits(4,  this.extensionSamplingFrequencyIndex, "extensionSamplingFrequencyIndex"); 

						if (extensionSamplingFrequencyIndex == 0xf)
						{
							boxSize += stream.WriteUInt24( this.extensionSamplingFrequency, "extensionSamplingFrequency"); 
						}
					}
					boxSize += stream.WriteBits(4,  this.extensionChannelConfiguration, "extensionChannelConfiguration"); 
				}
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(audioObjectType); // audioObjectType
		boxSize += 4; // samplingFrequencyIndex

		if (samplingFrequencyIndex == 0xf )
		{
			boxSize += 24; // samplingFrequency
		}
		boxSize += 4; // channelConfiguration
		sbrPresentFlag = false;
		psPresentFlag = false;

		if (audioObjectType.AudioObjectType == 5 || audioObjectType.AudioObjectType == 29)
		{
			extensionAudioObjectType.AudioObjectType = 5;
			sbrPresentFlag = true;

			if (audioObjectType.AudioObjectType == 29)
			{
				psPresentFlag = true;
			}
			boxSize += 4; // extensionSamplingFrequencyIndex

			if (extensionSamplingFrequencyIndex == 0xf)
			{
				boxSize += 24; // extensionSamplingFrequency
			}
			boxSize += IsoStream.CalculateClassSize(audioObjectType); // audioObjectType

			if (audioObjectType.AudioObjectType == 22)
			{
				boxSize += 4; // extensionChannelConfiguration
			}
		}

		else 
		{
			extensionAudioObjectType.AudioObjectType = 0;
		}

		switch (audioObjectType.AudioObjectType)
		{
			case 1:
			case 2:
			case 3:
			case 4:
			case 6:
			case 7:
			case 17:
			case 19:
			case 20:
			case 21:
			case 22:
			case 23:
			boxSize += IsoStream.CalculateClassSize(GASpecificConfig); // GASpecificConfig
			break;

			case 8:
			boxSize += IsoStream.CalculateClassSize(CelpSpecificConfig); // CelpSpecificConfig
			break;

			case 9:
			boxSize += IsoStream.CalculateClassSize(HvxcSpecificConfig); // HvxcSpecificConfig
			break;

			case 12:
			boxSize += IsoStream.CalculateClassSize(TTSSpecificConfig); // TTSSpecificConfig
			break;

			case 13:
			case 14:
			case 15:
			case 16:
			boxSize += IsoStream.CalculateClassSize(StructuredAudioSpecificConfig); // StructuredAudioSpecificConfig
			break;

			case 24:
			boxSize += IsoStream.CalculateClassSize(ErrorResilientCelpSpecificConfig); // ErrorResilientCelpSpecificConfig
			break;

			case 25:
			boxSize += IsoStream.CalculateClassSize(ErrorResilientHvxcSpecificConfig); // ErrorResilientHvxcSpecificConfig
			break;

			case 26:
			case 27:
			boxSize += IsoStream.CalculateClassSize(ParametricSpecificConfig); // ParametricSpecificConfig
			break;

			case 28:
			boxSize += IsoStream.CalculateClassSize(SSCSpecificConfig); // SSCSpecificConfig
			break;

			case 30:
			boxSize += 1; // sacPayloadEmbedding
			boxSize += IsoStream.CalculateClassSize(SpatialSpecificConfig); // SpatialSpecificConfig
			break;

			case 32:
			case 33:
			case 34:
			boxSize += IsoStream.CalculateClassSize(MPEG_1_2_SpecificConfig); // MPEG_1_2_SpecificConfig
			break;

			case 35:
			boxSize += IsoStream.CalculateClassSize(DSTSpecificConfig); // DSTSpecificConfig
			break;

			case 36:
			boxSize += 5; // fillBits
			boxSize += IsoStream.CalculateClassSize(ALSSpecificConfig); // ALSSpecificConfig
			break;

			case 37:
			case 38:
			boxSize += IsoStream.CalculateClassSize(SLSSpecificConfig); // SLSSpecificConfig
			break;

			case 39:
			boxSize += IsoStream.CalculateClassSize(ELDSpecificConfig); // ELDSpecificConfig
			break;

			case 40:
			case 41:
			boxSize += IsoStream.CalculateClassSize(SymbolicMusicSpecificConfig); // SymbolicMusicSpecificConfig
			break;

			default:

			/*  reserved  */
			break;

		}

		switch (audioObjectType.AudioObjectType)
		{
			case 17:
			case 19:
			case 20:
			case 21:
			case 22:
			case 23:
			case 24:
			case 25:
			case 26:
			case 27:
			case 39:
			boxSize += 2; // epConfig

			if (epConfig == 2 || epConfig == 3)
			{
				boxSize += IsoStream.CalculateClassSize(ErrorProtectionSpecificConfig); // ErrorProtectionSpecificConfig
			}

			if (epConfig == 3)
			{
				boxSize += 1; // directMapping

				if (!directMapping)
				{
					/*  tbd  */
				}
			}
			break;

		}

		if (extensionAudioObjectType.AudioObjectType != 5 && IsoStream.BitsToDecode(boxSize, SizeOfInstance) >= 16)
		{
			boxSize += 11; // syncExtensionType

			if (syncExtensionType == 0x2b7)
			{
				boxSize += IsoStream.CalculateClassSize(extensionAudioObjectType); // extensionAudioObjectType

				if (extensionAudioObjectType.AudioObjectType == 5)
				{
					boxSize += 1; // sbrPresentFlag

					if (sbrPresentFlag == true)
					{
						boxSize += 4; // extensionSamplingFrequencyIndex

						if (extensionSamplingFrequencyIndex == 0xf)
						{
							boxSize += 24; // extensionSamplingFrequency
						}

						if (IsoStream.BitsToDecode(boxSize, SizeOfInstance) >= 12)
						{
							boxSize += 11; // syncExtensionType

							if (syncExtensionType == 0x548)
							{
								boxSize += 1; // psPresentFlag
							}
						}
					}
				}

				if (extensionAudioObjectType.AudioObjectType == 22)
				{
					boxSize += 1; // sbrPresentFlag

					if (sbrPresentFlag == true)
					{
						boxSize += 4; // extensionSamplingFrequencyIndex

						if (extensionSamplingFrequencyIndex == 0xf)
						{
							boxSize += 24; // extensionSamplingFrequency
						}
					}
					boxSize += 4; // extensionChannelConfiguration
				}
			}
		}
		return boxSize;
	}
}


/*
class GetAudioObjectType()
{
  uimsbf(5) audioObjectType;
  if (audioObjectType == 31) {
    uimsbf(6) audioObjectTypeExt;
    audioObjectType = 32 + audioObjectTypeExt;
  }
  return audioObjectType;
}


*/
public partial class GetAudioObjectType : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "GetAudioObjectType"; } }

	protected byte audioObjectType; 
	public byte AudioObjectType { get { return this.audioObjectType; } set { this.audioObjectType = value; } }

	protected byte audioObjectTypeExt; 
	public byte AudioObjectTypeExt { get { return this.audioObjectTypeExt; } set { this.audioObjectTypeExt = value; } }

	public GetAudioObjectType(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.audioObjectType, "audioObjectType"); 

		if (audioObjectType == 31)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.audioObjectTypeExt, "audioObjectTypeExt"); 
			audioObjectType = (byte)(32 + audioObjectTypeExt);
		}
		// return audioObjectType;
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBits(5,  this.audioObjectType, "audioObjectType"); 

		if (audioObjectType == 31)
		{
			boxSize += stream.WriteBits(6,  this.audioObjectTypeExt, "audioObjectTypeExt"); 
			audioObjectType = (byte)(32 + audioObjectTypeExt);
		}
		// return audioObjectType;
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 5; // audioObjectType

		if (audioObjectType == 31)
		{
			boxSize += 6; // audioObjectTypeExt
			audioObjectType = (byte)(32 + audioObjectTypeExt);
		}
		// return audioObjectType;
		return boxSize;
	}
}


/*
class GASpecificConfig(samplingFrequencyIndex, channelConfiguration, audioObjectType)
{
  bslbf(1) frameLengthFlag;
  bslbf(1) dependsOnCoreCoder;
  if (dependsOnCoreCoder) {
    uimsbf(14) coreCoderDelay;
  }
  bslbf(1) extensionFlag;
  if (!channelConfiguration) {
    program_config_element();
  }
  if ((audioObjectType == 6) || (audioObjectType == 20)) {
    uimsbf(3) layerNr;
  }
  if (extensionFlag) {
    if (audioObjectType == 22) {
      bslbf(5) numOfSubFrame;
      bslbf(11) layer_length;
    }
    if (audioObjectType == 17 || audioObjectType == 19 ||
      audioObjectType == 20 || audioObjectType == 23) {

      bslbf(1) aacSectionDataResilienceFlag;
      bslbf(1) aacScalefactorDataResilienceFlag;
      bslbf(1) aacSpectralDataResilienceFlag;
    }
    bslbf(1) extensionFlag3;
    if (extensionFlag3) {
      /* tbd in version 3 *//*
    }
  }
}


*/
public partial class GASpecificConfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "GASpecificConfig"; } }

	protected bool frameLengthFlag; 
	public bool FrameLengthFlag { get { return this.frameLengthFlag; } set { this.frameLengthFlag = value; } }

	protected bool dependsOnCoreCoder; 
	public bool DependsOnCoreCoder { get { return this.dependsOnCoreCoder; } set { this.dependsOnCoreCoder = value; } }

	protected ushort coreCoderDelay; 
	public ushort CoreCoderDelay { get { return this.coreCoderDelay; } set { this.coreCoderDelay = value; } }

	protected bool extensionFlag; 
	public bool ExtensionFlag { get { return this.extensionFlag; } set { this.extensionFlag = value; } }

	protected program_config_element program_config_element; 
	public program_config_element ProgramConfigElement { get { return this.program_config_element; } set { this.program_config_element = value; } }

	protected byte layerNr; 
	public byte LayerNr { get { return this.layerNr; } set { this.layerNr = value; } }

	protected byte numOfSubFrame; 
	public byte NumOfSubFrame { get { return this.numOfSubFrame; } set { this.numOfSubFrame = value; } }

	protected ushort layer_length; 
	public ushort LayerLength { get { return this.layer_length; } set { this.layer_length = value; } }

	protected bool aacSectionDataResilienceFlag; 
	public bool AacSectionDataResilienceFlag { get { return this.aacSectionDataResilienceFlag; } set { this.aacSectionDataResilienceFlag = value; } }

	protected bool aacScalefactorDataResilienceFlag; 
	public bool AacScalefactorDataResilienceFlag { get { return this.aacScalefactorDataResilienceFlag; } set { this.aacScalefactorDataResilienceFlag = value; } }

	protected bool aacSpectralDataResilienceFlag; 
	public bool AacSpectralDataResilienceFlag { get { return this.aacSpectralDataResilienceFlag; } set { this.aacSpectralDataResilienceFlag = value; } }

	protected bool extensionFlag3; 
	public bool ExtensionFlag3 { get { return this.extensionFlag3; } set { this.extensionFlag3 = value; } }

	protected byte audioObjectType; 
	public byte AudioObjectType { get { return this.audioObjectType; } set { this.audioObjectType = value; } }

	protected int channelConfiguration; 
	public int ChannelConfiguration { get { return this.channelConfiguration; } set { this.channelConfiguration = value; } }

	protected int samplingFrequencyIndex; 
	public int SamplingFrequencyIndex { get { return this.samplingFrequencyIndex; } set { this.samplingFrequencyIndex = value; } }

	public GASpecificConfig(int samplingFrequencyIndex, int channelConfiguration, byte audioObjectType): base()
	{
		this.audioObjectType = audioObjectType;
		this.channelConfiguration = channelConfiguration;
		this.samplingFrequencyIndex = samplingFrequencyIndex;
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBit(boxSize, readSize,  out this.frameLengthFlag, "frameLengthFlag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.dependsOnCoreCoder, "dependsOnCoreCoder"); 

		if (dependsOnCoreCoder)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 14,  out this.coreCoderDelay, "coreCoderDelay"); 
		}
		boxSize += stream.ReadBit(boxSize, readSize,  out this.extensionFlag, "extensionFlag"); 

		if (channelConfiguration == 0)
		{
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new program_config_element(),  out this.program_config_element, "program_config_element"); 
		}

		if ((audioObjectType == 6) || (audioObjectType == 20))
		{
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.layerNr, "layerNr"); 
		}

		if (extensionFlag)
		{

			if (audioObjectType == 22)
			{
				boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.numOfSubFrame, "numOfSubFrame"); 
				boxSize += stream.ReadBits(boxSize, readSize, 11,  out this.layer_length, "layer_length"); 
			}

			if (audioObjectType == 17 || audioObjectType == 19 ||
      audioObjectType == 20 || audioObjectType == 23)
			{
				boxSize += stream.ReadBit(boxSize, readSize,  out this.aacSectionDataResilienceFlag, "aacSectionDataResilienceFlag"); 
				boxSize += stream.ReadBit(boxSize, readSize,  out this.aacScalefactorDataResilienceFlag, "aacScalefactorDataResilienceFlag"); 
				boxSize += stream.ReadBit(boxSize, readSize,  out this.aacSpectralDataResilienceFlag, "aacSpectralDataResilienceFlag"); 
			}
			boxSize += stream.ReadBit(boxSize, readSize,  out this.extensionFlag3, "extensionFlag3"); 

			if (extensionFlag3)
			{
				/*  tbd in version 3  */
			}
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBit( this.frameLengthFlag, "frameLengthFlag"); 
		boxSize += stream.WriteBit( this.dependsOnCoreCoder, "dependsOnCoreCoder"); 

		if (dependsOnCoreCoder)
		{
			boxSize += stream.WriteBits(14,  this.coreCoderDelay, "coreCoderDelay"); 
		}
		boxSize += stream.WriteBit( this.extensionFlag, "extensionFlag"); 

		if (channelConfiguration == 0)
		{
			boxSize += stream.WriteClass( this.program_config_element, "program_config_element"); 
		}

		if ((audioObjectType == 6) || (audioObjectType == 20))
		{
			boxSize += stream.WriteBits(3,  this.layerNr, "layerNr"); 
		}

		if (extensionFlag)
		{

			if (audioObjectType == 22)
			{
				boxSize += stream.WriteBits(5,  this.numOfSubFrame, "numOfSubFrame"); 
				boxSize += stream.WriteBits(11,  this.layer_length, "layer_length"); 
			}

			if (audioObjectType == 17 || audioObjectType == 19 ||
      audioObjectType == 20 || audioObjectType == 23)
			{
				boxSize += stream.WriteBit( this.aacSectionDataResilienceFlag, "aacSectionDataResilienceFlag"); 
				boxSize += stream.WriteBit( this.aacScalefactorDataResilienceFlag, "aacScalefactorDataResilienceFlag"); 
				boxSize += stream.WriteBit( this.aacSpectralDataResilienceFlag, "aacSpectralDataResilienceFlag"); 
			}
			boxSize += stream.WriteBit( this.extensionFlag3, "extensionFlag3"); 

			if (extensionFlag3)
			{
				/*  tbd in version 3  */
			}
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 1; // frameLengthFlag
		boxSize += 1; // dependsOnCoreCoder

		if (dependsOnCoreCoder)
		{
			boxSize += 14; // coreCoderDelay
		}
		boxSize += 1; // extensionFlag

		if (channelConfiguration == 0)
		{
			boxSize += IsoStream.CalculateClassSize(program_config_element); // program_config_element
		}

		if ((audioObjectType == 6) || (audioObjectType == 20))
		{
			boxSize += 3; // layerNr
		}

		if (extensionFlag)
		{

			if (audioObjectType == 22)
			{
				boxSize += 5; // numOfSubFrame
				boxSize += 11; // layer_length
			}

			if (audioObjectType == 17 || audioObjectType == 19 ||
      audioObjectType == 20 || audioObjectType == 23)
			{
				boxSize += 1; // aacSectionDataResilienceFlag
				boxSize += 1; // aacScalefactorDataResilienceFlag
				boxSize += 1; // aacSpectralDataResilienceFlag
			}
			boxSize += 1; // extensionFlag3

			if (extensionFlag3)
			{
				/*  tbd in version 3  */
			}
		}
		return boxSize;
	}
}


/*
class program_config_element()
{
  uimsbf(4) element_instance_tag;
  uimsbf(2) object_type;
  uimsbf(4) sampling_frequency_index;
  uimsbf(4) num_front_channel_elements;
  uimsbf(4) num_side_channel_elements;
  uimsbf(4) num_back_channel_elements;
  uimsbf(2) num_lfe_channel_elements;
  uimsbf(3) num_assoc_data_elements;
  uimsbf(4) num_valid_cc_elements;
  uimsbf(1) mono_mixdown_present;
  if (mono_mixdown_present == 1)
    uimsbf(4) mono_mixdown_element_number;
  uimsbf(1) stereo_mixdown_present;
  if (stereo_mixdown_present == 1)
    uimsbf(4) stereo_mixdown_element_number;
  uimsbf(1) matrix_mixdown_idx_present;
  if (matrix_mixdown_idx_present == 1) {
    uimsbf(2) matrix_mixdown_idx;
    uimsbf(1) pseudo_surround_enable;
  }
  for (i = 0; i < num_front_channel_elements; i++) {
    bslbf(1) front_element_is_cpe[i];
    uimsbf(4) front_element_tag_select[i];
  }
  for (i = 0; i < num_side_channel_elements; i++) {
    bslbf(1) side_element_is_cpe[i];
    uimsbf(4) side_element_tag_select[i];
  }
  for (i = 0; i < num_back_channel_elements; i++) {
    bslbf(1) back_element_is_cpe[i];
    uimsbf(4) back_element_tag_select[i];
  }
  for (i = 0; i < num_lfe_channel_elements; i++)
    uimsbf(4) lfe_element_tag_select[i];
  for (i = 0; i < num_assoc_data_elements; i++)
    uimsbf(4) assoc_data_element_tag_select[i];
  for (i = 0; i < num_valid_cc_elements; i++) {
    uimsbf(1) cc_element_is_ind_sw[i];
    uimsbf(4) valid_cc_element_tag_select[i];
  }
  byte_alignment();  // Note 1 
  uimsbf(8) comment_field_bytes;
  for (i = 0; i < comment_field_bytes; i++)
    uimsbf(8) comment_field_data[i];
}


*/
public partial class program_config_element : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "program_config_element"; } }

	protected byte element_instance_tag; 
	public byte ElementInstanceTag { get { return this.element_instance_tag; } set { this.element_instance_tag = value; } }

	protected byte object_type; 
	public byte ObjectType { get { return this.object_type; } set { this.object_type = value; } }

	protected byte sampling_frequency_index; 
	public byte SamplingFrequencyIndex { get { return this.sampling_frequency_index; } set { this.sampling_frequency_index = value; } }

	protected byte num_front_channel_elements; 
	public byte NumFrontChannelElements { get { return this.num_front_channel_elements; } set { this.num_front_channel_elements = value; } }

	protected byte num_side_channel_elements; 
	public byte NumSideChannelElements { get { return this.num_side_channel_elements; } set { this.num_side_channel_elements = value; } }

	protected byte num_back_channel_elements; 
	public byte NumBackChannelElements { get { return this.num_back_channel_elements; } set { this.num_back_channel_elements = value; } }

	protected byte num_lfe_channel_elements; 
	public byte NumLfeChannelElements { get { return this.num_lfe_channel_elements; } set { this.num_lfe_channel_elements = value; } }

	protected byte num_assoc_data_elements; 
	public byte NumAssocDataElements { get { return this.num_assoc_data_elements; } set { this.num_assoc_data_elements = value; } }

	protected byte num_valid_cc_elements; 
	public byte NumValidCcElements { get { return this.num_valid_cc_elements; } set { this.num_valid_cc_elements = value; } }

	protected bool mono_mixdown_present; 
	public bool MonoMixdownPresent { get { return this.mono_mixdown_present; } set { this.mono_mixdown_present = value; } }

	protected byte mono_mixdown_element_number; 
	public byte MonoMixdownElementNumber { get { return this.mono_mixdown_element_number; } set { this.mono_mixdown_element_number = value; } }

	protected bool stereo_mixdown_present; 
	public bool StereoMixdownPresent { get { return this.stereo_mixdown_present; } set { this.stereo_mixdown_present = value; } }

	protected byte stereo_mixdown_element_number; 
	public byte StereoMixdownElementNumber { get { return this.stereo_mixdown_element_number; } set { this.stereo_mixdown_element_number = value; } }

	protected bool matrix_mixdown_idx_present; 
	public bool MatrixMixdownIdxPresent { get { return this.matrix_mixdown_idx_present; } set { this.matrix_mixdown_idx_present = value; } }

	protected byte matrix_mixdown_idx; 
	public byte MatrixMixdownIdx { get { return this.matrix_mixdown_idx; } set { this.matrix_mixdown_idx = value; } }

	protected bool pseudo_surround_enable; 
	public bool PseudoSurroundEnable { get { return this.pseudo_surround_enable; } set { this.pseudo_surround_enable = value; } }

	protected bool[] front_element_is_cpe; 
	public bool[] FrontElementIsCpe { get { return this.front_element_is_cpe; } set { this.front_element_is_cpe = value; } }

	protected byte[] front_element_tag_select; 
	public byte[] FrontElementTagSelect { get { return this.front_element_tag_select; } set { this.front_element_tag_select = value; } }

	protected bool[] side_element_is_cpe; 
	public bool[] SideElementIsCpe { get { return this.side_element_is_cpe; } set { this.side_element_is_cpe = value; } }

	protected byte[] side_element_tag_select; 
	public byte[] SideElementTagSelect { get { return this.side_element_tag_select; } set { this.side_element_tag_select = value; } }

	protected bool[] back_element_is_cpe; 
	public bool[] BackElementIsCpe { get { return this.back_element_is_cpe; } set { this.back_element_is_cpe = value; } }

	protected byte[] back_element_tag_select; 
	public byte[] BackElementTagSelect { get { return this.back_element_tag_select; } set { this.back_element_tag_select = value; } }

	protected byte[] lfe_element_tag_select; 
	public byte[] LfeElementTagSelect { get { return this.lfe_element_tag_select; } set { this.lfe_element_tag_select = value; } }

	protected byte[] assoc_data_element_tag_select; 
	public byte[] AssocDataElementTagSelect { get { return this.assoc_data_element_tag_select; } set { this.assoc_data_element_tag_select = value; } }

	protected bool[] cc_element_is_ind_sw; 
	public bool[] CcElementIsIndSw { get { return this.cc_element_is_ind_sw; } set { this.cc_element_is_ind_sw = value; } }

	protected byte[] valid_cc_element_tag_select; 
	public byte[] ValidCcElementTagSelect { get { return this.valid_cc_element_tag_select; } set { this.valid_cc_element_tag_select = value; } }

	protected byte byte_alignment;  //  Note 1 
	public byte ByteAlignment { get { return this.byte_alignment; } set { this.byte_alignment = value; } }

	protected byte comment_field_bytes; 
	public byte CommentFieldBytes { get { return this.comment_field_bytes; } set { this.comment_field_bytes = value; } }

	protected byte[] comment_field_data; 
	public byte[] CommentFieldData { get { return this.comment_field_data; } set { this.comment_field_data = value; } }

	public program_config_element(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.element_instance_tag, "element_instance_tag"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.object_type, "object_type"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.sampling_frequency_index, "sampling_frequency_index"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.num_front_channel_elements, "num_front_channel_elements"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.num_side_channel_elements, "num_side_channel_elements"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.num_back_channel_elements, "num_back_channel_elements"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.num_lfe_channel_elements, "num_lfe_channel_elements"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.num_assoc_data_elements, "num_assoc_data_elements"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.num_valid_cc_elements, "num_valid_cc_elements"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.mono_mixdown_present, "mono_mixdown_present"); 

		if (mono_mixdown_present == true)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.mono_mixdown_element_number, "mono_mixdown_element_number"); 
		}
		boxSize += stream.ReadBit(boxSize, readSize,  out this.stereo_mixdown_present, "stereo_mixdown_present"); 

		if (stereo_mixdown_present == true)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.stereo_mixdown_element_number, "stereo_mixdown_element_number"); 
		}
		boxSize += stream.ReadBit(boxSize, readSize,  out this.matrix_mixdown_idx_present, "matrix_mixdown_idx_present"); 

		if (matrix_mixdown_idx_present == true)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.matrix_mixdown_idx, "matrix_mixdown_idx"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.pseudo_surround_enable, "pseudo_surround_enable"); 
		}

		this.front_element_is_cpe = new bool[IsoStream.GetInt( num_front_channel_elements)];
		this.front_element_tag_select = new byte[IsoStream.GetInt( num_front_channel_elements)];
		for (int i = 0; i < num_front_channel_elements; i++)
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.front_element_is_cpe[i], "front_element_is_cpe"); 
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.front_element_tag_select[i], "front_element_tag_select"); 
		}

		this.side_element_is_cpe = new bool[IsoStream.GetInt( num_side_channel_elements)];
		this.side_element_tag_select = new byte[IsoStream.GetInt( num_side_channel_elements)];
		for (int i = 0; i < num_side_channel_elements; i++)
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.side_element_is_cpe[i], "side_element_is_cpe"); 
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.side_element_tag_select[i], "side_element_tag_select"); 
		}

		this.back_element_is_cpe = new bool[IsoStream.GetInt( num_back_channel_elements)];
		this.back_element_tag_select = new byte[IsoStream.GetInt( num_back_channel_elements)];
		for (int i = 0; i < num_back_channel_elements; i++)
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.back_element_is_cpe[i], "back_element_is_cpe"); 
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.back_element_tag_select[i], "back_element_tag_select"); 
		}

		this.lfe_element_tag_select = new byte[IsoStream.GetInt( num_lfe_channel_elements)];
		for (int i = 0; i < num_lfe_channel_elements; i++)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.lfe_element_tag_select[i], "lfe_element_tag_select"); 
		}

		this.assoc_data_element_tag_select = new byte[IsoStream.GetInt( num_assoc_data_elements)];
		for (int i = 0; i < num_assoc_data_elements; i++)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.assoc_data_element_tag_select[i], "assoc_data_element_tag_select"); 
		}

		this.cc_element_is_ind_sw = new bool[IsoStream.GetInt( num_valid_cc_elements)];
		this.valid_cc_element_tag_select = new byte[IsoStream.GetInt( num_valid_cc_elements)];
		for (int i = 0; i < num_valid_cc_elements; i++)
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.cc_element_is_ind_sw[i], "cc_element_is_ind_sw"); 
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.valid_cc_element_tag_select[i], "valid_cc_element_tag_select"); 
		}
		boxSize += stream.ReadByteAlignment(boxSize, readSize,  out this.byte_alignment, "byte_alignment"); // Note 1 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.comment_field_bytes, "comment_field_bytes"); 

		this.comment_field_data = new byte[IsoStream.GetInt( comment_field_bytes)];
		for (int i = 0; i < comment_field_bytes; i++)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.comment_field_data[i], "comment_field_data"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBits(4,  this.element_instance_tag, "element_instance_tag"); 
		boxSize += stream.WriteBits(2,  this.object_type, "object_type"); 
		boxSize += stream.WriteBits(4,  this.sampling_frequency_index, "sampling_frequency_index"); 
		boxSize += stream.WriteBits(4,  this.num_front_channel_elements, "num_front_channel_elements"); 
		boxSize += stream.WriteBits(4,  this.num_side_channel_elements, "num_side_channel_elements"); 
		boxSize += stream.WriteBits(4,  this.num_back_channel_elements, "num_back_channel_elements"); 
		boxSize += stream.WriteBits(2,  this.num_lfe_channel_elements, "num_lfe_channel_elements"); 
		boxSize += stream.WriteBits(3,  this.num_assoc_data_elements, "num_assoc_data_elements"); 
		boxSize += stream.WriteBits(4,  this.num_valid_cc_elements, "num_valid_cc_elements"); 
		boxSize += stream.WriteBit( this.mono_mixdown_present, "mono_mixdown_present"); 

		if (mono_mixdown_present == true)
		{
			boxSize += stream.WriteBits(4,  this.mono_mixdown_element_number, "mono_mixdown_element_number"); 
		}
		boxSize += stream.WriteBit( this.stereo_mixdown_present, "stereo_mixdown_present"); 

		if (stereo_mixdown_present == true)
		{
			boxSize += stream.WriteBits(4,  this.stereo_mixdown_element_number, "stereo_mixdown_element_number"); 
		}
		boxSize += stream.WriteBit( this.matrix_mixdown_idx_present, "matrix_mixdown_idx_present"); 

		if (matrix_mixdown_idx_present == true)
		{
			boxSize += stream.WriteBits(2,  this.matrix_mixdown_idx, "matrix_mixdown_idx"); 
			boxSize += stream.WriteBit( this.pseudo_surround_enable, "pseudo_surround_enable"); 
		}

		for (int i = 0; i < num_front_channel_elements; i++)
		{
			boxSize += stream.WriteBit( this.front_element_is_cpe[i], "front_element_is_cpe"); 
			boxSize += stream.WriteBits(4,  this.front_element_tag_select[i], "front_element_tag_select"); 
		}

		for (int i = 0; i < num_side_channel_elements; i++)
		{
			boxSize += stream.WriteBit( this.side_element_is_cpe[i], "side_element_is_cpe"); 
			boxSize += stream.WriteBits(4,  this.side_element_tag_select[i], "side_element_tag_select"); 
		}

		for (int i = 0; i < num_back_channel_elements; i++)
		{
			boxSize += stream.WriteBit( this.back_element_is_cpe[i], "back_element_is_cpe"); 
			boxSize += stream.WriteBits(4,  this.back_element_tag_select[i], "back_element_tag_select"); 
		}

		for (int i = 0; i < num_lfe_channel_elements; i++)
		{
			boxSize += stream.WriteBits(4,  this.lfe_element_tag_select[i], "lfe_element_tag_select"); 
		}

		for (int i = 0; i < num_assoc_data_elements; i++)
		{
			boxSize += stream.WriteBits(4,  this.assoc_data_element_tag_select[i], "assoc_data_element_tag_select"); 
		}

		for (int i = 0; i < num_valid_cc_elements; i++)
		{
			boxSize += stream.WriteBit( this.cc_element_is_ind_sw[i], "cc_element_is_ind_sw"); 
			boxSize += stream.WriteBits(4,  this.valid_cc_element_tag_select[i], "valid_cc_element_tag_select"); 
		}
		boxSize += stream.WriteByteAlignment( this.byte_alignment, "byte_alignment"); // Note 1 
		boxSize += stream.WriteUInt8( this.comment_field_bytes, "comment_field_bytes"); 

		for (int i = 0; i < comment_field_bytes; i++)
		{
			boxSize += stream.WriteUInt8( this.comment_field_data[i], "comment_field_data"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 4; // element_instance_tag
		boxSize += 2; // object_type
		boxSize += 4; // sampling_frequency_index
		boxSize += 4; // num_front_channel_elements
		boxSize += 4; // num_side_channel_elements
		boxSize += 4; // num_back_channel_elements
		boxSize += 2; // num_lfe_channel_elements
		boxSize += 3; // num_assoc_data_elements
		boxSize += 4; // num_valid_cc_elements
		boxSize += 1; // mono_mixdown_present

		if (mono_mixdown_present == true)
		{
			boxSize += 4; // mono_mixdown_element_number
		}
		boxSize += 1; // stereo_mixdown_present

		if (stereo_mixdown_present == true)
		{
			boxSize += 4; // stereo_mixdown_element_number
		}
		boxSize += 1; // matrix_mixdown_idx_present

		if (matrix_mixdown_idx_present == true)
		{
			boxSize += 2; // matrix_mixdown_idx
			boxSize += 1; // pseudo_surround_enable
		}

		for (int i = 0; i < num_front_channel_elements; i++)
		{
			boxSize += 1; // front_element_is_cpe
			boxSize += 4; // front_element_tag_select
		}

		for (int i = 0; i < num_side_channel_elements; i++)
		{
			boxSize += 1; // side_element_is_cpe
			boxSize += 4; // side_element_tag_select
		}

		for (int i = 0; i < num_back_channel_elements; i++)
		{
			boxSize += 1; // back_element_is_cpe
			boxSize += 4; // back_element_tag_select
		}

		for (int i = 0; i < num_lfe_channel_elements; i++)
		{
			boxSize += 4; // lfe_element_tag_select
		}

		for (int i = 0; i < num_assoc_data_elements; i++)
		{
			boxSize += 4; // assoc_data_element_tag_select
		}

		for (int i = 0; i < num_valid_cc_elements; i++)
		{
			boxSize += 1; // cc_element_is_ind_sw
			boxSize += 4; // valid_cc_element_tag_select
		}
		boxSize += IsoStream.CalculateByteAlignmentSize(boxSize, byte_alignment); // byte_alignment
		boxSize += 8; // comment_field_bytes

		for (int i = 0; i < comment_field_bytes; i++)
		{
			boxSize += 8; // comment_field_data
		}
		return boxSize;
	}
}


/*
class CelpSpecificConfig(samplingFrequencyIndex)
{
  uimsbf(1) isBaseLayer;
  if (isBaseLayer) {
    CelpHeader(samplingFrequencyIndex);
  }
  else {
    uimsbf(1) isBWSLayer;
    if (isBWSLayer) {
      CelpBWSenhHeader();
    }
    else {
      uimsbf(2) CELPBRSid;
    }
  }
}


*/
public partial class CelpSpecificConfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "CelpSpecificConfig"; } }

	protected bool isBaseLayer; 
	public bool IsBaseLayer { get { return this.isBaseLayer; } set { this.isBaseLayer = value; } }

	protected CelpHeader CelpHeader; 
	public CelpHeader _CelpHeader { get { return this.CelpHeader; } set { this.CelpHeader = value; } }

	protected bool isBWSLayer; 
	public bool IsBWSLayer { get { return this.isBWSLayer; } set { this.isBWSLayer = value; } }

	protected CelpBWSenhHeader CelpBWSenhHeader; 
	public CelpBWSenhHeader _CelpBWSenhHeader { get { return this.CelpBWSenhHeader; } set { this.CelpBWSenhHeader = value; } }

	protected byte CELPBRSid; 
	public byte _CELPBRSid { get { return this.CELPBRSid; } set { this.CELPBRSid = value; } }

	protected int samplingFrequencyIndex; 
	public int SamplingFrequencyIndex { get { return this.samplingFrequencyIndex; } set { this.samplingFrequencyIndex = value; } }

	public CelpSpecificConfig(int samplingFrequencyIndex): base()
	{
		this.samplingFrequencyIndex = samplingFrequencyIndex;
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBit(boxSize, readSize,  out this.isBaseLayer, "isBaseLayer"); 

		if (isBaseLayer)
		{
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new CelpHeader(samplingFrequencyIndex),  out this.CelpHeader, "CelpHeader"); 
		}

		else 
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.isBWSLayer, "isBWSLayer"); 

			if (isBWSLayer)
			{
				boxSize += stream.ReadClass(boxSize, readSize, this, () => new CelpBWSenhHeader(),  out this.CelpBWSenhHeader, "CelpBWSenhHeader"); 
			}

			else 
			{
				boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.CELPBRSid, "CELPBRSid"); 
			}
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBit( this.isBaseLayer, "isBaseLayer"); 

		if (isBaseLayer)
		{
			boxSize += stream.WriteClass( this.CelpHeader, "CelpHeader"); 
		}

		else 
		{
			boxSize += stream.WriteBit( this.isBWSLayer, "isBWSLayer"); 

			if (isBWSLayer)
			{
				boxSize += stream.WriteClass( this.CelpBWSenhHeader, "CelpBWSenhHeader"); 
			}

			else 
			{
				boxSize += stream.WriteBits(2,  this.CELPBRSid, "CELPBRSid"); 
			}
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 1; // isBaseLayer

		if (isBaseLayer)
		{
			boxSize += IsoStream.CalculateClassSize(CelpHeader); // CelpHeader
		}

		else 
		{
			boxSize += 1; // isBWSLayer

			if (isBWSLayer)
			{
				boxSize += IsoStream.CalculateClassSize(CelpBWSenhHeader); // CelpBWSenhHeader
			}

			else 
			{
				boxSize += 2; // CELPBRSid
			}
		}
		return boxSize;
	}
}


/*
class CelpHeader(samplingFrequencyIndex)
{
  uimsbf(1) ExcitationMode;
  uimsbf(1) SampleRateMode;
  uimsbf(1) FineRateControl;
  if (ExcitationMode == RPE) {
    uimsbf(3) RPE_Configuration;
  }
  if (ExcitationMode == MPE) {
    uimsbf(5) MPE_Configuration;
    uimsbf(2) NumEnhLayers;
    uimsbf(1) BandwidthScalabilityMode;
  }
}


*/
public partial class CelpHeader : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "CelpHeader"; } }

	protected bool ExcitationMode; 
	public bool _ExcitationMode { get { return this.ExcitationMode; } set { this.ExcitationMode = value; } }

	protected bool SampleRateMode; 
	public bool _SampleRateMode { get { return this.SampleRateMode; } set { this.SampleRateMode = value; } }

	protected bool FineRateControl; 
	public bool _FineRateControl { get { return this.FineRateControl; } set { this.FineRateControl = value; } }

	protected byte RPE_Configuration; 
	public byte RPEConfiguration { get { return this.RPE_Configuration; } set { this.RPE_Configuration = value; } }

	protected byte MPE_Configuration; 
	public byte MPEConfiguration { get { return this.MPE_Configuration; } set { this.MPE_Configuration = value; } }

	protected byte NumEnhLayers; 
	public byte _NumEnhLayers { get { return this.NumEnhLayers; } set { this.NumEnhLayers = value; } }

	protected bool BandwidthScalabilityMode; 
	public bool _BandwidthScalabilityMode { get { return this.BandwidthScalabilityMode; } set { this.BandwidthScalabilityMode = value; } }

	public CelpHeader(int samplingFrequencyIndex): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		const bool RPE = true;

		const bool MPE = false;

		boxSize += stream.ReadBit(boxSize, readSize,  out this.ExcitationMode, "ExcitationMode"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.SampleRateMode, "SampleRateMode"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.FineRateControl, "FineRateControl"); 

		if (ExcitationMode == RPE)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.RPE_Configuration, "RPE_Configuration"); 
		}

		if (ExcitationMode == MPE)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.MPE_Configuration, "MPE_Configuration"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.NumEnhLayers, "NumEnhLayers"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.BandwidthScalabilityMode, "BandwidthScalabilityMode"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		const bool RPE = true;

		const bool MPE = false;

		boxSize += stream.WriteBit( this.ExcitationMode, "ExcitationMode"); 
		boxSize += stream.WriteBit( this.SampleRateMode, "SampleRateMode"); 
		boxSize += stream.WriteBit( this.FineRateControl, "FineRateControl"); 

		if (ExcitationMode == RPE)
		{
			boxSize += stream.WriteBits(3,  this.RPE_Configuration, "RPE_Configuration"); 
		}

		if (ExcitationMode == MPE)
		{
			boxSize += stream.WriteBits(5,  this.MPE_Configuration, "MPE_Configuration"); 
			boxSize += stream.WriteBits(2,  this.NumEnhLayers, "NumEnhLayers"); 
			boxSize += stream.WriteBit( this.BandwidthScalabilityMode, "BandwidthScalabilityMode"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		const bool RPE = true;

		const bool MPE = false;

		boxSize += 1; // ExcitationMode
		boxSize += 1; // SampleRateMode
		boxSize += 1; // FineRateControl

		if (ExcitationMode == RPE)
		{
			boxSize += 3; // RPE_Configuration
		}

		if (ExcitationMode == MPE)
		{
			boxSize += 5; // MPE_Configuration
			boxSize += 2; // NumEnhLayers
			boxSize += 1; // BandwidthScalabilityMode
		}
		return boxSize;
	}
}


/*
class CelpBWSenhHeader()
{
  uimsbf(2) BWS_configuration;
}


*/
public partial class CelpBWSenhHeader : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "CelpBWSenhHeader"; } }

	protected byte BWS_configuration; 
	public byte BWSConfiguration { get { return this.BWS_configuration; } set { this.BWS_configuration = value; } }

	public CelpBWSenhHeader(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.BWS_configuration, "BWS_configuration"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBits(2,  this.BWS_configuration, "BWS_configuration"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 2; // BWS_configuration
		return boxSize;
	}
}


/*
class HvxcSpecificConfig() {
  uimsbf(1) isBaseLayer;
  if (isBaseLayer) {
    HVXCconfig();
  }
}


*/
public partial class HvxcSpecificConfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "HvxcSpecificConfig"; } }

	protected bool isBaseLayer; 
	public bool IsBaseLayer { get { return this.isBaseLayer; } set { this.isBaseLayer = value; } }

	protected HVXCconfig HVXCconfig; 
	public HVXCconfig _HVXCconfig { get { return this.HVXCconfig; } set { this.HVXCconfig = value; } }

	public HvxcSpecificConfig(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBit(boxSize, readSize,  out this.isBaseLayer, "isBaseLayer"); 

		if (isBaseLayer)
		{
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new HVXCconfig(),  out this.HVXCconfig, "HVXCconfig"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBit( this.isBaseLayer, "isBaseLayer"); 

		if (isBaseLayer)
		{
			boxSize += stream.WriteClass( this.HVXCconfig, "HVXCconfig"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 1; // isBaseLayer

		if (isBaseLayer)
		{
			boxSize += IsoStream.CalculateClassSize(HVXCconfig); // HVXCconfig
		}
		return boxSize;
	}
}


/*
class HVXCconfig()
{
  uimsbf(1) HVXCvarMode;
  uimsbf(2) HVXCrateMode;
  uimsbf(1) extensionFlag;
  if (extensionFlag) {
    // to be defined in MPEG-4 Version 2
  }
}


*/
public partial class HVXCconfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "HVXCconfig"; } }

	protected bool HVXCvarMode; 
	public bool _HVXCvarMode { get { return this.HVXCvarMode; } set { this.HVXCvarMode = value; } }

	protected byte HVXCrateMode; 
	public byte _HVXCrateMode { get { return this.HVXCrateMode; } set { this.HVXCrateMode = value; } }

	protected bool extensionFlag; 
	public bool ExtensionFlag { get { return this.extensionFlag; } set { this.extensionFlag = value; } }

	public HVXCconfig(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBit(boxSize, readSize,  out this.HVXCvarMode, "HVXCvarMode"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.HVXCrateMode, "HVXCrateMode"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.extensionFlag, "extensionFlag"); 

		if (extensionFlag)
		{
			/*  to be defined in MPEG-4 Version 2 */
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBit( this.HVXCvarMode, "HVXCvarMode"); 
		boxSize += stream.WriteBits(2,  this.HVXCrateMode, "HVXCrateMode"); 
		boxSize += stream.WriteBit( this.extensionFlag, "extensionFlag"); 

		if (extensionFlag)
		{
			/*  to be defined in MPEG-4 Version 2 */
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 1; // HVXCvarMode
		boxSize += 2; // HVXCrateMode
		boxSize += 1; // extensionFlag

		if (extensionFlag)
		{
			/*  to be defined in MPEG-4 Version 2 */
		}
		return boxSize;
	}
}


/*
class TTSSpecificConfig() {
    TTS_Sequence();
}


*/
public partial class TTSSpecificConfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "TTSSpecificConfig"; } }

	protected TTS_Sequence TTS_Sequence; 
	public TTS_Sequence TTSSequence { get { return this.TTS_Sequence; } set { this.TTS_Sequence = value; } }

	public TTSSpecificConfig(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new TTS_Sequence(),  out this.TTS_Sequence, "TTS_Sequence"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteClass( this.TTS_Sequence, "TTS_Sequence"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += IsoStream.CalculateClassSize(TTS_Sequence); // TTS_Sequence
		return boxSize;
	}
}


/*
class TTS_Sequence()
{
  uimsbf(5) TTS_Sequence_ID;
  uimsbf(18) Language_Code;
  bslbf(1) Gender_Enable;
  bslbf(1) Age_Enable;
  bslbf(1) Speech_Rate_Enable;
  bslbf(1) Prosody_Enable;
  bslbf(1) Video_Enable;
  bslbf(1) Lip_Shape_Enable;
  bslbf(1) Trick_Mode_Enable;
}


*/
public partial class TTS_Sequence : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "TTS_Sequence"; } }

	protected byte TTS_Sequence_ID; 
	public byte TTSSequenceID { get { return this.TTS_Sequence_ID; } set { this.TTS_Sequence_ID = value; } }

	protected uint Language_Code; 
	public uint LanguageCode { get { return this.Language_Code; } set { this.Language_Code = value; } }

	protected bool Gender_Enable; 
	public bool GenderEnable { get { return this.Gender_Enable; } set { this.Gender_Enable = value; } }

	protected bool Age_Enable; 
	public bool AgeEnable { get { return this.Age_Enable; } set { this.Age_Enable = value; } }

	protected bool Speech_Rate_Enable; 
	public bool SpeechRateEnable { get { return this.Speech_Rate_Enable; } set { this.Speech_Rate_Enable = value; } }

	protected bool Prosody_Enable; 
	public bool ProsodyEnable { get { return this.Prosody_Enable; } set { this.Prosody_Enable = value; } }

	protected bool Video_Enable; 
	public bool VideoEnable { get { return this.Video_Enable; } set { this.Video_Enable = value; } }

	protected bool Lip_Shape_Enable; 
	public bool LipShapeEnable { get { return this.Lip_Shape_Enable; } set { this.Lip_Shape_Enable = value; } }

	protected bool Trick_Mode_Enable; 
	public bool TrickModeEnable { get { return this.Trick_Mode_Enable; } set { this.Trick_Mode_Enable = value; } }

	public TTS_Sequence(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.TTS_Sequence_ID, "TTS_Sequence_ID"); 
		boxSize += stream.ReadBits(boxSize, readSize, 18,  out this.Language_Code, "Language_Code"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.Gender_Enable, "Gender_Enable"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.Age_Enable, "Age_Enable"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.Speech_Rate_Enable, "Speech_Rate_Enable"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.Prosody_Enable, "Prosody_Enable"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.Video_Enable, "Video_Enable"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.Lip_Shape_Enable, "Lip_Shape_Enable"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.Trick_Mode_Enable, "Trick_Mode_Enable"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBits(5,  this.TTS_Sequence_ID, "TTS_Sequence_ID"); 
		boxSize += stream.WriteBits(18,  this.Language_Code, "Language_Code"); 
		boxSize += stream.WriteBit( this.Gender_Enable, "Gender_Enable"); 
		boxSize += stream.WriteBit( this.Age_Enable, "Age_Enable"); 
		boxSize += stream.WriteBit( this.Speech_Rate_Enable, "Speech_Rate_Enable"); 
		boxSize += stream.WriteBit( this.Prosody_Enable, "Prosody_Enable"); 
		boxSize += stream.WriteBit( this.Video_Enable, "Video_Enable"); 
		boxSize += stream.WriteBit( this.Lip_Shape_Enable, "Lip_Shape_Enable"); 
		boxSize += stream.WriteBit( this.Trick_Mode_Enable, "Trick_Mode_Enable"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 5; // TTS_Sequence_ID
		boxSize += 18; // Language_Code
		boxSize += 1; // Gender_Enable
		boxSize += 1; // Age_Enable
		boxSize += 1; // Speech_Rate_Enable
		boxSize += 1; // Prosody_Enable
		boxSize += 1; // Video_Enable
		boxSize += 1; // Lip_Shape_Enable
		boxSize += 1; // Trick_Mode_Enable
		return boxSize;
	}
}


/*
class ErrorResilientCelpSpecificConfig(samplingFrequencyIndex)
{
  uimsbf(1) isBaseLayer;
  if (isBaseLayer) {
    ER_SC_CelpHeader(samplingFrequencyIndex);
  }
  else {
    uimsbf(1) isBWSLayer;
    if (isBWSLayer) {
      CelpBWSenhHeader();
    }
    else {
      uimsbf(2) CELPBRSid;
    }
  }
}


*/
public partial class ErrorResilientCelpSpecificConfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "ErrorResilientCelpSpecificConfig"; } }

	protected bool isBaseLayer; 
	public bool IsBaseLayer { get { return this.isBaseLayer; } set { this.isBaseLayer = value; } }

	protected ER_SC_CelpHeader ER_SC_CelpHeader; 
	public ER_SC_CelpHeader ERSCCelpHeader { get { return this.ER_SC_CelpHeader; } set { this.ER_SC_CelpHeader = value; } }

	protected bool isBWSLayer; 
	public bool IsBWSLayer { get { return this.isBWSLayer; } set { this.isBWSLayer = value; } }

	protected CelpBWSenhHeader CelpBWSenhHeader; 
	public CelpBWSenhHeader _CelpBWSenhHeader { get { return this.CelpBWSenhHeader; } set { this.CelpBWSenhHeader = value; } }

	protected byte CELPBRSid; 
	public byte _CELPBRSid { get { return this.CELPBRSid; } set { this.CELPBRSid = value; } }

	protected int samplingFrequencyIndex; 
	public int SamplingFrequencyIndex { get { return this.samplingFrequencyIndex; } set { this.samplingFrequencyIndex = value; } }

	public ErrorResilientCelpSpecificConfig(int samplingFrequencyIndex): base()
	{
		this.samplingFrequencyIndex = samplingFrequencyIndex;
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBit(boxSize, readSize,  out this.isBaseLayer, "isBaseLayer"); 

		if (isBaseLayer)
		{
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new ER_SC_CelpHeader(samplingFrequencyIndex),  out this.ER_SC_CelpHeader, "ER_SC_CelpHeader"); 
		}

		else 
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.isBWSLayer, "isBWSLayer"); 

			if (isBWSLayer)
			{
				boxSize += stream.ReadClass(boxSize, readSize, this, () => new CelpBWSenhHeader(),  out this.CelpBWSenhHeader, "CelpBWSenhHeader"); 
			}

			else 
			{
				boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.CELPBRSid, "CELPBRSid"); 
			}
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBit( this.isBaseLayer, "isBaseLayer"); 

		if (isBaseLayer)
		{
			boxSize += stream.WriteClass( this.ER_SC_CelpHeader, "ER_SC_CelpHeader"); 
		}

		else 
		{
			boxSize += stream.WriteBit( this.isBWSLayer, "isBWSLayer"); 

			if (isBWSLayer)
			{
				boxSize += stream.WriteClass( this.CelpBWSenhHeader, "CelpBWSenhHeader"); 
			}

			else 
			{
				boxSize += stream.WriteBits(2,  this.CELPBRSid, "CELPBRSid"); 
			}
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 1; // isBaseLayer

		if (isBaseLayer)
		{
			boxSize += IsoStream.CalculateClassSize(ER_SC_CelpHeader); // ER_SC_CelpHeader
		}

		else 
		{
			boxSize += 1; // isBWSLayer

			if (isBWSLayer)
			{
				boxSize += IsoStream.CalculateClassSize(CelpBWSenhHeader); // CelpBWSenhHeader
			}

			else 
			{
				boxSize += 2; // CELPBRSid
			}
		}
		return boxSize;
	}
}


/*
class ER_SC_CelpHeader(samplingFrequencyIndex)
{
  uimsbf(1) ExcitationMode;
  uimsbf(1) SampleRateMode;
  uimsbf(1) FineRateControl;
  uimsbf(1) SilenceCompression;
  if (ExcitationMode == RPE) {
    uimsbf(3) RPE_Configuration;
  }
  if (ExcitationMode == MPE) {
    uimsbf(5) MPE_Configuration;
    uimsbf(2) NumEnhLayers;
    uimsbf(1) BandwidthScalabilityMode;
  }
}


*/
public partial class ER_SC_CelpHeader : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "ER_SC_CelpHeader"; } }

	protected bool ExcitationMode; 
	public bool _ExcitationMode { get { return this.ExcitationMode; } set { this.ExcitationMode = value; } }

	protected bool SampleRateMode; 
	public bool _SampleRateMode { get { return this.SampleRateMode; } set { this.SampleRateMode = value; } }

	protected bool FineRateControl; 
	public bool _FineRateControl { get { return this.FineRateControl; } set { this.FineRateControl = value; } }

	protected bool SilenceCompression; 
	public bool _SilenceCompression { get { return this.SilenceCompression; } set { this.SilenceCompression = value; } }

	protected byte RPE_Configuration; 
	public byte RPEConfiguration { get { return this.RPE_Configuration; } set { this.RPE_Configuration = value; } }

	protected byte MPE_Configuration; 
	public byte MPEConfiguration { get { return this.MPE_Configuration; } set { this.MPE_Configuration = value; } }

	protected byte NumEnhLayers; 
	public byte _NumEnhLayers { get { return this.NumEnhLayers; } set { this.NumEnhLayers = value; } }

	protected bool BandwidthScalabilityMode; 
	public bool _BandwidthScalabilityMode { get { return this.BandwidthScalabilityMode; } set { this.BandwidthScalabilityMode = value; } }

	protected int samplingFrequencyIndex; 
	public int SamplingFrequencyIndex { get { return this.samplingFrequencyIndex; } set { this.samplingFrequencyIndex = value; } }

	public ER_SC_CelpHeader(int samplingFrequencyIndex): base()
	{
		this.samplingFrequencyIndex = samplingFrequencyIndex;
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		const bool RPE = true;

		const bool MPE = false;

		boxSize += stream.ReadBit(boxSize, readSize,  out this.ExcitationMode, "ExcitationMode"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.SampleRateMode, "SampleRateMode"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.FineRateControl, "FineRateControl"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.SilenceCompression, "SilenceCompression"); 

		if (ExcitationMode == RPE)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.RPE_Configuration, "RPE_Configuration"); 
		}

		if (ExcitationMode == MPE)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.MPE_Configuration, "MPE_Configuration"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.NumEnhLayers, "NumEnhLayers"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.BandwidthScalabilityMode, "BandwidthScalabilityMode"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		const bool RPE = true;

		const bool MPE = false;

		boxSize += stream.WriteBit( this.ExcitationMode, "ExcitationMode"); 
		boxSize += stream.WriteBit( this.SampleRateMode, "SampleRateMode"); 
		boxSize += stream.WriteBit( this.FineRateControl, "FineRateControl"); 
		boxSize += stream.WriteBit( this.SilenceCompression, "SilenceCompression"); 

		if (ExcitationMode == RPE)
		{
			boxSize += stream.WriteBits(3,  this.RPE_Configuration, "RPE_Configuration"); 
		}

		if (ExcitationMode == MPE)
		{
			boxSize += stream.WriteBits(5,  this.MPE_Configuration, "MPE_Configuration"); 
			boxSize += stream.WriteBits(2,  this.NumEnhLayers, "NumEnhLayers"); 
			boxSize += stream.WriteBit( this.BandwidthScalabilityMode, "BandwidthScalabilityMode"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		const bool RPE = true;

		const bool MPE = false;

		boxSize += 1; // ExcitationMode
		boxSize += 1; // SampleRateMode
		boxSize += 1; // FineRateControl
		boxSize += 1; // SilenceCompression

		if (ExcitationMode == RPE)
		{
			boxSize += 3; // RPE_Configuration
		}

		if (ExcitationMode == MPE)
		{
			boxSize += 5; // MPE_Configuration
			boxSize += 2; // NumEnhLayers
			boxSize += 1; // BandwidthScalabilityMode
		}
		return boxSize;
	}
}


/*
class ErrorResilientHvxcSpecificConfig() {
  uimsbf(1) isBaseLayer;
  if (isBaseLayer) {
    ErHVXCconfig();
  }
}


*/
public partial class ErrorResilientHvxcSpecificConfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "ErrorResilientHvxcSpecificConfig"; } }

	protected bool isBaseLayer; 
	public bool IsBaseLayer { get { return this.isBaseLayer; } set { this.isBaseLayer = value; } }

	protected ErHVXCconfig ErHVXCconfig; 
	public ErHVXCconfig _ErHVXCconfig { get { return this.ErHVXCconfig; } set { this.ErHVXCconfig = value; } }

	public ErrorResilientHvxcSpecificConfig(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBit(boxSize, readSize,  out this.isBaseLayer, "isBaseLayer"); 

		if (isBaseLayer)
		{
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new ErHVXCconfig(),  out this.ErHVXCconfig, "ErHVXCconfig"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBit( this.isBaseLayer, "isBaseLayer"); 

		if (isBaseLayer)
		{
			boxSize += stream.WriteClass( this.ErHVXCconfig, "ErHVXCconfig"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 1; // isBaseLayer

		if (isBaseLayer)
		{
			boxSize += IsoStream.CalculateClassSize(ErHVXCconfig); // ErHVXCconfig
		}
		return boxSize;
	}
}


/*
class ErHVXCconfig()
{
  uimsbf(1) HVXCvarMode;
  uimsbf(2) HVXCrateMode;
  uimsbf(1) extensionFlag;
  if (extensionFlag) {
    uimsbf(1) var_ScalableFlag;
  }
}


*/
public partial class ErHVXCconfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "ErHVXCconfig"; } }

	protected bool HVXCvarMode; 
	public bool _HVXCvarMode { get { return this.HVXCvarMode; } set { this.HVXCvarMode = value; } }

	protected byte HVXCrateMode; 
	public byte _HVXCrateMode { get { return this.HVXCrateMode; } set { this.HVXCrateMode = value; } }

	protected bool extensionFlag; 
	public bool ExtensionFlag { get { return this.extensionFlag; } set { this.extensionFlag = value; } }

	protected bool var_ScalableFlag; 
	public bool VarScalableFlag { get { return this.var_ScalableFlag; } set { this.var_ScalableFlag = value; } }

	public ErHVXCconfig(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBit(boxSize, readSize,  out this.HVXCvarMode, "HVXCvarMode"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.HVXCrateMode, "HVXCrateMode"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.extensionFlag, "extensionFlag"); 

		if (extensionFlag)
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.var_ScalableFlag, "var_ScalableFlag"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBit( this.HVXCvarMode, "HVXCvarMode"); 
		boxSize += stream.WriteBits(2,  this.HVXCrateMode, "HVXCrateMode"); 
		boxSize += stream.WriteBit( this.extensionFlag, "extensionFlag"); 

		if (extensionFlag)
		{
			boxSize += stream.WriteBit( this.var_ScalableFlag, "var_ScalableFlag"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 1; // HVXCvarMode
		boxSize += 2; // HVXCrateMode
		boxSize += 1; // extensionFlag

		if (extensionFlag)
		{
			boxSize += 1; // var_ScalableFlag
		}
		return boxSize;
	}
}


/*
class ParametricSpecificConfig()
{
  uimsbf(1) isBaseLayer;
  if (isBaseLayer) {
    PARAconfig();
  }
  else {
    HILNenexConfig();
  }
}


*/
public partial class ParametricSpecificConfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "ParametricSpecificConfig"; } }

	protected bool isBaseLayer; 
	public bool IsBaseLayer { get { return this.isBaseLayer; } set { this.isBaseLayer = value; } }

	protected PARAconfig PARAconfig; 
	public PARAconfig _PARAconfig { get { return this.PARAconfig; } set { this.PARAconfig = value; } }

	protected HILNenexConfig HILNenexConfig; 
	public HILNenexConfig _HILNenexConfig { get { return this.HILNenexConfig; } set { this.HILNenexConfig = value; } }

	public ParametricSpecificConfig(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBit(boxSize, readSize,  out this.isBaseLayer, "isBaseLayer"); 

		if (isBaseLayer)
		{
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new PARAconfig(),  out this.PARAconfig, "PARAconfig"); 
		}

		else 
		{
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new HILNenexConfig(),  out this.HILNenexConfig, "HILNenexConfig"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBit( this.isBaseLayer, "isBaseLayer"); 

		if (isBaseLayer)
		{
			boxSize += stream.WriteClass( this.PARAconfig, "PARAconfig"); 
		}

		else 
		{
			boxSize += stream.WriteClass( this.HILNenexConfig, "HILNenexConfig"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 1; // isBaseLayer

		if (isBaseLayer)
		{
			boxSize += IsoStream.CalculateClassSize(PARAconfig); // PARAconfig
		}

		else 
		{
			boxSize += IsoStream.CalculateClassSize(HILNenexConfig); // HILNenexConfig
		}
		return boxSize;
	}
}


/*
class PARAconfig()
{
  uimsbf(2) PARAmode;
  if (PARAmode != 1) {
    ErHVXCconfig();
  }
  if (PARAmode != 0) {
    HILNconfig();
  }
  uimsbf(1) PARAextensionFlag;
  if (PARAextensionFlag) {
    /* to be defined in MPEG-4 Phase 3 *//*
  }
}


*/
public partial class PARAconfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "PARAconfig"; } }

	protected byte PARAmode; 
	public byte _PARAmode { get { return this.PARAmode; } set { this.PARAmode = value; } }

	protected ErHVXCconfig ErHVXCconfig; 
	public ErHVXCconfig _ErHVXCconfig { get { return this.ErHVXCconfig; } set { this.ErHVXCconfig = value; } }

	protected HILNconfig HILNconfig; 
	public HILNconfig _HILNconfig { get { return this.HILNconfig; } set { this.HILNconfig = value; } }

	protected bool PARAextensionFlag; 
	public bool _PARAextensionFlag { get { return this.PARAextensionFlag; } set { this.PARAextensionFlag = value; } }

	public PARAconfig(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.PARAmode, "PARAmode"); 

		if (PARAmode != 1)
		{
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new ErHVXCconfig(),  out this.ErHVXCconfig, "ErHVXCconfig"); 
		}

		if (PARAmode != 0)
		{
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new HILNconfig(),  out this.HILNconfig, "HILNconfig"); 
		}
		boxSize += stream.ReadBit(boxSize, readSize,  out this.PARAextensionFlag, "PARAextensionFlag"); 

		if (PARAextensionFlag)
		{
			/*  to be defined in MPEG-4 Phase 3  */
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBits(2,  this.PARAmode, "PARAmode"); 

		if (PARAmode != 1)
		{
			boxSize += stream.WriteClass( this.ErHVXCconfig, "ErHVXCconfig"); 
		}

		if (PARAmode != 0)
		{
			boxSize += stream.WriteClass( this.HILNconfig, "HILNconfig"); 
		}
		boxSize += stream.WriteBit( this.PARAextensionFlag, "PARAextensionFlag"); 

		if (PARAextensionFlag)
		{
			/*  to be defined in MPEG-4 Phase 3  */
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 2; // PARAmode

		if (PARAmode != 1)
		{
			boxSize += IsoStream.CalculateClassSize(ErHVXCconfig); // ErHVXCconfig
		}

		if (PARAmode != 0)
		{
			boxSize += IsoStream.CalculateClassSize(HILNconfig); // HILNconfig
		}
		boxSize += 1; // PARAextensionFlag

		if (PARAextensionFlag)
		{
			/*  to be defined in MPEG-4 Phase 3  */
		}
		return boxSize;
	}
}


/*
class HILNconfig()
{
  uimsbf(1) HILNquantMode;
  uimsbf(8) HILNmaxNumLine;
  uimsbf(4) HILNsampleRateCode;
  uimsbf(12) HILNframeLength;
  uimsbf(2) HILNcontMode;
}


*/
public partial class HILNconfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "HILNconfig"; } }

	protected bool HILNquantMode; 
	public bool _HILNquantMode { get { return this.HILNquantMode; } set { this.HILNquantMode = value; } }

	protected byte HILNmaxNumLine; 
	public byte _HILNmaxNumLine { get { return this.HILNmaxNumLine; } set { this.HILNmaxNumLine = value; } }

	protected byte HILNsampleRateCode; 
	public byte _HILNsampleRateCode { get { return this.HILNsampleRateCode; } set { this.HILNsampleRateCode = value; } }

	protected ushort HILNframeLength; 
	public ushort _HILNframeLength { get { return this.HILNframeLength; } set { this.HILNframeLength = value; } }

	protected byte HILNcontMode; 
	public byte _HILNcontMode { get { return this.HILNcontMode; } set { this.HILNcontMode = value; } }

	public HILNconfig(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBit(boxSize, readSize,  out this.HILNquantMode, "HILNquantMode"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.HILNmaxNumLine, "HILNmaxNumLine"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.HILNsampleRateCode, "HILNsampleRateCode"); 
		boxSize += stream.ReadBits(boxSize, readSize, 12,  out this.HILNframeLength, "HILNframeLength"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.HILNcontMode, "HILNcontMode"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBit( this.HILNquantMode, "HILNquantMode"); 
		boxSize += stream.WriteUInt8( this.HILNmaxNumLine, "HILNmaxNumLine"); 
		boxSize += stream.WriteBits(4,  this.HILNsampleRateCode, "HILNsampleRateCode"); 
		boxSize += stream.WriteBits(12,  this.HILNframeLength, "HILNframeLength"); 
		boxSize += stream.WriteBits(2,  this.HILNcontMode, "HILNcontMode"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 1; // HILNquantMode
		boxSize += 8; // HILNmaxNumLine
		boxSize += 4; // HILNsampleRateCode
		boxSize += 12; // HILNframeLength
		boxSize += 2; // HILNcontMode
		return boxSize;
	}
}


/*
class HILNenexConfig()
{
  uimsbf(1) HILNenhaLayer;
  if (HILNenhaLayer) {
    uimsbf(2) HILNenhaQuantMode;
  }
}


*/
public partial class HILNenexConfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "HILNenexConfig"; } }

	protected bool HILNenhaLayer; 
	public bool _HILNenhaLayer { get { return this.HILNenhaLayer; } set { this.HILNenhaLayer = value; } }

	protected byte HILNenhaQuantMode; 
	public byte _HILNenhaQuantMode { get { return this.HILNenhaQuantMode; } set { this.HILNenhaQuantMode = value; } }

	public HILNenexConfig(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBit(boxSize, readSize,  out this.HILNenhaLayer, "HILNenhaLayer"); 

		if (HILNenhaLayer)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.HILNenhaQuantMode, "HILNenhaQuantMode"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBit( this.HILNenhaLayer, "HILNenhaLayer"); 

		if (HILNenhaLayer)
		{
			boxSize += stream.WriteBits(2,  this.HILNenhaQuantMode, "HILNenhaQuantMode"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 1; // HILNenhaLayer

		if (HILNenhaLayer)
		{
			boxSize += 2; // HILNenhaQuantMode
		}
		return boxSize;
	}
}


/*
class SSCSpecificConfig(channelConfiguration)
{
  uimsbf(2) decoder_level;
  uimsbf(4) update_rate;
  uimsbf(2) synthesis_method;
  if (channelConfiguration != 1) {
    uimsbf(2) mode_ext;
    if ((channelConfiguration == 2) && (mode_ext == 1)) {
      uimsbf(2) reserved;
    }
  }
}


*/
public partial class SSCSpecificConfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "SSCSpecificConfig"; } }

	protected byte decoder_level; 
	public byte DecoderLevel { get { return this.decoder_level; } set { this.decoder_level = value; } }

	protected byte update_rate; 
	public byte UpdateRate { get { return this.update_rate; } set { this.update_rate = value; } }

	protected byte synthesis_method; 
	public byte SynthesisMethod { get { return this.synthesis_method; } set { this.synthesis_method = value; } }

	protected byte mode_ext; 
	public byte ModeExt { get { return this.mode_ext; } set { this.mode_ext = value; } }

	protected byte reserved; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected int channelConfiguration; 
	public int ChannelConfiguration { get { return this.channelConfiguration; } set { this.channelConfiguration = value; } }

	public SSCSpecificConfig(int channelConfiguration): base()
	{
		this.channelConfiguration = channelConfiguration;
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.decoder_level, "decoder_level"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.update_rate, "update_rate"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.synthesis_method, "synthesis_method"); 

		if (channelConfiguration != 1)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.mode_ext, "mode_ext"); 

			if ((channelConfiguration == 2) && (mode_ext == 1))
			{
				boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.reserved, "reserved"); 
			}
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBits(2,  this.decoder_level, "decoder_level"); 
		boxSize += stream.WriteBits(4,  this.update_rate, "update_rate"); 
		boxSize += stream.WriteBits(2,  this.synthesis_method, "synthesis_method"); 

		if (channelConfiguration != 1)
		{
			boxSize += stream.WriteBits(2,  this.mode_ext, "mode_ext"); 

			if ((channelConfiguration == 2) && (mode_ext == 1))
			{
				boxSize += stream.WriteBits(2,  this.reserved, "reserved"); 
			}
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 2; // decoder_level
		boxSize += 4; // update_rate
		boxSize += 2; // synthesis_method

		if (channelConfiguration != 1)
		{
			boxSize += 2; // mode_ext

			if ((channelConfiguration == 2) && (mode_ext == 1))
			{
				boxSize += 2; // reserved
			}
		}
		return boxSize;
	}
}


/*
class MPEG_1_2_SpecificConfig()
{
  bslbf(1) extension;
}


*/
public partial class MPEG_1_2_SpecificConfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "MPEG_1_2_SpecificConfig"; } }

	protected bool extension; 
	public bool Extension { get { return this.extension; } set { this.extension = value; } }

	public MPEG_1_2_SpecificConfig(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBit(boxSize, readSize,  out this.extension, "extension"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBit( this.extension, "extension"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 1; // extension
		return boxSize;
	}
}


/*
class DSTSpecificConfig(channelConfiguration) {
  uimsbf(1) DSDDST_Coded;
  uimsbf(14) N_Channels;
  uimsbf(1) reserved;
}


*/
public partial class DSTSpecificConfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "DSTSpecificConfig"; } }

	protected bool DSDDST_Coded; 
	public bool DSDDSTCoded { get { return this.DSDDST_Coded; } set { this.DSDDST_Coded = value; } }

	protected ushort N_Channels; 
	public ushort NChannels { get { return this.N_Channels; } set { this.N_Channels = value; } }

	protected bool reserved; 
	public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

	public DSTSpecificConfig(int channelConfiguration): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBit(boxSize, readSize,  out this.DSDDST_Coded, "DSDDST_Coded"); 
		boxSize += stream.ReadBits(boxSize, readSize, 14,  out this.N_Channels, "N_Channels"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved, "reserved"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBit( this.DSDDST_Coded, "DSDDST_Coded"); 
		boxSize += stream.WriteBits(14,  this.N_Channels, "N_Channels"); 
		boxSize += stream.WriteBit( this.reserved, "reserved"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 1; // DSDDST_Coded
		boxSize += 14; // N_Channels
		boxSize += 1; // reserved
		return boxSize;
	}
}


/*
class ALSSpecificConfig()
{
  uimsbf(32) als_id;
  uimsbf(32) samp_freq;
  uimsbf(32) samples;
  uimsbf(16) channels;
  uimsbf(3) file_type;
  uimsbf(3) resolution;
  uimsbf(1) floating;
  uimsbf(1) msb_first;
  uimsbf(16) frame_length;
  uimsbf(8) random_access;
  uimsbf(2) ra_flag;
  uimsbf(1) adapt_order;
  uimsbf(2) coef_table;
  uimsbf(1) long_term_prediction;
  uimsbf(10) max_order;
  uimsbf(2) block_switching;
  uimsbf(1) bgmc_mode;
  uimsbf(1) sb_part;
  uimsbf(1) joint_stereo;
  uimsbf(1) mc_coding;
  uimsbf(1) chan_config;
  uimsbf(1) chan_sort;
  uimsbf(1) crc_enabled;
  uimsbf(1) RLSLMS;
  uimsbf(5) reserved;
  uimsbf(1) aux_data_enabled;
  if (chan_config) {
    uimsbf(16) chan_config_info;
  }
  if (chan_sort) {
    for (c = 0; c < channels; c++)
      uimsbf(1) chan_pos[c]; // 1..16 uimsbf 
  }
  bslbf(1) byte_align; // TODO: 0..7 bslbf 
  uimsbf(32) header_size;
  uimsbf(32) trailer_size;
  bslbf(header_size * 8) orig_header;
  bslbf(trailer_size * 8) orig_trailer;
  if (crc_enabled) {
    uimsbf(32) crc;
  }
  if ((ra_flag == 2) && (random_access > 0)) {
    for (f = 0; f < ((samples - 1) / (frame_length + 1)) + 1; f++) {
      uimsbf(32) ra_unit_size[f];
    }
  }
  if (aux_data_enabled) {
    uimsbf(32) aux_size;
    bslbf(aux_size * 8) aux_data;
  }
}


*/
public partial class ALSSpecificConfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "ALSSpecificConfig"; } }

	protected uint als_id; 
	public uint AlsId { get { return this.als_id; } set { this.als_id = value; } }

	protected uint samp_freq; 
	public uint SampFreq { get { return this.samp_freq; } set { this.samp_freq = value; } }

	protected uint samples; 
	public uint Samples { get { return this.samples; } set { this.samples = value; } }

	protected ushort channels; 
	public ushort Channels { get { return this.channels; } set { this.channels = value; } }

	protected byte file_type; 
	public byte FileType { get { return this.file_type; } set { this.file_type = value; } }

	protected byte resolution; 
	public byte Resolution { get { return this.resolution; } set { this.resolution = value; } }

	protected bool floating; 
	public bool Floating { get { return this.floating; } set { this.floating = value; } }

	protected bool msb_first; 
	public bool MsbFirst { get { return this.msb_first; } set { this.msb_first = value; } }

	protected ushort frame_length; 
	public ushort FrameLength { get { return this.frame_length; } set { this.frame_length = value; } }

	protected byte random_access; 
	public byte RandomAccess { get { return this.random_access; } set { this.random_access = value; } }

	protected byte ra_flag; 
	public byte RaFlag { get { return this.ra_flag; } set { this.ra_flag = value; } }

	protected bool adapt_order; 
	public bool AdaptOrder { get { return this.adapt_order; } set { this.adapt_order = value; } }

	protected byte coef_table; 
	public byte CoefTable { get { return this.coef_table; } set { this.coef_table = value; } }

	protected bool long_term_prediction; 
	public bool LongTermPrediction { get { return this.long_term_prediction; } set { this.long_term_prediction = value; } }

	protected ushort max_order; 
	public ushort MaxOrder { get { return this.max_order; } set { this.max_order = value; } }

	protected byte block_switching; 
	public byte BlockSwitching { get { return this.block_switching; } set { this.block_switching = value; } }

	protected bool bgmc_mode; 
	public bool BgmcMode { get { return this.bgmc_mode; } set { this.bgmc_mode = value; } }

	protected bool sb_part; 
	public bool SbPart { get { return this.sb_part; } set { this.sb_part = value; } }

	protected bool joint_stereo; 
	public bool JointStereo { get { return this.joint_stereo; } set { this.joint_stereo = value; } }

	protected bool mc_coding; 
	public bool McCoding { get { return this.mc_coding; } set { this.mc_coding = value; } }

	protected bool chan_config; 
	public bool ChanConfig { get { return this.chan_config; } set { this.chan_config = value; } }

	protected bool chan_sort; 
	public bool ChanSort { get { return this.chan_sort; } set { this.chan_sort = value; } }

	protected bool crc_enabled; 
	public bool CrcEnabled { get { return this.crc_enabled; } set { this.crc_enabled = value; } }

	protected bool RLSLMS; 
	public bool _RLSLMS { get { return this.RLSLMS; } set { this.RLSLMS = value; } }

	protected byte reserved; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected bool aux_data_enabled; 
	public bool AuxDataEnabled { get { return this.aux_data_enabled; } set { this.aux_data_enabled = value; } }

	protected ushort chan_config_info; 
	public ushort ChanConfigInfo { get { return this.chan_config_info; } set { this.chan_config_info = value; } }

	protected bool[] chan_pos;  //  1..16 uimsbf 
	public bool[] ChanPos { get { return this.chan_pos; } set { this.chan_pos = value; } }

	protected bool byte_align;  //  TODO: 0..7 bslbf 
	public bool ByteAlign { get { return this.byte_align; } set { this.byte_align = value; } }

	protected uint header_size; 
	public uint HeaderSize { get { return this.header_size; } set { this.header_size = value; } }

	protected uint trailer_size; 
	public uint TrailerSize { get { return this.trailer_size; } set { this.trailer_size = value; } }

	protected byte[] orig_header; 
	public byte[] OrigHeader { get { return this.orig_header; } set { this.orig_header = value; } }

	protected byte[] orig_trailer; 
	public byte[] OrigTrailer { get { return this.orig_trailer; } set { this.orig_trailer = value; } }

	protected uint crc; 
	public uint Crc { get { return this.crc; } set { this.crc = value; } }

	protected uint[] ra_unit_size; 
	public uint[] RaUnitSize { get { return this.ra_unit_size; } set { this.ra_unit_size = value; } }

	protected uint aux_size; 
	public uint AuxSize { get { return this.aux_size; } set { this.aux_size = value; } }

	protected byte[] aux_data; 
	public byte[] AuxData { get { return this.aux_data; } set { this.aux_data = value; } }

	public ALSSpecificConfig(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.als_id, "als_id"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.samp_freq, "samp_freq"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.samples, "samples"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.channels, "channels"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.file_type, "file_type"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.resolution, "resolution"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.floating, "floating"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.msb_first, "msb_first"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.frame_length, "frame_length"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.random_access, "random_access"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.ra_flag, "ra_flag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.adapt_order, "adapt_order"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.coef_table, "coef_table"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.long_term_prediction, "long_term_prediction"); 
		boxSize += stream.ReadBits(boxSize, readSize, 10,  out this.max_order, "max_order"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.block_switching, "block_switching"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.bgmc_mode, "bgmc_mode"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.sb_part, "sb_part"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.joint_stereo, "joint_stereo"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.mc_coding, "mc_coding"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.chan_config, "chan_config"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.chan_sort, "chan_sort"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.crc_enabled, "crc_enabled"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.RLSLMS, "RLSLMS"); 
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.aux_data_enabled, "aux_data_enabled"); 

		if (chan_config)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.chan_config_info, "chan_config_info"); 
		}

		if (chan_sort)
		{

			this.chan_pos = new bool[IsoStream.GetInt( channels)];
			for (int c = 0; c < channels; c++)
			{
				boxSize += stream.ReadBit(boxSize, readSize,  out this.chan_pos[c], "chan_pos"); // 1..16 uimsbf 
			}
		}
		boxSize += stream.ReadBit(boxSize, readSize,  out this.byte_align, "byte_align"); // TODO: 0..7 bslbf 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.header_size, "header_size"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.trailer_size, "trailer_size"); 
		boxSize += stream.ReadBits(boxSize, readSize, (uint)(header_size * 8 ),  out this.orig_header, "orig_header"); 
		boxSize += stream.ReadBits(boxSize, readSize, (uint)(trailer_size * 8 ),  out this.orig_trailer, "orig_trailer"); 

		if (crc_enabled)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.crc, "crc"); 
		}

		if ((ra_flag == 2) && (random_access > 0))
		{

			this.ra_unit_size = new uint[IsoStream.GetInt( ((samples - 1) / (frame_length + 1)) + 1)];
			for (int f = 0; f < ((samples - 1) / (frame_length + 1)) + 1; f++)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.ra_unit_size[f], "ra_unit_size"); 
			}
		}

		if (aux_data_enabled)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.aux_size, "aux_size"); 
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(aux_size * 8 ),  out this.aux_data, "aux_data"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt32( this.als_id, "als_id"); 
		boxSize += stream.WriteUInt32( this.samp_freq, "samp_freq"); 
		boxSize += stream.WriteUInt32( this.samples, "samples"); 
		boxSize += stream.WriteUInt16( this.channels, "channels"); 
		boxSize += stream.WriteBits(3,  this.file_type, "file_type"); 
		boxSize += stream.WriteBits(3,  this.resolution, "resolution"); 
		boxSize += stream.WriteBit( this.floating, "floating"); 
		boxSize += stream.WriteBit( this.msb_first, "msb_first"); 
		boxSize += stream.WriteUInt16( this.frame_length, "frame_length"); 
		boxSize += stream.WriteUInt8( this.random_access, "random_access"); 
		boxSize += stream.WriteBits(2,  this.ra_flag, "ra_flag"); 
		boxSize += stream.WriteBit( this.adapt_order, "adapt_order"); 
		boxSize += stream.WriteBits(2,  this.coef_table, "coef_table"); 
		boxSize += stream.WriteBit( this.long_term_prediction, "long_term_prediction"); 
		boxSize += stream.WriteBits(10,  this.max_order, "max_order"); 
		boxSize += stream.WriteBits(2,  this.block_switching, "block_switching"); 
		boxSize += stream.WriteBit( this.bgmc_mode, "bgmc_mode"); 
		boxSize += stream.WriteBit( this.sb_part, "sb_part"); 
		boxSize += stream.WriteBit( this.joint_stereo, "joint_stereo"); 
		boxSize += stream.WriteBit( this.mc_coding, "mc_coding"); 
		boxSize += stream.WriteBit( this.chan_config, "chan_config"); 
		boxSize += stream.WriteBit( this.chan_sort, "chan_sort"); 
		boxSize += stream.WriteBit( this.crc_enabled, "crc_enabled"); 
		boxSize += stream.WriteBit( this.RLSLMS, "RLSLMS"); 
		boxSize += stream.WriteBits(5,  this.reserved, "reserved"); 
		boxSize += stream.WriteBit( this.aux_data_enabled, "aux_data_enabled"); 

		if (chan_config)
		{
			boxSize += stream.WriteUInt16( this.chan_config_info, "chan_config_info"); 
		}

		if (chan_sort)
		{

			for (int c = 0; c < channels; c++)
			{
				boxSize += stream.WriteBit( this.chan_pos[c], "chan_pos"); // 1..16 uimsbf 
			}
		}
		boxSize += stream.WriteBit( this.byte_align, "byte_align"); // TODO: 0..7 bslbf 
		boxSize += stream.WriteUInt32( this.header_size, "header_size"); 
		boxSize += stream.WriteUInt32( this.trailer_size, "trailer_size"); 
		boxSize += stream.WriteBits((uint)(header_size * 8 ),  this.orig_header, "orig_header"); 
		boxSize += stream.WriteBits((uint)(trailer_size * 8 ),  this.orig_trailer, "orig_trailer"); 

		if (crc_enabled)
		{
			boxSize += stream.WriteUInt32( this.crc, "crc"); 
		}

		if ((ra_flag == 2) && (random_access > 0))
		{

			for (int f = 0; f < ((samples - 1) / (frame_length + 1)) + 1; f++)
			{
				boxSize += stream.WriteUInt32( this.ra_unit_size[f], "ra_unit_size"); 
			}
		}

		if (aux_data_enabled)
		{
			boxSize += stream.WriteUInt32( this.aux_size, "aux_size"); 
			boxSize += stream.WriteBits((uint)(aux_size * 8 ),  this.aux_data, "aux_data"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 32; // als_id
		boxSize += 32; // samp_freq
		boxSize += 32; // samples
		boxSize += 16; // channels
		boxSize += 3; // file_type
		boxSize += 3; // resolution
		boxSize += 1; // floating
		boxSize += 1; // msb_first
		boxSize += 16; // frame_length
		boxSize += 8; // random_access
		boxSize += 2; // ra_flag
		boxSize += 1; // adapt_order
		boxSize += 2; // coef_table
		boxSize += 1; // long_term_prediction
		boxSize += 10; // max_order
		boxSize += 2; // block_switching
		boxSize += 1; // bgmc_mode
		boxSize += 1; // sb_part
		boxSize += 1; // joint_stereo
		boxSize += 1; // mc_coding
		boxSize += 1; // chan_config
		boxSize += 1; // chan_sort
		boxSize += 1; // crc_enabled
		boxSize += 1; // RLSLMS
		boxSize += 5; // reserved
		boxSize += 1; // aux_data_enabled

		if (chan_config)
		{
			boxSize += 16; // chan_config_info
		}

		if (chan_sort)
		{

			for (int c = 0; c < channels; c++)
			{
				boxSize += 1; // chan_pos
			}
		}
		boxSize += 1; // byte_align
		boxSize += 32; // header_size
		boxSize += 32; // trailer_size
		boxSize += (ulong)(header_size * 8 ); // orig_header
		boxSize += (ulong)(trailer_size * 8 ); // orig_trailer

		if (crc_enabled)
		{
			boxSize += 32; // crc
		}

		if ((ra_flag == 2) && (random_access > 0))
		{

			for (int f = 0; f < ((samples - 1) / (frame_length + 1)) + 1; f++)
			{
				boxSize += 32; // ra_unit_size
			}
		}

		if (aux_data_enabled)
		{
			boxSize += 32; // aux_size
			boxSize += (ulong)(aux_size * 8 ); // aux_data
		}
		return boxSize;
	}
}


/*
class SLSSpecificConfig(samplingFrequencyIndex,
  channelConfiguration,
  audioObjectType)
{
  uimsbf(3) pcmWordLength;
  uimsbf(1) aac_core_present;
  uimsbf(1) lle_main_stream;
  uimsbf(1) reserved_bit;
  uimsbf(3) frameLength;
  if (!channelConfiguration) {
    program_config_element();
  }
}


*/
public partial class SLSSpecificConfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "SLSSpecificConfig"; } }

	protected byte pcmWordLength; 
	public byte PcmWordLength { get { return this.pcmWordLength; } set { this.pcmWordLength = value; } }

	protected bool aac_core_present; 
	public bool AacCorePresent { get { return this.aac_core_present; } set { this.aac_core_present = value; } }

	protected bool lle_main_stream; 
	public bool LleMainStream { get { return this.lle_main_stream; } set { this.lle_main_stream = value; } }

	protected bool reserved_bit; 
	public bool ReservedBit { get { return this.reserved_bit; } set { this.reserved_bit = value; } }

	protected byte frameLength; 
	public byte FrameLength { get { return this.frameLength; } set { this.frameLength = value; } }

	protected program_config_element program_config_element; 
	public program_config_element ProgramConfigElement { get { return this.program_config_element; } set { this.program_config_element = value; } }

	protected byte audioObjectType; 
	public byte AudioObjectType { get { return this.audioObjectType; } set { this.audioObjectType = value; } }

	protected int channelConfiguration; 
	public int ChannelConfiguration { get { return this.channelConfiguration; } set { this.channelConfiguration = value; } }

	protected int samplingFrequencyIndex; 
	public int SamplingFrequencyIndex { get { return this.samplingFrequencyIndex; } set { this.samplingFrequencyIndex = value; } }

	public SLSSpecificConfig(int samplingFrequencyIndex, int channelConfiguration, byte audioObjectType): base()
	{
		this.audioObjectType = audioObjectType;
		this.channelConfiguration = channelConfiguration;
		this.samplingFrequencyIndex = samplingFrequencyIndex;
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.pcmWordLength, "pcmWordLength"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.aac_core_present, "aac_core_present"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.lle_main_stream, "lle_main_stream"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved_bit, "reserved_bit"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.frameLength, "frameLength"); 

		if (channelConfiguration == 0)
		{
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new program_config_element(),  out this.program_config_element, "program_config_element"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBits(3,  this.pcmWordLength, "pcmWordLength"); 
		boxSize += stream.WriteBit( this.aac_core_present, "aac_core_present"); 
		boxSize += stream.WriteBit( this.lle_main_stream, "lle_main_stream"); 
		boxSize += stream.WriteBit( this.reserved_bit, "reserved_bit"); 
		boxSize += stream.WriteBits(3,  this.frameLength, "frameLength"); 

		if (channelConfiguration == 0)
		{
			boxSize += stream.WriteClass( this.program_config_element, "program_config_element"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 3; // pcmWordLength
		boxSize += 1; // aac_core_present
		boxSize += 1; // lle_main_stream
		boxSize += 1; // reserved_bit
		boxSize += 3; // frameLength

		if (channelConfiguration == 0)
		{
			boxSize += IsoStream.CalculateClassSize(program_config_element); // program_config_element
		}
		return boxSize;
	}
}


/*
class ELDSpecificConfig(channelConfiguration)
{
  bslbf(1) frameLengthFlag;
  bslbf(1) aacSectionDataResilienceFlag;
  bslbf(1) aacScalefactorDataResilienceFlag;
  bslbf(1) aacSpectralDataResilienceFlag;

  bslbf(1) ldSbrPresentFlag;
  if (ldSbrPresentFlag) {
    bslbf(1) ldSbrSamplingRate;
    bslbf(1) ldSbrCrcFlag;
    ld_sbr_header(channelConfiguration);
  }

  bslbf(4) eldExtType;
while (eldExtType != ELDEXT_TERM) {
    uimsbf(4) eldExtLen;
    len = eldExtLen;
    if (eldExtLen == 15) {
      uimsbf(8) eldExtLenAdd;
      len += eldExtLenAdd;
    }
    if (eldExtLenAdd == 255) {
      uimsbf(16) eldExtLenAddAdd;
      len += eldExtLenAddAdd;
    }
    switch (eldExtType) {
      /* add future eld extension configs here *//*
      default:
        int cntt;
        for (cnt = 0; cnt < len; cnt++) {
           uimsbf(8) other_byte;
        }
        break;
    }
bslbf(4) eldExtType;
  }
}


*/
public partial class ELDSpecificConfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "ELDSpecificConfig"; } }

	protected bool frameLengthFlag; 
	public bool FrameLengthFlag { get { return this.frameLengthFlag; } set { this.frameLengthFlag = value; } }

	protected bool aacSectionDataResilienceFlag; 
	public bool AacSectionDataResilienceFlag { get { return this.aacSectionDataResilienceFlag; } set { this.aacSectionDataResilienceFlag = value; } }

	protected bool aacScalefactorDataResilienceFlag; 
	public bool AacScalefactorDataResilienceFlag { get { return this.aacScalefactorDataResilienceFlag; } set { this.aacScalefactorDataResilienceFlag = value; } }

	protected bool aacSpectralDataResilienceFlag; 
	public bool AacSpectralDataResilienceFlag { get { return this.aacSpectralDataResilienceFlag; } set { this.aacSpectralDataResilienceFlag = value; } }

	protected bool ldSbrPresentFlag; 
	public bool LdSbrPresentFlag { get { return this.ldSbrPresentFlag; } set { this.ldSbrPresentFlag = value; } }

	protected bool ldSbrSamplingRate; 
	public bool LdSbrSamplingRate { get { return this.ldSbrSamplingRate; } set { this.ldSbrSamplingRate = value; } }

	protected bool ldSbrCrcFlag; 
	public bool LdSbrCrcFlag { get { return this.ldSbrCrcFlag; } set { this.ldSbrCrcFlag = value; } }

	protected ld_sbr_header ld_sbr_header; 
	public ld_sbr_header LdSbrHeader { get { return this.ld_sbr_header; } set { this.ld_sbr_header = value; } }

	protected byte eldExtType; 
	public byte EldExtType { get { return this.eldExtType; } set { this.eldExtType = value; } }

	protected byte eldExtLen; 
	public byte EldExtLen { get { return this.eldExtLen; } set { this.eldExtLen = value; } }

	protected byte eldExtLenAdd; 
	public byte EldExtLenAdd { get { return this.eldExtLenAdd; } set { this.eldExtLenAdd = value; } }

	protected ushort eldExtLenAddAdd; 
	public ushort EldExtLenAddAdd { get { return this.eldExtLenAddAdd; } set { this.eldExtLenAddAdd = value; } }

	protected int cntt; 
	public int Cntt { get { return this.cntt; } set { this.cntt = value; } }

	protected byte[] other_byte; 
	public byte[] OtherByte { get { return this.other_byte; } set { this.other_byte = value; } }

	protected int channelConfiguration; 
	public int ChannelConfiguration { get { return this.channelConfiguration; } set { this.channelConfiguration = value; } }

	public ELDSpecificConfig(int channelConfiguration): base()
	{
		this.channelConfiguration = channelConfiguration;
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		int len = 0;

		const byte ELDEXT_TERM = 0;

		boxSize += stream.ReadBit(boxSize, readSize,  out this.frameLengthFlag, "frameLengthFlag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.aacSectionDataResilienceFlag, "aacSectionDataResilienceFlag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.aacScalefactorDataResilienceFlag, "aacScalefactorDataResilienceFlag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.aacSpectralDataResilienceFlag, "aacSpectralDataResilienceFlag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.ldSbrPresentFlag, "ldSbrPresentFlag"); 

		if (ldSbrPresentFlag)
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.ldSbrSamplingRate, "ldSbrSamplingRate"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.ldSbrCrcFlag, "ldSbrCrcFlag"); 
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new ld_sbr_header(channelConfiguration),  out this.ld_sbr_header, "ld_sbr_header"); 
		}
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.eldExtType, "eldExtType"); 

		while (eldExtType != ELDEXT_TERM)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.eldExtLen, "eldExtLen"); 
			len = eldExtLen;

			if (eldExtLen == 15)
			{
				boxSize += stream.ReadUInt8(boxSize, readSize,  out this.eldExtLenAdd, "eldExtLenAdd"); 
				len += eldExtLenAdd;
			}

			if (eldExtLenAdd == 255)
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.eldExtLenAddAdd, "eldExtLenAddAdd"); 
				len += eldExtLenAddAdd;
			}

			switch (eldExtType)
			{
				/*  add future eld extension configs here  */
				default:

				boxSize += stream.ReadInt32(boxSize, readSize,  out this.cntt, "cntt"); 

				this.other_byte = new byte[IsoStream.GetInt( len)];
				for (int cnt = 0; cnt < len; cnt++)
				{
					boxSize += stream.ReadUInt8(boxSize, readSize,  out this.other_byte[cnt], "other_byte"); 
				}
				break;

			}
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.eldExtType, "eldExtType"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		int len = 0;

		const byte ELDEXT_TERM = 0;

		boxSize += stream.WriteBit( this.frameLengthFlag, "frameLengthFlag"); 
		boxSize += stream.WriteBit( this.aacSectionDataResilienceFlag, "aacSectionDataResilienceFlag"); 
		boxSize += stream.WriteBit( this.aacScalefactorDataResilienceFlag, "aacScalefactorDataResilienceFlag"); 
		boxSize += stream.WriteBit( this.aacSpectralDataResilienceFlag, "aacSpectralDataResilienceFlag"); 
		boxSize += stream.WriteBit( this.ldSbrPresentFlag, "ldSbrPresentFlag"); 

		if (ldSbrPresentFlag)
		{
			boxSize += stream.WriteBit( this.ldSbrSamplingRate, "ldSbrSamplingRate"); 
			boxSize += stream.WriteBit( this.ldSbrCrcFlag, "ldSbrCrcFlag"); 
			boxSize += stream.WriteClass( this.ld_sbr_header, "ld_sbr_header"); 
		}
		boxSize += stream.WriteBits(4,  this.eldExtType, "eldExtType"); 

		while (eldExtType != ELDEXT_TERM)
		{
			boxSize += stream.WriteBits(4,  this.eldExtLen, "eldExtLen"); 
			len = eldExtLen;

			if (eldExtLen == 15)
			{
				boxSize += stream.WriteUInt8( this.eldExtLenAdd, "eldExtLenAdd"); 
				len += eldExtLenAdd;
			}

			if (eldExtLenAdd == 255)
			{
				boxSize += stream.WriteUInt16( this.eldExtLenAddAdd, "eldExtLenAddAdd"); 
				len += eldExtLenAddAdd;
			}

			switch (eldExtType)
			{
				/*  add future eld extension configs here  */
				default:

				boxSize += stream.WriteInt32( this.cntt, "cntt"); 

				for (int cnt = 0; cnt < len; cnt++)
				{
					boxSize += stream.WriteUInt8( this.other_byte[cnt], "other_byte"); 
				}
				break;

			}
			boxSize += stream.WriteBits(4,  this.eldExtType, "eldExtType"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		int len = 0;

		const byte ELDEXT_TERM = 0;

		boxSize += 1; // frameLengthFlag
		boxSize += 1; // aacSectionDataResilienceFlag
		boxSize += 1; // aacScalefactorDataResilienceFlag
		boxSize += 1; // aacSpectralDataResilienceFlag
		boxSize += 1; // ldSbrPresentFlag

		if (ldSbrPresentFlag)
		{
			boxSize += 1; // ldSbrSamplingRate
			boxSize += 1; // ldSbrCrcFlag
			boxSize += IsoStream.CalculateClassSize(ld_sbr_header); // ld_sbr_header
		}
		boxSize += 4; // eldExtType

		while (eldExtType != ELDEXT_TERM)
		{
			boxSize += 4; // eldExtLen
			len = eldExtLen;

			if (eldExtLen == 15)
			{
				boxSize += 8; // eldExtLenAdd
				len += eldExtLenAdd;
			}

			if (eldExtLenAdd == 255)
			{
				boxSize += 16; // eldExtLenAddAdd
				len += eldExtLenAddAdd;
			}

			switch (eldExtType)
			{
				/*  add future eld extension configs here  */
				default:

				boxSize += 32; // cntt

				for (int cnt = 0; cnt < len; cnt++)
				{
					boxSize += 8; // other_byte
				}
				break;

			}
			boxSize += 4; // eldExtType
		}
		return boxSize;
	}
}


/*
class ld_sbr_header(channelConfiguration)
{
  switch (channelConfiguration) {
    case 1:
    case 2:
      numSbrHeader = 1;
      break;
    case 3:
      numSbrHeader = 2;
      break;
    case 4:
    case 5:
    case 6:
      numSbrHeader = 3;
      break;
    case 7:
      numSbrHeader = 4;
      break;
    default:
      numSbrHeader = 0;
      break;
  }
  for (el = 0; el < numSbrHeader; el++) {
    sbr_header();
  }
}


*/
public partial class ld_sbr_header : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "ld_sbr_header"; } }

	protected sbr_header[] sbr_header; 
	public sbr_header[] SbrHeader { get { return this.sbr_header; } set { this.sbr_header = value; } }

	protected int channelConfiguration; 
	public int ChannelConfiguration { get { return this.channelConfiguration; } set { this.channelConfiguration = value; } }

	public ld_sbr_header(int channelConfiguration): base()
	{
		this.channelConfiguration = channelConfiguration;
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		int numSbrHeader = 0;


		switch (channelConfiguration)
		{
			case 1:
			case 2:
			numSbrHeader = 1;
			break;

			case 3:
			numSbrHeader = 2;
			break;

			case 4:
			case 5:
			case 6:
			numSbrHeader = 3;
			break;

			case 7:
			numSbrHeader = 4;
			break;

			default:

			numSbrHeader = 0;
			break;

		}

		this.sbr_header = new sbr_header[IsoStream.GetInt( numSbrHeader)];
		for (int el = 0; el < numSbrHeader; el++)
		{
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new sbr_header(),  out this.sbr_header[el], "sbr_header"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		int numSbrHeader = 0;


		switch (channelConfiguration)
		{
			case 1:
			case 2:
			numSbrHeader = 1;
			break;

			case 3:
			numSbrHeader = 2;
			break;

			case 4:
			case 5:
			case 6:
			numSbrHeader = 3;
			break;

			case 7:
			numSbrHeader = 4;
			break;

			default:

			numSbrHeader = 0;
			break;

		}

		for (int el = 0; el < numSbrHeader; el++)
		{
			boxSize += stream.WriteClass( this.sbr_header[el], "sbr_header"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		int numSbrHeader = 0;


		switch (channelConfiguration)
		{
			case 1:
			case 2:
			numSbrHeader = 1;
			break;

			case 3:
			numSbrHeader = 2;
			break;

			case 4:
			case 5:
			case 6:
			numSbrHeader = 3;
			break;

			case 7:
			numSbrHeader = 4;
			break;

			default:

			numSbrHeader = 0;
			break;

		}

		for (int el = 0; el < numSbrHeader; el++)
		{
			boxSize += IsoStream.CalculateClassSize(sbr_header); // sbr_header
		}
		return boxSize;
	}
}


/*
class sbr_header()
{
  uimsbf(1) bs_amp_res;
  uimsbf(4) bs_start_freq;
  uimsbf(4) bs_stop_freq;
  uimsbf(3) bs_xover_band;
  uimsbf(2) bs_reserved;
  uimsbf(1) bs_header_extra_1;
  uimsbf(1) bs_header_extra_2;

  if (bs_header_extra_1) {
    uimsbf(2) bs_freq_scale;
    uimsbf(1) bs_alter_scale;
    uimsbf(2) bs_noise_bands;
  }

  if (bs_header_extra_2) {
    uimsbf(2) bs_limiter_bands;
    uimsbf(2) bs_limiter_gains;
    uimsbf(1) bs_interpol_freq;
    uimsbf(1) bs_smoothing_mode;
  }
}


*/
public partial class sbr_header : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "sbr_header"; } }

	protected bool bs_amp_res; 
	public bool BsAmpRes { get { return this.bs_amp_res; } set { this.bs_amp_res = value; } }

	protected byte bs_start_freq; 
	public byte BsStartFreq { get { return this.bs_start_freq; } set { this.bs_start_freq = value; } }

	protected byte bs_stop_freq; 
	public byte BsStopFreq { get { return this.bs_stop_freq; } set { this.bs_stop_freq = value; } }

	protected byte bs_xover_band; 
	public byte BsXoverBand { get { return this.bs_xover_band; } set { this.bs_xover_band = value; } }

	protected byte bs_reserved; 
	public byte BsReserved { get { return this.bs_reserved; } set { this.bs_reserved = value; } }

	protected bool bs_header_extra_1; 
	public bool BsHeaderExtra1 { get { return this.bs_header_extra_1; } set { this.bs_header_extra_1 = value; } }

	protected bool bs_header_extra_2; 
	public bool BsHeaderExtra2 { get { return this.bs_header_extra_2; } set { this.bs_header_extra_2 = value; } }

	protected byte bs_freq_scale; 
	public byte BsFreqScale { get { return this.bs_freq_scale; } set { this.bs_freq_scale = value; } }

	protected bool bs_alter_scale; 
	public bool BsAlterScale { get { return this.bs_alter_scale; } set { this.bs_alter_scale = value; } }

	protected byte bs_noise_bands; 
	public byte BsNoiseBands { get { return this.bs_noise_bands; } set { this.bs_noise_bands = value; } }

	protected byte bs_limiter_bands; 
	public byte BsLimiterBands { get { return this.bs_limiter_bands; } set { this.bs_limiter_bands = value; } }

	protected byte bs_limiter_gains; 
	public byte BsLimiterGains { get { return this.bs_limiter_gains; } set { this.bs_limiter_gains = value; } }

	protected bool bs_interpol_freq; 
	public bool BsInterpolFreq { get { return this.bs_interpol_freq; } set { this.bs_interpol_freq = value; } }

	protected bool bs_smoothing_mode; 
	public bool BsSmoothingMode { get { return this.bs_smoothing_mode; } set { this.bs_smoothing_mode = value; } }

	public sbr_header(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBit(boxSize, readSize,  out this.bs_amp_res, "bs_amp_res"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.bs_start_freq, "bs_start_freq"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.bs_stop_freq, "bs_stop_freq"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.bs_xover_band, "bs_xover_band"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.bs_reserved, "bs_reserved"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.bs_header_extra_1, "bs_header_extra_1"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.bs_header_extra_2, "bs_header_extra_2"); 

		if (bs_header_extra_1)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.bs_freq_scale, "bs_freq_scale"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.bs_alter_scale, "bs_alter_scale"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.bs_noise_bands, "bs_noise_bands"); 
		}

		if (bs_header_extra_2)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.bs_limiter_bands, "bs_limiter_bands"); 
			boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.bs_limiter_gains, "bs_limiter_gains"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.bs_interpol_freq, "bs_interpol_freq"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.bs_smoothing_mode, "bs_smoothing_mode"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBit( this.bs_amp_res, "bs_amp_res"); 
		boxSize += stream.WriteBits(4,  this.bs_start_freq, "bs_start_freq"); 
		boxSize += stream.WriteBits(4,  this.bs_stop_freq, "bs_stop_freq"); 
		boxSize += stream.WriteBits(3,  this.bs_xover_band, "bs_xover_band"); 
		boxSize += stream.WriteBits(2,  this.bs_reserved, "bs_reserved"); 
		boxSize += stream.WriteBit( this.bs_header_extra_1, "bs_header_extra_1"); 
		boxSize += stream.WriteBit( this.bs_header_extra_2, "bs_header_extra_2"); 

		if (bs_header_extra_1)
		{
			boxSize += stream.WriteBits(2,  this.bs_freq_scale, "bs_freq_scale"); 
			boxSize += stream.WriteBit( this.bs_alter_scale, "bs_alter_scale"); 
			boxSize += stream.WriteBits(2,  this.bs_noise_bands, "bs_noise_bands"); 
		}

		if (bs_header_extra_2)
		{
			boxSize += stream.WriteBits(2,  this.bs_limiter_bands, "bs_limiter_bands"); 
			boxSize += stream.WriteBits(2,  this.bs_limiter_gains, "bs_limiter_gains"); 
			boxSize += stream.WriteBit( this.bs_interpol_freq, "bs_interpol_freq"); 
			boxSize += stream.WriteBit( this.bs_smoothing_mode, "bs_smoothing_mode"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 1; // bs_amp_res
		boxSize += 4; // bs_start_freq
		boxSize += 4; // bs_stop_freq
		boxSize += 3; // bs_xover_band
		boxSize += 2; // bs_reserved
		boxSize += 1; // bs_header_extra_1
		boxSize += 1; // bs_header_extra_2

		if (bs_header_extra_1)
		{
			boxSize += 2; // bs_freq_scale
			boxSize += 1; // bs_alter_scale
			boxSize += 2; // bs_noise_bands
		}

		if (bs_header_extra_2)
		{
			boxSize += 2; // bs_limiter_bands
			boxSize += 2; // bs_limiter_gains
			boxSize += 1; // bs_interpol_freq
			boxSize += 1; // bs_smoothing_mode
		}
		return boxSize;
	}
}


/*
class ErrorProtectionSpecificConfig()
{
  uimsbf(8) number_of_predefined_set;
  uimsbf(2) interleave_type;
  uimsbf(3) bit_stuffing;
  uimsbf(3) number_of_concatenated_frame;
  for (i = 0; i < number_of_predefined_set; i++) {
    uimsbf(6) number_of_class[i];
    for (j = 0; j < number_of_class[i]; j++) {
      uimsbf(1) length_escape[i][j];
      uimsbf(1) rate_escape[i][j];
      uimsbf(1) crclen_escape[i][j];
      if (number_of_concatenated_frame != 1) {
        uimsbf(1) concatenate_flag[i][j];
      }
      uimsbf(2) fec_type[i][j];
      if (fec_type[i][j] == 0) {
        uimsbf(1) termination_switch[i][j];
      }
      if (interleave_type == 2) {
        uimsbf(2) interleave_switch[i][j];
      }
      uimsbf(1) class_optional;
      if (length_escape[i][j] == 1) { /* ESC *//*
        uimsbf(4) number_of_bits_for_length[i][j];
      }
      else {
        uimsbf(16) class_length[i][j];
      }
      if (rate_escape[i][j] != 1) { /* not ESC *//*
        if (fec_type[i][j] != 0) {
          uimsbf(7) class_rate[i][j];
        } else {
          uimsbf(5) class_rate[i][j];
        }
      }
      if (crclen_escape[i][j] != 1) {  /* not ESC *//*
        uimsbf(5) class_crclen[i][j];
      }
    }
    uimsbf(1) class_reordered_output;
    if (class_reordered_output == 1) {
      for (j = 0; j < number_of_class[i]; j++) {
        uimsbf(6) class_output_order[i][j];
      }
    }
  }
  uimsbf(1) header_protection;
  if (header_protection == 1) {
    uimsbf(5) header_rate;
    uimsbf(5) header_crclen;
  }
}

*/
public partial class ErrorProtectionSpecificConfig : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "ErrorProtectionSpecificConfig"; } }

	protected byte number_of_predefined_set; 
	public byte NumberOfPredefinedSet { get { return this.number_of_predefined_set; } set { this.number_of_predefined_set = value; } }

	protected byte interleave_type; 
	public byte InterleaveType { get { return this.interleave_type; } set { this.interleave_type = value; } }

	protected byte bit_stuffing; 
	public byte BitStuffing { get { return this.bit_stuffing; } set { this.bit_stuffing = value; } }

	protected byte number_of_concatenated_frame; 
	public byte NumberOfConcatenatedFrame { get { return this.number_of_concatenated_frame; } set { this.number_of_concatenated_frame = value; } }

	protected byte[] number_of_class; 
	public byte[] NumberOfClass { get { return this.number_of_class; } set { this.number_of_class = value; } }

	protected bool[][] length_escape; 
	public bool[][] LengthEscape { get { return this.length_escape; } set { this.length_escape = value; } }

	protected bool[][] rate_escape; 
	public bool[][] RateEscape { get { return this.rate_escape; } set { this.rate_escape = value; } }

	protected bool[][] crclen_escape; 
	public bool[][] CrclenEscape { get { return this.crclen_escape; } set { this.crclen_escape = value; } }

	protected bool[][] concatenate_flag; 
	public bool[][] ConcatenateFlag { get { return this.concatenate_flag; } set { this.concatenate_flag = value; } }

	protected byte[][] fec_type; 
	public byte[][] FecType { get { return this.fec_type; } set { this.fec_type = value; } }

	protected bool[][] termination_switch; 
	public bool[][] TerminationSwitch { get { return this.termination_switch; } set { this.termination_switch = value; } }

	protected byte[][] interleave_switch; 
	public byte[][] InterleaveSwitch { get { return this.interleave_switch; } set { this.interleave_switch = value; } }

	protected bool[][] class_optional; 
	public bool[][] ClassOptional { get { return this.class_optional; } set { this.class_optional = value; } }

	protected byte[][] number_of_bits_for_length; 
	public byte[][] NumberOfBitsForLength { get { return this.number_of_bits_for_length; } set { this.number_of_bits_for_length = value; } }

	protected ushort[][] class_length; 
	public ushort[][] ClassLength { get { return this.class_length; } set { this.class_length = value; } }

	protected byte[][] class_rate; 
	public byte[][] ClassRate { get { return this.class_rate; } set { this.class_rate = value; } }

	protected byte[][] class_crclen; 
	public byte[][] ClassCrclen { get { return this.class_crclen; } set { this.class_crclen = value; } }

	protected bool[] class_reordered_output; 
	public bool[] ClassReorderedOutput { get { return this.class_reordered_output; } set { this.class_reordered_output = value; } }

	protected byte[][] class_output_order; 
	public byte[][] ClassOutputOrder { get { return this.class_output_order; } set { this.class_output_order = value; } }

	protected bool header_protection; 
	public bool HeaderProtection { get { return this.header_protection; } set { this.header_protection = value; } }

	protected byte header_rate; 
	public byte HeaderRate { get { return this.header_rate; } set { this.header_rate = value; } }

	protected byte header_crclen; 
	public byte HeaderCrclen { get { return this.header_crclen; } set { this.header_crclen = value; } }

	public ErrorProtectionSpecificConfig(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.number_of_predefined_set, "number_of_predefined_set"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.interleave_type, "interleave_type"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.bit_stuffing, "bit_stuffing"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.number_of_concatenated_frame, "number_of_concatenated_frame"); 

		this.number_of_class = new byte[IsoStream.GetInt( number_of_predefined_set)];
		this.length_escape = new bool[IsoStream.GetInt( number_of_predefined_set)][];
		this.rate_escape = new bool[IsoStream.GetInt( number_of_predefined_set)][];
		this.crclen_escape = new bool[IsoStream.GetInt( number_of_predefined_set)][];
		this.concatenate_flag = new bool[IsoStream.GetInt( number_of_predefined_set)][];
		this.fec_type = new byte[IsoStream.GetInt( number_of_predefined_set)][];
		this.termination_switch = new bool[IsoStream.GetInt( number_of_predefined_set)][];
		this.interleave_switch = new byte[IsoStream.GetInt( number_of_predefined_set)][];
		this.class_optional = new bool[IsoStream.GetInt( number_of_predefined_set)][];
		this.number_of_bits_for_length = new byte[IsoStream.GetInt( number_of_predefined_set)][];
		this.class_length = new ushort[IsoStream.GetInt( number_of_predefined_set)][];
		this.class_rate = new byte[IsoStream.GetInt( number_of_predefined_set)][];
		this.class_crclen = new byte[IsoStream.GetInt( number_of_predefined_set)][];
		this.class_reordered_output = new bool[IsoStream.GetInt( number_of_predefined_set)];
		this.class_output_order = new byte[IsoStream.GetInt( number_of_predefined_set)][];
		for (int i = 0; i < number_of_predefined_set; i++)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.number_of_class[i], "number_of_class"); 

			this.length_escape[i] = new bool[IsoStream.GetInt( number_of_class[i])];
			this.rate_escape[i] = new bool[IsoStream.GetInt( number_of_class[i])];
			this.crclen_escape[i] = new bool[IsoStream.GetInt( number_of_class[i])];
			this.concatenate_flag[i] = new bool[IsoStream.GetInt( number_of_class[i])];
			this.fec_type[i] = new byte[IsoStream.GetInt( number_of_class[i])];
			this.termination_switch[i] = new bool[IsoStream.GetInt( number_of_class[i])];
			this.interleave_switch[i] = new byte[IsoStream.GetInt( number_of_class[i])];
			this.class_optional[i] = new bool[IsoStream.GetInt( number_of_class[i])];
			this.number_of_bits_for_length[i] = new byte[IsoStream.GetInt( number_of_class[i])];
			this.class_length[i] = new ushort[IsoStream.GetInt( number_of_class[i])];
			this.class_rate[i] = new byte[IsoStream.GetInt( number_of_class[i])];
			this.class_crclen[i] = new byte[IsoStream.GetInt( number_of_class[i])];
			for (int j = 0; j < number_of_class[i]; j++)
			{
				boxSize += stream.ReadBit(boxSize, readSize,  out this.length_escape[i][j], "length_escape"); 
				boxSize += stream.ReadBit(boxSize, readSize,  out this.rate_escape[i][j], "rate_escape"); 
				boxSize += stream.ReadBit(boxSize, readSize,  out this.crclen_escape[i][j], "crclen_escape"); 

				if (number_of_concatenated_frame != 1)
				{
					boxSize += stream.ReadBit(boxSize, readSize,  out this.concatenate_flag[i][j], "concatenate_flag"); 
				}
				boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.fec_type[i][j], "fec_type"); 

				if (fec_type[i][j] == 0)
				{
					boxSize += stream.ReadBit(boxSize, readSize,  out this.termination_switch[i][j], "termination_switch"); 
				}

				if (interleave_type == 2)
				{
					boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.interleave_switch[i][j], "interleave_switch"); 
				}
				boxSize += stream.ReadBit(boxSize, readSize,  out this.class_optional[i][j], "class_optional"); 

				if (length_escape[i][j] == true)
				{
					/*  ESC  */
					boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.number_of_bits_for_length[i][j], "number_of_bits_for_length"); 
				}

				else 
				{
					boxSize += stream.ReadUInt16(boxSize, readSize,  out this.class_length[i][j], "class_length"); 
				}

				if (rate_escape[i][j] != true)
				{
					/*  not ESC  */

					if (fec_type[i][j] != 0)
					{
						boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.class_rate[i][j], "class_rate"); 
					}

					else 
					{
						boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.class_rate[i][j], "class_rate"); 
					}
				}

				if (crclen_escape[i][j] != true)
				{
					/*  not ESC  */
					boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.class_crclen[i][j], "class_crclen"); 
				}
			}
			boxSize += stream.ReadBit(boxSize, readSize,  out this.class_reordered_output[i], "class_reordered_output"); 

			if (class_reordered_output[i] == true)
			{

				this.class_output_order[i] = new byte[IsoStream.GetInt( number_of_class[i])];
				for (int j = 0; j < number_of_class[i]; j++)
				{
					boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.class_output_order[i][j], "class_output_order"); 
				}
			}
		}
		boxSize += stream.ReadBit(boxSize, readSize,  out this.header_protection, "header_protection"); 

		if (header_protection == true)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.header_rate, "header_rate"); 
			boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.header_crclen, "header_crclen"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt8( this.number_of_predefined_set, "number_of_predefined_set"); 
		boxSize += stream.WriteBits(2,  this.interleave_type, "interleave_type"); 
		boxSize += stream.WriteBits(3,  this.bit_stuffing, "bit_stuffing"); 
		boxSize += stream.WriteBits(3,  this.number_of_concatenated_frame, "number_of_concatenated_frame"); 

		for (int i = 0; i < number_of_predefined_set; i++)
		{
			boxSize += stream.WriteBits(6,  this.number_of_class[i], "number_of_class"); 

			for (int j = 0; j < number_of_class[i]; j++)
			{
				boxSize += stream.WriteBit( this.length_escape[i][j], "length_escape"); 
				boxSize += stream.WriteBit( this.rate_escape[i][j], "rate_escape"); 
				boxSize += stream.WriteBit( this.crclen_escape[i][j], "crclen_escape"); 

				if (number_of_concatenated_frame != 1)
				{
					boxSize += stream.WriteBit( this.concatenate_flag[i][j], "concatenate_flag"); 
				}
				boxSize += stream.WriteBits(2,  this.fec_type[i][j], "fec_type"); 

				if (fec_type[i][j] == 0)
				{
					boxSize += stream.WriteBit( this.termination_switch[i][j], "termination_switch"); 
				}

				if (interleave_type == 2)
				{
					boxSize += stream.WriteBits(2,  this.interleave_switch[i][j], "interleave_switch"); 
				}
				boxSize += stream.WriteBit( this.class_optional[i][j], "class_optional"); 

				if (length_escape[i][j] == true)
				{
					/*  ESC  */
					boxSize += stream.WriteBits(4,  this.number_of_bits_for_length[i][j], "number_of_bits_for_length"); 
				}

				else 
				{
					boxSize += stream.WriteUInt16( this.class_length[i][j], "class_length"); 
				}

				if (rate_escape[i][j] != true)
				{
					/*  not ESC  */

					if (fec_type[i][j] != 0)
					{
						boxSize += stream.WriteBits(7,  this.class_rate[i][j], "class_rate"); 
					}

					else 
					{
						boxSize += stream.WriteBits(5,  this.class_rate[i][j], "class_rate"); 
					}
				}

				if (crclen_escape[i][j] != true)
				{
					/*  not ESC  */
					boxSize += stream.WriteBits(5,  this.class_crclen[i][j], "class_crclen"); 
				}
			}
			boxSize += stream.WriteBit( this.class_reordered_output[i], "class_reordered_output"); 

			if (class_reordered_output[i] == true)
			{

				for (int j = 0; j < number_of_class[i]; j++)
				{
					boxSize += stream.WriteBits(6,  this.class_output_order[i][j], "class_output_order"); 
				}
			}
		}
		boxSize += stream.WriteBit( this.header_protection, "header_protection"); 

		if (header_protection == true)
		{
			boxSize += stream.WriteBits(5,  this.header_rate, "header_rate"); 
			boxSize += stream.WriteBits(5,  this.header_crclen, "header_crclen"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 8; // number_of_predefined_set
		boxSize += 2; // interleave_type
		boxSize += 3; // bit_stuffing
		boxSize += 3; // number_of_concatenated_frame

		for (int i = 0; i < number_of_predefined_set; i++)
		{
			boxSize += 6; // number_of_class

			for (int j = 0; j < number_of_class[i]; j++)
			{
				boxSize += 1; // length_escape
				boxSize += 1; // rate_escape
				boxSize += 1; // crclen_escape

				if (number_of_concatenated_frame != 1)
				{
					boxSize += 1; // concatenate_flag
				}
				boxSize += 2; // fec_type

				if (fec_type[i][j] == 0)
				{
					boxSize += 1; // termination_switch
				}

				if (interleave_type == 2)
				{
					boxSize += 2; // interleave_switch
				}
				boxSize += 1; // class_optional

				if (length_escape[i][j] == true)
				{
					/*  ESC  */
					boxSize += 4; // number_of_bits_for_length
				}

				else 
				{
					boxSize += 16; // class_length
				}

				if (rate_escape[i][j] != true)
				{
					/*  not ESC  */

					if (fec_type[i][j] != 0)
					{
						boxSize += 7; // class_rate
					}

					else 
					{
						boxSize += 5; // class_rate
					}
				}

				if (crclen_escape[i][j] != true)
				{
					/*  not ESC  */
					boxSize += 5; // class_crclen
				}
			}
			boxSize += 1; // class_reordered_output

			if (class_reordered_output[i] == true)
			{

				for (int j = 0; j < number_of_class[i]; j++)
				{
					boxSize += 6; // class_output_order
				}
			}
		}
		boxSize += 1; // header_protection

		if (header_protection == true)
		{
			boxSize += 5; // header_rate
			boxSize += 5; // header_crclen
		}
		return boxSize;
	}
}


/*
class WebVTTConfigurationBox extends Box('vttC') {
	boxstring	config;
}
*/
public partial class WebVTTConfigurationBox : Box
{
	public const string TYPE = "vttC";
	public override string DisplayName { get { return "WebVTTConfigurationBox"; } }

	protected BinaryUTF8String config; 
	public BinaryUTF8String Config { get { return this.config; } set { this.config = value; } }

	public WebVTTConfigurationBox(): base(IsoStream.FromFourCC("vttC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.config, "config"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.config, "config"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(config); // config
		return boxSize;
	}
}


/*
class WebVTTSourceLabelBox extends Box('vlab') {
	boxstring	source_label;
}
*/
public partial class WebVTTSourceLabelBox : Box
{
	public const string TYPE = "vlab";
	public override string DisplayName { get { return "WebVTTSourceLabelBox"; } }

	protected BinaryUTF8String source_label; 
	public BinaryUTF8String SourceLabel { get { return this.source_label; } set { this.source_label = value; } }

	public WebVTTSourceLabelBox(): base(IsoStream.FromFourCC("vlab"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.source_label, "source_label"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.source_label, "source_label"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(source_label); // source_label
		return boxSize;
	}
}


/*
class WVTTSampleEntry() extends PlainTextSampleEntry ('wvtt'){
	WebVTTConfigurationBox	config;
	WebVTTSourceLabelBox		label;	// recommended
	BitRateBox (); 					// optional
}
*/
public partial class WVTTSampleEntry : PlainTextSampleEntry
{
	public const string TYPE = "wvtt";
	public override string DisplayName { get { return "WVTTSampleEntry"; } }
	public WebVTTConfigurationBox Config { get { return this.children.OfType<WebVTTConfigurationBox>().FirstOrDefault(); } }
	public WebVTTSourceLabelBox Label { get { return this.children.OfType<WebVTTSourceLabelBox>().FirstOrDefault(); } }
	public BitRateBox _BitRateBox { get { return this.children.OfType<BitRateBox>().FirstOrDefault(); } }

	public WVTTSampleEntry(): base(IsoStream.FromFourCC("wvtt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.label, "label"); // recommended
		// if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadBox(boxSize, readSize, this,  out this.BitRateBox, "BitRateBox"); // optional
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		// boxSize += stream.WriteBox( this.label, "label"); // recommended
		// boxSize += stream.WriteBox( this.BitRateBox, "BitRateBox"); // optional
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		// boxSize += IsoStream.CalculateBoxSize(label); // label
		// boxSize += IsoStream.CalculateBoxSize(BitRateBox); // BitRateBox
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class CueSourceIDBox() extends Box ('vsid') {
 unsigned int(32) sourceID; 
 }
*/
public partial class CueSourceIDBox : Box
{
	public const string TYPE = "vsid";
	public override string DisplayName { get { return "CueSourceIDBox"; } }

	protected uint sourceID; 
	public uint SourceID { get { return this.sourceID; } set { this.sourceID = value; } }

	public CueSourceIDBox(): base(IsoStream.FromFourCC("vsid"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sourceID, "sourceID"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.sourceID, "sourceID"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // sourceID
		return boxSize;
	}
}


/*
class CueTimeBox() extends Box ('ctim') {
 boxstring cueCurrentTime; 
 }
*/
public partial class CueTimeBox : Box
{
	public const string TYPE = "ctim";
	public override string DisplayName { get { return "CueTimeBox"; } }

	protected BinaryUTF8String cueCurrentTime; 
	public BinaryUTF8String CueCurrentTime { get { return this.cueCurrentTime; } set { this.cueCurrentTime = value; } }

	public CueTimeBox(): base(IsoStream.FromFourCC("ctim"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.cueCurrentTime, "cueCurrentTime"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.cueCurrentTime, "cueCurrentTime"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(cueCurrentTime); // cueCurrentTime
		return boxSize;
	}
}


/*
class CueIDBox() extends Box ('iden') {
 boxstring cueID; 
 }
*/
public partial class CueIDBox : Box
{
	public const string TYPE = "iden";
	public override string DisplayName { get { return "CueIDBox"; } }

	protected BinaryUTF8String cueID; 
	public BinaryUTF8String CueID { get { return this.cueID; } set { this.cueID = value; } }

	public CueIDBox(): base(IsoStream.FromFourCC("iden"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.cueID, "cueID"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.cueID, "cueID"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(cueID); // cueID
		return boxSize;
	}
}


/*
class CueSettingsBox() extends Box ('sttg') {
 boxstring settings; 
 }
*/
public partial class CueSettingsBox : Box
{
	public const string TYPE = "sttg";
	public override string DisplayName { get { return "CueSettingsBox"; } }

	protected BinaryUTF8String settings; 
	public BinaryUTF8String Settings { get { return this.settings; } set { this.settings = value; } }

	public CueSettingsBox(): base(IsoStream.FromFourCC("sttg"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.settings, "settings"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.settings, "settings"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(settings); // settings
		return boxSize;
	}
}


/*
class CuePayloadBox() extends Box ('payl') {
 boxstring cueText; 
 }
*/
public partial class CuePayloadBox : Box
{
	public const string TYPE = "payl";
	public override string DisplayName { get { return "CuePayloadBox"; } }

	protected BinaryUTF8String cueText; 
	public BinaryUTF8String CueText { get { return this.cueText; } set { this.cueText = value; } }

	public CuePayloadBox(): base(IsoStream.FromFourCC("payl"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.cueText, "cueText"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.cueText, "cueText"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(cueText); // cueText
		return boxSize;
	}
}


/*
class VTTEmptyBox() extends Box ('vtte') { }
*/
public partial class VTTEmptyBox : Box
{
	public const string TYPE = "vtte";
	public override string DisplayName { get { return "VTTEmptyBox"; } }

	public VTTEmptyBox(): base(IsoStream.FromFourCC("vtte"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
class VTTAdditionalBox() extends Box ('vtta') {
 boxstring cueAdditionalText; 
 }
*/
public partial class VTTAdditionalBox : Box
{
	public const string TYPE = "vtta";
	public override string DisplayName { get { return "VTTAdditionalBox"; } }

	protected BinaryUTF8String cueAdditionalText; 
	public BinaryUTF8String CueAdditionalText { get { return this.cueAdditionalText; } set { this.cueAdditionalText = value; } }

	public VTTAdditionalBox(): base(IsoStream.FromFourCC("vtta"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.cueAdditionalText, "cueAdditionalText"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.cueAdditionalText, "cueAdditionalText"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(cueAdditionalText); // cueAdditionalText
		return boxSize;
	}
}


/*
aligned(8) class AuxiliaryTypeInfoBox extends FullBox ('auxi', 0, 0)
{
	string aux_track_type;
}
*/
public partial class AuxiliaryTypeInfoBox : FullBox
{
	public const string TYPE = "auxi";
	public override string DisplayName { get { return "AuxiliaryTypeInfoBox"; } }

	protected BinaryUTF8String aux_track_type; 
	public BinaryUTF8String AuxTrackType { get { return this.aux_track_type; } set { this.aux_track_type = value; } }

	public AuxiliaryTypeInfoBox(): base(IsoStream.FromFourCC("auxi"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.aux_track_type, "aux_track_type"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.aux_track_type, "aux_track_type"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(aux_track_type); // aux_track_type
		return boxSize;
	}
}


/*
class CodingConstraintsBox extends FullBox('ccst', version = 0, flags = 0){
	unsigned int(1) all_ref_pics_intra;
	unsigned int(1) intra_pred_used;
	unsigned int(4) max_ref_per_pic;
	unsigned int(26) reserved;
}

*/
public partial class CodingConstraintsBox : FullBox
{
	public const string TYPE = "ccst";
	public override string DisplayName { get { return "CodingConstraintsBox"; } }

	protected bool all_ref_pics_intra; 
	public bool AllRefPicsIntra { get { return this.all_ref_pics_intra; } set { this.all_ref_pics_intra = value; } }

	protected bool intra_pred_used; 
	public bool IntraPredUsed { get { return this.intra_pred_used; } set { this.intra_pred_used = value; } }

	protected byte max_ref_per_pic; 
	public byte MaxRefPerPic { get { return this.max_ref_per_pic; } set { this.max_ref_per_pic = value; } }

	protected uint reserved; 
	public uint Reserved { get { return this.reserved; } set { this.reserved = value; } }

	public CodingConstraintsBox(): base(IsoStream.FromFourCC("ccst"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.all_ref_pics_intra, "all_ref_pics_intra"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.intra_pred_used, "intra_pred_used"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.max_ref_per_pic, "max_ref_per_pic"); 
		boxSize += stream.ReadBits(boxSize, readSize, 26,  out this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.all_ref_pics_intra, "all_ref_pics_intra"); 
		boxSize += stream.WriteBit( this.intra_pred_used, "intra_pred_used"); 
		boxSize += stream.WriteBits(4,  this.max_ref_per_pic, "max_ref_per_pic"); 
		boxSize += stream.WriteBits(26,  this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // all_ref_pics_intra
		boxSize += 1; // intra_pred_used
		boxSize += 4; // max_ref_per_pic
		boxSize += 26; // reserved
		return boxSize;
	}
}


/*
aligned(8) class MD5IntegrityBox()
extends FullBox('md5i', version = 0, flags) {
	unsigned int(8)[16] input_MD5;
	unsigned int(32) input_4cc;
	if (input_4cc == 'sgpd') {
		unsigned int(32) grouping_type;
		if (flags&1)
			unsigned int(32) grouping_type_parameter;
		unsigned int(32) num_entries;
		for(i=0; i<num_entries; i++) {
			unsigned int(32) group_description_index[i];
		}
	}
}
*/
public partial class MD5IntegrityBox : FullBox
{
	public const string TYPE = "md5i";
	public override string DisplayName { get { return "MD5IntegrityBox"; } }

	protected byte[] input_MD5; 
	public byte[] InputMD5 { get { return this.input_MD5; } set { this.input_MD5 = value; } }

	protected uint input_4cc; 
	public uint Input4cc { get { return this.input_4cc; } set { this.input_4cc = value; } }

	protected uint grouping_type; 
	public uint GroupingType { get { return this.grouping_type; } set { this.grouping_type = value; } }

	protected uint grouping_type_parameter; 
	public uint GroupingTypeParameter { get { return this.grouping_type_parameter; } set { this.grouping_type_parameter = value; } }

	protected uint num_entries; 
	public uint NumEntries { get { return this.num_entries; } set { this.num_entries = value; } }

	protected uint[] group_description_index; 
	public uint[] GroupDescriptionIndex { get { return this.group_description_index; } set { this.group_description_index = value; } }

	public MD5IntegrityBox(uint flags = 0): base(IsoStream.FromFourCC("md5i"), 0, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 16,  out this.input_MD5, "input_MD5"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.input_4cc, "input_4cc"); 

		if (input_4cc == IsoStream.FromFourCC("sgpd"))
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.grouping_type, "grouping_type"); 

			if ((flags & 1) == 1)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.grouping_type_parameter, "grouping_type_parameter"); 
			}
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.num_entries, "num_entries"); 

			this.group_description_index = new uint[IsoStream.GetInt(num_entries)];
			for (int i=0; i<num_entries; i++)
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.group_description_index[i], "group_description_index"); 
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8Array(16,  this.input_MD5, "input_MD5"); 
		boxSize += stream.WriteUInt32( this.input_4cc, "input_4cc"); 

		if (input_4cc == IsoStream.FromFourCC("sgpd"))
		{
			boxSize += stream.WriteUInt32( this.grouping_type, "grouping_type"); 

			if ((flags & 1) == 1)
			{
				boxSize += stream.WriteUInt32( this.grouping_type_parameter, "grouping_type_parameter"); 
			}
			boxSize += stream.WriteUInt32( this.num_entries, "num_entries"); 

			for (int i=0; i<num_entries; i++)
			{
				boxSize += stream.WriteUInt32( this.group_description_index[i], "group_description_index"); 
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16 * 8; // input_MD5
		boxSize += 32; // input_4cc

		if (input_4cc == IsoStream.FromFourCC("sgpd"))
		{
			boxSize += 32; // grouping_type

			if ((flags & 1) == 1)
			{
				boxSize += 32; // grouping_type_parameter
			}
			boxSize += 32; // num_entries

			for (int i=0; i<num_entries; i++)
			{
				boxSize += 32; // group_description_index
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class AuxiliaryTypeProperty
extends ItemFullProperty('auxC', version = 0, flags) {
	string aux_type;
	template unsigned int(8) aux_subtype[];
		// until the end of the box, the semantics depend on the aux_type value
}
*/
public partial class AuxiliaryTypeProperty : ItemFullProperty
{
	public const string TYPE = "auxC";
	public override string DisplayName { get { return "AuxiliaryTypeProperty"; } }

	protected BinaryUTF8String aux_type; 
	public BinaryUTF8String AuxType { get { return this.aux_type; } set { this.aux_type = value; } }

	protected byte[] aux_subtype;  //  until the end of the box, the semantics depend on the aux_type value
	public byte[] AuxSubtype { get { return this.aux_subtype; } set { this.aux_subtype = value; } }

	public AuxiliaryTypeProperty(uint flags = 0): base(IsoStream.FromFourCC("auxC"), 0, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.aux_type, "aux_type"); 
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.aux_subtype, "aux_subtype"); // until the end of the box, the semantics depend on the aux_type value
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.aux_type, "aux_type"); 
		boxSize += stream.WriteUInt8ArrayTillEnd( this.aux_subtype, "aux_subtype"); // until the end of the box, the semantics depend on the aux_type value
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(aux_type); // aux_type
		boxSize += ((ulong)aux_subtype.Length * 8); // aux_subtype
		return boxSize;
	}
}


/*
aligned(8) class ImageMirror
extends ItemProperty('imir') {
	unsigned int(7) reserved = 0;
	unsigned int(1) axis;
}
*/
public partial class ImageMirror : ItemProperty
{
	public const string TYPE = "imir";
	public override string DisplayName { get { return "ImageMirror"; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected bool axis; 
	public bool Axis { get { return this.axis; } set { this.axis = value; } }

	public ImageMirror(): base(IsoStream.FromFourCC("imir"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.axis, "axis"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(7,  this.reserved, "reserved"); 
		boxSize += stream.WriteBit( this.axis, "axis"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 7; // reserved
		boxSize += 1; // axis
		return boxSize;
	}
}


/*
aligned(8) class ImageRotation
extends ItemProperty('irot') {
	unsigned int(6) reserved = 0;
	unsigned int(2) angle;
}
*/
public partial class ImageRotation : ItemProperty
{
	public const string TYPE = "irot";
	public override string DisplayName { get { return "ImageRotation"; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte angle; 
	public byte Angle { get { return this.angle; } set { this.angle = value; } }

	public ImageRotation(): base(IsoStream.FromFourCC("irot"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.angle, "angle"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(6,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(2,  this.angle, "angle"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 6; // reserved
		boxSize += 2; // angle
		return boxSize;
	}
}


/*
aligned(8) class ImageSpatialExtentsProperty
extends ItemFullProperty('ispe', version = 0, flags = 0) {
	unsigned int(32) image_width;
	unsigned int(32) image_height;
}

*/
public partial class ImageSpatialExtentsProperty : ItemFullProperty
{
	public const string TYPE = "ispe";
	public override string DisplayName { get { return "ImageSpatialExtentsProperty"; } }

	protected uint image_width; 
	public uint ImageWidth { get { return this.image_width; } set { this.image_width = value; } }

	protected uint image_height; 
	public uint ImageHeight { get { return this.image_height; } set { this.image_height = value; } }

	public ImageSpatialExtentsProperty(): base(IsoStream.FromFourCC("ispe"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.image_width, "image_width"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.image_height, "image_height"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.image_width, "image_width"); 
		boxSize += stream.WriteUInt32( this.image_height, "image_height"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // image_width
		boxSize += 32; // image_height
		return boxSize;
	}
}


/*
class JPEGConfigurationBox extends Box('jpgC') {
	unsigned int(8) JPEGprefix[];
}
*/
public partial class JPEGConfigurationBox : Box
{
	public const string TYPE = "jpgC";
	public override string DisplayName { get { return "JPEGConfigurationBox"; } }

	protected byte[] JPEGprefix; 
	public byte[] _JPEGprefix { get { return this.JPEGprefix; } set { this.JPEGprefix = value; } }

	public JPEGConfigurationBox(): base(IsoStream.FromFourCC("jpgC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.JPEGprefix, "JPEGprefix"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.JPEGprefix, "JPEGprefix"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)JPEGprefix.Length * 8); // JPEGprefix
		return boxSize;
	}
}


/*
aligned(8) class LayerSelectorProperty
extends ItemProperty('lsel') {
	unsigned int(16) layer_id;
}
*/
public partial class LayerSelectorProperty : ItemProperty
{
	public const string TYPE = "lsel";
	public override string DisplayName { get { return "LayerSelectorProperty"; } }

	protected ushort layer_id; 
	public ushort LayerId { get { return this.layer_id; } set { this.layer_id = value; } }

	public LayerSelectorProperty(): base(IsoStream.FromFourCC("lsel"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.layer_id, "layer_id"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.layer_id, "layer_id"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // layer_id
		return boxSize;
	}
}


/*
aligned(8) class OperatingPointsInformationProperty
extends ItemFullProperty('oinf', version = 0, flags = 0){
	OperatingPointsRecord op_info; // specified in ISO/IEC 14496-15
}
*/
public partial class OperatingPointsInformationProperty : ItemFullProperty
{
	public const string TYPE = "oinf";
	public override string DisplayName { get { return "OperatingPointsInformationProperty"; } }

	protected OperatingPointsRecord op_info;  //  specified in ISO/IEC 14496-15
	public OperatingPointsRecord OpInfo { get { return this.op_info; } set { this.op_info = value; } }

	public OperatingPointsInformationProperty(): base(IsoStream.FromFourCC("oinf"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new OperatingPointsRecord(),  out this.op_info, "op_info"); // specified in ISO/IEC 14496-15
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.op_info, "op_info"); // specified in ISO/IEC 14496-15
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(op_info); // op_info
		return boxSize;
	}
}


/*
aligned(8) class PixelInformationProperty
extends ItemFullProperty('pixi', version = 0, flags = 0){
	unsigned int(8) num_channels;
	for (i=0; i<num_channels; i++) {
		unsigned int(8) bits_per_channel;
	}
}
*/
public partial class PixelInformationProperty : ItemFullProperty
{
	public const string TYPE = "pixi";
	public override string DisplayName { get { return "PixelInformationProperty"; } }

	protected byte num_channels; 
	public byte NumChannels { get { return this.num_channels; } set { this.num_channels = value; } }

	protected byte[] bits_per_channel; 
	public byte[] BitsPerChannel { get { return this.bits_per_channel; } set { this.bits_per_channel = value; } }

	public PixelInformationProperty(): base(IsoStream.FromFourCC("pixi"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.num_channels, "num_channels"); 

		this.bits_per_channel = new byte[IsoStream.GetInt(num_channels)];
		for (int i=0; i<num_channels; i++)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.bits_per_channel[i], "bits_per_channel"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.num_channels, "num_channels"); 

		for (int i=0; i<num_channels; i++)
		{
			boxSize += stream.WriteUInt8( this.bits_per_channel[i], "bits_per_channel"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // num_channels

		for (int i=0; i<num_channels; i++)
		{
			boxSize += 8; // bits_per_channel
		}
		return boxSize;
	}
}


/*
aligned(8) class RelativeLocationProperty
extends ItemFullProperty('rloc', version = 0, flags = 0)
{
	unsigned int(32) horizontal_offset;
	unsigned int(32) vertical_offset;
}
*/
public partial class RelativeLocationProperty : ItemFullProperty
{
	public const string TYPE = "rloc";
	public override string DisplayName { get { return "RelativeLocationProperty"; } }

	protected uint horizontal_offset; 
	public uint HorizontalOffset { get { return this.horizontal_offset; } set { this.horizontal_offset = value; } }

	protected uint vertical_offset; 
	public uint VerticalOffset { get { return this.vertical_offset; } set { this.vertical_offset = value; } }

	public RelativeLocationProperty(): base(IsoStream.FromFourCC("rloc"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.horizontal_offset, "horizontal_offset"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.vertical_offset, "vertical_offset"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.horizontal_offset, "horizontal_offset"); 
		boxSize += stream.WriteUInt32( this.vertical_offset, "vertical_offset"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // horizontal_offset
		boxSize += 32; // vertical_offset
		return boxSize;
	}
}


/*
aligned(8) class TargetOlsProperty
extends ItemFullProperty('tols', version = 0, flags = 0){
	unsigned int(16) target_ols_idx;
}
*/
public partial class TargetOlsProperty : ItemFullProperty
{
	public const string TYPE = "tols";
	public override string DisplayName { get { return "TargetOlsProperty"; } }

	protected ushort target_ols_idx; 
	public ushort TargetOlsIdx { get { return this.target_ols_idx; } set { this.target_ols_idx = value; } }

	public TargetOlsProperty(): base(IsoStream.FromFourCC("tols"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.target_ols_idx, "target_ols_idx"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.target_ols_idx, "target_ols_idx"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // target_ols_idx
		return boxSize;
	}
}


/*
aligned(8) class AutoExposureBracketingEntry
extends VisualSampleGroupEntry('aebr') {
	int(8) exposure_step;
	int(8) exposure_numerator;
}
*/
public partial class AutoExposureBracketingEntry : VisualSampleGroupEntry
{
	public const string TYPE = "aebr";
	public override string DisplayName { get { return "AutoExposureBracketingEntry"; } }

	protected sbyte exposure_step; 
	public sbyte ExposureStep { get { return this.exposure_step; } set { this.exposure_step = value; } }

	protected sbyte exposure_numerator; 
	public sbyte ExposureNumerator { get { return this.exposure_numerator; } set { this.exposure_numerator = value; } }

	public AutoExposureBracketingEntry(): base(IsoStream.FromFourCC("aebr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt8(boxSize, readSize,  out this.exposure_step, "exposure_step"); 
		boxSize += stream.ReadInt8(boxSize, readSize,  out this.exposure_numerator, "exposure_numerator"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt8( this.exposure_step, "exposure_step"); 
		boxSize += stream.WriteInt8( this.exposure_numerator, "exposure_numerator"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // exposure_step
		boxSize += 8; // exposure_numerator
		return boxSize;
	}
}


/*
aligned(8) class FlashExposureBracketingEntry
extends VisualSampleGroupEntry('afbr') {
	int(8) flash_exposure_numerator;
	int(8) flash_exposure_denominator;
}
*/
public partial class FlashExposureBracketingEntry : VisualSampleGroupEntry
{
	public const string TYPE = "afbr";
	public override string DisplayName { get { return "FlashExposureBracketingEntry"; } }

	protected sbyte flash_exposure_numerator; 
	public sbyte FlashExposureNumerator { get { return this.flash_exposure_numerator; } set { this.flash_exposure_numerator = value; } }

	protected sbyte flash_exposure_denominator; 
	public sbyte FlashExposureDenominator { get { return this.flash_exposure_denominator; } set { this.flash_exposure_denominator = value; } }

	public FlashExposureBracketingEntry(): base(IsoStream.FromFourCC("afbr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt8(boxSize, readSize,  out this.flash_exposure_numerator, "flash_exposure_numerator"); 
		boxSize += stream.ReadInt8(boxSize, readSize,  out this.flash_exposure_denominator, "flash_exposure_denominator"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt8( this.flash_exposure_numerator, "flash_exposure_numerator"); 
		boxSize += stream.WriteInt8( this.flash_exposure_denominator, "flash_exposure_denominator"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // flash_exposure_numerator
		boxSize += 8; // flash_exposure_denominator
		return boxSize;
	}
}


/*
aligned(8) class AccessibilityTextProperty
extends ItemFullProperty('altt', version = 0, flags = 0) {
	utf8string alt_text;
	utf8string alt_lang;
}

*/
public partial class AccessibilityTextProperty : ItemFullProperty
{
	public const string TYPE = "altt";
	public override string DisplayName { get { return "AccessibilityTextProperty"; } }

	protected BinaryUTF8String alt_text; 
	public BinaryUTF8String AltText { get { return this.alt_text; } set { this.alt_text = value; } }

	protected BinaryUTF8String alt_lang; 
	public BinaryUTF8String AltLang { get { return this.alt_lang; } set { this.alt_lang = value; } }

	public AccessibilityTextProperty(): base(IsoStream.FromFourCC("altt"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.alt_text, "alt_text"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.alt_lang, "alt_lang"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.alt_text, "alt_text"); 
		boxSize += stream.WriteStringZeroTerminated( this.alt_lang, "alt_lang"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(alt_text); // alt_text
		boxSize += IsoStream.CalculateStringSize(alt_lang); // alt_lang
		return boxSize;
	}
}


/*
aligned(8) class CreationTimeProperty
extends ItemFullProperty('crtt', version = 0, flags = 0) {
	unsigned int(64)  creation_time;
}

*/
public partial class CreationTimeProperty : ItemFullProperty
{
	public const string TYPE = "crtt";
	public override string DisplayName { get { return "CreationTimeProperty"; } }

	protected ulong creation_time; 
	public ulong CreationTime { get { return this.creation_time; } set { this.creation_time = value; } }

	public CreationTimeProperty(): base(IsoStream.FromFourCC("crtt"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt64(boxSize, readSize,  out this.creation_time, "creation_time"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt64( this.creation_time, "creation_time"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 64; // creation_time
		return boxSize;
	}
}


/*
aligned(8) class DepthOfFieldBracketingEntry
extends VisualSampleGroupEntry('dobr') {
	int(8) f_stop_numerator;
	int(8) f_stop_denominator;
}
*/
public partial class DepthOfFieldBracketingEntry : VisualSampleGroupEntry
{
	public const string TYPE = "dobr";
	public override string DisplayName { get { return "DepthOfFieldBracketingEntry"; } }

	protected sbyte f_stop_numerator; 
	public sbyte fStopNumerator { get { return this.f_stop_numerator; } set { this.f_stop_numerator = value; } }

	protected sbyte f_stop_denominator; 
	public sbyte fStopDenominator { get { return this.f_stop_denominator; } set { this.f_stop_denominator = value; } }

	public DepthOfFieldBracketingEntry(): base(IsoStream.FromFourCC("dobr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt8(boxSize, readSize,  out this.f_stop_numerator, "f_stop_numerator"); 
		boxSize += stream.ReadInt8(boxSize, readSize,  out this.f_stop_denominator, "f_stop_denominator"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt8( this.f_stop_numerator, "f_stop_numerator"); 
		boxSize += stream.WriteInt8( this.f_stop_denominator, "f_stop_denominator"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // f_stop_numerator
		boxSize += 8; // f_stop_denominator
		return boxSize;
	}
}


/*
aligned(8) class FocusBracketingEntry
extends VisualSampleGroupEntry('fobr') {
	unsigned int(16) focus_distance_numerator;
	unsigned int(16) focus_distance_denominator;
}
*/
public partial class FocusBracketingEntry : VisualSampleGroupEntry
{
	public const string TYPE = "fobr";
	public override string DisplayName { get { return "FocusBracketingEntry"; } }

	protected ushort focus_distance_numerator; 
	public ushort FocusDistanceNumerator { get { return this.focus_distance_numerator; } set { this.focus_distance_numerator = value; } }

	protected ushort focus_distance_denominator; 
	public ushort FocusDistanceDenominator { get { return this.focus_distance_denominator; } set { this.focus_distance_denominator = value; } }

	public FocusBracketingEntry(): base(IsoStream.FromFourCC("fobr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.focus_distance_numerator, "focus_distance_numerator"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.focus_distance_denominator, "focus_distance_denominator"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.focus_distance_numerator, "focus_distance_numerator"); 
		boxSize += stream.WriteUInt16( this.focus_distance_denominator, "focus_distance_denominator"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // focus_distance_numerator
		boxSize += 16; // focus_distance_denominator
		return boxSize;
	}
}


/*
aligned(8) class ImageScaling
extends ItemFullProperty('iscl', version = 0, flags = 0) {
	unsigned int(16) target_width_numerator;
	unsigned int(16) target_width_denominator;
	unsigned int(16) target_height_numerator;
	unsigned int(16) target_height_denominator;
}
*/
public partial class ImageScaling : ItemFullProperty
{
	public const string TYPE = "iscl";
	public override string DisplayName { get { return "ImageScaling"; } }

	protected ushort target_width_numerator; 
	public ushort TargetWidthNumerator { get { return this.target_width_numerator; } set { this.target_width_numerator = value; } }

	protected ushort target_width_denominator; 
	public ushort TargetWidthDenominator { get { return this.target_width_denominator; } set { this.target_width_denominator = value; } }

	protected ushort target_height_numerator; 
	public ushort TargetHeightNumerator { get { return this.target_height_numerator; } set { this.target_height_numerator = value; } }

	protected ushort target_height_denominator; 
	public ushort TargetHeightDenominator { get { return this.target_height_denominator; } set { this.target_height_denominator = value; } }

	public ImageScaling(): base(IsoStream.FromFourCC("iscl"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.target_width_numerator, "target_width_numerator"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.target_width_denominator, "target_width_denominator"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.target_height_numerator, "target_height_numerator"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.target_height_denominator, "target_height_denominator"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.target_width_numerator, "target_width_numerator"); 
		boxSize += stream.WriteUInt16( this.target_width_denominator, "target_width_denominator"); 
		boxSize += stream.WriteUInt16( this.target_height_numerator, "target_height_numerator"); 
		boxSize += stream.WriteUInt16( this.target_height_denominator, "target_height_denominator"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // target_width_numerator
		boxSize += 16; // target_width_denominator
		boxSize += 16; // target_height_numerator
		boxSize += 16; // target_height_denominator
		return boxSize;
	}
}


/*
aligned(8) class ModificationTimeProperty
extends ItemFullProperty('mdft', version = 0, flags = 0) {
	unsigned int(64)  modification_time;
}

*/
public partial class ModificationTimeProperty : ItemFullProperty
{
	public const string TYPE = "mdft";
	public override string DisplayName { get { return "ModificationTimeProperty"; } }

	protected ulong modification_time; 
	public ulong ModificationTime { get { return this.modification_time; } set { this.modification_time = value; } }

	public ModificationTimeProperty(): base(IsoStream.FromFourCC("mdft"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt64(boxSize, readSize,  out this.modification_time, "modification_time"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt64( this.modification_time, "modification_time"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 64; // modification_time
		return boxSize;
	}
}


/*
aligned(8) class PanoramaEntry
extends VisualSampleGroupEntry('pano') {
	unsigned int(16) frame_number;
}

*/
public partial class PanoramaEntry : VisualSampleGroupEntry
{
	public const string TYPE = "pano";
	public override string DisplayName { get { return "PanoramaEntry"; } }

	protected ushort frame_number; 
	public ushort FrameNumber { get { return this.frame_number; } set { this.frame_number = value; } }

	public PanoramaEntry(): base(IsoStream.FromFourCC("pano"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.frame_number, "frame_number"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.frame_number, "frame_number"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // frame_number
		return boxSize;
	}
}


/*
aligned(8) class RequiredReferenceTypesProperty
extends ItemFullProperty('rref', version = 0, flags = 0){
	unsigned int(8) reference_type_count;
	for (i=0; i< reference_type_count; i++) {
		unsigned int(32) reference_type[i];
	}
}
*/
public partial class RequiredReferenceTypesProperty : ItemFullProperty
{
	public const string TYPE = "rref";
	public override string DisplayName { get { return "RequiredReferenceTypesProperty"; } }

	protected byte reference_type_count; 
	public byte ReferenceTypeCount { get { return this.reference_type_count; } set { this.reference_type_count = value; } }

	protected uint[] reference_type; 
	public uint[] ReferenceType { get { return this.reference_type; } set { this.reference_type = value; } }

	public RequiredReferenceTypesProperty(): base(IsoStream.FromFourCC("rref"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.reference_type_count, "reference_type_count"); 

		this.reference_type = new uint[IsoStream.GetInt( reference_type_count)];
		for (int i=0; i< reference_type_count; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.reference_type[i], "reference_type"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.reference_type_count, "reference_type_count"); 

		for (int i=0; i< reference_type_count; i++)
		{
			boxSize += stream.WriteUInt32( this.reference_type[i], "reference_type"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // reference_type_count

		for (int i=0; i< reference_type_count; i++)
		{
			boxSize += 32; // reference_type
		}
		return boxSize;
	}
}


/*
aligned(8) class UserDescriptionProperty
extends ItemFullProperty('udes', version = 0, flags = 0){
	utf8string lang;
	utf8string name;
	utf8string description;
	utf8string tags;
}

*/
public partial class UserDescriptionProperty : ItemFullProperty
{
	public const string TYPE = "udes";
	public override string DisplayName { get { return "UserDescriptionProperty"; } }

	protected BinaryUTF8String lang; 
	public BinaryUTF8String Lang { get { return this.lang; } set { this.lang = value; } }

	protected BinaryUTF8String name; 
	public BinaryUTF8String Name { get { return this.name; } set { this.name = value; } }

	protected BinaryUTF8String description; 
	public BinaryUTF8String Description { get { return this.description; } set { this.description = value; } }

	protected BinaryUTF8String tags; 
	public BinaryUTF8String Tags { get { return this.tags; } set { this.tags = value; } }

	public UserDescriptionProperty(): base(IsoStream.FromFourCC("udes"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.lang, "lang"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.name, "name"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.description, "description"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.tags, "tags"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.lang, "lang"); 
		boxSize += stream.WriteStringZeroTerminated( this.name, "name"); 
		boxSize += stream.WriteStringZeroTerminated( this.description, "description"); 
		boxSize += stream.WriteStringZeroTerminated( this.tags, "tags"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(lang); // lang
		boxSize += IsoStream.CalculateStringSize(name); // name
		boxSize += IsoStream.CalculateStringSize(description); // description
		boxSize += IsoStream.CalculateStringSize(tags); // tags
		return boxSize;
	}
}


/*
aligned(8) class WhiteBalanceBracketingEntry
extends VisualSampleGroupEntry('wbbr') {
	unsigned int(16) blue_amber;
	int(8) green_magenta;
}
*/
public partial class WhiteBalanceBracketingEntry : VisualSampleGroupEntry
{
	public const string TYPE = "wbbr";
	public override string DisplayName { get { return "WhiteBalanceBracketingEntry"; } }

	protected ushort blue_amber; 
	public ushort BlueAmber { get { return this.blue_amber; } set { this.blue_amber = value; } }

	protected sbyte green_magenta; 
	public sbyte GreenMagenta { get { return this.green_magenta; } set { this.green_magenta = value; } }

	public WhiteBalanceBracketingEntry(): base(IsoStream.FromFourCC("wbbr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.blue_amber, "blue_amber"); 
		boxSize += stream.ReadInt8(boxSize, readSize,  out this.green_magenta, "green_magenta"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.blue_amber, "blue_amber"); 
		boxSize += stream.WriteInt8( this.green_magenta, "green_magenta"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // blue_amber
		boxSize += 8; // green_magenta
		return boxSize;
	}
}


/*
class WipeTransitionEffectProperty
extends ItemFullProperty('wipe', version=0, flags=0) {
	unsigned int(8) transition_direction;
}
*/
public partial class WipeTransitionEffectProperty : ItemFullProperty
{
	public const string TYPE = "wipe";
	public override string DisplayName { get { return "WipeTransitionEffectProperty"; } }

	protected byte transition_direction; 
	public byte TransitionDirection { get { return this.transition_direction; } set { this.transition_direction = value; } }

	public WipeTransitionEffectProperty(): base(IsoStream.FromFourCC("wipe"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.transition_direction, "transition_direction"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.transition_direction, "transition_direction"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // transition_direction
		return boxSize;
	}
}


/*
class ZoomTransitionEffectProperty
extends ItemFullProperty('zoom', version=0, flags=0) {
	unsigned int(1) transition_direction; 
	unsigned int(7) transition_shape;
}
*/
public partial class ZoomTransitionEffectProperty : ItemFullProperty
{
	public const string TYPE = "zoom";
	public override string DisplayName { get { return "ZoomTransitionEffectProperty"; } }

	protected bool transition_direction; 
	public bool TransitionDirection { get { return this.transition_direction; } set { this.transition_direction = value; } }

	protected byte transition_shape; 
	public byte TransitionShape { get { return this.transition_shape; } set { this.transition_shape = value; } }

	public ZoomTransitionEffectProperty(): base(IsoStream.FromFourCC("zoom"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.transition_direction, "transition_direction"); 
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.transition_shape, "transition_shape"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.transition_direction, "transition_direction"); 
		boxSize += stream.WriteBits(7,  this.transition_shape, "transition_shape"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // transition_direction
		boxSize += 7; // transition_shape
		return boxSize;
	}
}


/*
class FadeTransitionEffectProperty
extends ItemFullProperty('fade', version=0, flags=0) {
	unsigned int(8) transition_direction;
}
*/
public partial class FadeTransitionEffectProperty : ItemFullProperty
{
	public const string TYPE = "fade";
	public override string DisplayName { get { return "FadeTransitionEffectProperty"; } }

	protected byte transition_direction; 
	public byte TransitionDirection { get { return this.transition_direction; } set { this.transition_direction = value; } }

	public FadeTransitionEffectProperty(): base(IsoStream.FromFourCC("fade"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.transition_direction, "transition_direction"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.transition_direction, "transition_direction"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // transition_direction
		return boxSize;
	}
}


/*
class SplitTransitionEffectProperty
extends ItemFullProperty('splt', version=0, flags=0) {
	unsigned int(8) transition_direction;
}
*/
public partial class SplitTransitionEffectProperty : ItemFullProperty
{
	public const string TYPE = "splt";
	public override string DisplayName { get { return "SplitTransitionEffectProperty"; } }

	protected byte transition_direction; 
	public byte TransitionDirection { get { return this.transition_direction; } set { this.transition_direction = value; } }

	public SplitTransitionEffectProperty(): base(IsoStream.FromFourCC("splt"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.transition_direction, "transition_direction"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.transition_direction, "transition_direction"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // transition_direction
		return boxSize;
	}
}


/*
class SuggestedTransitionPeriodProperty
extends ItemFullProperty('stpe', version=0, flags=0) {
	unsigned int(8) transition_period;
}
*/
public partial class SuggestedTransitionPeriodProperty : ItemFullProperty
{
	public const string TYPE = "stpe";
	public override string DisplayName { get { return "SuggestedTransitionPeriodProperty"; } }

	protected byte transition_period; 
	public byte TransitionPeriod { get { return this.transition_period; } set { this.transition_period = value; } }

	public SuggestedTransitionPeriodProperty(): base(IsoStream.FromFourCC("stpe"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.transition_period, "transition_period"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.transition_period, "transition_period"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // transition_period
		return boxSize;
	}
}


/*
class SuggestedTimeDisplayDurationProperty
extends ItemFullProperty('ssld', version=0, flags=0) {
	unsigned int(16) duration;
}
*/
public partial class SuggestedTimeDisplayDurationProperty : ItemFullProperty
{
	public const string TYPE = "ssld";
	public override string DisplayName { get { return "SuggestedTimeDisplayDurationProperty"; } }

	protected ushort duration; 
	public ushort Duration { get { return this.duration; } set { this.duration = value; } }

	public SuggestedTimeDisplayDurationProperty(): base(IsoStream.FromFourCC("ssld"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.duration, "duration"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.duration, "duration"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // duration
		return boxSize;
	}
}


/*
class MaskConfigurationProperty
extends ItemFullProperty('mskC', version = 0, flags = 0){
	unsigned int(8) bits_per_pixel;
}
*/
public partial class MaskConfigurationProperty : ItemFullProperty
{
	public const string TYPE = "mskC";
	public override string DisplayName { get { return "MaskConfigurationProperty"; } }

	protected byte bits_per_pixel; 
	public byte BitsPerPixel { get { return this.bits_per_pixel; } set { this.bits_per_pixel = value; } }

	public MaskConfigurationProperty(): base(IsoStream.FromFourCC("mskC"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.bits_per_pixel, "bits_per_pixel"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.bits_per_pixel, "bits_per_pixel"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // bits_per_pixel
		return boxSize;
	}
}


/*
class VvcSubpicIDProperty
extends ItemFullProperty('spid', version = 0, flags = 0){
	VvcSubpicIDEntry sid_info; // specified in ISO/IEC 14496-15
}
*/
public partial class VvcSubpicIDProperty : ItemFullProperty
{
	public const string TYPE = "spid";
	public override string DisplayName { get { return "VvcSubpicIDProperty"; } }

	protected VvcSubpicIDEntry sid_info;  //  specified in ISO/IEC 14496-15
	public VvcSubpicIDEntry SidInfo { get { return this.sid_info; } set { this.sid_info = value; } }

	public VvcSubpicIDProperty(): base(IsoStream.FromFourCC("spid"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new VvcSubpicIDEntry(),  out this.sid_info, "sid_info"); // specified in ISO/IEC 14496-15
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.sid_info, "sid_info"); // specified in ISO/IEC 14496-15
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(sid_info); // sid_info
		return boxSize;
	}
}


/*
class VvcSubpicOrderProperty
extends ItemFullProperty('spor', version = 0, flags = 0){
	VvcSubpicOrderEntry sor_info; // specified in ISO/IEC 14496-15
}
*/
public partial class VvcSubpicOrderProperty : ItemFullProperty
{
	public const string TYPE = "spor";
	public override string DisplayName { get { return "VvcSubpicOrderProperty"; } }

	protected VvcSubpicOrderEntry sor_info;  //  specified in ISO/IEC 14496-15
	public VvcSubpicOrderEntry SorInfo { get { return this.sor_info; } set { this.sor_info = value; } }

	public VvcSubpicOrderProperty(): base(IsoStream.FromFourCC("spor"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new VvcSubpicOrderEntry(),  out this.sor_info, "sor_info"); // specified in ISO/IEC 14496-15
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.sor_info, "sor_info"); // specified in ISO/IEC 14496-15
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(sor_info); // sor_info
		return boxSize;
	}
}


/*
class VisualEquivalenceEntry() extends VisualSampleGroupEntry ('eqiv')
{
	signed int(16)   time_offset;
	unsigned int(16) timescale_multiplier;
}
*/
public partial class VisualEquivalenceEntry : VisualSampleGroupEntry
{
	public const string TYPE = "eqiv";
	public override string DisplayName { get { return "VisualEquivalenceEntry"; } }

	protected short time_offset; 
	public short TimeOffset { get { return this.time_offset; } set { this.time_offset = value; } }

	protected ushort timescale_multiplier; 
	public ushort TimescaleMultiplier { get { return this.timescale_multiplier; } set { this.timescale_multiplier = value; } }

	public VisualEquivalenceEntry(): base(IsoStream.FromFourCC("eqiv"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.time_offset, "time_offset"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.timescale_multiplier, "timescale_multiplier"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt16( this.time_offset, "time_offset"); 
		boxSize += stream.WriteUInt16( this.timescale_multiplier, "timescale_multiplier"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // time_offset
		boxSize += 16; // timescale_multiplier
		return boxSize;
	}
}


/*
class DirectReferenceSamplesList()
extends VisualSampleGroupEntry ('refs') {
	unsigned int(32) sample_id;
	unsigned int(8) num_direct_reference_samples;
	for(i = 0; i < num_direct_reference_samples; i++) {
		unsigned int(32)direct_reference_sample_id;
	}
}
*/
public partial class DirectReferenceSamplesList : VisualSampleGroupEntry
{
	public const string TYPE = "refs";
	public override string DisplayName { get { return "DirectReferenceSamplesList"; } }

	protected uint sample_id; 
	public uint SampleId { get { return this.sample_id; } set { this.sample_id = value; } }

	protected byte num_direct_reference_samples; 
	public byte NumDirectReferenceSamples { get { return this.num_direct_reference_samples; } set { this.num_direct_reference_samples = value; } }

	protected uint[] direct_reference_sample_id; 
	public uint[] DirectReferenceSampleId { get { return this.direct_reference_sample_id; } set { this.direct_reference_sample_id = value; } }

	public DirectReferenceSamplesList(): base(IsoStream.FromFourCC("refs"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_id, "sample_id"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.num_direct_reference_samples, "num_direct_reference_samples"); 

		this.direct_reference_sample_id = new uint[IsoStream.GetInt( num_direct_reference_samples)];
		for (int i = 0; i < num_direct_reference_samples; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.direct_reference_sample_id[i], "direct_reference_sample_id"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.sample_id, "sample_id"); 
		boxSize += stream.WriteUInt8( this.num_direct_reference_samples, "num_direct_reference_samples"); 

		for (int i = 0; i < num_direct_reference_samples; i++)
		{
			boxSize += stream.WriteUInt32( this.direct_reference_sample_id[i], "direct_reference_sample_id"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // sample_id
		boxSize += 8; // num_direct_reference_samples

		for (int i = 0; i < num_direct_reference_samples; i++)
		{
			boxSize += 32; // direct_reference_sample_id
		}
		return boxSize;
	}
}


/*
aligned(8) class AppleItemListBox() extends Box('ilst') { 
 Box boxes[]; 
}
 
*/
public partial class AppleItemListBox : Box
{
	public const string TYPE = "ilst";
	public override string DisplayName { get { return "AppleItemListBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleItemListBox(): base(IsoStream.FromFourCC("ilst"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class IlstKey(unsigned int(32) format) extends Box(format) {
 Box boxes[]; }
*/
public partial class IlstKey : Box
{
	public override string DisplayName { get { return "IlstKey"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public IlstKey(uint format): base(format)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleCameraModelBox() extends Box('©mod') {
 Box boxes[];
 } 
*/
public partial class AppleCameraModelBox : Box
{
	public const string TYPE = "©mod";
	public override string DisplayName { get { return "AppleCameraModelBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleCameraModelBox(): base(IsoStream.FromFourCC("©mod"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class SamsungSecBox() extends Box('@sec') {
 bit(8) data[];
 } 
*/
public partial class SamsungSecBox : Box
{
	public const string TYPE = "@sec";
	public override string DisplayName { get { return "SamsungSecBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public SamsungSecBox(): base(IsoStream.FromFourCC("@sec"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class RicohAppleCameraModelBox() extends Box('@mod') {
 Box boxes[];
 } 
*/
public partial class RicohAppleCameraModelBox : Box
{
	public const string TYPE = "@mod";
	public override string DisplayName { get { return "RicohAppleCameraModelBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public RicohAppleCameraModelBox(): base(IsoStream.FromFourCC("@mod"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ApplePitchBox() extends Box('©fpt') {
 Box boxes[];
 } 
*/
public partial class ApplePitchBox : Box
{
	public const string TYPE = "©fpt";
	public override string DisplayName { get { return "ApplePitchBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public ApplePitchBox(): base(IsoStream.FromFourCC("©fpt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleRollBox() extends Box('©frl') {
 Box boxes[];
 } 
*/
public partial class AppleRollBox : Box
{
	public const string TYPE = "©frl";
	public override string DisplayName { get { return "AppleRollBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleRollBox(): base(IsoStream.FromFourCC("©frl"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleYawBox() extends Box('©fyw') {
 Box boxes[];
 } 
*/
public partial class AppleYawBox : Box
{
	public const string TYPE = "©fyw";
	public override string DisplayName { get { return "AppleYawBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleYawBox(): base(IsoStream.FromFourCC("©fyw"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleCameraPitchBox() extends Box('©gpt') {
 Box boxes[];
 } 
*/
public partial class AppleCameraPitchBox : Box
{
	public const string TYPE = "©gpt";
	public override string DisplayName { get { return "AppleCameraPitchBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleCameraPitchBox(): base(IsoStream.FromFourCC("©gpt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleCameraRollBox() extends Box('©grl') {
 Box boxes[];
 } 
*/
public partial class AppleCameraRollBox : Box
{
	public const string TYPE = "©grl";
	public override string DisplayName { get { return "AppleCameraRollBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleCameraRollBox(): base(IsoStream.FromFourCC("©grl"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleMakerUrlBox() extends Box('©mal') {
 Box boxes[];
 } 
*/
public partial class AppleMakerUrlBox : Box
{
	public const string TYPE = "©mal";
	public override string DisplayName { get { return "AppleMakerUrlBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleMakerUrlBox(): base(IsoStream.FromFourCC("©mal"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleModelBox() extends Box('©mdl') {
 Box boxes[];
 } 
*/
public partial class AppleModelBox : Box
{
	public const string TYPE = "©mdl";
	public override string DisplayName { get { return "AppleModelBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleModelBox(): base(IsoStream.FromFourCC("©mdl"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleCameraYawBox() extends Box('©gyw') {
 Box boxes[];
 } 
*/
public partial class AppleCameraYawBox : Box
{
	public const string TYPE = "©gyw";
	public override string DisplayName { get { return "AppleCameraYawBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleCameraYawBox(): base(IsoStream.FromFourCC("©gyw"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleSpeedXBox() extends Box('©xsp') {
 Box boxes[];
 } 
*/
public partial class AppleSpeedXBox : Box
{
	public const string TYPE = "©xsp";
	public override string DisplayName { get { return "AppleSpeedXBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleSpeedXBox(): base(IsoStream.FromFourCC("©xsp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleSpeedYBox() extends Box('©ysp') {
 Box boxes[];
 } 
*/
public partial class AppleSpeedYBox : Box
{
	public const string TYPE = "©ysp";
	public override string DisplayName { get { return "AppleSpeedYBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleSpeedYBox(): base(IsoStream.FromFourCC("©ysp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleSpeedZBox() extends Box('©zsp') {
 Box boxes[];
 } 
*/
public partial class AppleSpeedZBox : Box
{
	public const string TYPE = "©zsp";
	public override string DisplayName { get { return "AppleSpeedZBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleSpeedZBox(): base(IsoStream.FromFourCC("©zsp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleArtDirectorBox() extends Box('©ard') {
 Box boxes[];
 } 
*/
public partial class AppleArtDirectorBox : Box
{
	public const string TYPE = "©ard";
	public override string DisplayName { get { return "AppleArtDirectorBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleArtDirectorBox(): base(IsoStream.FromFourCC("©ard"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleConductorBox() extends Box('©con') {
 Box boxes[];
 } 
*/
public partial class AppleConductorBox : Box
{
	public const string TYPE = "©con";
	public override string DisplayName { get { return "AppleConductorBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleConductorBox(): base(IsoStream.FromFourCC("©con"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleDescriptionBox() extends Box('©des') {
 Box boxes[];
 } 
*/
public partial class AppleDescriptionBox : Box
{
	public const string TYPE = "©des";
	public override string DisplayName { get { return "AppleDescriptionBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleDescriptionBox(): base(IsoStream.FromFourCC("©des"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleMovementCountBox() extends Box('©mvc') {
 Box boxes[];
 } 
*/
public partial class AppleMovementCountBox : Box
{
	public const string TYPE = "©mvc";
	public override string DisplayName { get { return "AppleMovementCountBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleMovementCountBox(): base(IsoStream.FromFourCC("©mvc"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleMovementNumberBox() extends Box('©mvi') {
 Box boxes[];
 } 
*/
public partial class AppleMovementNumberBox : Box
{
	public const string TYPE = "©mvi";
	public override string DisplayName { get { return "AppleMovementNumberBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleMovementNumberBox(): base(IsoStream.FromFourCC("©mvi"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleNarratorBox() extends Box('©nrt') {
 Box boxes[];
 } 
*/
public partial class AppleNarratorBox : Box
{
	public const string TYPE = "©nrt";
	public override string DisplayName { get { return "AppleNarratorBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleNarratorBox(): base(IsoStream.FromFourCC("©nrt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ApplePublisherBox() extends Box('©pub') {
 Box boxes[];
 } 
*/
public partial class ApplePublisherBox : Box
{
	public const string TYPE = "©pub";
	public override string DisplayName { get { return "ApplePublisherBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public ApplePublisherBox(): base(IsoStream.FromFourCC("©pub"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleSoundEngineerBox() extends Box('©sne') {
 Box boxes[];
 } 
*/
public partial class AppleSoundEngineerBox : Box
{
	public const string TYPE = "©sne";
	public override string DisplayName { get { return "AppleSoundEngineerBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleSoundEngineerBox(): base(IsoStream.FromFourCC("©sne"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleSoloistBox() extends Box('©sol') {
 Box boxes[];
 } 
*/
public partial class AppleSoloistBox : Box
{
	public const string TYPE = "©sol";
	public override string DisplayName { get { return "AppleSoloistBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleSoloistBox(): base(IsoStream.FromFourCC("©sol"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleSubtitleBox() extends Box('©st3') {
 Box boxes[];
 } 
*/
public partial class AppleSubtitleBox : Box
{
	public const string TYPE = "©st3";
	public override string DisplayName { get { return "AppleSubtitleBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleSubtitleBox(): base(IsoStream.FromFourCC("©st3"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleWorkBox() extends Box('©wrk') {
 Box boxes[];
 } 
*/
public partial class AppleWorkBox : Box
{
	public const string TYPE = "©wrk";
	public override string DisplayName { get { return "AppleWorkBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleWorkBox(): base(IsoStream.FromFourCC("©wrk"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleExecutiveProducerBox() extends Box('©xpd') {
 Box boxes[];
 } 
*/
public partial class AppleExecutiveProducerBox : Box
{
	public const string TYPE = "©xpd";
	public override string DisplayName { get { return "AppleExecutiveProducerBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleExecutiveProducerBox(): base(IsoStream.FromFourCC("©xpd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleMovementNameBox() extends Box('©mvn') {
 Box boxes[];
 } 
*/
public partial class AppleMovementNameBox : Box
{
	public const string TYPE = "©mvn";
	public override string DisplayName { get { return "AppleMovementNameBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleMovementNameBox(): base(IsoStream.FromFourCC("©mvn"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleEncoderToolBox() extends Box('©too') {
 Box boxes[];
 } 
*/
public partial class AppleEncoderToolBox : Box
{
	public const string TYPE = "©too";
	public override string DisplayName { get { return "AppleEncoderToolBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleEncoderToolBox(): base(IsoStream.FromFourCC("©too"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleComposersBox() extends Box('©wrt') {
 Box boxes[];
 } 
*/
public partial class AppleComposersBox : Box
{
	public const string TYPE = "©wrt";
	public override string DisplayName { get { return "AppleComposersBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleComposersBox(): base(IsoStream.FromFourCC("©wrt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleSoftwareBox() extends Box('©swr') {
 bit(8) data[];
 } 
*/
public partial class AppleSoftwareBox : Box
{
	public const string TYPE = "©swr";
	public override string DisplayName { get { return "AppleSoftwareBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleSoftwareBox(): base(IsoStream.FromFourCC("©swr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class RicohAppleSoftwareBox() extends Box('@swr') {
 bit(8) data[];
 } 
*/
public partial class RicohAppleSoftwareBox : Box
{
	public const string TYPE = "@swr";
	public override string DisplayName { get { return "RicohAppleSoftwareBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public RicohAppleSoftwareBox(): base(IsoStream.FromFourCC("@swr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleCreatorBox() extends Box('©swf') {
 bit(8) data[];
 } 
*/
public partial class AppleCreatorBox : Box
{
	public const string TYPE = "©swf";
	public override string DisplayName { get { return "AppleCreatorBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleCreatorBox(): base(IsoStream.FromFourCC("©swf"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleCommentBox() extends Box('©cmt') {
 Box boxes[];
 } 
*/
public partial class AppleCommentBox : Box
{
	public const string TYPE = "©cmt";
	public override string DisplayName { get { return "AppleCommentBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleCommentBox(): base(IsoStream.FromFourCC("©cmt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleStartTimecode() extends Box('©TIM') {
 MultiLanguageString value[]; 
 } 
*/
public partial class AppleStartTimecode : Box
{
	public const string TYPE = "©TIM";
	public override string DisplayName { get { return "AppleStartTimecode"; } }

	protected MultiLanguageString[] value; 
	public MultiLanguageString[] Value { get { return this.value; } set { this.value = value; } }

	public AppleStartTimecode(): base(IsoStream.FromFourCC("©TIM"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringSizeLangPrefixed(boxSize, readSize,  out this.value, "value"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringSizeLangPrefixed( this.value, "value"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSizeLangPrefixed(value); // value
		return boxSize;
	}
}


/*
aligned(8) class AppleStartTimeScale() extends Box('©TSC') {
 MultiLanguageString value[]; 
 } 
*/
public partial class AppleStartTimeScale : Box
{
	public const string TYPE = "©TSC";
	public override string DisplayName { get { return "AppleStartTimeScale"; } }

	protected MultiLanguageString[] value; 
	public MultiLanguageString[] Value { get { return this.value; } set { this.value = value; } }

	public AppleStartTimeScale(): base(IsoStream.FromFourCC("©TSC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringSizeLangPrefixed(boxSize, readSize,  out this.value, "value"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringSizeLangPrefixed( this.value, "value"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSizeLangPrefixed(value); // value
		return boxSize;
	}
}


/*
aligned(8) class AppleStartTimeSampleSize() extends Box('©TSZ') {
 MultiLanguageString value[]; 
 } 
*/
public partial class AppleStartTimeSampleSize : Box
{
	public const string TYPE = "©TSZ";
	public override string DisplayName { get { return "AppleStartTimeSampleSize"; } }

	protected MultiLanguageString[] value; 
	public MultiLanguageString[] Value { get { return this.value; } set { this.value = value; } }

	public AppleStartTimeSampleSize(): base(IsoStream.FromFourCC("©TSZ"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringSizeLangPrefixed(boxSize, readSize,  out this.value, "value"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringSizeLangPrefixed( this.value, "value"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSizeLangPrefixed(value); // value
		return boxSize;
	}
}


/*
aligned(8) class AppleNameBox() extends Box('©nam') {
 Box boxes[];
 } 
*/
public partial class AppleNameBox : Box
{
	public const string TYPE = "©nam";
	public override string DisplayName { get { return "AppleNameBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleNameBox(): base(IsoStream.FromFourCC("©nam"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleRequirementsBox() extends FullBox('©req', version = 0, 0) {
string requirement;
 } 
*/
public partial class AppleRequirementsBox : FullBox
{
	public const string TYPE = "©req";
	public override string DisplayName { get { return "AppleRequirementsBox"; } }

	protected BinaryUTF8String requirement; 
	public BinaryUTF8String Requirement { get { return this.requirement; } set { this.requirement = value; } }

	public AppleRequirementsBox(): base(IsoStream.FromFourCC("©req"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.requirement, "requirement"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.requirement, "requirement"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(requirement); // requirement
		return boxSize;
	}
}


/*
aligned(8) class AppleLyricsBox() extends Box('©lyr') {
Box boxes[];
 } 
*/
public partial class AppleLyricsBox : Box
{
	public const string TYPE = "©lyr";
	public override string DisplayName { get { return "AppleLyricsBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleLyricsBox(): base(IsoStream.FromFourCC("©lyr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleGroupingBox() extends Box('©grp') {
Box boxes[];
 } 
*/
public partial class AppleGroupingBox : Box
{
	public const string TYPE = "©grp";
	public override string DisplayName { get { return "AppleGroupingBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleGroupingBox(): base(IsoStream.FromFourCC("©grp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleAlbumBox() extends Box('©alb') {
 Box boxes[];
 } 
*/
public partial class AppleAlbumBox : Box
{
	public const string TYPE = "©alb";
	public override string DisplayName { get { return "AppleAlbumBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleAlbumBox(): base(IsoStream.FromFourCC("©alb"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleArtistBox() extends Box('©ART') {
 Box boxes[];
 } 
*/
public partial class AppleArtistBox : Box
{
	public const string TYPE = "©ART";
	public override string DisplayName { get { return "AppleArtistBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleArtistBox(): base(IsoStream.FromFourCC("©ART"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleArtist3Box() extends Box('©art') {
 Box boxes[];
 } 
*/
public partial class AppleArtist3Box : Box
{
	public const string TYPE = "©art";
	public override string DisplayName { get { return "AppleArtist3Box"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleArtist3Box(): base(IsoStream.FromFourCC("©art"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleArtist2Box() extends Box('aART') {
 Box boxes[];
 } 
*/
public partial class AppleArtist2Box : Box
{
	public const string TYPE = "aART";
	public override string DisplayName { get { return "AppleArtist2Box"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleArtist2Box(): base(IsoStream.FromFourCC("aART"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleAuthorBox() extends Box('©aut') {
 Box boxes[];
 } 
*/
public partial class AppleAuthorBox : Box
{
	public const string TYPE = "©aut";
	public override string DisplayName { get { return "AppleAuthorBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleAuthorBox(): base(IsoStream.FromFourCC("©aut"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleCopyrightBox() extends Box('cprt') {
 Box boxes[];
 } 
*/
public partial class AppleCopyrightBox : Box
{
	public const string TYPE = "cprt";
	public override string DisplayName { get { return "AppleCopyrightBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleCopyrightBox(): base(IsoStream.FromFourCC("cprt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleCopyright2Box() extends Box('©cpy') {
 Box boxes[];
 } 
*/
public partial class AppleCopyright2Box : Box
{
	public const string TYPE = "©cpy";
	public override string DisplayName { get { return "AppleCopyright2Box"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleCopyright2Box(): base(IsoStream.FromFourCC("©cpy"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleRecordingYear2Box() extends Box('©day') {
 Box boxes[];
 } 
*/
public partial class AppleRecordingYear2Box : Box
{
	public const string TYPE = "©day";
	public override string DisplayName { get { return "AppleRecordingYear2Box"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleRecordingYear2Box(): base(IsoStream.FromFourCC("©day"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class RicohAppleRecordingYear2Box() extends Box('@day') {
 Box boxes[];
 } 
*/
public partial class RicohAppleRecordingYear2Box : Box
{
	public const string TYPE = "@day";
	public override string DisplayName { get { return "RicohAppleRecordingYear2Box"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public RicohAppleRecordingYear2Box(): base(IsoStream.FromFourCC("@day"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleHostComputerBox() extends Box('©hst') {
 Box boxes[];
 } 
*/
public partial class AppleHostComputerBox : Box
{
	public const string TYPE = "©hst";
	public override string DisplayName { get { return "AppleHostComputerBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleHostComputerBox(): base(IsoStream.FromFourCC("©hst"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleGenreBox() extends Box('©gen') {
 Box boxes[];
 } 
*/
public partial class AppleGenreBox : Box
{
	public const string TYPE = "©gen";
	public override string DisplayName { get { return "AppleGenreBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleGenreBox(): base(IsoStream.FromFourCC("©gen"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleComposerBox() extends Box('©ope') {
 Box boxes[];
 } 
*/
public partial class AppleComposerBox : Box
{
	public const string TYPE = "©ope";
	public override string DisplayName { get { return "AppleComposerBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleComposerBox(): base(IsoStream.FromFourCC("©ope"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleTrackBox() extends Box('©trk') {
 Box boxes[];
 } 
*/
public partial class AppleTrackBox : Box
{
	public const string TYPE = "©trk";
	public override string DisplayName { get { return "AppleTrackBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleTrackBox(): base(IsoStream.FromFourCC("©trk"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleUrlBox() extends Box('©url') {
 Box boxes[];
 } 
*/
public partial class AppleUrlBox : Box
{
	public const string TYPE = "©url";
	public override string DisplayName { get { return "AppleUrlBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleUrlBox(): base(IsoStream.FromFourCC("©url"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleProductBox() extends Box('©PRD') {
 Box boxes[];
 } 
*/
public partial class AppleProductBox : Box
{
	public const string TYPE = "©PRD";
	public override string DisplayName { get { return "AppleProductBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleProductBox(): base(IsoStream.FromFourCC("©PRD"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleWarningBox() extends Box('©wrn') {
 Box boxes[];
 } 
*/
public partial class AppleWarningBox : Box
{
	public const string TYPE = "©wrn";
	public override string DisplayName { get { return "AppleWarningBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleWarningBox(): base(IsoStream.FromFourCC("©wrn"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleGPSCoordinatesBox() extends Box('©xyz') {
 MultiLanguageString value[]; 
 } 
*/
public partial class AppleGPSCoordinatesBox : Box
{
	public const string TYPE = "©xyz";
	public override string DisplayName { get { return "AppleGPSCoordinatesBox"; } }

	protected MultiLanguageString[] value; 
	public MultiLanguageString[] Value { get { return this.value; } set { this.value = value; } }

	public AppleGPSCoordinatesBox(): base(IsoStream.FromFourCC("©xyz"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringSizeLangPrefixed(boxSize, readSize,  out this.value, "value"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringSizeLangPrefixed( this.value, "value"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSizeLangPrefixed(value); // value
		return boxSize;
	}
}


/*
aligned(8) class RicohAppleGPSCoordinatesBox() extends Box('@xyz') {
 MultiLanguageString value[]; 
 } 
*/
public partial class RicohAppleGPSCoordinatesBox : Box
{
	public const string TYPE = "@xyz";
	public override string DisplayName { get { return "RicohAppleGPSCoordinatesBox"; } }

	protected MultiLanguageString[] value; 
	public MultiLanguageString[] Value { get { return this.value; } set { this.value = value; } }

	public RicohAppleGPSCoordinatesBox(): base(IsoStream.FromFourCC("@xyz"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringSizeLangPrefixed(boxSize, readSize,  out this.value, "value"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringSizeLangPrefixed( this.value, "value"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSizeLangPrefixed(value); // value
		return boxSize;
	}
}


/*
aligned(8) class AppleCompilationBox() extends Box('cpil') {
 Box boxes[];
 } 
*/
public partial class AppleCompilationBox : Box
{
	public const string TYPE = "cpil";
	public override string DisplayName { get { return "AppleCompilationBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleCompilationBox(): base(IsoStream.FromFourCC("cpil"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleName2Box() extends Box('name') {
 string name;
 } 
*/
public partial class AppleName2Box : Box
{
	public const string TYPE = "name";
	public override string DisplayName { get { return "AppleName2Box"; } }

	protected BinaryUTF8String name; 
	public BinaryUTF8String Name { get { return this.name; } set { this.name = value; } }

	public AppleName2Box(): base(IsoStream.FromFourCC("name"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.name, "name"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.name, "name"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(name); // name
		return boxSize;
	}
}


/*
aligned(8) class AppleDescriptionBox() extends Box('desc') {
 Box boxes[];
 } 
*/
public partial class AppleDescriptionBoxdescDup : Box
{
	public const string TYPE = "desc";
	public override string DisplayName { get { return "AppleDescriptionBoxdescDup"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleDescriptionBoxdescDup(): base(IsoStream.FromFourCC("desc"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleLongDescriptionBox() extends Box('ldes') {
 Box boxes[];
 } 
*/
public partial class AppleLongDescriptionBox : Box
{
	public const string TYPE = "ldes";
	public override string DisplayName { get { return "AppleLongDescriptionBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleLongDescriptionBox(): base(IsoStream.FromFourCC("ldes"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class UserBox(uuid) extends Box('uuid') {
 bit(8) data[];
 } 
*/
public partial class UserBox : Box
{
	public const string TYPE = "uuid";
	public override string DisplayName { get { return "UserBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public UserBox(byte[] uuid): base(IsoStream.FromFourCC("uuid"), uuid)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleInitialObjectDescriptorBox() extends FullBox('iods') {
 Descriptor descriptor[0 .. 255];
 } 
*/
public partial class AppleInitialObjectDescriptorBox : FullBox
{
	public const string TYPE = "iods";
	public override string DisplayName { get { return "AppleInitialObjectDescriptorBox"; } }

	protected Descriptor[] descriptor; 
	public Descriptor[] Descriptor { get { return this.descriptor; } set { this.descriptor = value; } }

	public AppleInitialObjectDescriptorBox(): base(IsoStream.FromFourCC("iods"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadDescriptor(boxSize, readSize, this,  out this.descriptor, "descriptor"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteDescriptor( this.descriptor, "descriptor"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateDescriptorSize(descriptor); // descriptor
		return boxSize;
	}
}


/*
aligned(8) class ThreeGPPTitleBox() extends Box('titl') {
	bit(1) reserved;
 unsigned int(5)[3] language;
	string value;
} 
*/
public partial class ThreeGPPTitleBox : Box
{
	public const string TYPE = "titl";
	public override string DisplayName { get { return "ThreeGPPTitleBox"; } }

	protected bool reserved; 
	public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected string language; 
	public string Language { get { return this.language; } set { this.language = value; } }

	protected BinaryUTF8String value; 
	public BinaryUTF8String Value { get { return this.value; } set { this.value = value; } }

	public ThreeGPPTitleBox(): base(IsoStream.FromFourCC("titl"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadIso639(boxSize, readSize,  out this.language, "language"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.value, "value"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.reserved, "reserved"); 
		boxSize += stream.WriteIso639( this.language, "language"); 
		boxSize += stream.WriteStringZeroTerminated( this.value, "value"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // reserved
		boxSize += 15; // language
		boxSize += IsoStream.CalculateStringSize(value); // value
		return boxSize;
	}
}


/*
aligned(8) class ThreeGPPAuthorBox() extends Box('auth') {
	bit(1) reserved;
 unsigned int(5)[3] language;
	string value;
} 
*/
public partial class ThreeGPPAuthorBox : Box
{
	public const string TYPE = "auth";
	public override string DisplayName { get { return "ThreeGPPAuthorBox"; } }

	protected bool reserved; 
	public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected string language; 
	public string Language { get { return this.language; } set { this.language = value; } }

	protected BinaryUTF8String value; 
	public BinaryUTF8String Value { get { return this.value; } set { this.value = value; } }

	public ThreeGPPAuthorBox(): base(IsoStream.FromFourCC("auth"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadIso639(boxSize, readSize,  out this.language, "language"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.value, "value"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.reserved, "reserved"); 
		boxSize += stream.WriteIso639( this.language, "language"); 
		boxSize += stream.WriteStringZeroTerminated( this.value, "value"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // reserved
		boxSize += 15; // language
		boxSize += IsoStream.CalculateStringSize(value); // value
		return boxSize;
	}
}


/*
aligned(8) class TextMediaBox() extends Box('text') {
 unsigned int(8) reserved1[6];
 unsigned int(16) dataReferenceIndex;
 unsigned int(32) displayFlags;
 unsigned int(32) textJustification;
 unsigned int(16) bgColorRed;
 unsigned int(16) bgColorGreen;
 unsigned int(16) bgColorBlue;
 unsigned int(16) defTextBoxTop;
 unsigned int(16) defTextBoxLeft;
 unsigned int(16) defTextBoxBotton;
 unsigned int(16) defTextBoxRight;
 unsigned int(64) reserved2;
 unsigned int(16) fontNumber;
 unsigned int(16) fontFace;
 unsigned int(8) reserved3;
 unsigned int(16) reserved4;
 unsigned int(16) foreColorRed;
 unsigned int(16) foreColorGreen;
 unsigned int(16) foreColorBlue;
 string name;
 } 
*/
public partial class TextMediaBox : Box
{
	public const string TYPE = "text";
	public override string DisplayName { get { return "TextMediaBox"; } }

	protected byte[] reserved1; 
	public byte[] Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected ushort dataReferenceIndex; 
	public ushort DataReferenceIndex { get { return this.dataReferenceIndex; } set { this.dataReferenceIndex = value; } }

	protected uint displayFlags; 
	public uint DisplayFlags { get { return this.displayFlags; } set { this.displayFlags = value; } }

	protected uint textJustification; 
	public uint TextJustification { get { return this.textJustification; } set { this.textJustification = value; } }

	protected ushort bgColorRed; 
	public ushort BgColorRed { get { return this.bgColorRed; } set { this.bgColorRed = value; } }

	protected ushort bgColorGreen; 
	public ushort BgColorGreen { get { return this.bgColorGreen; } set { this.bgColorGreen = value; } }

	protected ushort bgColorBlue; 
	public ushort BgColorBlue { get { return this.bgColorBlue; } set { this.bgColorBlue = value; } }

	protected ushort defTextBoxTop; 
	public ushort DefTextBoxTop { get { return this.defTextBoxTop; } set { this.defTextBoxTop = value; } }

	protected ushort defTextBoxLeft; 
	public ushort DefTextBoxLeft { get { return this.defTextBoxLeft; } set { this.defTextBoxLeft = value; } }

	protected ushort defTextBoxBotton; 
	public ushort DefTextBoxBotton { get { return this.defTextBoxBotton; } set { this.defTextBoxBotton = value; } }

	protected ushort defTextBoxRight; 
	public ushort DefTextBoxRight { get { return this.defTextBoxRight; } set { this.defTextBoxRight = value; } }

	protected ulong reserved2; 
	public ulong Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

	protected ushort fontNumber; 
	public ushort FontNumber { get { return this.fontNumber; } set { this.fontNumber = value; } }

	protected ushort fontFace; 
	public ushort FontFace { get { return this.fontFace; } set { this.fontFace = value; } }

	protected byte reserved3; 
	public byte Reserved3 { get { return this.reserved3; } set { this.reserved3 = value; } }

	protected ushort reserved4; 
	public ushort Reserved4 { get { return this.reserved4; } set { this.reserved4 = value; } }

	protected ushort foreColorRed; 
	public ushort ForeColorRed { get { return this.foreColorRed; } set { this.foreColorRed = value; } }

	protected ushort foreColorGreen; 
	public ushort ForeColorGreen { get { return this.foreColorGreen; } set { this.foreColorGreen = value; } }

	protected ushort foreColorBlue; 
	public ushort ForeColorBlue { get { return this.foreColorBlue; } set { this.foreColorBlue = value; } }

	protected BinaryUTF8String name; 
	public BinaryUTF8String Name { get { return this.name; } set { this.name = value; } }

	public TextMediaBox(): base(IsoStream.FromFourCC("text"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 6,  out this.reserved1, "reserved1"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.dataReferenceIndex, "dataReferenceIndex"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.displayFlags, "displayFlags"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.textJustification, "textJustification"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.bgColorRed, "bgColorRed"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.bgColorGreen, "bgColorGreen"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.bgColorBlue, "bgColorBlue"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.defTextBoxTop, "defTextBoxTop"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.defTextBoxLeft, "defTextBoxLeft"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.defTextBoxBotton, "defTextBoxBotton"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.defTextBoxRight, "defTextBoxRight"); 
		boxSize += stream.ReadUInt64(boxSize, readSize,  out this.reserved2, "reserved2"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.fontNumber, "fontNumber"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.fontFace, "fontFace"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.reserved3, "reserved3"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.reserved4, "reserved4"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.foreColorRed, "foreColorRed"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.foreColorGreen, "foreColorGreen"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.foreColorBlue, "foreColorBlue"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.name, "name"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8Array(6,  this.reserved1, "reserved1"); 
		boxSize += stream.WriteUInt16( this.dataReferenceIndex, "dataReferenceIndex"); 
		boxSize += stream.WriteUInt32( this.displayFlags, "displayFlags"); 
		boxSize += stream.WriteUInt32( this.textJustification, "textJustification"); 
		boxSize += stream.WriteUInt16( this.bgColorRed, "bgColorRed"); 
		boxSize += stream.WriteUInt16( this.bgColorGreen, "bgColorGreen"); 
		boxSize += stream.WriteUInt16( this.bgColorBlue, "bgColorBlue"); 
		boxSize += stream.WriteUInt16( this.defTextBoxTop, "defTextBoxTop"); 
		boxSize += stream.WriteUInt16( this.defTextBoxLeft, "defTextBoxLeft"); 
		boxSize += stream.WriteUInt16( this.defTextBoxBotton, "defTextBoxBotton"); 
		boxSize += stream.WriteUInt16( this.defTextBoxRight, "defTextBoxRight"); 
		boxSize += stream.WriteUInt64( this.reserved2, "reserved2"); 
		boxSize += stream.WriteUInt16( this.fontNumber, "fontNumber"); 
		boxSize += stream.WriteUInt16( this.fontFace, "fontFace"); 
		boxSize += stream.WriteUInt8( this.reserved3, "reserved3"); 
		boxSize += stream.WriteUInt16( this.reserved4, "reserved4"); 
		boxSize += stream.WriteUInt16( this.foreColorRed, "foreColorRed"); 
		boxSize += stream.WriteUInt16( this.foreColorGreen, "foreColorGreen"); 
		boxSize += stream.WriteUInt16( this.foreColorBlue, "foreColorBlue"); 
		boxSize += stream.WriteStringZeroTerminated( this.name, "name"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 6 * 8; // reserved1
		boxSize += 16; // dataReferenceIndex
		boxSize += 32; // displayFlags
		boxSize += 32; // textJustification
		boxSize += 16; // bgColorRed
		boxSize += 16; // bgColorGreen
		boxSize += 16; // bgColorBlue
		boxSize += 16; // defTextBoxTop
		boxSize += 16; // defTextBoxLeft
		boxSize += 16; // defTextBoxBotton
		boxSize += 16; // defTextBoxRight
		boxSize += 64; // reserved2
		boxSize += 16; // fontNumber
		boxSize += 16; // fontFace
		boxSize += 8; // reserved3
		boxSize += 16; // reserved4
		boxSize += 16; // foreColorRed
		boxSize += 16; // foreColorGreen
		boxSize += 16; // foreColorBlue
		boxSize += IsoStream.CalculateStringSize(name); // name
		return boxSize;
	}
}


/*
aligned(8) class TextGmhdMediaBox() extends Box('text') {
 unsigned int(8) textData[36];
 } 
*/
public partial class TextGmhdMediaBox : Box
{
	public const string TYPE = "text";
	public override string DisplayName { get { return "TextGmhdMediaBox"; } }

	protected byte[] textData; 
	public byte[] TextData { get { return this.textData; } set { this.textData = value; } }

	public TextGmhdMediaBox(): base(IsoStream.FromFourCC("text"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 36,  out this.textData, "textData"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8Array(36,  this.textData, "textData"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 36 * 8; // textData
		return boxSize;
	}
}


/*
aligned(8) class WindowsMediaXtraBox() extends Box('Xtra') {
 XtraTag tags[]; 
 }
 
*/
public partial class WindowsMediaXtraBox : Box
{
	public const string TYPE = "Xtra";
	public override string DisplayName { get { return "WindowsMediaXtraBox"; } }

	protected XtraTag[] tags; 
	public XtraTag[] Tags { get { return this.tags; } set { this.tags = value; } }

	public WindowsMediaXtraBox(): base(IsoStream.FromFourCC("Xtra"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, (uint)(uint.MaxValue), () => new XtraTag(),  out this.tags, "tags"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.tags, "tags"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(tags); // tags
		return boxSize;
	}
}


/*
aligned(8) class XtraTag() {
 unsigned int(32) inputSize;
 unsigned int(32) tagLength;
 char tagName[tagLength];
 unsigned int(32) count;
 XtraValue values[count];
 }
 
*/
public partial class XtraTag : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "XtraTag"; } }

	protected uint inputSize; 
	public uint InputSize { get { return this.inputSize; } set { this.inputSize = value; } }

	protected uint tagLength; 
	public uint TagLength { get { return this.tagLength; } set { this.tagLength = value; } }

	protected byte[] tagName; 
	public byte[] TagName { get { return this.tagName; } set { this.tagName = value; } }

	protected uint count; 
	public uint Count { get { return this.count; } set { this.count = value; } }

	protected XtraValue[] values; 
	public XtraValue[] Values { get { return this.values; } set { this.values = value; } }

	public XtraTag(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.inputSize, "inputSize"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.tagLength, "tagLength"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(tagLength),  out this.tagName, "tagName"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.count, "count"); 
		boxSize += stream.ReadClass(boxSize, readSize, this, (uint)(count), () => new XtraValue(),  out this.values, "values"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt32( this.inputSize, "inputSize"); 
		boxSize += stream.WriteUInt32( this.tagLength, "tagLength"); 
		boxSize += stream.WriteUInt8Array((uint)(tagLength),  this.tagName, "tagName"); 
		boxSize += stream.WriteUInt32( this.count, "count"); 
		boxSize += stream.WriteClass( this.values, "values"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 32; // inputSize
		boxSize += 32; // tagLength
		boxSize += ((ulong)(tagLength) * 8); // tagName
		boxSize += 32; // count
		boxSize += IsoStream.CalculateClassSize(values); // values
		return boxSize;
	}
}


/*
aligned(8) class XtraValue() {
 unsigned int(32) length;
 unsigned int(16) type;
 unsigned int(8) value[length-6];
 }
*/
public partial class XtraValue : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "XtraValue"; } }

	protected uint length; 
	public uint Length { get { return this.length; } set { this.length = value; } }

	protected ushort type; 
	public ushort Type { get { return this.type; } set { this.type = value; } }

	protected byte[] value; 
	public byte[] Value { get { return this.value; } set { this.value = value; } }

	public XtraValue(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.length, "length"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.type, "type"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(length-6),  out this.value, "value"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt32( this.length, "length"); 
		boxSize += stream.WriteUInt16( this.type, "type"); 
		boxSize += stream.WriteUInt8Array((uint)(length-6),  this.value, "value"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 32; // length
		boxSize += 16; // type
		boxSize += ((ulong)(length-6) * 8); // value
		return boxSize;
	}
}


/*
aligned(8) class AC3SpecificBox() extends Box('dac3') {
 bit(8) data[];
 } 
*/
public partial class AC3SpecificBox : Box
{
	public const string TYPE = "dac3";
	public override string DisplayName { get { return "AC3SpecificBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AC3SpecificBox(): base(IsoStream.FromFourCC("dac3"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class ThreeGPPDescriptionBox() extends Box('dscp') {
	bit(1) reserved;
unsigned int(5)[3] language;
	string value;
}
*/
public partial class ThreeGPPDescriptionBox : Box
{
	public const string TYPE = "dscp";
	public override string DisplayName { get { return "ThreeGPPDescriptionBox"; } }

	protected bool reserved; 
	public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected string language; 
	public string Language { get { return this.language; } set { this.language = value; } }

	protected BinaryUTF8String value; 
	public BinaryUTF8String Value { get { return this.value; } set { this.value = value; } }

	public ThreeGPPDescriptionBox(): base(IsoStream.FromFourCC("dscp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadIso639(boxSize, readSize,  out this.language, "language"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.value, "value"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.reserved, "reserved"); 
		boxSize += stream.WriteIso639( this.language, "language"); 
		boxSize += stream.WriteStringZeroTerminated( this.value, "value"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // reserved
		boxSize += 15; // language
		boxSize += IsoStream.CalculateStringSize(value); // value
		return boxSize;
	}
}


/*
aligned(8) class GenericMediaHeaderAtom() extends Box('gmhd') {
 Box boxes[];
 } 
*/
public partial class GenericMediaHeaderAtom : Box
{
	public const string TYPE = "gmhd";
	public override string DisplayName { get { return "GenericMediaHeaderAtom"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public GenericMediaHeaderAtom(): base(IsoStream.FromFourCC("gmhd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ThreeGPPKeywordsBox() extends Box('kywd') {
	bit(1) reserved;
unsigned int(5)[3] language;
	string value;
}
*/
public partial class ThreeGPPKeywordsBox : Box
{
	public const string TYPE = "kywd";
	public override string DisplayName { get { return "ThreeGPPKeywordsBox"; } }

	protected bool reserved; 
	public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected string language; 
	public string Language { get { return this.language; } set { this.language = value; } }

	protected BinaryUTF8String value; 
	public BinaryUTF8String Value { get { return this.value; } set { this.value = value; } }

	public ThreeGPPKeywordsBox(): base(IsoStream.FromFourCC("kywd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadIso639(boxSize, readSize,  out this.language, "language"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.value, "value"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.reserved, "reserved"); 
		boxSize += stream.WriteIso639( this.language, "language"); 
		boxSize += stream.WriteStringZeroTerminated( this.value, "value"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // reserved
		boxSize += 15; // language
		boxSize += IsoStream.CalculateStringSize(value); // value
		return boxSize;
	}
}


/*
aligned(8) class AppleMediaTypeBox() extends Box('stik') {
 Box boxes[];
 } 
*/
public partial class AppleMediaTypeBox : Box
{
	public const string TYPE = "stik";
	public override string DisplayName { get { return "AppleMediaTypeBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleMediaTypeBox(): base(IsoStream.FromFourCC("stik"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleRatingBox() extends Box('rtng') {
 Box boxes[];
 } 
*/
public partial class AppleRatingBox : Box
{
	public const string TYPE = "rtng";
	public override string DisplayName { get { return "AppleRatingBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleRatingBox(): base(IsoStream.FromFourCC("rtng"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleRating2Box() extends Box('rati') {
 Box boxes[];
 } 
*/
public partial class AppleRating2Box : Box
{
	public const string TYPE = "rati";
	public override string DisplayName { get { return "AppleRating2Box"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleRating2Box(): base(IsoStream.FromFourCC("rati"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ApplePlayGapBox() extends Box('pgap') {
 Box boxes[];
 } 
*/
public partial class ApplePlayGapBox : Box
{
	public const string TYPE = "pgap";
	public override string DisplayName { get { return "ApplePlayGapBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public ApplePlayGapBox(): base(IsoStream.FromFourCC("pgap"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleStoreCatalogIDBox() extends Box('cnID') {
 Box boxes[];
 } 
*/
public partial class AppleStoreCatalogIDBox : Box
{
	public const string TYPE = "cnID";
	public override string DisplayName { get { return "AppleStoreCatalogIDBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleStoreCatalogIDBox(): base(IsoStream.FromFourCC("cnID"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class TimeCodeTrackBox() extends Box('tmcd') {
 bit(8) data[];
 } 
*/
public partial class TimeCodeTrackBox : Box
{
	public const string TYPE = "tmcd";
	public override string DisplayName { get { return "TimeCodeTrackBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public TimeCodeTrackBox(): base(IsoStream.FromFourCC("tmcd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleBeatsPerMinuteBox() extends Box('tmpo') {
 Box boxes[];
 } 
*/
public partial class AppleBeatsPerMinuteBox : Box
{
	public const string TYPE = "tmpo";
	public override string DisplayName { get { return "AppleBeatsPerMinuteBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleBeatsPerMinuteBox(): base(IsoStream.FromFourCC("tmpo"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleTVEpisodeBox() extends Box('tves') {
 Box boxes[];
 } 
*/
public partial class AppleTVEpisodeBox : Box
{
	public const string TYPE = "tves";
	public override string DisplayName { get { return "AppleTVEpisodeBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleTVEpisodeBox(): base(IsoStream.FromFourCC("tves"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleTVSeasonBox() extends Box('tvsn') {
 Box boxes[];
 } 
*/
public partial class AppleTVSeasonBox : Box
{
	public const string TYPE = "tvsn";
	public override string DisplayName { get { return "AppleTVSeasonBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleTVSeasonBox(): base(IsoStream.FromFourCC("tvsn"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class HdvdBox() extends Box('hdvd') {
 Box boxes[];
 } 
*/
public partial class HdvdBox : Box
{
	public const string TYPE = "hdvd";
	public override string DisplayName { get { return "HdvdBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public HdvdBox(): base(IsoStream.FromFourCC("hdvd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class DiskNumberBox() extends Box('disk') {
 Box boxes[];
 } 
*/
public partial class DiskNumberBox : Box
{
	public const string TYPE = "disk";
	public override string DisplayName { get { return "DiskNumberBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public DiskNumberBox(): base(IsoStream.FromFourCC("disk"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class HintBox() extends Box('hint') {
 unsigned int(32) trackId;
 } 
*/
public partial class HintBox : Box
{
	public const string TYPE = "hint";
	public override string DisplayName { get { return "HintBox"; } }

	protected uint trackId; 
	public uint TrackId { get { return this.trackId; } set { this.trackId = value; } }

	public HintBox(): base(IsoStream.FromFourCC("hint"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.trackId, "trackId"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.trackId, "trackId"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // trackId
		return boxSize;
	}
}


/*
aligned(8) class FreeSpaceBox() extends Box('wide') {
 bit(8) data[];
 } 
*/
public partial class FreeSpaceBoxwideDup : Box
{
	public const string TYPE = "wide";
	public override string DisplayName { get { return "FreeSpaceBoxwideDup"; } }

	protected StreamMarker data; 
	public StreamMarker Data { get { return this.data; } set { this.data = value; } }

	public FreeSpaceBoxwideDup(): base(IsoStream.FromFourCC("wide"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class FielBox() extends Box('fiel') {
 unsigned int(8) total;
 unsigned int(8) order;
 } 
*/
public partial class FielBox : Box
{
	public const string TYPE = "fiel";
	public override string DisplayName { get { return "FielBox"; } }

	protected byte total; 
	public byte Total { get { return this.total; } set { this.total = value; } }

	protected byte order; 
	public byte Order { get { return this.order; } set { this.order = value; } }

	public FielBox(): base(IsoStream.FromFourCC("fiel"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.total, "total"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.order, "order"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.total, "total"); 
		boxSize += stream.WriteUInt8( this.order, "order"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // total
		boxSize += 8; // order
		return boxSize;
	}
}


/*
aligned(8) class Amf0Box() extends Box('amf0') {
 unsigned int(32) unknown1; unsigned int(32) unknown2;
 } 
*/
public partial class Amf0Box : Box
{
	public const string TYPE = "amf0";
	public override string DisplayName { get { return "Amf0Box"; } }

	protected uint unknown1; 
	public uint Unknown1 { get { return this.unknown1; } set { this.unknown1 = value; } }

	protected uint unknown2; 
	public uint Unknown2 { get { return this.unknown2; } set { this.unknown2 = value; } }

	public Amf0Box(): base(IsoStream.FromFourCC("amf0"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.unknown1, "unknown1"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.unknown2, "unknown2"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.unknown1, "unknown1"); 
		boxSize += stream.WriteUInt32( this.unknown2, "unknown2"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // unknown1
		boxSize += 32; // unknown2
		return boxSize;
	}
}


/*
aligned(8) class MpodBox() extends Box('mpod') {
 unsigned int(32) unknown1; unsigned int(32) unknown2;
 } 
*/
public partial class MpodBox : Box
{
	public const string TYPE = "mpod";
	public override string DisplayName { get { return "MpodBox"; } }

	protected uint unknown1; 
	public uint Unknown1 { get { return this.unknown1; } set { this.unknown1 = value; } }

	protected uint unknown2; 
	public uint Unknown2 { get { return this.unknown2; } set { this.unknown2 = value; } }

	public MpodBox(): base(IsoStream.FromFourCC("mpod"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.unknown1, "unknown1"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.unknown2, "unknown2"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.unknown1, "unknown1"); 
		boxSize += stream.WriteUInt32( this.unknown2, "unknown2"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // unknown1
		boxSize += 32; // unknown2
		return boxSize;
	}
}


/*
aligned(8) class GoogleStartTimeBox() extends Box('gsst') {
 bit(8) data[];
 } 
*/
public partial class GoogleStartTimeBox : Box
{
	public const string TYPE = "gsst";
	public override string DisplayName { get { return "GoogleStartTimeBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public GoogleStartTimeBox(): base(IsoStream.FromFourCC("gsst"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class GoogleSourceDataBox() extends Box('gssd') {
 Box boxes[];
 } 
*/
public partial class GoogleSourceDataBox : Box
{
	public const string TYPE = "gssd";
	public override string DisplayName { get { return "GoogleSourceDataBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public GoogleSourceDataBox(): base(IsoStream.FromFourCC("gssd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class GoogleTrackDurationBox() extends Box('gstd') {
 bit(8) data[];
 } 
*/
public partial class GoogleTrackDurationBox : Box
{
	public const string TYPE = "gstd";
	public override string DisplayName { get { return "GoogleTrackDurationBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public GoogleTrackDurationBox(): base(IsoStream.FromFourCC("gstd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class TrackNumberBox() extends Box('trkn') {
 Box boxes[]; 
 } 
*/
public partial class TrackNumberBox : Box
{
	public const string TYPE = "trkn";
	public override string DisplayName { get { return "TrackNumberBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public TrackNumberBox(): base(IsoStream.FromFourCC("trkn"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ZeroBox() extends Box('0000') {
 bit(8) data[];
 } 
*/
public partial class ZeroBox : Box
{
	public const string TYPE = "0000";
	public override string DisplayName { get { return "ZeroBox"; } }

	protected StreamMarker data; 
	public StreamMarker Data { get { return this.data; } set { this.data = value; } }

	public ZeroBox(): base(IsoStream.FromFourCC("0000"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class DpndBox() extends Box('dpnd') {
 bit(8) data[];
 } 
*/
public partial class DpndBox : Box
{
	public const string TYPE = "dpnd";
	public override string DisplayName { get { return "DpndBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public DpndBox(): base(IsoStream.FromFourCC("dpnd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class GooglePingUrlBox() extends Box('gspu') {
 Box boxes[];
 } 
*/
public partial class GooglePingUrlBox : Box
{
	public const string TYPE = "gspu";
	public override string DisplayName { get { return "GooglePingUrlBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public GooglePingUrlBox(): base(IsoStream.FromFourCC("gspu"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class GooglePingMessageBox() extends Box('gspm') {
 Box boxes[];
 } 
*/
public partial class GooglePingMessageBox : Box
{
	public const string TYPE = "gspm";
	public override string DisplayName { get { return "GooglePingMessageBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public GooglePingMessageBox(): base(IsoStream.FromFourCC("gspm"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class GooglesHostHeaderBox() extends Box('gshh') {
 Box boxes[];
 } 
*/
public partial class GooglesHostHeaderBox : Box
{
	public const string TYPE = "gshh";
	public override string DisplayName { get { return "GooglesHostHeaderBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public GooglesHostHeaderBox(): base(IsoStream.FromFourCC("gshh"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class TVEpisodeIDBox() extends Box('tven') {
 Box boxes[];
 } 
*/
public partial class TVEpisodeIDBox : Box
{
	public const string TYPE = "tven";
	public override string DisplayName { get { return "TVEpisodeIDBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public TVEpisodeIDBox(): base(IsoStream.FromFourCC("tven"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleCoverArtBox() extends Box('covr') {
 Box boxes[];
 } 
*/
public partial class AppleCoverArtBox : Box
{
	public const string TYPE = "covr";
	public override string DisplayName { get { return "AppleCoverArtBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleCoverArtBox(): base(IsoStream.FromFourCC("covr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class LoadBox() extends Box('load') {
 bit(8) data[];
 } 
*/
public partial class LoadBox : Box
{
	public const string TYPE = "load";
	public override string DisplayName { get { return "LoadBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public LoadBox(): base(IsoStream.FromFourCC("load"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleHintVersionBox() extends Box('hinv') {
 string version;
 } 
*/
public partial class AppleHintVersionBox : Box
{
	public const string TYPE = "hinv";
	public override string DisplayName { get { return "AppleHintVersionBox"; } }

	protected BinaryUTF8String version; 
	public BinaryUTF8String Version { get { return this.version; } set { this.version = value; } }

	public AppleHintVersionBox(): base(IsoStream.FromFourCC("hinv"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.version, "version"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.version, "version"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(version); // version
		return boxSize;
	}
}


/*
aligned(8) class AppleTrackApertureBox() extends Box('tapt') {
 Box boxes[];
 } 
*/
public partial class AppleTrackApertureBox : Box
{
	public const string TYPE = "tapt";
	public override string DisplayName { get { return "AppleTrackApertureBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleTrackApertureBox(): base(IsoStream.FromFourCC("tapt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleCleanApertureDimensionsBox() extends Box('clef') {
 bit(8) data[];
 } 
*/
public partial class AppleCleanApertureDimensionsBox : Box
{
	public const string TYPE = "clef";
	public override string DisplayName { get { return "AppleCleanApertureDimensionsBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleCleanApertureDimensionsBox(): base(IsoStream.FromFourCC("clef"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleEncodedPixelsDimensionsBox() extends Box('enof') {
 bit(8) data[];
 } 
*/
public partial class AppleEncodedPixelsDimensionsBox : Box
{
	public const string TYPE = "enof";
	public override string DisplayName { get { return "AppleEncodedPixelsDimensionsBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleEncodedPixelsDimensionsBox(): base(IsoStream.FromFourCC("enof"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleProductionApertureDimensionsBox() extends Box('prof') {
 bit(8) data[];
 } 
*/
public partial class AppleProductionApertureDimensionsBox : Box
{
	public const string TYPE = "prof";
	public override string DisplayName { get { return "AppleProductionApertureDimensionsBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleProductionApertureDimensionsBox(): base(IsoStream.FromFourCC("prof"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleApertureModeBox() extends Box('apmd') {
 string mode;
 } 
*/
public partial class AppleApertureModeBox : Box
{
	public const string TYPE = "apmd";
	public override string DisplayName { get { return "AppleApertureModeBox"; } }

	protected BinaryUTF8String mode; 
	public BinaryUTF8String Mode { get { return this.mode; } set { this.mode = value; } }

	public AppleApertureModeBox(): base(IsoStream.FromFourCC("apmd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.mode, "mode"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.mode, "mode"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(mode); // mode
		return boxSize;
	}
}


/*
aligned(8) class AppleWaveBox() extends Box('wave') {
 Box boxes[];
 } 
*/
public partial class AppleWaveBox : Box
{
	public const string TYPE = "wave";
	public override string DisplayName { get { return "AppleWaveBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleWaveBox(): base(IsoStream.FromFourCC("wave"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleEndiannessBox() extends Box('enda') {
 bit(8) data[];
 } 
*/
public partial class AppleEndiannessBox : Box
{
	public const string TYPE = "enda";
	public override string DisplayName { get { return "AppleEndiannessBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleEndiannessBox(): base(IsoStream.FromFourCC("enda"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleDataReferenceAliasBox() extends Box('alis') {
 bit(8) data[];
 } 
*/
public partial class AppleDataReferenceAliasBox : Box
{
	public const string TYPE = "alis";
	public override string DisplayName { get { return "AppleDataReferenceAliasBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleDataReferenceAliasBox(): base(IsoStream.FromFourCC("alis"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AudioChannelLayoutBox() extends Box('chan') {
 bit(8) data[];
 } 
*/
public partial class AudioChannelLayoutBox : Box
{
	public const string TYPE = "chan";
	public override string DisplayName { get { return "AudioChannelLayoutBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AudioChannelLayoutBox(): base(IsoStream.FromFourCC("chan"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class MdtaBox() extends Box('mdta') {
 bit(8) data[];
 } 
*/
public partial class MdtaBox : Box
{
	public const string TYPE = "mdta";
	public override string DisplayName { get { return "MdtaBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public MdtaBox(): base(IsoStream.FromFourCC("mdta"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleChapterListBox() extends Box('chap') {
 bit(8) data[];
 } 
*/
public partial class AppleChapterListBox : Box
{
	public const string TYPE = "chap";
	public override string DisplayName { get { return "AppleChapterListBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleChapterListBox(): base(IsoStream.FromFourCC("chap"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AdobeChapterBox() extends FullBox('chpl', version = 0, 0) {
 unsigned int(32) unknown; unsigned int(8) count;
 AdobeChapterRecord chapters[]; 
 }
 
*/
public partial class AdobeChapterBox : FullBox
{
	public const string TYPE = "chpl";
	public override string DisplayName { get { return "AdobeChapterBox"; } }

	protected uint unknown; 
	public uint Unknown { get { return this.unknown; } set { this.unknown = value; } }

	protected byte count; 
	public byte Count { get { return this.count; } set { this.count = value; } }

	protected AdobeChapterRecord[] chapters; 
	public AdobeChapterRecord[] Chapters { get { return this.chapters; } set { this.chapters = value; } }

	public AdobeChapterBox(): base(IsoStream.FromFourCC("chpl"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.unknown, "unknown"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.count, "count"); 
		boxSize += stream.ReadClass(boxSize, readSize, this, (uint)(uint.MaxValue), () => new AdobeChapterRecord(),  out this.chapters, "chapters"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.unknown, "unknown"); 
		boxSize += stream.WriteUInt8( this.count, "count"); 
		boxSize += stream.WriteClass( this.chapters, "chapters"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // unknown
		boxSize += 8; // count
		boxSize += IsoStream.CalculateClassSize(chapters); // chapters
		return boxSize;
	}
}


/*
aligned(8) class AdobeChapterRecord() {
 unsigned int(64) timestamp;
 unsigned int(8) count; char title[count];
 }
*/
public partial class AdobeChapterRecord : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "AdobeChapterRecord"; } }

	protected ulong timestamp; 
	public ulong Timestamp { get { return this.timestamp; } set { this.timestamp = value; } }

	protected byte count; 
	public byte Count { get { return this.count; } set { this.count = value; } }

	protected byte[] title; 
	public byte[] Title { get { return this.title; } set { this.title = value; } }

	public AdobeChapterRecord(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt64(boxSize, readSize,  out this.timestamp, "timestamp"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.count, "count"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(count),  out this.title, "title"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt64( this.timestamp, "timestamp"); 
		boxSize += stream.WriteUInt8( this.count, "count"); 
		boxSize += stream.WriteUInt8Array((uint)(count),  this.title, "title"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 64; // timestamp
		boxSize += 8; // count
		boxSize += ((ulong)(count) * 8); // title
		return boxSize;
	}
}


/*
aligned(8) class AppleKeywordBox() extends Box('keyw') {
 Box boxes[];
 } 
*/
public partial class AppleKeywordBox : Box
{
	public const string TYPE = "keyw";
	public override string DisplayName { get { return "AppleKeywordBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleKeywordBox(): base(IsoStream.FromFourCC("keyw"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ClfnBox() extends Box('clfn') {
 bit(8) data[];
 } 
*/
public partial class ClfnBox : Box
{
	public const string TYPE = "clfn";
	public override string DisplayName { get { return "ClfnBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ClfnBox(): base(IsoStream.FromFourCC("clfn"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleThumbnailReferenceBox() extends Box('thmb') {
 bit(8) data[];
 } 
*/
public partial class AppleThumbnailReferenceBox : Box
{
	public const string TYPE = "thmb";
	public override string DisplayName { get { return "AppleThumbnailReferenceBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleThumbnailReferenceBox(): base(IsoStream.FromFourCC("thmb"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AlternateFormatTrackBox() extends Box('fall') {
 bit(8) data[];
 } 
*/
public partial class AlternateFormatTrackBox : Box
{
	public const string TYPE = "fall";
	public override string DisplayName { get { return "AlternateFormatTrackBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AlternateFormatTrackBox(): base(IsoStream.FromFourCC("fall"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class TVShowBox() extends Box('tvsh') {
 Box boxes[];
 } 
*/
public partial class TVShowBox : Box
{
	public const string TYPE = "tvsh";
	public override string DisplayName { get { return "TVShowBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public TVShowBox(): base(IsoStream.FromFourCC("tvsh"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleEncoderNameBox() extends Box('©enc') {
 Box boxes[];
 } 
*/
public partial class AppleEncoderNameBox : Box
{
	public const string TYPE = "©enc";
	public override string DisplayName { get { return "AppleEncoderNameBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleEncoderNameBox(): base(IsoStream.FromFourCC("©enc"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class DTSSpecificBox() extends Box('ddts') {
 unsigned int(32) dtsSamplingFrequency;
 unsigned int(32) maxBitRate;
 unsigned int(32) avgBitRate;
 unsigned int(8) pcmSampleDepth;
 bit(2) frameDuration;
 bit(5) streamConstruction;
 bit(1) coreLFEPresent;
 bit(6) coreLayout;
 bit(14) coreSize;
 bit(1) stereoDownmix;
 bit(3) representationType;
 bit(16) channelLayout;
 bit(1) multiAssetFlag;
 bit(1) lbrDurationMod;
 bit(1) reservedBoxPresent;
 bit(5) reserved;
 } 
*/
public partial class DTSSpecificBox : Box
{
	public const string TYPE = "ddts";
	public override string DisplayName { get { return "DTSSpecificBox"; } }

	protected uint dtsSamplingFrequency; 
	public uint DtsSamplingFrequency { get { return this.dtsSamplingFrequency; } set { this.dtsSamplingFrequency = value; } }

	protected uint maxBitRate; 
	public uint MaxBitRate { get { return this.maxBitRate; } set { this.maxBitRate = value; } }

	protected uint avgBitRate; 
	public uint AvgBitRate { get { return this.avgBitRate; } set { this.avgBitRate = value; } }

	protected byte pcmSampleDepth; 
	public byte PcmSampleDepth { get { return this.pcmSampleDepth; } set { this.pcmSampleDepth = value; } }

	protected byte frameDuration; 
	public byte FrameDuration { get { return this.frameDuration; } set { this.frameDuration = value; } }

	protected byte streamConstruction; 
	public byte StreamConstruction { get { return this.streamConstruction; } set { this.streamConstruction = value; } }

	protected bool coreLFEPresent; 
	public bool CoreLFEPresent { get { return this.coreLFEPresent; } set { this.coreLFEPresent = value; } }

	protected byte coreLayout; 
	public byte CoreLayout { get { return this.coreLayout; } set { this.coreLayout = value; } }

	protected ushort coreSize; 
	public ushort CoreSize { get { return this.coreSize; } set { this.coreSize = value; } }

	protected bool stereoDownmix; 
	public bool StereoDownmix { get { return this.stereoDownmix; } set { this.stereoDownmix = value; } }

	protected byte representationType; 
	public byte RepresentationType { get { return this.representationType; } set { this.representationType = value; } }

	protected ushort channelLayout; 
	public ushort ChannelLayout { get { return this.channelLayout; } set { this.channelLayout = value; } }

	protected bool multiAssetFlag; 
	public bool MultiAssetFlag { get { return this.multiAssetFlag; } set { this.multiAssetFlag = value; } }

	protected bool lbrDurationMod; 
	public bool LbrDurationMod { get { return this.lbrDurationMod; } set { this.lbrDurationMod = value; } }

	protected bool reservedBoxPresent; 
	public bool ReservedBoxPresent { get { return this.reservedBoxPresent; } set { this.reservedBoxPresent = value; } }

	protected byte reserved; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	public DTSSpecificBox(): base(IsoStream.FromFourCC("ddts"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.dtsSamplingFrequency, "dtsSamplingFrequency"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.maxBitRate, "maxBitRate"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.avgBitRate, "avgBitRate"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.pcmSampleDepth, "pcmSampleDepth"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.frameDuration, "frameDuration"); 
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.streamConstruction, "streamConstruction"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.coreLFEPresent, "coreLFEPresent"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.coreLayout, "coreLayout"); 
		boxSize += stream.ReadBits(boxSize, readSize, 14,  out this.coreSize, "coreSize"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.stereoDownmix, "stereoDownmix"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.representationType, "representationType"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.channelLayout, "channelLayout"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.multiAssetFlag, "multiAssetFlag"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.lbrDurationMod, "lbrDurationMod"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reservedBoxPresent, "reservedBoxPresent"); 
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.dtsSamplingFrequency, "dtsSamplingFrequency"); 
		boxSize += stream.WriteUInt32( this.maxBitRate, "maxBitRate"); 
		boxSize += stream.WriteUInt32( this.avgBitRate, "avgBitRate"); 
		boxSize += stream.WriteUInt8( this.pcmSampleDepth, "pcmSampleDepth"); 
		boxSize += stream.WriteBits(2,  this.frameDuration, "frameDuration"); 
		boxSize += stream.WriteBits(5,  this.streamConstruction, "streamConstruction"); 
		boxSize += stream.WriteBit( this.coreLFEPresent, "coreLFEPresent"); 
		boxSize += stream.WriteBits(6,  this.coreLayout, "coreLayout"); 
		boxSize += stream.WriteBits(14,  this.coreSize, "coreSize"); 
		boxSize += stream.WriteBit( this.stereoDownmix, "stereoDownmix"); 
		boxSize += stream.WriteBits(3,  this.representationType, "representationType"); 
		boxSize += stream.WriteUInt16( this.channelLayout, "channelLayout"); 
		boxSize += stream.WriteBit( this.multiAssetFlag, "multiAssetFlag"); 
		boxSize += stream.WriteBit( this.lbrDurationMod, "lbrDurationMod"); 
		boxSize += stream.WriteBit( this.reservedBoxPresent, "reservedBoxPresent"); 
		boxSize += stream.WriteBits(5,  this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // dtsSamplingFrequency
		boxSize += 32; // maxBitRate
		boxSize += 32; // avgBitRate
		boxSize += 8; // pcmSampleDepth
		boxSize += 2; // frameDuration
		boxSize += 5; // streamConstruction
		boxSize += 1; // coreLFEPresent
		boxSize += 6; // coreLayout
		boxSize += 14; // coreSize
		boxSize += 1; // stereoDownmix
		boxSize += 3; // representationType
		boxSize += 16; // channelLayout
		boxSize += 1; // multiAssetFlag
		boxSize += 1; // lbrDurationMod
		boxSize += 1; // reservedBoxPresent
		boxSize += 5; // reserved
		return boxSize;
	}
}


/*
aligned(8) class DataBox() extends Box('data') {
unsigned int(32) dataType;
 unsigned int(32) dataLang;
 bit(8) data[];
 } 
*/
public partial class DataBox : Box
{
	public const string TYPE = "data";
	public override string DisplayName { get { return "DataBox"; } }

	protected uint dataType; 
	public uint DataType { get { return this.dataType; } set { this.dataType = value; } }

	protected uint dataLang; 
	public uint DataLang { get { return this.dataLang; } set { this.dataLang = value; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public DataBox(): base(IsoStream.FromFourCC("data"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.dataType, "dataType"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.dataLang, "dataLang"); 
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.dataType, "dataType"); 
		boxSize += stream.WriteUInt32( this.dataLang, "dataLang"); 
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // dataType
		boxSize += 32; // dataLang
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class CustomBox() extends Box('----') {
 bit(8) data[];
 } 
*/
public partial class CustomBox : Box
{
	public const string TYPE = "----";
	public override string DisplayName { get { return "CustomBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public CustomBox(): base(IsoStream.FromFourCC("----"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class ApplePartialSyncSamplesBox() extends FullBox('stps', version = 0, 0) {
	unsigned int(32)	entry_count;
	int i;
	for (i=0; i < entry_count; i++) {
		unsigned int(32)	sample_number;
	}
}
*/
public partial class ApplePartialSyncSamplesBox : FullBox
{
	public const string TYPE = "stps";
	public override string DisplayName { get { return "ApplePartialSyncSamplesBox"; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected uint[] sample_number; 
	public uint[] SampleNumber { get { return this.sample_number; } set { this.sample_number = value; } }

	public ApplePartialSyncSamplesBox(): base(IsoStream.FromFourCC("stps"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 
		

		this.sample_number = new uint[IsoStream.GetInt( entry_count)];
		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_number[i], "sample_number"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 
		

		for (int i=0; i < entry_count; i++)
		{
			boxSize += stream.WriteUInt32( this.sample_number[i], "sample_number"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // entry_count
		

		for (int i=0; i < entry_count; i++)
		{
			boxSize += 32; // sample_number
		}
		return boxSize;
	}
}


/*
aligned(8) class SampleScaleBox() extends FullBox('stsl', version = 0, 0) {
	bit(7)	reserved;
	bit(1) constrained; unsigned int(8) scaleMethod; signed int(16) displayCenterX; signed int(16) displayCenterY;
	}

*/
public partial class SampleScaleBox : FullBox
{
	public const string TYPE = "stsl";
	public override string DisplayName { get { return "SampleScaleBox"; } }

	protected byte reserved; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected bool constrained; 
	public bool Constrained { get { return this.constrained; } set { this.constrained = value; } }

	protected byte scaleMethod; 
	public byte ScaleMethod { get { return this.scaleMethod; } set { this.scaleMethod = value; } }

	protected short displayCenterX; 
	public short DisplayCenterX { get { return this.displayCenterX; } set { this.displayCenterX = value; } }

	protected short displayCenterY; 
	public short DisplayCenterY { get { return this.displayCenterY; } set { this.displayCenterY = value; } }

	public SampleScaleBox(): base(IsoStream.FromFourCC("stsl"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.constrained, "constrained"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.scaleMethod, "scaleMethod"); 
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.displayCenterX, "displayCenterX"); 
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.displayCenterY, "displayCenterY"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(7,  this.reserved, "reserved"); 
		boxSize += stream.WriteBit( this.constrained, "constrained"); 
		boxSize += stream.WriteUInt8( this.scaleMethod, "scaleMethod"); 
		boxSize += stream.WriteInt16( this.displayCenterX, "displayCenterX"); 
		boxSize += stream.WriteInt16( this.displayCenterY, "displayCenterY"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 7; // reserved
		boxSize += 1; // constrained
		boxSize += 8; // scaleMethod
		boxSize += 16; // displayCenterX
		boxSize += 16; // displayCenterY
		return boxSize;
	}
}


/*
aligned(8) class IOD_Descriptor extends BaseDescriptor : bit(8) tag=MP4_IOD_Tag {
unsigned int(16) odid; unsigned int(8) odProfileLevel;
 unsigned int(8) sceneProfileLevel;
	unsigned int(8) audioProfileId;
	unsigned int(8) videoProfileId;
	unsigned int(8) graphicsProfileLevel;
	IodsSample samples[];
 }
 
*/
public partial class IOD_Descriptor : BaseDescriptor
{
	public const byte TYPE = DescriptorTags.MP4_IOD_Tag;
	public override string DisplayName { get { return "IOD_Descriptor"; } }

	protected ushort odid; 
	public ushort Odid { get { return this.odid; } set { this.odid = value; } }

	protected byte odProfileLevel; 
	public byte OdProfileLevel { get { return this.odProfileLevel; } set { this.odProfileLevel = value; } }

	protected byte sceneProfileLevel; 
	public byte SceneProfileLevel { get { return this.sceneProfileLevel; } set { this.sceneProfileLevel = value; } }

	protected byte audioProfileId; 
	public byte AudioProfileId { get { return this.audioProfileId; } set { this.audioProfileId = value; } }

	protected byte videoProfileId; 
	public byte VideoProfileId { get { return this.videoProfileId; } set { this.videoProfileId = value; } }

	protected byte graphicsProfileLevel; 
	public byte GraphicsProfileLevel { get { return this.graphicsProfileLevel; } set { this.graphicsProfileLevel = value; } }

	protected IodsSample[] samples; 
	public IodsSample[] Samples { get { return this.samples; } set { this.samples = value; } }

	public IOD_Descriptor(): base(DescriptorTags.MP4_IOD_Tag)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.odid, "odid"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.odProfileLevel, "odProfileLevel"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.sceneProfileLevel, "sceneProfileLevel"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.audioProfileId, "audioProfileId"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.videoProfileId, "videoProfileId"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.graphicsProfileLevel, "graphicsProfileLevel"); 
		boxSize += stream.ReadClass(boxSize, readSize, this, (uint)(uint.MaxValue), () => new IodsSample(),  out this.samples, "samples"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.odid, "odid"); 
		boxSize += stream.WriteUInt8( this.odProfileLevel, "odProfileLevel"); 
		boxSize += stream.WriteUInt8( this.sceneProfileLevel, "sceneProfileLevel"); 
		boxSize += stream.WriteUInt8( this.audioProfileId, "audioProfileId"); 
		boxSize += stream.WriteUInt8( this.videoProfileId, "videoProfileId"); 
		boxSize += stream.WriteUInt8( this.graphicsProfileLevel, "graphicsProfileLevel"); 
		boxSize += stream.WriteClass( this.samples, "samples"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // odid
		boxSize += 8; // odProfileLevel
		boxSize += 8; // sceneProfileLevel
		boxSize += 8; // audioProfileId
		boxSize += 8; // videoProfileId
		boxSize += 8; // graphicsProfileLevel
		boxSize += IsoStream.CalculateClassSize(samples); // samples
		return boxSize;
	}
}


/*
aligned(8) class IodsSample() {
	unsigned int(8) incTag;
	unsigned int(8) length;
	unsigned int(32) trackId;
 } 
*/
public partial class IodsSample : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "IodsSample"; } }

	protected byte incTag; 
	public byte IncTag { get { return this.incTag; } set { this.incTag = value; } }

	protected byte length; 
	public byte Length { get { return this.length; } set { this.length = value; } }

	protected uint trackId; 
	public uint TrackId { get { return this.trackId; } set { this.trackId = value; } }

	public IodsSample(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.incTag, "incTag"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.length, "length"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.trackId, "trackId"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt8( this.incTag, "incTag"); 
		boxSize += stream.WriteUInt8( this.length, "length"); 
		boxSize += stream.WriteUInt32( this.trackId, "trackId"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 8; // incTag
		boxSize += 8; // length
		boxSize += 32; // trackId
		return boxSize;
	}
}


/*
class IPMP_Descriptor() extends BaseDescriptor : bit(8) tag=IPMP_DescrTag {
 bit(8) IPMP_DescriptorID;
 unsigned int(16)
 IPMPS_Type;
 if (IPMPS_Type == 0) {
 bit(8) URLString[sizeOfInstance-3];
 } else {
 bit(8) IPMP_data[sizeOfInstance-3];
 }
 }
*/
public partial class IPMP_Descriptor : BaseDescriptor
{
	public const byte TYPE = DescriptorTags.IPMP_DescrTag;
	public override string DisplayName { get { return "IPMP_Descriptor"; } }

	protected byte IPMP_DescriptorID; 
	public byte IPMPDescriptorID { get { return this.IPMP_DescriptorID; } set { this.IPMP_DescriptorID = value; } }

	protected ushort IPMPS_Type; 
	public ushort IPMPSType { get { return this.IPMPS_Type; } set { this.IPMPS_Type = value; } }

	protected byte[] URLString; 
	public byte[] _URLString { get { return this.URLString; } set { this.URLString = value; } }

	protected byte[] IPMP_data; 
	public byte[] IPMPData { get { return this.IPMP_data; } set { this.IPMP_data = value; } }

	public IPMP_Descriptor(): base(DescriptorTags.IPMP_DescrTag)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.IPMP_DescriptorID, "IPMP_DescriptorID"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.IPMPS_Type, "IPMPS_Type"); 

		if (IPMPS_Type == 0)
		{
			boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(sizeOfInstance-3),  out this.URLString, "URLString"); 
		}

		else 
		{
			boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(sizeOfInstance-3),  out this.IPMP_data, "IPMP_data"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.IPMP_DescriptorID, "IPMP_DescriptorID"); 
		boxSize += stream.WriteUInt16( this.IPMPS_Type, "IPMPS_Type"); 

		if (IPMPS_Type == 0)
		{
			boxSize += stream.WriteUInt8Array((uint)(sizeOfInstance-3),  this.URLString, "URLString"); 
		}

		else 
		{
			boxSize += stream.WriteUInt8Array((uint)(sizeOfInstance-3),  this.IPMP_data, "IPMP_data"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // IPMP_DescriptorID
		boxSize += 16; // IPMPS_Type

		if (IPMPS_Type == 0)
		{
			boxSize += ((ulong)(sizeOfInstance-3) * 8); // URLString
		}

		else 
		{
			boxSize += ((ulong)(sizeOfInstance-3) * 8); // IPMP_data
		}
		return boxSize;
	}
}


/*
aligned(8) class IPMPControlBox() extends FullBox('ipmc') {
 Descriptor toollist;
 unsigned int(8) count; Descriptor descriptor[count];
 }
*/
public partial class IPMPControlBox : FullBox
{
	public const string TYPE = "ipmc";
	public override string DisplayName { get { return "IPMPControlBox"; } }

	protected Descriptor toollist; 
	public Descriptor Toollist { get { return this.toollist; } set { this.toollist = value; } }

	protected byte count; 
	public byte Count { get { return this.count; } set { this.count = value; } }

	protected Descriptor[] descriptor; 
	public Descriptor[] Descriptor { get { return this.descriptor; } set { this.descriptor = value; } }

	public IPMPControlBox(): base(IsoStream.FromFourCC("ipmc"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadDescriptor(boxSize, readSize, this,  out this.toollist, "toollist"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.count, "count"); 
		// boxSize += stream.ReadDescriptor(boxSize, readSize, this,  out this.descriptor, "descriptor"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteDescriptor( this.toollist, "toollist"); 
		boxSize += stream.WriteUInt8( this.count, "count"); 
		// boxSize += stream.WriteDescriptor( this.descriptor, "descriptor"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateDescriptorSize(toollist); // toollist
		boxSize += 8; // count
		// boxSize += IsoStream.CalculateDescriptorSize(descriptor); // descriptor
		return boxSize;
	}
}


/*
aligned(8) class IPMPInfoBox() extends FullBox('imif') {
 Descriptor descriptor[0 .. 255];
 }
*/
public partial class IPMPInfoBox : FullBox
{
	public const string TYPE = "imif";
	public override string DisplayName { get { return "IPMPInfoBox"; } }

	protected Descriptor[] descriptor; 
	public Descriptor[] Descriptor { get { return this.descriptor; } set { this.descriptor = value; } }

	public IPMPInfoBox(): base(IsoStream.FromFourCC("imif"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadDescriptor(boxSize, readSize, this,  out this.descriptor, "descriptor"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteDescriptor( this.descriptor, "descriptor"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateDescriptorSize(descriptor); // descriptor
		return boxSize;
	}
}


/*
aligned(8) class GenreBox() extends FullBox('gnre') {
 Box boxes[]; 
 }
*/
public partial class GenreBox : FullBox
{
	public const string TYPE = "gnre";
	public override string DisplayName { get { return "GenreBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public GenreBox(): base(IsoStream.FromFourCC("gnre"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class FairPlayUserIDBox() extends Box('user') {
 bit(8) data[]; 
 }
*/
public partial class FairPlayUserIDBox : Box
{
	public const string TYPE = "user";
	public override string DisplayName { get { return "FairPlayUserIDBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public FairPlayUserIDBox(): base(IsoStream.FromFourCC("user"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class FairPlayUserNameBox() extends Box('name') {
 bit(8) data[]; 
 }
*/
public partial class FairPlayUserNameBox : Box
{
	public const string TYPE = "name";
	public override string DisplayName { get { return "FairPlayUserNameBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public FairPlayUserNameBox(): base(IsoStream.FromFourCC("name"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class FairPlayUserKeyBox() extends Box('key ') {
 bit(8) data[]; 
 }
*/
public partial class FairPlayUserKeyBox : Box
{
	public const string TYPE = "key ";
	public override string DisplayName { get { return "FairPlayUserKeyBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public FairPlayUserKeyBox(): base(IsoStream.FromFourCC("key "))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class FairPlayIvBox() extends Box('iviv') {
 bit(8) data[]; 
 }
*/
public partial class FairPlayIvBox : Box
{
	public const string TYPE = "iviv";
	public override string DisplayName { get { return "FairPlayIvBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public FairPlayIvBox(): base(IsoStream.FromFourCC("iviv"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class FairPlayPrivateKeyBox() extends Box('priv') {
 bit(8) data[]; 
 }
*/
public partial class FairPlayPrivateKeyBox : Box
{
	public const string TYPE = "priv";
	public override string DisplayName { get { return "FairPlayPrivateKeyBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public FairPlayPrivateKeyBox(): base(IsoStream.FromFourCC("priv"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class MetaBoxRelationBox() extends FullBox('mere') {
 unsigned int(32) firstMetaBoxHandlerType;
 unsigned int(32) secondMetaBoxHandlerType;
 bit(8) metaboxRelation; 
 }
*/
public partial class MetaBoxRelationBox : FullBox
{
	public const string TYPE = "mere";
	public override string DisplayName { get { return "MetaBoxRelationBox"; } }

	protected uint firstMetaBoxHandlerType; 
	public uint FirstMetaBoxHandlerType { get { return this.firstMetaBoxHandlerType; } set { this.firstMetaBoxHandlerType = value; } }

	protected uint secondMetaBoxHandlerType; 
	public uint SecondMetaBoxHandlerType { get { return this.secondMetaBoxHandlerType; } set { this.secondMetaBoxHandlerType = value; } }

	protected byte metaboxRelation; 
	public byte MetaboxRelation { get { return this.metaboxRelation; } set { this.metaboxRelation = value; } }

	public MetaBoxRelationBox(): base(IsoStream.FromFourCC("mere"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.firstMetaBoxHandlerType, "firstMetaBoxHandlerType"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.secondMetaBoxHandlerType, "secondMetaBoxHandlerType"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.metaboxRelation, "metaboxRelation"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.firstMetaBoxHandlerType, "firstMetaBoxHandlerType"); 
		boxSize += stream.WriteUInt32( this.secondMetaBoxHandlerType, "secondMetaBoxHandlerType"); 
		boxSize += stream.WriteUInt8( this.metaboxRelation, "metaboxRelation"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // firstMetaBoxHandlerType
		boxSize += 32; // secondMetaBoxHandlerType
		boxSize += 8; // metaboxRelation
		return boxSize;
	}
}


/*
aligned(8) class ID3TagBox() extends FullBox('ID32') {
 bit(8) data[]; 
 }
*/
public partial class ID3TagBox : FullBox
{
	public const string TYPE = "ID32";
	public override string DisplayName { get { return "ID3TagBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ID3TagBox(): base(IsoStream.FromFourCC("ID32"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class ITunesMetadataMeanBox() extends FullBox('mean') {
 string domain; 
 }
*/
public partial class ITunesMetadataMeanBox : FullBox
{
	public const string TYPE = "mean";
	public override string DisplayName { get { return "ITunesMetadataMeanBox"; } }

	protected BinaryUTF8String domain; 
	public BinaryUTF8String Domain { get { return this.domain; } set { this.domain = value; } }

	public ITunesMetadataMeanBox(): base(IsoStream.FromFourCC("mean"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.domain, "domain"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.domain, "domain"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(domain); // domain
		return boxSize;
	}
}


/*
aligned(8) class AlbumArtistSortBox() extends Box('soaa') {
 Box boxes[]; 
 }
*/
public partial class AlbumArtistSortBox : Box
{
	public const string TYPE = "soaa";
	public override string DisplayName { get { return "AlbumArtistSortBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AlbumArtistSortBox(): base(IsoStream.FromFourCC("soaa"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AlbumSortBox() extends Box('soal') {
 Box boxes[]; 
 }
*/
public partial class AlbumSortBox : Box
{
	public const string TYPE = "soal";
	public override string DisplayName { get { return "AlbumSortBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AlbumSortBox(): base(IsoStream.FromFourCC("soal"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ArtistSortBox() extends Box('soar') {
 Box boxes[]; 
 }
*/
public partial class ArtistSortBox : Box
{
	public const string TYPE = "soar";
	public override string DisplayName { get { return "ArtistSortBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public ArtistSortBox(): base(IsoStream.FromFourCC("soar"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class CategoryBox() extends Box('catg') {
 Box boxes[]; 
 }
*/
public partial class CategoryBox : Box
{
	public const string TYPE = "catg";
	public override string DisplayName { get { return "CategoryBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public CategoryBox(): base(IsoStream.FromFourCC("catg"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ComposerSortBox() extends Box('soco') {
 Box boxes[]; 
 }
*/
public partial class ComposerSortBox : Box
{
	public const string TYPE = "soco";
	public override string DisplayName { get { return "ComposerSortBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public ComposerSortBox(): base(IsoStream.FromFourCC("soco"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class EpisodeGlobalUniqueIdBox() extends Box('egid') {
 Box boxes[]; 
 }
*/
public partial class EpisodeGlobalUniqueIdBox : Box
{
	public const string TYPE = "egid";
	public override string DisplayName { get { return "EpisodeGlobalUniqueIdBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public EpisodeGlobalUniqueIdBox(): base(IsoStream.FromFourCC("egid"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ITunesPurchaseAccountBox() extends Box('apID') {
 Box boxes[]; 
 }
*/
public partial class ITunesPurchaseAccountBox : Box
{
	public const string TYPE = "apID";
	public override string DisplayName { get { return "ITunesPurchaseAccountBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public ITunesPurchaseAccountBox(): base(IsoStream.FromFourCC("apID"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ITunesAccountTypeBox() extends Box('akID') {
 Box boxes[]; 
 }
*/
public partial class ITunesAccountTypeBox : Box
{
	public const string TYPE = "akID";
	public override string DisplayName { get { return "ITunesAccountTypeBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public ITunesAccountTypeBox(): base(IsoStream.FromFourCC("akID"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ITunesCountryCodeBox() extends Box('sfID') {
 Box boxes[]; 
 }
*/
public partial class ITunesCountryCodeBox : Box
{
	public const string TYPE = "sfID";
	public override string DisplayName { get { return "ITunesCountryCodeBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public ITunesCountryCodeBox(): base(IsoStream.FromFourCC("sfID"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class CmIDBox() extends Box('cmID') {
	 Box boxes[];
 } 
*/
public partial class CmIDBox : Box
{
	public const string TYPE = "cmID";
	public override string DisplayName { get { return "CmIDBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public CmIDBox(): base(IsoStream.FromFourCC("cmID"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class PlIDBox() extends Box('plID') {
	 Box boxes[];
 } 
*/
public partial class PlIDBox : Box
{
	public const string TYPE = "plID";
	public override string DisplayName { get { return "PlIDBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public PlIDBox(): base(IsoStream.FromFourCC("plID"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class PodcastBox() extends Box('pcst') {
 Box boxes[]; 
 }
*/
public partial class PodcastBox : Box
{
	public const string TYPE = "pcst";
	public override string DisplayName { get { return "PodcastBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public PodcastBox(): base(IsoStream.FromFourCC("pcst"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class PodcastUrlBox() extends Box('purl') {
 Box boxes[]; 
 }
*/
public partial class PodcastUrlBox : Box
{
	public const string TYPE = "purl";
	public override string DisplayName { get { return "PodcastUrlBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public PodcastUrlBox(): base(IsoStream.FromFourCC("purl"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class PurchaseDateBox() extends Box('purd') {
 Box boxes[]; 
 }
*/
public partial class PurchaseDateBox : Box
{
	public const string TYPE = "purd";
	public override string DisplayName { get { return "PurchaseDateBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public PurchaseDateBox(): base(IsoStream.FromFourCC("purd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class TrackSortBox() extends Box('sonm') {
 Box boxes[]; 
 }
*/
public partial class TrackSortBox : Box
{
	public const string TYPE = "sonm";
	public override string DisplayName { get { return "TrackSortBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public TrackSortBox(): base(IsoStream.FromFourCC("sonm"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class TVNetworkNameBox() extends Box('tvnn') {
 Box boxes[]; 
 }
*/
public partial class TVNetworkNameBox : Box
{
	public const string TYPE = "tvnn";
	public override string DisplayName { get { return "TVNetworkNameBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public TVNetworkNameBox(): base(IsoStream.FromFourCC("tvnn"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class TVShowSortBox() extends Box('sosn') {
 Box boxes[]; 
 }
*/
public partial class TVShowSortBox : Box
{
	public const string TYPE = "sosn";
	public override string DisplayName { get { return "TVShowSortBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public TVShowSortBox(): base(IsoStream.FromFourCC("sosn"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ThreeGPPAlbumBox() extends Box('albm') {
	bit(1) reserved;
 unsigned int(5)[3] language;
	string value;
 bit(8) trackNumber; // optional
} 
*/
public partial class ThreeGPPAlbumBox : Box
{
	public const string TYPE = "albm";
	public override string DisplayName { get { return "ThreeGPPAlbumBox"; } }

	protected bool reserved; 
	public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected string language; 
	public string Language { get { return this.language; } set { this.language = value; } }

	protected BinaryUTF8String value; 
	public BinaryUTF8String Value { get { return this.value; } set { this.value = value; } }

	protected byte trackNumber;  //  optional
	public byte TrackNumber { get { return this.trackNumber; } set { this.trackNumber = value; } }

	public ThreeGPPAlbumBox(): base(IsoStream.FromFourCC("albm"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadIso639(boxSize, readSize,  out this.language, "language"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.value, "value"); 
		if (stream.HasMoreData(boxSize, readSize)) boxSize += stream.ReadUInt8(boxSize, readSize,  out this.trackNumber, "trackNumber"); // optional
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.reserved, "reserved"); 
		boxSize += stream.WriteIso639( this.language, "language"); 
		boxSize += stream.WriteStringZeroTerminated( this.value, "value"); 
		boxSize += stream.WriteUInt8( this.trackNumber, "trackNumber"); // optional
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // reserved
		boxSize += 15; // language
		boxSize += IsoStream.CalculateStringSize(value); // value
		boxSize += 8; // trackNumber
		return boxSize;
	}
}


/*
aligned(8) class ThreeGPPClassificationBox() extends Box('clsf') {
	bit(1) reserved;
 unsigned int(5)[3] language;
	string value; 
} 
*/
public partial class ThreeGPPClassificationBox : Box
{
	public const string TYPE = "clsf";
	public override string DisplayName { get { return "ThreeGPPClassificationBox"; } }

	protected bool reserved; 
	public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected string language; 
	public string Language { get { return this.language; } set { this.language = value; } }

	protected BinaryUTF8String value; 
	public BinaryUTF8String Value { get { return this.value; } set { this.value = value; } }

	public ThreeGPPClassificationBox(): base(IsoStream.FromFourCC("clsf"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadIso639(boxSize, readSize,  out this.language, "language"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.value, "value"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.reserved, "reserved"); 
		boxSize += stream.WriteIso639( this.language, "language"); 
		boxSize += stream.WriteStringZeroTerminated( this.value, "value"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // reserved
		boxSize += 15; // language
		boxSize += IsoStream.CalculateStringSize(value); // value
		return boxSize;
	}
}


/*
aligned(8) class ThreeGPPLocationInformationBox() extends Box('loci') {
	bit(1) reserved;
 unsigned int(5)[3] language;
	string value;
 string placeName; unsigned int(8) role; fixedpoint1616 longitude;
 fixedpoint1616 latitude;
 fixedpoint1616 altitude;
 string astronomicalBody;
 string additionalNotes;
 }
*/
public partial class ThreeGPPLocationInformationBox : Box
{
	public const string TYPE = "loci";
	public override string DisplayName { get { return "ThreeGPPLocationInformationBox"; } }

	protected bool reserved; 
	public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected string language; 
	public string Language { get { return this.language; } set { this.language = value; } }

	protected BinaryUTF8String value; 
	public BinaryUTF8String Value { get { return this.value; } set { this.value = value; } }

	protected BinaryUTF8String placeName; 
	public BinaryUTF8String PlaceName { get { return this.placeName; } set { this.placeName = value; } }

	protected byte role; 
	public byte Role { get { return this.role; } set { this.role = value; } }

	protected double longitude; 
	public double Longitude { get { return this.longitude; } set { this.longitude = value; } }

	protected double latitude; 
	public double Latitude { get { return this.latitude; } set { this.latitude = value; } }

	protected double altitude; 
	public double Altitude { get { return this.altitude; } set { this.altitude = value; } }

	protected BinaryUTF8String astronomicalBody; 
	public BinaryUTF8String AstronomicalBody { get { return this.astronomicalBody; } set { this.astronomicalBody = value; } }

	protected BinaryUTF8String additionalNotes; 
	public BinaryUTF8String AdditionalNotes { get { return this.additionalNotes; } set { this.additionalNotes = value; } }

	public ThreeGPPLocationInformationBox(): base(IsoStream.FromFourCC("loci"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadIso639(boxSize, readSize,  out this.language, "language"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.value, "value"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.placeName, "placeName"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.role, "role"); 
		boxSize += stream.ReadDouble32(boxSize, readSize,  out this.longitude, "longitude"); 
		boxSize += stream.ReadDouble32(boxSize, readSize,  out this.latitude, "latitude"); 
		boxSize += stream.ReadDouble32(boxSize, readSize,  out this.altitude, "altitude"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.astronomicalBody, "astronomicalBody"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.additionalNotes, "additionalNotes"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.reserved, "reserved"); 
		boxSize += stream.WriteIso639( this.language, "language"); 
		boxSize += stream.WriteStringZeroTerminated( this.value, "value"); 
		boxSize += stream.WriteStringZeroTerminated( this.placeName, "placeName"); 
		boxSize += stream.WriteUInt8( this.role, "role"); 
		boxSize += stream.WriteDouble32( this.longitude, "longitude"); 
		boxSize += stream.WriteDouble32( this.latitude, "latitude"); 
		boxSize += stream.WriteDouble32( this.altitude, "altitude"); 
		boxSize += stream.WriteStringZeroTerminated( this.astronomicalBody, "astronomicalBody"); 
		boxSize += stream.WriteStringZeroTerminated( this.additionalNotes, "additionalNotes"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // reserved
		boxSize += 15; // language
		boxSize += IsoStream.CalculateStringSize(value); // value
		boxSize += IsoStream.CalculateStringSize(placeName); // placeName
		boxSize += 8; // role
		boxSize += 32; // longitude
		boxSize += 32; // latitude
		boxSize += 32; // altitude
		boxSize += IsoStream.CalculateStringSize(astronomicalBody); // astronomicalBody
		boxSize += IsoStream.CalculateStringSize(additionalNotes); // additionalNotes
		return boxSize;
	}
}


/*
aligned(8) class ThreeGPPPerformerBox() extends Box('perf') {
	bit(1) reserved;
 unsigned int(5)[3] language;
	string value; 
} 
*/
public partial class ThreeGPPPerformerBox : Box
{
	public const string TYPE = "perf";
	public override string DisplayName { get { return "ThreeGPPPerformerBox"; } }

	protected bool reserved; 
	public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected string language; 
	public string Language { get { return this.language; } set { this.language = value; } }

	protected BinaryUTF8String value; 
	public BinaryUTF8String Value { get { return this.value; } set { this.value = value; } }

	public ThreeGPPPerformerBox(): base(IsoStream.FromFourCC("perf"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadIso639(boxSize, readSize,  out this.language, "language"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.value, "value"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.reserved, "reserved"); 
		boxSize += stream.WriteIso639( this.language, "language"); 
		boxSize += stream.WriteStringZeroTerminated( this.value, "value"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // reserved
		boxSize += 15; // language
		boxSize += IsoStream.CalculateStringSize(value); // value
		return boxSize;
	}
}


/*
aligned(8) class ThreeGPPRecordingYearBox() extends Box('yrrc') {
	bit(1) reserved;
 unsigned int(5)[3] language;
	string value; 
 unsigned int(16) year;
 } 
*/
public partial class ThreeGPPRecordingYearBox : Box
{
	public const string TYPE = "yrrc";
	public override string DisplayName { get { return "ThreeGPPRecordingYearBox"; } }

	protected bool reserved; 
	public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected string language; 
	public string Language { get { return this.language; } set { this.language = value; } }

	protected BinaryUTF8String value; 
	public BinaryUTF8String Value { get { return this.value; } set { this.value = value; } }

	protected ushort year; 
	public ushort Year { get { return this.year; } set { this.year = value; } }

	public ThreeGPPRecordingYearBox(): base(IsoStream.FromFourCC("yrrc"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadIso639(boxSize, readSize,  out this.language, "language"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.value, "value"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.year, "year"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.reserved, "reserved"); 
		boxSize += stream.WriteIso639( this.language, "language"); 
		boxSize += stream.WriteStringZeroTerminated( this.value, "value"); 
		boxSize += stream.WriteUInt16( this.year, "year"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // reserved
		boxSize += 15; // language
		boxSize += IsoStream.CalculateStringSize(value); // value
		boxSize += 16; // year
		return boxSize;
	}
}


/*
aligned(8) class OMAAccessUnitFormatBox() extends FullBox('odaf') {
	 bit(7) reserved;
 bit(1) selectiveEncrypted;
 unsigned int(8) keyIndicatorLength;
 unsigned int(8) initialVectorLength;
 } 
*/
public partial class OMAAccessUnitFormatBox : FullBox
{
	public const string TYPE = "odaf";
	public override string DisplayName { get { return "OMAAccessUnitFormatBox"; } }

	protected byte reserved; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected bool selectiveEncrypted; 
	public bool SelectiveEncrypted { get { return this.selectiveEncrypted; } set { this.selectiveEncrypted = value; } }

	protected byte keyIndicatorLength; 
	public byte KeyIndicatorLength { get { return this.keyIndicatorLength; } set { this.keyIndicatorLength = value; } }

	protected byte initialVectorLength; 
	public byte InitialVectorLength { get { return this.initialVectorLength; } set { this.initialVectorLength = value; } }

	public OMAAccessUnitFormatBox(): base(IsoStream.FromFourCC("odaf"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.selectiveEncrypted, "selectiveEncrypted"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.keyIndicatorLength, "keyIndicatorLength"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.initialVectorLength, "initialVectorLength"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(7,  this.reserved, "reserved"); 
		boxSize += stream.WriteBit( this.selectiveEncrypted, "selectiveEncrypted"); 
		boxSize += stream.WriteUInt8( this.keyIndicatorLength, "keyIndicatorLength"); 
		boxSize += stream.WriteUInt8( this.initialVectorLength, "initialVectorLength"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 7; // reserved
		boxSize += 1; // selectiveEncrypted
		boxSize += 8; // keyIndicatorLength
		boxSize += 8; // initialVectorLength
		return boxSize;
	}
}


/*
aligned(8) class OMACommonHeadersBox() extends FullBox('ohdr') {
	 unsigned int(8) encryptionMethod;
 unsigned int(8) paddingScheme;
 unsigned int(64) plaintextLength;
 unsigned int(16) contentIDLength;
 unsigned int(16) rightsIssuerLength;
 unsigned int(16) textualHeadersLength;
 unsigned int(8) contentID[contentIDLength];
 unsigned int(8) rightsIssuerURL[rightsIssuerLength];
 unsigned int(8) textualHeaders[textualHeadersLength];
 } 
*/
public partial class OMACommonHeadersBox : FullBox
{
	public const string TYPE = "ohdr";
	public override string DisplayName { get { return "OMACommonHeadersBox"; } }

	protected byte encryptionMethod; 
	public byte EncryptionMethod { get { return this.encryptionMethod; } set { this.encryptionMethod = value; } }

	protected byte paddingScheme; 
	public byte PaddingScheme { get { return this.paddingScheme; } set { this.paddingScheme = value; } }

	protected ulong plaintextLength; 
	public ulong PlaintextLength { get { return this.plaintextLength; } set { this.plaintextLength = value; } }

	protected ushort contentIDLength; 
	public ushort ContentIDLength { get { return this.contentIDLength; } set { this.contentIDLength = value; } }

	protected ushort rightsIssuerLength; 
	public ushort RightsIssuerLength { get { return this.rightsIssuerLength; } set { this.rightsIssuerLength = value; } }

	protected ushort textualHeadersLength; 
	public ushort TextualHeadersLength { get { return this.textualHeadersLength; } set { this.textualHeadersLength = value; } }

	protected byte[] contentID; 
	public byte[] ContentID { get { return this.contentID; } set { this.contentID = value; } }

	protected byte[] rightsIssuerURL; 
	public byte[] RightsIssuerURL { get { return this.rightsIssuerURL; } set { this.rightsIssuerURL = value; } }

	protected byte[] textualHeaders; 
	public byte[] TextualHeaders { get { return this.textualHeaders; } set { this.textualHeaders = value; } }

	public OMACommonHeadersBox(): base(IsoStream.FromFourCC("ohdr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.encryptionMethod, "encryptionMethod"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.paddingScheme, "paddingScheme"); 
		boxSize += stream.ReadUInt64(boxSize, readSize,  out this.plaintextLength, "plaintextLength"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.contentIDLength, "contentIDLength"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.rightsIssuerLength, "rightsIssuerLength"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.textualHeadersLength, "textualHeadersLength"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(contentIDLength),  out this.contentID, "contentID"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(rightsIssuerLength),  out this.rightsIssuerURL, "rightsIssuerURL"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(textualHeadersLength),  out this.textualHeaders, "textualHeaders"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.encryptionMethod, "encryptionMethod"); 
		boxSize += stream.WriteUInt8( this.paddingScheme, "paddingScheme"); 
		boxSize += stream.WriteUInt64( this.plaintextLength, "plaintextLength"); 
		boxSize += stream.WriteUInt16( this.contentIDLength, "contentIDLength"); 
		boxSize += stream.WriteUInt16( this.rightsIssuerLength, "rightsIssuerLength"); 
		boxSize += stream.WriteUInt16( this.textualHeadersLength, "textualHeadersLength"); 
		boxSize += stream.WriteUInt8Array((uint)(contentIDLength),  this.contentID, "contentID"); 
		boxSize += stream.WriteUInt8Array((uint)(rightsIssuerLength),  this.rightsIssuerURL, "rightsIssuerURL"); 
		boxSize += stream.WriteUInt8Array((uint)(textualHeadersLength),  this.textualHeaders, "textualHeaders"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // encryptionMethod
		boxSize += 8; // paddingScheme
		boxSize += 64; // plaintextLength
		boxSize += 16; // contentIDLength
		boxSize += 16; // rightsIssuerLength
		boxSize += 16; // textualHeadersLength
		boxSize += ((ulong)(contentIDLength) * 8); // contentID
		boxSize += ((ulong)(rightsIssuerLength) * 8); // rightsIssuerURL
		boxSize += ((ulong)(textualHeadersLength) * 8); // textualHeaders
		return boxSize;
	}
}


/*
aligned(8) class OMAContentIDBox() extends FullBox('ccid') {
	 unsigned int(16) contentIDLength;
 unsigned int(8) contentID[contentIDLength];
 } 
*/
public partial class OMAContentIDBox : FullBox
{
	public const string TYPE = "ccid";
	public override string DisplayName { get { return "OMAContentIDBox"; } }

	protected ushort contentIDLength; 
	public ushort ContentIDLength { get { return this.contentIDLength; } set { this.contentIDLength = value; } }

	protected byte[] contentID; 
	public byte[] ContentID { get { return this.contentID; } set { this.contentID = value; } }

	public OMAContentIDBox(): base(IsoStream.FromFourCC("ccid"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.contentIDLength, "contentIDLength"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(contentIDLength),  out this.contentID, "contentID"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.contentIDLength, "contentIDLength"); 
		boxSize += stream.WriteUInt8Array((uint)(contentIDLength),  this.contentID, "contentID"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // contentIDLength
		boxSize += ((ulong)(contentIDLength) * 8); // contentID
		return boxSize;
	}
}


/*
aligned(8) class OMAContentObjectBox() extends FullBox('odda') {
	 unsigned int(32) count;
 unsigned int(8) data[count];
 } 
*/
public partial class OMAContentObjectBox : FullBox
{
	public const string TYPE = "odda";
	public override string DisplayName { get { return "OMAContentObjectBox"; } }

	protected uint count; 
	public uint Count { get { return this.count; } set { this.count = value; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public OMAContentObjectBox(): base(IsoStream.FromFourCC("odda"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.count, "count"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(count),  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.count, "count"); 
		boxSize += stream.WriteUInt8Array((uint)(count),  this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // count
		boxSize += ((ulong)(count) * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class OMACoverURLBox() extends FullBox('cvru') {
	 string content;
 } 
*/
public partial class OMACoverURLBox : FullBox
{
	public const string TYPE = "cvru";
	public override string DisplayName { get { return "OMACoverURLBox"; } }

	protected BinaryUTF8String content; 
	public BinaryUTF8String Content { get { return this.content; } set { this.content = value; } }

	public OMACoverURLBox(): base(IsoStream.FromFourCC("cvru"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.content, "content"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.content, "content"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(content); // content
		return boxSize;
	}
}


/*
aligned(8) class OMADiscreteMediaHeadersBox () extends FullBox('odhe') {
	 unsigned int(8) contentTypeLength;
 unsigned int(8) contentType[contentTypeLength];
 Box boxes[]; 
 } 
*/
public partial class OMADiscreteMediaHeadersBox : FullBox
{
	public const string TYPE = "odhe";
	public override string DisplayName { get { return "OMADiscreteMediaHeadersBox"; } }

	protected byte contentTypeLength; 
	public byte ContentTypeLength { get { return this.contentTypeLength; } set { this.contentTypeLength = value; } }

	protected byte[] contentType; 
	public byte[] ContentType { get { return this.contentType; } set { this.contentType = value; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public OMADiscreteMediaHeadersBox(): base(IsoStream.FromFourCC("odhe"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.contentTypeLength, "contentTypeLength"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(contentTypeLength),  out this.contentType, "contentType"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.contentTypeLength, "contentTypeLength"); 
		boxSize += stream.WriteUInt8Array((uint)(contentTypeLength),  this.contentType, "contentType"); 
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // contentTypeLength
		boxSize += ((ulong)(contentTypeLength) * 8); // contentType
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class OMADrmContainerBox() extends FullBox('odrm') {
	 Box boxes[]; 
 } 
*/
public partial class OMADrmContainerBox : FullBox
{
	public const string TYPE = "odrm";
	public override string DisplayName { get { return "OMADrmContainerBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public OMADrmContainerBox(): base(IsoStream.FromFourCC("odrm"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class OMAIconURLBox() extends FullBox('icnu') {
	 string content;
 } 
*/
public partial class OMAIconURLBox : FullBox
{
	public const string TYPE = "icnu";
	public override string DisplayName { get { return "OMAIconURLBox"; } }

	protected BinaryUTF8String content; 
	public BinaryUTF8String Content { get { return this.content; } set { this.content = value; } }

	public OMAIconURLBox(): base(IsoStream.FromFourCC("icnu"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.content, "content"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.content, "content"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(content); // content
		return boxSize;
	}
}


/*
aligned(8) class OMAInfoURLBox() extends FullBox('infu') {
	 string content;
 } 
*/
public partial class OMAInfoURLBox : FullBox
{
	public const string TYPE = "infu";
	public override string DisplayName { get { return "OMAInfoURLBox"; } }

	protected BinaryUTF8String content; 
	public BinaryUTF8String Content { get { return this.content; } set { this.content = value; } }

	public OMAInfoURLBox(): base(IsoStream.FromFourCC("infu"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.content, "content"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.content, "content"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(content); // content
		return boxSize;
	}
}


/*
aligned(8) class OMALyricsURLBox() extends FullBox('lrcu') {
	 string content;
 } 
*/
public partial class OMALyricsURLBox : FullBox
{
	public const string TYPE = "lrcu";
	public override string DisplayName { get { return "OMALyricsURLBox"; } }

	protected BinaryUTF8String content; 
	public BinaryUTF8String Content { get { return this.content; } set { this.content = value; } }

	public OMALyricsURLBox(): base(IsoStream.FromFourCC("lrcu"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.content, "content"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.content, "content"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(content); // content
		return boxSize;
	}
}


/*
aligned(8) class OMAMutableDRMBox() extends Box('mdri') {
	 Box boxes[];
 } 
*/
public partial class OMAMutableDRMBox : Box
{
	public const string TYPE = "mdri";
	public override string DisplayName { get { return "OMAMutableDRMBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public OMAMutableDRMBox(): base(IsoStream.FromFourCC("mdri"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class OMAKeyManagementBox() extends FullBox('odkm') {
	 Box boxes[];
 } 
*/
public partial class OMAKeyManagementBox : FullBox
{
	public const string TYPE = "odkm";
	public override string DisplayName { get { return "OMAKeyManagementBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public OMAKeyManagementBox(): base(IsoStream.FromFourCC("odkm"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class OMARightsObjectBox() extends FullBox('odrb') {
	 unsigned int(8) data[];
 } 
*/
public partial class OMARightsObjectBox : FullBox
{
	public const string TYPE = "odrb";
	public override string DisplayName { get { return "OMARightsObjectBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public OMARightsObjectBox(): base(IsoStream.FromFourCC("odrb"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class OMATransactionTrackingBox() extends FullBox('odtt') {
	 unsigned int(8) transactionID[16];
 } 
*/
public partial class OMATransactionTrackingBox : FullBox
{
	public const string TYPE = "odtt";
	public override string DisplayName { get { return "OMATransactionTrackingBox"; } }

	protected byte[] transactionID; 
	public byte[] TransactionID { get { return this.transactionID; } set { this.transactionID = value; } }

	public OMATransactionTrackingBox(): base(IsoStream.FromFourCC("odtt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 16,  out this.transactionID, "transactionID"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8Array(16,  this.transactionID, "transactionID"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16 * 8; // transactionID
		return boxSize;
	}
}


/*
aligned(8) class NeroMetadataTagsBox() extends Box('tags') {
	 bit(8) data[];
 } 
*/
public partial class NeroMetadataTagsBox : Box
{
	public const string TYPE = "tags";
	public override string DisplayName { get { return "NeroMetadataTagsBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public NeroMetadataTagsBox(): base(IsoStream.FromFourCC("tags"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleWindowLocationBox() extends Box('WLOC') {
	 signed int(16) locationX;
 signed int(16) locationY;
 } 
*/
public partial class AppleWindowLocationBox : Box
{
	public const string TYPE = "WLOC";
	public override string DisplayName { get { return "AppleWindowLocationBox"; } }

	protected short locationX; 
	public short LocationX { get { return this.locationX; } set { this.locationX = value; } }

	protected short locationY; 
	public short LocationY { get { return this.locationY; } set { this.locationY = value; } }

	public AppleWindowLocationBox(): base(IsoStream.FromFourCC("WLOC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.locationX, "locationX"); 
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.locationY, "locationY"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt16( this.locationX, "locationX"); 
		boxSize += stream.WriteInt16( this.locationY, "locationY"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // locationX
		boxSize += 16; // locationY
		return boxSize;
	}
}


/*
aligned(8) class PlayAllFramesBox() extends Box('AllF') {
	 unsigned int(8) data;
 } 
*/
public partial class PlayAllFramesBox : Box
{
	public const string TYPE = "AllF";
	public override string DisplayName { get { return "PlayAllFramesBox"; } }

	protected byte data; 
	public byte Data { get { return this.data; } set { this.data = value; } }

	public PlayAllFramesBox(): base(IsoStream.FromFourCC("AllF"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // data
		return boxSize;
	}
}


/*
aligned(8) class AppleLoopingBox() extends Box('LOOP') {
	 unsigned int(8) data;
 } 
*/
public partial class AppleLoopingBox : Box
{
	public const string TYPE = "LOOP";
	public override string DisplayName { get { return "AppleLoopingBox"; } }

	protected byte data; 
	public byte Data { get { return this.data; } set { this.data = value; } }

	public AppleLoopingBox(): base(IsoStream.FromFourCC("LOOP"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // data
		return boxSize;
	}
}


/*
aligned(8) class AppleSelectionOnlyBox() extends Box('SelO') {
	 unsigned int(8) data;
 } 
*/
public partial class AppleSelectionOnlyBox : Box
{
	public const string TYPE = "SelO";
	public override string DisplayName { get { return "AppleSelectionOnlyBox"; } }

	protected byte data; 
	public byte Data { get { return this.data; } set { this.data = value; } }

	public AppleSelectionOnlyBox(): base(IsoStream.FromFourCC("SelO"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // data
		return boxSize;
	}
}


/*
aligned(8) class AppleAutoPlayBox() extends Box('play') {
	 unsigned int(8) autoplay;
 } 
*/
public partial class AppleAutoPlayBox : Box
{
	public const string TYPE = "play";
	public override string DisplayName { get { return "AppleAutoPlayBox"; } }

	protected byte autoplay; 
	public byte Autoplay { get { return this.autoplay; } set { this.autoplay = value; } }

	public AppleAutoPlayBox(): base(IsoStream.FromFourCC("play"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.autoplay, "autoplay"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.autoplay, "autoplay"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // autoplay
		return boxSize;
	}
}


/*
aligned(8) class ApplePtvBox() extends Box('ptv ') {
	 bit(8) data[];
 } 
*/
public partial class ApplePtvBox : Box
{
	public const string TYPE = "ptv ";
	public override string DisplayName { get { return "ApplePtvBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ApplePtvBox(): base(IsoStream.FromFourCC("ptv "))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleArgBox() extends Box('©arg') {
	 bit(8) data[];
 } 
*/
public partial class AppleArgBox : Box
{
	public const string TYPE = "©arg";
	public override string DisplayName { get { return "AppleArgBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleArgBox(): base(IsoStream.FromFourCC("©arg"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleArkBox() extends Box('©ark') {
	 bit(8) data[];
 } 
*/
public partial class AppleArkBox : Box
{
	public const string TYPE = "©ark";
	public override string DisplayName { get { return "AppleArkBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleArkBox(): base(IsoStream.FromFourCC("©ark"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleCokBox() extends Box('©cok') {
	 bit(8) data[];
 } 
*/
public partial class AppleCokBox : Box
{
	public const string TYPE = "©cok";
	public override string DisplayName { get { return "AppleCokBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleCokBox(): base(IsoStream.FromFourCC("©cok"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleComBox() extends Box('©com') {
	 bit(8) data[];
 } 
*/
public partial class AppleComBox : Box
{
	public const string TYPE = "©com";
	public override string DisplayName { get { return "AppleComBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleComBox(): base(IsoStream.FromFourCC("©com"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleDirBox() extends Box('©dir') {
	 bit(8) data[];
 } 
*/
public partial class AppleDirBox : Box
{
	public const string TYPE = "©dir";
	public override string DisplayName { get { return "AppleDirBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleDirBox(): base(IsoStream.FromFourCC("©dir"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleEd1Box() extends Box('©ed1') {
	 bit(8) data[];
 } 
*/
public partial class AppleEd1Box : Box
{
	public const string TYPE = "©ed1";
	public override string DisplayName { get { return "AppleEd1Box"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleEd1Box(): base(IsoStream.FromFourCC("©ed1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleEd2Box() extends Box('©ed2') {
	 bit(8) data[];
 } 
*/
public partial class AppleEd2Box : Box
{
	public const string TYPE = "©ed2";
	public override string DisplayName { get { return "AppleEd2Box"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleEd2Box(): base(IsoStream.FromFourCC("©ed2"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleEd3Box() extends Box('©ed3') {
	 bit(8) data[];
 } 
*/
public partial class AppleEd3Box : Box
{
	public const string TYPE = "©ed3";
	public override string DisplayName { get { return "AppleEd3Box"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleEd3Box(): base(IsoStream.FromFourCC("©ed3"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleEd4Box() extends Box('©ed4') {
	 bit(8) data[];
 } 
*/
public partial class AppleEd4Box : Box
{
	public const string TYPE = "©ed4";
	public override string DisplayName { get { return "AppleEd4Box"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleEd4Box(): base(IsoStream.FromFourCC("©ed4"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleEd5Box() extends Box('©ed5') {
	 bit(8) data[];
 } 
*/
public partial class AppleEd5Box : Box
{
	public const string TYPE = "©ed5";
	public override string DisplayName { get { return "AppleEd5Box"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleEd5Box(): base(IsoStream.FromFourCC("©ed5"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleEd6Box() extends Box('©ed6') {
	 bit(8) data[];
 } 
*/
public partial class AppleEd6Box : Box
{
	public const string TYPE = "©ed6";
	public override string DisplayName { get { return "AppleEd6Box"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleEd6Box(): base(IsoStream.FromFourCC("©ed6"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleEd7Box() extends Box('©ed7') {
	 bit(8) data[];
 } 
*/
public partial class AppleEd7Box : Box
{
	public const string TYPE = "©ed7";
	public override string DisplayName { get { return "AppleEd7Box"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleEd7Box(): base(IsoStream.FromFourCC("©ed7"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleEd8Box() extends Box('©ed8') {
	 bit(8) data[];
 } 
*/
public partial class AppleEd8Box : Box
{
	public const string TYPE = "©ed8";
	public override string DisplayName { get { return "AppleEd8Box"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleEd8Box(): base(IsoStream.FromFourCC("©ed8"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleEd9Box() extends Box('©ed9') {
	 bit(8) data[];
 } 
*/
public partial class AppleEd9Box : Box
{
	public const string TYPE = "©ed9";
	public override string DisplayName { get { return "AppleEd9Box"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleEd9Box(): base(IsoStream.FromFourCC("©ed9"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleFmtBox() extends Box('©fmt') {
	 bit(8) data[];
 } 
*/
public partial class AppleFmtBox : Box
{
	public const string TYPE = "©fmt";
	public override string DisplayName { get { return "AppleFmtBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleFmtBox(): base(IsoStream.FromFourCC("©fmt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleInfBox() extends Box('©inf') {
	 bit(8) data[];
 } 
*/
public partial class AppleInfBox : Box
{
	public const string TYPE = "©inf";
	public override string DisplayName { get { return "AppleInfBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleInfBox(): base(IsoStream.FromFourCC("©inf"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleIsrBox() extends Box('©isr') {
	 bit(8) data[];
 } 
*/
public partial class AppleIsrBox : Box
{
	public const string TYPE = "©isr";
	public override string DisplayName { get { return "AppleIsrBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleIsrBox(): base(IsoStream.FromFourCC("©isr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleLabBox() extends Box('©lab') {
	 bit(8) data[];
 } 
*/
public partial class AppleLabBox : Box
{
	public const string TYPE = "©lab";
	public override string DisplayName { get { return "AppleLabBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleLabBox(): base(IsoStream.FromFourCC("©lab"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleLalBox() extends Box('©lal') {
	 bit(8) data[];
 } 
*/
public partial class AppleLalBox : Box
{
	public const string TYPE = "©lal";
	public override string DisplayName { get { return "AppleLalBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleLalBox(): base(IsoStream.FromFourCC("©lal"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleMakBox() extends Box('©mak') {
	 bit(8) data[];
 } 
*/
public partial class AppleMakBox : Box
{
	public const string TYPE = "©mak";
	public override string DisplayName { get { return "AppleMakBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleMakBox(): base(IsoStream.FromFourCC("©mak"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class RicohAppleMakBox() extends Box('@mak') {
	 bit(8) data[];
 } 
*/
public partial class RicohAppleMakBox : Box
{
	public const string TYPE = "@mak";
	public override string DisplayName { get { return "RicohAppleMakBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public RicohAppleMakBox(): base(IsoStream.FromFourCC("@mak"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleNakBox() extends Box('©nak') {
	 bit(8) data[];
 } 
*/
public partial class AppleNakBox : Box
{
	public const string TYPE = "©nak";
	public override string DisplayName { get { return "AppleNakBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleNakBox(): base(IsoStream.FromFourCC("©nak"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class ApplePdkBox() extends Box('©pdk') {
	 bit(8) data[];
 } 
*/
public partial class ApplePdkBox : Box
{
	public const string TYPE = "©pdk";
	public override string DisplayName { get { return "ApplePdkBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ApplePdkBox(): base(IsoStream.FromFourCC("©pdk"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class ApplePhgBox() extends Box('©phg') {
	 bit(8) data[];
 } 
*/
public partial class ApplePhgBox : Box
{
	public const string TYPE = "©phg";
	public override string DisplayName { get { return "ApplePhgBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ApplePhgBox(): base(IsoStream.FromFourCC("©phg"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleProducerBox() extends Box('©prd') {
	 bit(8) data[];
 } 
*/
public partial class AppleProducerBox : Box
{
	public const string TYPE = "©prd";
	public override string DisplayName { get { return "AppleProducerBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleProducerBox(): base(IsoStream.FromFourCC("©prd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class ApplePrfBox() extends Box('©prf') {
	 bit(8) data[];
 } 
*/
public partial class ApplePrfBox : Box
{
	public const string TYPE = "©prf";
	public override string DisplayName { get { return "ApplePrfBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ApplePrfBox(): base(IsoStream.FromFourCC("©prf"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class ApplePrkBox() extends Box('©prk') {
	 bit(8) data[];
 } 
*/
public partial class ApplePrkBox : Box
{
	public const string TYPE = "©prk";
	public override string DisplayName { get { return "ApplePrkBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ApplePrkBox(): base(IsoStream.FromFourCC("©prk"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class ApplePrlBox() extends Box('©prl') {
	 bit(8) data[];
 } 
*/
public partial class ApplePrlBox : Box
{
	public const string TYPE = "©prl";
	public override string DisplayName { get { return "ApplePrlBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ApplePrlBox(): base(IsoStream.FromFourCC("©prl"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleSnkBox() extends Box('©snk') {
	 bit(8) data[];
 } 
*/
public partial class AppleSnkBox : Box
{
	public const string TYPE = "©snk";
	public override string DisplayName { get { return "AppleSnkBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleSnkBox(): base(IsoStream.FromFourCC("©snk"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleSnmBox() extends Box('©snm') {
	 bit(8) data[];
 } 
*/
public partial class AppleSnmBox : Box
{
	public const string TYPE = "©snm";
	public override string DisplayName { get { return "AppleSnmBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleSnmBox(): base(IsoStream.FromFourCC("©snm"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleSrcBox() extends Box('©src') {
	 bit(8) data[];
 } 
*/
public partial class AppleSrcBox : Box
{
	public const string TYPE = "©src";
	public override string DisplayName { get { return "AppleSrcBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleSrcBox(): base(IsoStream.FromFourCC("©src"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AppleSwkBox() extends Box('©swk') {
	 bit(8) data[];
 } 
*/
public partial class AppleSwkBox : Box
{
	public const string TYPE = "©swk";
	public override string DisplayName { get { return "AppleSwkBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleSwkBox(): base(IsoStream.FromFourCC("©swk"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AdditionalMetadataContainerBox() extends Box('meco') {
	 Box boxes[];
 } 
*/
public partial class AdditionalMetadataContainerBox : Box
{
	public const string TYPE = "meco";
	public override string DisplayName { get { return "AdditionalMetadataContainerBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AdditionalMetadataContainerBox(): base(IsoStream.FromFourCC("meco"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class H263SpecificBox() extends Box('d263') {
	 unsigned int(32) vendor;
	 unsigned int(8) decoderVersion;
 unsigned int(8) level;
 unsigned int(8) profile;
 } 
*/
public partial class H263SpecificBox : Box
{
	public const string TYPE = "d263";
	public override string DisplayName { get { return "H263SpecificBox"; } }

	protected uint vendor; 
	public uint Vendor { get { return this.vendor; } set { this.vendor = value; } }

	protected byte decoderVersion; 
	public byte DecoderVersion { get { return this.decoderVersion; } set { this.decoderVersion = value; } }

	protected byte level; 
	public byte Level { get { return this.level; } set { this.level = value; } }

	protected byte profile; 
	public byte Profile { get { return this.profile; } set { this.profile = value; } }

	public H263SpecificBox(): base(IsoStream.FromFourCC("d263"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.vendor, "vendor"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.decoderVersion, "decoderVersion"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.level, "level"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.profile, "profile"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.vendor, "vendor"); 
		boxSize += stream.WriteUInt8( this.decoderVersion, "decoderVersion"); 
		boxSize += stream.WriteUInt8( this.level, "level"); 
		boxSize += stream.WriteUInt8( this.profile, "profile"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // vendor
		boxSize += 8; // decoderVersion
		boxSize += 8; // level
		boxSize += 8; // profile
		return boxSize;
	}
}


/*
aligned(8) class EVRCSpecificBox() extends Box('devc') {
	 unsigned int(32) vendor;
	 unsigned int(8) decoderVersion;
 unsigned int(8) framesPerSample;
 } 
*/
public partial class EVRCSpecificBox : Box
{
	public const string TYPE = "devc";
	public override string DisplayName { get { return "EVRCSpecificBox"; } }

	protected uint vendor; 
	public uint Vendor { get { return this.vendor; } set { this.vendor = value; } }

	protected byte decoderVersion; 
	public byte DecoderVersion { get { return this.decoderVersion; } set { this.decoderVersion = value; } }

	protected byte framesPerSample; 
	public byte FramesPerSample { get { return this.framesPerSample; } set { this.framesPerSample = value; } }

	public EVRCSpecificBox(): base(IsoStream.FromFourCC("devc"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.vendor, "vendor"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.decoderVersion, "decoderVersion"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.framesPerSample, "framesPerSample"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.vendor, "vendor"); 
		boxSize += stream.WriteUInt8( this.decoderVersion, "decoderVersion"); 
		boxSize += stream.WriteUInt8( this.framesPerSample, "framesPerSample"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // vendor
		boxSize += 8; // decoderVersion
		boxSize += 8; // framesPerSample
		return boxSize;
	}
}


/*
aligned(8) class QCELPSpecificBox() extends Box('dqcp') {
	 unsigned int(32) vendor;
	 unsigned int(8) decoderVersion;
 unsigned int(8) framesPerSample;
 } 
*/
public partial class QCELPSpecificBox : Box
{
	public const string TYPE = "dqcp";
	public override string DisplayName { get { return "QCELPSpecificBox"; } }

	protected uint vendor; 
	public uint Vendor { get { return this.vendor; } set { this.vendor = value; } }

	protected byte decoderVersion; 
	public byte DecoderVersion { get { return this.decoderVersion; } set { this.decoderVersion = value; } }

	protected byte framesPerSample; 
	public byte FramesPerSample { get { return this.framesPerSample; } set { this.framesPerSample = value; } }

	public QCELPSpecificBox(): base(IsoStream.FromFourCC("dqcp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.vendor, "vendor"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.decoderVersion, "decoderVersion"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.framesPerSample, "framesPerSample"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.vendor, "vendor"); 
		boxSize += stream.WriteUInt8( this.decoderVersion, "decoderVersion"); 
		boxSize += stream.WriteUInt8( this.framesPerSample, "framesPerSample"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // vendor
		boxSize += 8; // decoderVersion
		boxSize += 8; // framesPerSample
		return boxSize;
	}
}


/*
aligned(8) class SMVSpecificBox() extends Box('dsmv') {
	 unsigned int(32) vendor;
	 unsigned int(8) decoderVersion;
 unsigned int(8) framesPerSample;
 } 
*/
public partial class SMVSpecificBox : Box
{
	public const string TYPE = "dsmv";
	public override string DisplayName { get { return "SMVSpecificBox"; } }

	protected uint vendor; 
	public uint Vendor { get { return this.vendor; } set { this.vendor = value; } }

	protected byte decoderVersion; 
	public byte DecoderVersion { get { return this.decoderVersion; } set { this.decoderVersion = value; } }

	protected byte framesPerSample; 
	public byte FramesPerSample { get { return this.framesPerSample; } set { this.framesPerSample = value; } }

	public SMVSpecificBox(): base(IsoStream.FromFourCC("dsmv"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.vendor, "vendor"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.decoderVersion, "decoderVersion"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.framesPerSample, "framesPerSample"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.vendor, "vendor"); 
		boxSize += stream.WriteUInt8( this.decoderVersion, "decoderVersion"); 
		boxSize += stream.WriteUInt8( this.framesPerSample, "framesPerSample"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // vendor
		boxSize += 8; // decoderVersion
		boxSize += 8; // framesPerSample
		return boxSize;
	}
}


/*
aligned(8) class AppleReferenceMovieBox() extends Box('rmra') {
 Box boxes[];
 } 
*/
public partial class AppleReferenceMovieBox : Box
{
	public const string TYPE = "rmra";
	public override string DisplayName { get { return "AppleReferenceMovieBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleReferenceMovieBox(): base(IsoStream.FromFourCC("rmra"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleReferenceMovieDescriptorBox() extends Box('rmda') {
 Box boxes[];
 } 
*/
public partial class AppleReferenceMovieDescriptorBox : Box
{
	public const string TYPE = "rmda";
	public override string DisplayName { get { return "AppleReferenceMovieDescriptorBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleReferenceMovieDescriptorBox(): base(IsoStream.FromFourCC("rmda"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleDataRateBox() extends Box('rmdr') {
 Box boxes[];
 } 
*/
public partial class AppleDataRateBox : Box
{
	public const string TYPE = "rmdr";
	public override string DisplayName { get { return "AppleDataRateBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleDataRateBox(): base(IsoStream.FromFourCC("rmdr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleDataReferenceBox() extends FullBox('rdrf') {
 unsigned int(32) dataReferenceType;
 unsigned int(32) count;
 unsigned int(8) dataReference[count];
 } 
*/
public partial class AppleDataReferenceBox : FullBox
{
	public const string TYPE = "rdrf";
	public override string DisplayName { get { return "AppleDataReferenceBox"; } }

	protected uint dataReferenceType; 
	public uint DataReferenceType { get { return this.dataReferenceType; } set { this.dataReferenceType = value; } }

	protected uint count; 
	public uint Count { get { return this.count; } set { this.count = value; } }

	protected byte[] dataReference; 
	public byte[] DataReference { get { return this.dataReference; } set { this.dataReference = value; } }

	public AppleDataReferenceBox(): base(IsoStream.FromFourCC("rdrf"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.dataReferenceType, "dataReferenceType"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.count, "count"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(count),  out this.dataReference, "dataReference"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.dataReferenceType, "dataReferenceType"); 
		boxSize += stream.WriteUInt32( this.count, "count"); 
		boxSize += stream.WriteUInt8Array((uint)(count),  this.dataReference, "dataReference"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // dataReferenceType
		boxSize += 32; // count
		boxSize += ((ulong)(count) * 8); // dataReference
		return boxSize;
	}
}


/*
aligned(8) class TextSampleEntry() extends FullBox('enct') {
 unsigned int(16) dataReferenceIndex;
 unsigned int(32) displayFlags;
 unsigned int(8) horizontalJustification;
 unsigned int(8) verticalJustification;
 unsigned int(8) backgroundColorRgba[4];
 RectRecord rectRecord;
 StyleRecord styleRecord; Box boxes[];
 }
 
*/
public partial class TextSampleEntry : FullBox
{
	public const string TYPE = "enct";
	public override string DisplayName { get { return "TextSampleEntry"; } }

	protected ushort dataReferenceIndex; 
	public ushort DataReferenceIndex { get { return this.dataReferenceIndex; } set { this.dataReferenceIndex = value; } }

	protected uint displayFlags; 
	public uint DisplayFlags { get { return this.displayFlags; } set { this.displayFlags = value; } }

	protected byte horizontalJustification; 
	public byte HorizontalJustification { get { return this.horizontalJustification; } set { this.horizontalJustification = value; } }

	protected byte verticalJustification; 
	public byte VerticalJustification { get { return this.verticalJustification; } set { this.verticalJustification = value; } }

	protected byte[] backgroundColorRgba; 
	public byte[] BackgroundColorRgba { get { return this.backgroundColorRgba; } set { this.backgroundColorRgba = value; } }

	protected RectRecord rectRecord; 
	public RectRecord RectRecord { get { return this.rectRecord; } set { this.rectRecord = value; } }

	protected StyleRecord styleRecord; 
	public StyleRecord StyleRecord { get { return this.styleRecord; } set { this.styleRecord = value; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public TextSampleEntry(): base(IsoStream.FromFourCC("enct"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.dataReferenceIndex, "dataReferenceIndex"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.displayFlags, "displayFlags"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.horizontalJustification, "horizontalJustification"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.verticalJustification, "verticalJustification"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 4,  out this.backgroundColorRgba, "backgroundColorRgba"); 
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new RectRecord(),  out this.rectRecord, "rectRecord"); 
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new StyleRecord(),  out this.styleRecord, "styleRecord"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.dataReferenceIndex, "dataReferenceIndex"); 
		boxSize += stream.WriteUInt32( this.displayFlags, "displayFlags"); 
		boxSize += stream.WriteUInt8( this.horizontalJustification, "horizontalJustification"); 
		boxSize += stream.WriteUInt8( this.verticalJustification, "verticalJustification"); 
		boxSize += stream.WriteUInt8Array(4,  this.backgroundColorRgba, "backgroundColorRgba"); 
		boxSize += stream.WriteClass( this.rectRecord, "rectRecord"); 
		boxSize += stream.WriteClass( this.styleRecord, "styleRecord"); 
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // dataReferenceIndex
		boxSize += 32; // displayFlags
		boxSize += 8; // horizontalJustification
		boxSize += 8; // verticalJustification
		boxSize += 4 * 8; // backgroundColorRgba
		boxSize += IsoStream.CalculateClassSize(rectRecord); // rectRecord
		boxSize += IsoStream.CalculateClassSize(styleRecord); // styleRecord
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class TextSampleEntry() extends FullBox('tx3g') {
 unsigned int(16) dataReferenceIndex;
 unsigned int(32) displayFlags;
 unsigned int(8) horizontalJustification;
 unsigned int(8) verticalJustification;
 unsigned int(8) backgroundColorRgba[4];
 RectRecord rectRecord;
 StyleRecord styleRecord; Box boxes[];
 }
 
*/
public partial class TextSampleEntrytx3gDup : FullBox
{
	public const string TYPE = "tx3g";
	public override string DisplayName { get { return "TextSampleEntrytx3gDup"; } }

	protected ushort dataReferenceIndex; 
	public ushort DataReferenceIndex { get { return this.dataReferenceIndex; } set { this.dataReferenceIndex = value; } }

	protected uint displayFlags; 
	public uint DisplayFlags { get { return this.displayFlags; } set { this.displayFlags = value; } }

	protected byte horizontalJustification; 
	public byte HorizontalJustification { get { return this.horizontalJustification; } set { this.horizontalJustification = value; } }

	protected byte verticalJustification; 
	public byte VerticalJustification { get { return this.verticalJustification; } set { this.verticalJustification = value; } }

	protected byte[] backgroundColorRgba; 
	public byte[] BackgroundColorRgba { get { return this.backgroundColorRgba; } set { this.backgroundColorRgba = value; } }

	protected RectRecord rectRecord; 
	public RectRecord RectRecord { get { return this.rectRecord; } set { this.rectRecord = value; } }

	protected StyleRecord styleRecord; 
	public StyleRecord StyleRecord { get { return this.styleRecord; } set { this.styleRecord = value; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public TextSampleEntrytx3gDup(): base(IsoStream.FromFourCC("tx3g"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.dataReferenceIndex, "dataReferenceIndex"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.displayFlags, "displayFlags"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.horizontalJustification, "horizontalJustification"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.verticalJustification, "verticalJustification"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 4,  out this.backgroundColorRgba, "backgroundColorRgba"); 
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new RectRecord(),  out this.rectRecord, "rectRecord"); 
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new StyleRecord(),  out this.styleRecord, "styleRecord"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.dataReferenceIndex, "dataReferenceIndex"); 
		boxSize += stream.WriteUInt32( this.displayFlags, "displayFlags"); 
		boxSize += stream.WriteUInt8( this.horizontalJustification, "horizontalJustification"); 
		boxSize += stream.WriteUInt8( this.verticalJustification, "verticalJustification"); 
		boxSize += stream.WriteUInt8Array(4,  this.backgroundColorRgba, "backgroundColorRgba"); 
		boxSize += stream.WriteClass( this.rectRecord, "rectRecord"); 
		boxSize += stream.WriteClass( this.styleRecord, "styleRecord"); 
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // dataReferenceIndex
		boxSize += 32; // displayFlags
		boxSize += 8; // horizontalJustification
		boxSize += 8; // verticalJustification
		boxSize += 4 * 8; // backgroundColorRgba
		boxSize += IsoStream.CalculateClassSize(rectRecord); // rectRecord
		boxSize += IsoStream.CalculateClassSize(styleRecord); // styleRecord
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class RectRecord() {
 unsigned int(16) top;
 unsigned int(16) left;
 unsigned int(16) bottom;
 unsigned int(16) right;
 }
 
*/
public partial class RectRecord : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "RectRecord"; } }

	protected ushort top; 
	public ushort Top { get { return this.top; } set { this.top = value; } }

	protected ushort left; 
	public ushort Left { get { return this.left; } set { this.left = value; } }

	protected ushort bottom; 
	public ushort Bottom { get { return this.bottom; } set { this.bottom = value; } }

	protected ushort right; 
	public ushort Right { get { return this.right; } set { this.right = value; } }

	public RectRecord(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.top, "top"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.left, "left"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.bottom, "bottom"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.right, "right"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt16( this.top, "top"); 
		boxSize += stream.WriteUInt16( this.left, "left"); 
		boxSize += stream.WriteUInt16( this.bottom, "bottom"); 
		boxSize += stream.WriteUInt16( this.right, "right"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 16; // top
		boxSize += 16; // left
		boxSize += 16; // bottom
		boxSize += 16; // right
		return boxSize;
	}
}


/*
aligned(8) class StyleRecord() {
 unsigned int(16) startChar;
 unsigned int(16) endChar;
 unsigned int(16) fontId;
 unsigned int(8) faceStyleFlags;
 unsigned int(8) fontSize;
 unsigned int(8) textColor[4]; }
*/
public partial class StyleRecord : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "StyleRecord"; } }

	protected ushort startChar; 
	public ushort StartChar { get { return this.startChar; } set { this.startChar = value; } }

	protected ushort endChar; 
	public ushort EndChar { get { return this.endChar; } set { this.endChar = value; } }

	protected ushort fontId; 
	public ushort FontId { get { return this.fontId; } set { this.fontId = value; } }

	protected byte faceStyleFlags; 
	public byte FaceStyleFlags { get { return this.faceStyleFlags; } set { this.faceStyleFlags = value; } }

	protected byte fontSize; 
	public byte FontSize { get { return this.fontSize; } set { this.fontSize = value; } }

	protected byte[] textColor; 
	public byte[] TextColor { get { return this.textColor; } set { this.textColor = value; } }

	public StyleRecord(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.startChar, "startChar"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.endChar, "endChar"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.fontId, "fontId"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.faceStyleFlags, "faceStyleFlags"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.fontSize, "fontSize"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 4,  out this.textColor, "textColor"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt16( this.startChar, "startChar"); 
		boxSize += stream.WriteUInt16( this.endChar, "endChar"); 
		boxSize += stream.WriteUInt16( this.fontId, "fontId"); 
		boxSize += stream.WriteUInt8( this.faceStyleFlags, "faceStyleFlags"); 
		boxSize += stream.WriteUInt8( this.fontSize, "fontSize"); 
		boxSize += stream.WriteUInt8Array(4,  this.textColor, "textColor"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 16; // startChar
		boxSize += 16; // endChar
		boxSize += 16; // fontId
		boxSize += 8; // faceStyleFlags
		boxSize += 8; // fontSize
		boxSize += 4 * 8; // textColor
		return boxSize;
	}
}


/*
aligned(8) class EC3SpecificBox() extends Box('dec3') {
 bit(13) dataRate;
 bit(3) numIndSub;
 EC3SpecificEntry entries[numIndSub + 1];
 }
 
*/
public partial class EC3SpecificBox : Box
{
	public const string TYPE = "dec3";
	public override string DisplayName { get { return "EC3SpecificBox"; } }

	protected ushort dataRate; 
	public ushort DataRate { get { return this.dataRate; } set { this.dataRate = value; } }

	protected byte numIndSub; 
	public byte NumIndSub { get { return this.numIndSub; } set { this.numIndSub = value; } }

	protected EC3SpecificEntry[] entries; 
	public EC3SpecificEntry[] Entries { get { return this.entries; } set { this.entries = value; } }

	public EC3SpecificBox(): base(IsoStream.FromFourCC("dec3"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 13,  out this.dataRate, "dataRate"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.numIndSub, "numIndSub"); 
		boxSize += stream.ReadClass(boxSize, readSize, this, (uint)(numIndSub + 1), () => new EC3SpecificEntry(),  out this.entries, "entries"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(13,  this.dataRate, "dataRate"); 
		boxSize += stream.WriteBits(3,  this.numIndSub, "numIndSub"); 
		boxSize += stream.WriteClass( this.entries, "entries"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 13; // dataRate
		boxSize += 3; // numIndSub
		boxSize += IsoStream.CalculateClassSize(entries); // entries
		return boxSize;
	}
}


/*
aligned(8) class EC3SpecificEntry() {
 bit(2) fscod;
 bit(5) bsid;
 bit(5) bsmod;
 bit(3) acmod;
 bit(1) lfeon;
 bit(3) reserved;
 bit(4) numDepSub;
 if(numDepSub > 0) {
 bit(9) chanLoc;
 }
 else 
 {
 bit(1) reserved2;
 }
 }
 
*/
public partial class EC3SpecificEntry : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "EC3SpecificEntry"; } }

	protected byte fscod; 
	public byte Fscod { get { return this.fscod; } set { this.fscod = value; } }

	protected byte bsid; 
	public byte Bsid { get { return this.bsid; } set { this.bsid = value; } }

	protected byte bsmod; 
	public byte Bsmod { get { return this.bsmod; } set { this.bsmod = value; } }

	protected byte acmod; 
	public byte Acmod { get { return this.acmod; } set { this.acmod = value; } }

	protected bool lfeon; 
	public bool Lfeon { get { return this.lfeon; } set { this.lfeon = value; } }

	protected byte reserved; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte numDepSub; 
	public byte NumDepSub { get { return this.numDepSub; } set { this.numDepSub = value; } }

	protected ushort chanLoc; 
	public ushort ChanLoc { get { return this.chanLoc; } set { this.chanLoc = value; } }

	protected bool reserved2; 
	public bool Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

	public EC3SpecificEntry(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.fscod, "fscod"); 
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.bsid, "bsid"); 
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.bsmod, "bsmod"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.acmod, "acmod"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.lfeon, "lfeon"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.numDepSub, "numDepSub"); 

		if (numDepSub > 0)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 9,  out this.chanLoc, "chanLoc"); 
		}

		else 
		{
			boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved2, "reserved2"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBits(2,  this.fscod, "fscod"); 
		boxSize += stream.WriteBits(5,  this.bsid, "bsid"); 
		boxSize += stream.WriteBits(5,  this.bsmod, "bsmod"); 
		boxSize += stream.WriteBits(3,  this.acmod, "acmod"); 
		boxSize += stream.WriteBit( this.lfeon, "lfeon"); 
		boxSize += stream.WriteBits(3,  this.reserved, "reserved"); 
		boxSize += stream.WriteBits(4,  this.numDepSub, "numDepSub"); 

		if (numDepSub > 0)
		{
			boxSize += stream.WriteBits(9,  this.chanLoc, "chanLoc"); 
		}

		else 
		{
			boxSize += stream.WriteBit( this.reserved2, "reserved2"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 2; // fscod
		boxSize += 5; // bsid
		boxSize += 5; // bsmod
		boxSize += 3; // acmod
		boxSize += 1; // lfeon
		boxSize += 3; // reserved
		boxSize += 4; // numDepSub

		if (numDepSub > 0)
		{
			boxSize += 9; // chanLoc
		}

		else 
		{
			boxSize += 1; // reserved2
		}
		return boxSize;
	}
}


/*
aligned(8) class MLPSpecificBox() extends Box('dmlp') {
 unsigned int(32) formatInfo;
 bit(15) peakDataRate;
 bit(1) reserved;
 unsigned int(32) reserved2; 
 } 
*/
public partial class MLPSpecificBox : Box
{
	public const string TYPE = "dmlp";
	public override string DisplayName { get { return "MLPSpecificBox"; } }

	protected uint formatInfo; 
	public uint FormatInfo { get { return this.formatInfo; } set { this.formatInfo = value; } }

	protected ushort peakDataRate; 
	public ushort PeakDataRate { get { return this.peakDataRate; } set { this.peakDataRate = value; } }

	protected bool reserved; 
	public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected uint reserved2; 
	public uint Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

	public MLPSpecificBox(): base(IsoStream.FromFourCC("dmlp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.formatInfo, "formatInfo"); 
		boxSize += stream.ReadBits(boxSize, readSize, 15,  out this.peakDataRate, "peakDataRate"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.reserved2, "reserved2"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.formatInfo, "formatInfo"); 
		boxSize += stream.WriteBits(15,  this.peakDataRate, "peakDataRate"); 
		boxSize += stream.WriteBit( this.reserved, "reserved"); 
		boxSize += stream.WriteUInt32( this.reserved2, "reserved2"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // formatInfo
		boxSize += 15; // peakDataRate
		boxSize += 1; // reserved
		boxSize += 32; // reserved2
		return boxSize;
	}
}


/*
aligned(8) class Ovc1VisualSampleEntryImpl() extends Box('ovc1') {
 unsigned int(48) reserved;
 unsigned int(16) dataReferenceIndex;
 bit(8) vc1Content[];
 } 
*/
public partial class Ovc1VisualSampleEntryImpl : Box
{
	public const string TYPE = "ovc1";
	public override string DisplayName { get { return "Ovc1VisualSampleEntryImpl"; } }

	protected ulong reserved; 
	public ulong Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected ushort dataReferenceIndex; 
	public ushort DataReferenceIndex { get { return this.dataReferenceIndex; } set { this.dataReferenceIndex = value; } }

	protected byte[] vc1Content; 
	public byte[] Vc1Content { get { return this.vc1Content; } set { this.vc1Content = value; } }

	public Ovc1VisualSampleEntryImpl(): base(IsoStream.FromFourCC("ovc1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt48(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.dataReferenceIndex, "dataReferenceIndex"); 
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.vc1Content, "vc1Content"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt48( this.reserved, "reserved"); 
		boxSize += stream.WriteUInt16( this.dataReferenceIndex, "dataReferenceIndex"); 
		boxSize += stream.WriteUInt8ArrayTillEnd( this.vc1Content, "vc1Content"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 48; // reserved
		boxSize += 16; // dataReferenceIndex
		boxSize += ((ulong)vc1Content.Length * 8); // vc1Content
		return boxSize;
	}
}


/*
aligned(8) class VPCodecConfigurationBox() extends FullBox('vpcC') {
 unsigned int(8) profile;
 unsigned int(8) level;
 bit(4) bitDepth;
 bit(3) chromaSubsampling;
 bit(1) videoFullRangeFlag;
 unsigned int(8) colourPrimaries; unsigned int(8) transferCharacteristics;
 unsigned int(8) matrixCoefficients;
 unsigned int(16) codecInitializationData;
 } 
*/
public partial class VPCodecConfigurationBox : FullBox
{
	public const string TYPE = "vpcC";
	public override string DisplayName { get { return "VPCodecConfigurationBox"; } }

	protected byte profile; 
	public byte Profile { get { return this.profile; } set { this.profile = value; } }

	protected byte level; 
	public byte Level { get { return this.level; } set { this.level = value; } }

	protected byte bitDepth; 
	public byte BitDepth { get { return this.bitDepth; } set { this.bitDepth = value; } }

	protected byte chromaSubsampling; 
	public byte ChromaSubsampling { get { return this.chromaSubsampling; } set { this.chromaSubsampling = value; } }

	protected bool videoFullRangeFlag; 
	public bool VideoFullRangeFlag { get { return this.videoFullRangeFlag; } set { this.videoFullRangeFlag = value; } }

	protected byte colourPrimaries; 
	public byte ColourPrimaries { get { return this.colourPrimaries; } set { this.colourPrimaries = value; } }

	protected byte transferCharacteristics; 
	public byte TransferCharacteristics { get { return this.transferCharacteristics; } set { this.transferCharacteristics = value; } }

	protected byte matrixCoefficients; 
	public byte MatrixCoefficients { get { return this.matrixCoefficients; } set { this.matrixCoefficients = value; } }

	protected ushort codecInitializationData; 
	public ushort CodecInitializationData { get { return this.codecInitializationData; } set { this.codecInitializationData = value; } }

	public VPCodecConfigurationBox(): base(IsoStream.FromFourCC("vpcC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.profile, "profile"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.level, "level"); 
		boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.bitDepth, "bitDepth"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.chromaSubsampling, "chromaSubsampling"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.videoFullRangeFlag, "videoFullRangeFlag"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.colourPrimaries, "colourPrimaries"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.transferCharacteristics, "transferCharacteristics"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.matrixCoefficients, "matrixCoefficients"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.codecInitializationData, "codecInitializationData"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.profile, "profile"); 
		boxSize += stream.WriteUInt8( this.level, "level"); 
		boxSize += stream.WriteBits(4,  this.bitDepth, "bitDepth"); 
		boxSize += stream.WriteBits(3,  this.chromaSubsampling, "chromaSubsampling"); 
		boxSize += stream.WriteBit( this.videoFullRangeFlag, "videoFullRangeFlag"); 
		boxSize += stream.WriteUInt8( this.colourPrimaries, "colourPrimaries"); 
		boxSize += stream.WriteUInt8( this.transferCharacteristics, "transferCharacteristics"); 
		boxSize += stream.WriteUInt8( this.matrixCoefficients, "matrixCoefficients"); 
		boxSize += stream.WriteUInt16( this.codecInitializationData, "codecInitializationData"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // profile
		boxSize += 8; // level
		boxSize += 4; // bitDepth
		boxSize += 3; // chromaSubsampling
		boxSize += 1; // videoFullRangeFlag
		boxSize += 8; // colourPrimaries
		boxSize += 8; // transferCharacteristics
		boxSize += 8; // matrixCoefficients
		boxSize += 16; // codecInitializationData
		return boxSize;
	}
}


/*
aligned(8) class AmrSpecificBox() extends Box('damr') {
 unsigned int(8) decoderVersion;
 unsigned int(16) modeSet;
 unsigned int(8) modeChangedPeriod;
 unsigned int(8) framesPerSecond;
 } 
*/
public partial class AmrSpecificBox : Box
{
	public const string TYPE = "damr";
	public override string DisplayName { get { return "AmrSpecificBox"; } }

	protected byte decoderVersion; 
	public byte DecoderVersion { get { return this.decoderVersion; } set { this.decoderVersion = value; } }

	protected ushort modeSet; 
	public ushort ModeSet { get { return this.modeSet; } set { this.modeSet = value; } }

	protected byte modeChangedPeriod; 
	public byte ModeChangedPeriod { get { return this.modeChangedPeriod; } set { this.modeChangedPeriod = value; } }

	protected byte framesPerSecond; 
	public byte FramesPerSecond { get { return this.framesPerSecond; } set { this.framesPerSecond = value; } }

	public AmrSpecificBox(): base(IsoStream.FromFourCC("damr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.decoderVersion, "decoderVersion"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.modeSet, "modeSet"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.modeChangedPeriod, "modeChangedPeriod"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.framesPerSecond, "framesPerSecond"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.decoderVersion, "decoderVersion"); 
		boxSize += stream.WriteUInt16( this.modeSet, "modeSet"); 
		boxSize += stream.WriteUInt8( this.modeChangedPeriod, "modeChangedPeriod"); 
		boxSize += stream.WriteUInt8( this.framesPerSecond, "framesPerSecond"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // decoderVersion
		boxSize += 16; // modeSet
		boxSize += 8; // modeChangedPeriod
		boxSize += 8; // framesPerSecond
		return boxSize;
	}
}


/*
aligned(8) class BaseMediaInfoAtom() extends Box('gmin') {
 unsigned int(16) graphicsMode;
 unsigned int(16) opColorR;
 unsigned int(16) opColorG;
 unsigned int(16) opColorB;
 unsigned int(16) balance;
 unsigned int(16) reserved
 } 
*/
public partial class BaseMediaInfoAtom : Box
{
	public const string TYPE = "gmin";
	public override string DisplayName { get { return "BaseMediaInfoAtom"; } }

	protected ushort graphicsMode; 
	public ushort GraphicsMode { get { return this.graphicsMode; } set { this.graphicsMode = value; } }

	protected ushort opColorR; 
	public ushort OpColorR { get { return this.opColorR; } set { this.opColorR = value; } }

	protected ushort opColorG; 
	public ushort OpColorG { get { return this.opColorG; } set { this.opColorG = value; } }

	protected ushort opColorB; 
	public ushort OpColorB { get { return this.opColorB; } set { this.opColorB = value; } }

	protected ushort balance; 
	public ushort Balance { get { return this.balance; } set { this.balance = value; } }

	protected ushort reserved; 
	public ushort Reserved { get { return this.reserved; } set { this.reserved = value; } }

	public BaseMediaInfoAtom(): base(IsoStream.FromFourCC("gmin"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.graphicsMode, "graphicsMode"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.opColorR, "opColorR"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.opColorG, "opColorG"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.opColorB, "opColorB"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.balance, "balance"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.graphicsMode, "graphicsMode"); 
		boxSize += stream.WriteUInt16( this.opColorR, "opColorR"); 
		boxSize += stream.WriteUInt16( this.opColorG, "opColorG"); 
		boxSize += stream.WriteUInt16( this.opColorB, "opColorB"); 
		boxSize += stream.WriteUInt16( this.balance, "balance"); 
		boxSize += stream.WriteUInt16( this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // graphicsMode
		boxSize += 16; // opColorR
		boxSize += 16; // opColorG
		boxSize += 16; // opColorB
		boxSize += 16; // balance
		boxSize += 16; // reserved
		return boxSize;
	}
}


/*
aligned(8) class BaseLocationBox() extends FullBox('bloc') {
 unsigned int(8) baseLocation[256];
 unsigned int(8) purchaseLocation[256];
 unsigned int(8) reserved[512];
 } 
*/
public partial class BaseLocationBox : FullBox
{
	public const string TYPE = "bloc";
	public override string DisplayName { get { return "BaseLocationBox"; } }

	protected byte[] baseLocation; 
	public byte[] BaseLocation { get { return this.baseLocation; } set { this.baseLocation = value; } }

	protected byte[] purchaseLocation; 
	public byte[] PurchaseLocation { get { return this.purchaseLocation; } set { this.purchaseLocation = value; } }

	protected byte[] reserved; 
	public byte[] Reserved { get { return this.reserved; } set { this.reserved = value; } }

	public BaseLocationBox(): base(IsoStream.FromFourCC("bloc"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 256,  out this.baseLocation, "baseLocation"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 256,  out this.purchaseLocation, "purchaseLocation"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 512,  out this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8Array(256,  this.baseLocation, "baseLocation"); 
		boxSize += stream.WriteUInt8Array(256,  this.purchaseLocation, "purchaseLocation"); 
		boxSize += stream.WriteUInt8Array(512,  this.reserved, "reserved"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 256 * 8; // baseLocation
		boxSize += 256 * 8; // purchaseLocation
		boxSize += 512 * 8; // reserved
		return boxSize;
	}
}


/*
aligned(8) class FontTableBox() extends Box('ftab') {
 bit(8) data[];
 }
 
*/
public partial class FontTableBox : Box
{
	public const string TYPE = "ftab";
	public override string DisplayName { get { return "FontTableBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public FontTableBox(): base(IsoStream.FromFourCC("ftab"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class FontRecord() {
 unsigned int(16) fontId;
 unsigned int(8) count;
 unsigned int(8) fontName[count];
 }
*/
public partial class FontRecord : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "FontRecord"; } }

	protected ushort fontId; 
	public ushort FontId { get { return this.fontId; } set { this.fontId = value; } }

	protected byte count; 
	public byte Count { get { return this.count; } set { this.count = value; } }

	protected byte[] fontName; 
	public byte[] FontName { get { return this.fontName; } set { this.fontName = value; } }

	public FontRecord(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.fontId, "fontId"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.count, "count"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(count),  out this.fontName, "fontName"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt16( this.fontId, "fontId"); 
		boxSize += stream.WriteUInt8( this.count, "count"); 
		boxSize += stream.WriteUInt8Array((uint)(count),  this.fontName, "fontName"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 16; // fontId
		boxSize += 8; // count
		boxSize += ((ulong)(count) * 8); // fontName
		return boxSize;
	}
}


/*
aligned(8) class AvcNalUnitStorageBox() extends Box('avcn') {
 AVCDecoderConfigurationRecord() AVCConfig;
 } 
*/
public partial class AvcNalUnitStorageBox : Box
{
	public const string TYPE = "avcn";
	public override string DisplayName { get { return "AvcNalUnitStorageBox"; } }

	protected AVCDecoderConfigurationRecord AVCConfig; 
	public AVCDecoderConfigurationRecord _AVCConfig { get { return this.AVCConfig; } set { this.AVCConfig = value; } }

	public AvcNalUnitStorageBox(): base(IsoStream.FromFourCC("avcn"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new AVCDecoderConfigurationRecord(),  out this.AVCConfig, "AVCConfig"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.AVCConfig, "AVCConfig"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(AVCConfig); // AVCConfig
		return boxSize;
	}
}


/*
aligned(8) class AssetInformationBox() extends FullBox('ainf') {
 unsigned int(8) profileVersion[4];
 string apid;
 } 
*/
public partial class AssetInformationBox : FullBox
{
	public const string TYPE = "ainf";
	public override string DisplayName { get { return "AssetInformationBox"; } }

	protected byte[] profileVersion; 
	public byte[] ProfileVersion { get { return this.profileVersion; } set { this.profileVersion = value; } }

	protected BinaryUTF8String apid; 
	public BinaryUTF8String Apid { get { return this.apid; } set { this.apid = value; } }

	public AssetInformationBox(): base(IsoStream.FromFourCC("ainf"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 4,  out this.profileVersion, "profileVersion"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.apid, "apid"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8Array(4,  this.profileVersion, "profileVersion"); 
		boxSize += stream.WriteStringZeroTerminated( this.apid, "apid"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 4 * 8; // profileVersion
		boxSize += IsoStream.CalculateStringSize(apid); // apid
		return boxSize;
	}
}


/*
aligned(8) class ProtectionSystemSpecificHeaderBox() extends FullBox('pssh') {
 unsigned int(8) systemId[16];
 if (version > 0) {
 unsigned int(32) count;
 ProtectionSystemSpecificKeyID keyIDs[count];
 }
  }
 
*/
public partial class ProtectionSystemSpecificHeaderBox : FullBox
{
	public const string TYPE = "pssh";
	public override string DisplayName { get { return "ProtectionSystemSpecificHeaderBox"; } }

	protected byte[] systemId; 
	public byte[] SystemId { get { return this.systemId; } set { this.systemId = value; } }

	protected uint count; 
	public uint Count { get { return this.count; } set { this.count = value; } }

	protected ProtectionSystemSpecificKeyID[] keyIDs; 
	public ProtectionSystemSpecificKeyID[] KeyIDs { get { return this.keyIDs; } set { this.keyIDs = value; } }

	public ProtectionSystemSpecificHeaderBox(): base(IsoStream.FromFourCC("pssh"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 16,  out this.systemId, "systemId"); 

		if (version > 0)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.count, "count"); 
			boxSize += stream.ReadClass(boxSize, readSize, this, (uint)(count), () => new ProtectionSystemSpecificKeyID(),  out this.keyIDs, "keyIDs"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8Array(16,  this.systemId, "systemId"); 

		if (version > 0)
		{
			boxSize += stream.WriteUInt32( this.count, "count"); 
			boxSize += stream.WriteClass( this.keyIDs, "keyIDs"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16 * 8; // systemId

		if (version > 0)
		{
			boxSize += 32; // count
			boxSize += IsoStream.CalculateClassSize(keyIDs); // keyIDs
		}
		return boxSize;
	}
}


/*
aligned(8) class ProtectionSystemSpecificKeyID() {
 unsigned int(8) key[16];
 } 
*/
public partial class ProtectionSystemSpecificKeyID : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "ProtectionSystemSpecificKeyID"; } }

	protected byte[] key; 
	public byte[] Key { get { return this.key; } set { this.key = value; } }

	public ProtectionSystemSpecificKeyID(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 16,  out this.key, "key"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt8Array(16,  this.key, "key"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 16 * 8; // key
		return boxSize;
	}
}


/*
aligned(8) class TrickPlayBox() extends FullBox('trik') {
 TrickPlayEntry entries[];
 }
 
*/
public partial class TrickPlayBox : FullBox
{
	public const string TYPE = "trik";
	public override string DisplayName { get { return "TrickPlayBox"; } }

	protected TrickPlayEntry[] entries; 
	public TrickPlayEntry[] Entries { get { return this.entries; } set { this.entries = value; } }

	public TrickPlayBox(): base(IsoStream.FromFourCC("trik"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, (uint)(uint.MaxValue), () => new TrickPlayEntry(),  out this.entries, "entries"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.entries, "entries"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(entries); // entries
		return boxSize;
	}
}


/*
aligned(8) class TrickPlayEntry() {
 unsigned int(2) picType; unsigned int(6) dependencyLevel;
 } 
*/
public partial class TrickPlayEntry : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "TrickPlayEntry"; } }

	protected byte picType; 
	public byte PicType { get { return this.picType; } set { this.picType = value; } }

	protected byte dependencyLevel; 
	public byte DependencyLevel { get { return this.dependencyLevel; } set { this.dependencyLevel = value; } }

	public TrickPlayEntry(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.picType, "picType"); 
		boxSize += stream.ReadBits(boxSize, readSize, 6,  out this.dependencyLevel, "dependencyLevel"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBits(2,  this.picType, "picType"); 
		boxSize += stream.WriteBits(6,  this.dependencyLevel, "dependencyLevel"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 2; // picType
		boxSize += 6; // dependencyLevel
		return boxSize;
	}
}


/*
aligned(8) class ItemEncryptionBox extends ItemFullProperty('ienc', version, flags=0)
{
      unsigned int(8) reserved = 0;
      if (version==0) { 
            unsigned int(8) reserved = 0;
      } else { // version is 1 or greater
            unsigned int(4) crypt_byte_block;
            unsigned int(4) skip_byte_block;
      }
      unsigned int(8) num_keys;
      for (i=1; i<= num_keys; i++) {
         unsigned int(8) Per_Sample_IV_Size;
         unsigned int(8)[16] KID;
         if (Per_Sample_IV_Size == 0) { 
            unsigned int(8) constant_IV_size; 
            unsigned int(8)[constant_IV_size] constant_IV;
         }
      }
}

*/
public partial class ItemEncryptionBox : ItemFullProperty
{
	public const string TYPE = "ienc";
	public override string DisplayName { get { return "ItemEncryptionBox"; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected byte reserved0 = 0; 
	public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected byte crypt_byte_block; 
	public byte CryptByteBlock { get { return this.crypt_byte_block; } set { this.crypt_byte_block = value; } }

	protected byte skip_byte_block; 
	public byte SkipByteBlock { get { return this.skip_byte_block; } set { this.skip_byte_block = value; } }

	protected byte num_keys; 
	public byte NumKeys { get { return this.num_keys; } set { this.num_keys = value; } }

	protected byte[] Per_Sample_IV_Size; 
	public byte[] PerSampleIVSize { get { return this.Per_Sample_IV_Size; } set { this.Per_Sample_IV_Size = value; } }

	protected byte[][] KID; 
	public byte[][] _KID { get { return this.KID; } set { this.KID = value; } }

	protected byte[] constant_IV_size; 
	public byte[] ConstantIVSize { get { return this.constant_IV_size; } set { this.constant_IV_size = value; } }

	protected byte[][] constant_IV; 
	public byte[][] ConstantIV { get { return this.constant_IV; } set { this.constant_IV = value; } }

	public ItemEncryptionBox(byte version = 0): base(IsoStream.FromFourCC("ienc"), version, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.reserved, "reserved"); 

		if (version==0)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.reserved0, "reserved0"); 
		}

		else 
		{
			/*  version is 1 or greater */
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.crypt_byte_block, "crypt_byte_block"); 
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.skip_byte_block, "skip_byte_block"); 
		}
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.num_keys, "num_keys"); 

		this.Per_Sample_IV_Size = new byte[IsoStream.GetInt( num_keys)];
		this.KID = new byte[IsoStream.GetInt( num_keys)][];
		this.constant_IV_size = new byte[IsoStream.GetInt( num_keys)];
		this.constant_IV = new byte[IsoStream.GetInt( num_keys)][];
		for (int i=0; i< num_keys; i++)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.Per_Sample_IV_Size[i], "Per_Sample_IV_Size"); 
			boxSize += stream.ReadUInt8Array(boxSize, readSize, 16,  out this.KID[i], "KID"); 

			if (Per_Sample_IV_Size[i] == 0)
			{
				boxSize += stream.ReadUInt8(boxSize, readSize,  out this.constant_IV_size[i], "constant_IV_size"); 
				boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(IsoStream.GetInt(constant_IV_size)),  out this.constant_IV[i], "constant_IV"); 
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.reserved, "reserved"); 

		if (version==0)
		{
			boxSize += stream.WriteUInt8( this.reserved0, "reserved0"); 
		}

		else 
		{
			/*  version is 1 or greater */
			boxSize += stream.WriteBits(4,  this.crypt_byte_block, "crypt_byte_block"); 
			boxSize += stream.WriteBits(4,  this.skip_byte_block, "skip_byte_block"); 
		}
		boxSize += stream.WriteUInt8( this.num_keys, "num_keys"); 

		for (int i=0; i< num_keys; i++)
		{
			boxSize += stream.WriteUInt8( this.Per_Sample_IV_Size[i], "Per_Sample_IV_Size"); 
			boxSize += stream.WriteUInt8Array(16,  this.KID[i], "KID"); 

			if (Per_Sample_IV_Size[i] == 0)
			{
				boxSize += stream.WriteUInt8( this.constant_IV_size[i], "constant_IV_size"); 
				boxSize += stream.WriteUInt8Array((uint)(IsoStream.GetInt(constant_IV_size)),  this.constant_IV[i], "constant_IV"); 
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // reserved

		if (version==0)
		{
			boxSize += 8; // reserved0
		}

		else 
		{
			/*  version is 1 or greater */
			boxSize += 4; // crypt_byte_block
			boxSize += 4; // skip_byte_block
		}
		boxSize += 8; // num_keys

		for (int i=0; i< num_keys; i++)
		{
			boxSize += 8; // Per_Sample_IV_Size
			boxSize += 16 * 8; // KID

			if (Per_Sample_IV_Size[i] == 0)
			{
				boxSize += 8; // constant_IV_size
				boxSize += ((ulong)(IsoStream.GetInt(constant_IV_size)) * 8); // constant_IV
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class TrackEncryptionBox() extends FullBox('tenc') {
 unsigned int(24) defaultAlgorithmID;
 unsigned int(8) defaultIvSize;
 unsigned int(8) defaultKID[16];
 } 
*/
public partial class TrackEncryptionBox : FullBox
{
	public const string TYPE = "tenc";
	public override string DisplayName { get { return "TrackEncryptionBox"; } }

	protected uint defaultAlgorithmID; 
	public uint DefaultAlgorithmID { get { return this.defaultAlgorithmID; } set { this.defaultAlgorithmID = value; } }

	protected byte defaultIvSize; 
	public byte DefaultIvSize { get { return this.defaultIvSize; } set { this.defaultIvSize = value; } }

	protected byte[] defaultKID; 
	public byte[] DefaultKID { get { return this.defaultKID; } set { this.defaultKID = value; } }

	public TrackEncryptionBox(): base(IsoStream.FromFourCC("tenc"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt24(boxSize, readSize,  out this.defaultAlgorithmID, "defaultAlgorithmID"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.defaultIvSize, "defaultIvSize"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 16,  out this.defaultKID, "defaultKID"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt24( this.defaultAlgorithmID, "defaultAlgorithmID"); 
		boxSize += stream.WriteUInt8( this.defaultIvSize, "defaultIvSize"); 
		boxSize += stream.WriteUInt8Array(16,  this.defaultKID, "defaultKID"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 24; // defaultAlgorithmID
		boxSize += 8; // defaultIvSize
		boxSize += 16 * 8; // defaultKID
		return boxSize;
	}
}


/*
aligned(8) class SampleEncryptionBox extends FullBox('senc', version, flags)
{
   unsigned int(32)  sample_count;
   SampleEncryptionSample(version, flags, Per_Sample_IV_Size) samples[sample_count];
}


*/
public partial class SampleEncryptionBox : FullBox
{
	public const string TYPE = "senc";
	public override string DisplayName { get { return "SampleEncryptionBox"; } }

	protected uint sample_count; 
	public uint SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

	protected SampleEncryptionSample[] samples; 
	public SampleEncryptionSample[] Samples { get { return this.samples; } set { this.samples = value; } }

	protected byte Per_Sample_IV_Size  = 16; // TODO: get from the IsoStream.FromFourCC("tenc") box; 
	public byte PerSampleIVSize { get { return this.Per_Sample_IV_Size; } set { this.Per_Sample_IV_Size = value; } }

	public SampleEncryptionBox(byte version = 0, uint flags = 0): base(IsoStream.FromFourCC("senc"), version, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_count, "sample_count"); 
		boxSize += stream.ReadClass(boxSize, readSize, this, (uint)(sample_count), () => new SampleEncryptionSample(version, flags, Per_Sample_IV_Size),  out this.samples, "samples"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.sample_count, "sample_count"); 
		boxSize += stream.WriteClass( this.samples, "samples"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // sample_count
		boxSize += IsoStream.CalculateClassSize(samples); // samples
		return boxSize;
	}
}


/*
aligned(8) class SampleEncryptionSample(version, flags, Per_Sample_IV_Size) {
      if (version == 0) {
         unsigned int(Per_Sample_IV_Size*8) InitializationVector;
         if (flags & 0x000002) {            unsigned int(16) subsample_count;
            SampleEncryptionSubsample(version) subsamples[subsample_count];
         }
      } else if (version==1) {
         unsigned int(16) multi_IV_count;
         for (i=1; i <= multi_IV_count; i++) {
            unsigned int(8) multi_subindex_IV;
            unsigned int(Per_Sample_IV_Size*8) IV;
         }
          unsigned int(32) subsample_count;
          SampleEncryptionSubsample(version) subsamples[subsample_count];
      }
}


*/
public partial class SampleEncryptionSample : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "SampleEncryptionSample"; } }

	protected byte[] InitializationVector; 
	public byte[] _InitializationVector { get { return this.InitializationVector; } set { this.InitializationVector = value; } }

	protected uint subsample_count; 
	public uint SubsampleCount { get { return this.subsample_count; } set { this.subsample_count = value; } }

	protected SampleEncryptionSubsample[] subsamples; 
	public SampleEncryptionSubsample[] Subsamples { get { return this.subsamples; } set { this.subsamples = value; } }

	protected ushort multi_IV_count; 
	public ushort MultiIVCount { get { return this.multi_IV_count; } set { this.multi_IV_count = value; } }

	protected byte[] multi_subindex_IV; 
	public byte[] MultiSubindexIV { get { return this.multi_subindex_IV; } set { this.multi_subindex_IV = value; } }

	protected byte[][] IV; 
	public byte[][] _IV { get { return this.IV; } set { this.IV = value; } }

	protected byte version; 
	public byte Version { get { return this.version; } set { this.version = value; } }

	protected uint flags; 
	public uint Flags { get { return this.flags; } set { this.flags = value; } }

	protected byte Per_Sample_IV_Size; 
	public byte PerSampleIVSize { get { return this.Per_Sample_IV_Size; } set { this.Per_Sample_IV_Size = value; } }

	public SampleEncryptionSample(byte version, uint flags, byte Per_Sample_IV_Size): base()
	{
		this.version = version;
		this.flags = flags;
		this.Per_Sample_IV_Size = Per_Sample_IV_Size;
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;

		if (version == 0)
		{
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(Per_Sample_IV_Size*8 ),  out this.InitializationVector, "InitializationVector"); 

			if ((flags  &  0x000002) ==  0x000002)
			{
				boxSize += stream.ReadUInt16(boxSize, readSize,  out this.subsample_count, "subsample_count"); 
				boxSize += stream.ReadClass(boxSize, readSize, this, (uint)(subsample_count), () => new SampleEncryptionSubsample(version),  out this.subsamples, "subsamples"); 
			}
		}

		else if (version==1)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.multi_IV_count, "multi_IV_count"); 

			this.multi_subindex_IV = new byte[IsoStream.GetInt( multi_IV_count)];
			this.IV = new byte[IsoStream.GetInt( multi_IV_count)][];
			for (int i=0; i < multi_IV_count; i++)
			{
				boxSize += stream.ReadUInt8(boxSize, readSize,  out this.multi_subindex_IV[i], "multi_subindex_IV"); 
				boxSize += stream.ReadBits(boxSize, readSize, (uint)(Per_Sample_IV_Size*8 ),  out this.IV[i], "IV"); 
			}
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.subsample_count, "subsample_count"); 
			boxSize += stream.ReadClass(boxSize, readSize, this, (uint)(subsample_count), () => new SampleEncryptionSubsample(version),  out this.subsamples, "subsamples"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;

		if (version == 0)
		{
			boxSize += stream.WriteBits((uint)(Per_Sample_IV_Size*8 ),  this.InitializationVector, "InitializationVector"); 

			if ((flags  &  0x000002) ==  0x000002)
			{
				boxSize += stream.WriteUInt16( this.subsample_count, "subsample_count"); 
				boxSize += stream.WriteClass( this.subsamples, "subsamples"); 
			}
		}

		else if (version==1)
		{
			boxSize += stream.WriteUInt16( this.multi_IV_count, "multi_IV_count"); 

			for (int i=0; i < multi_IV_count; i++)
			{
				boxSize += stream.WriteUInt8( this.multi_subindex_IV[i], "multi_subindex_IV"); 
				boxSize += stream.WriteBits((uint)(Per_Sample_IV_Size*8 ),  this.IV[i], "IV"); 
			}
			boxSize += stream.WriteUInt32( this.subsample_count, "subsample_count"); 
			boxSize += stream.WriteClass( this.subsamples, "subsamples"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;

		if (version == 0)
		{
			boxSize += (ulong)(Per_Sample_IV_Size*8 ); // InitializationVector

			if ((flags  &  0x000002) ==  0x000002)
			{
				boxSize += 16; // subsample_count
				boxSize += IsoStream.CalculateClassSize(subsamples); // subsamples
			}
		}

		else if (version==1)
		{
			boxSize += 16; // multi_IV_count

			for (int i=0; i < multi_IV_count; i++)
			{
				boxSize += 8; // multi_subindex_IV
				boxSize += (ulong)(Per_Sample_IV_Size*8 ); // IV
			}
			boxSize += 32; // subsample_count
			boxSize += IsoStream.CalculateClassSize(subsamples); // subsamples
		}
		return boxSize;
	}
}


/*
aligned(8) class SampleEncryptionSubsample(version) {
  if (version==0) {
     unsigned int(16) BytesOfClearData;
     unsigned int(32) BytesOfProtectedData;
  }
  else if(version == 1) {
     unsigned int(16) multi_subindex;
     unsigned int(16) BytesOfClearData;
     unsigned int(32) BytesOfProtectedData;
  }
}
*/
public partial class SampleEncryptionSubsample : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "SampleEncryptionSubsample"; } }

	protected ushort BytesOfClearData; 
	public ushort _BytesOfClearData { get { return this.BytesOfClearData; } set { this.BytesOfClearData = value; } }

	protected uint BytesOfProtectedData; 
	public uint _BytesOfProtectedData { get { return this.BytesOfProtectedData; } set { this.BytesOfProtectedData = value; } }

	protected ushort multi_subindex; 
	public ushort MultiSubindex { get { return this.multi_subindex; } set { this.multi_subindex = value; } }

	protected byte version; 
	public byte Version { get { return this.version; } set { this.version = value; } }

	public SampleEncryptionSubsample(byte version): base()
	{
		this.version = version;
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;

		if (version==0)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.BytesOfClearData, "BytesOfClearData"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.BytesOfProtectedData, "BytesOfProtectedData"); 
		}

		else if (version == 1)
		{
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.multi_subindex, "multi_subindex"); 
			boxSize += stream.ReadUInt16(boxSize, readSize,  out this.BytesOfClearData, "BytesOfClearData"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.BytesOfProtectedData, "BytesOfProtectedData"); 
		}
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;

		if (version==0)
		{
			boxSize += stream.WriteUInt16( this.BytesOfClearData, "BytesOfClearData"); 
			boxSize += stream.WriteUInt32( this.BytesOfProtectedData, "BytesOfProtectedData"); 
		}

		else if (version == 1)
		{
			boxSize += stream.WriteUInt16( this.multi_subindex, "multi_subindex"); 
			boxSize += stream.WriteUInt16( this.BytesOfClearData, "BytesOfClearData"); 
			boxSize += stream.WriteUInt32( this.BytesOfProtectedData, "BytesOfProtectedData"); 
		}
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;

		if (version==0)
		{
			boxSize += 16; // BytesOfClearData
			boxSize += 32; // BytesOfProtectedData
		}

		else if (version == 1)
		{
			boxSize += 16; // multi_subindex
			boxSize += 16; // BytesOfClearData
			boxSize += 32; // BytesOfProtectedData
		}
		return boxSize;
	}
}


/*
aligned(8) class AppleAtIDBox() extends Box('atID') {
 Box boxes[];
 } 
*/
public partial class AppleAtIDBox : Box
{
	public const string TYPE = "atID";
	public override string DisplayName { get { return "AppleAtIDBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleAtIDBox(): base(IsoStream.FromFourCC("atID"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleGeIDBox() extends Box('geID') {
 Box boxes[];
 } 
*/
public partial class AppleGeIDBox : Box
{
	public const string TYPE = "geID";
	public override string DisplayName { get { return "AppleGeIDBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleGeIDBox(): base(IsoStream.FromFourCC("geID"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleXidBox() extends Box('xid ') {
 Box boxes[];
 } 
*/
public partial class AppleXidBox : Box
{
	public const string TYPE = "xid ";
	public override string DisplayName { get { return "AppleXidBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleXidBox(): base(IsoStream.FromFourCC("xid "))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleFlvrBox() extends Box('flvr') {
 Box boxes[];
 } 
*/
public partial class AppleFlvrBox : Box
{
	public const string TYPE = "flvr";
	public override string DisplayName { get { return "AppleFlvrBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleFlvrBox(): base(IsoStream.FromFourCC("flvr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class AppleShortDescriptionBox() extends Box('sdes') {
 Box boxes[];
 } 
*/
public partial class AppleShortDescriptionBox : Box
{
	public const string TYPE = "sdes";
	public override string DisplayName { get { return "AppleShortDescriptionBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleShortDescriptionBox(): base(IsoStream.FromFourCC("sdes"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class EventMessageBox() extends Box('emsg') {
 string schemeIdUri;
 string value;
 unsigned int(32) timescale;
 unsigned int(32) presentationTimeDelta;
 unsigned int(32) eventDuration;
 unsigned int(32) id;
 unsigned int(8) messageData[]; } 
*/
public partial class EventMessageBox : Box
{
	public const string TYPE = "emsg";
	public override string DisplayName { get { return "EventMessageBox"; } }

	protected BinaryUTF8String schemeIdUri; 
	public BinaryUTF8String SchemeIdUri { get { return this.schemeIdUri; } set { this.schemeIdUri = value; } }

	protected BinaryUTF8String value; 
	public BinaryUTF8String Value { get { return this.value; } set { this.value = value; } }

	protected uint timescale; 
	public uint Timescale { get { return this.timescale; } set { this.timescale = value; } }

	protected uint presentationTimeDelta; 
	public uint PresentationTimeDelta { get { return this.presentationTimeDelta; } set { this.presentationTimeDelta = value; } }

	protected uint eventDuration; 
	public uint EventDuration { get { return this.eventDuration; } set { this.eventDuration = value; } }

	protected uint id; 
	public uint Id { get { return this.id; } set { this.id = value; } }

	protected byte[] messageData; 
	public byte[] MessageData { get { return this.messageData; } set { this.messageData = value; } }

	public EventMessageBox(): base(IsoStream.FromFourCC("emsg"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.schemeIdUri, "schemeIdUri"); 
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.value, "value"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.timescale, "timescale"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.presentationTimeDelta, "presentationTimeDelta"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.eventDuration, "eventDuration"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.id, "id"); 
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.messageData, "messageData"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.schemeIdUri, "schemeIdUri"); 
		boxSize += stream.WriteStringZeroTerminated( this.value, "value"); 
		boxSize += stream.WriteUInt32( this.timescale, "timescale"); 
		boxSize += stream.WriteUInt32( this.presentationTimeDelta, "presentationTimeDelta"); 
		boxSize += stream.WriteUInt32( this.eventDuration, "eventDuration"); 
		boxSize += stream.WriteUInt32( this.id, "id"); 
		boxSize += stream.WriteUInt8ArrayTillEnd( this.messageData, "messageData"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(schemeIdUri); // schemeIdUri
		boxSize += IsoStream.CalculateStringSize(value); // value
		boxSize += 32; // timescale
		boxSize += 32; // presentationTimeDelta
		boxSize += 32; // eventDuration
		boxSize += 32; // id
		boxSize += ((ulong)messageData.Length * 8); // messageData
		return boxSize;
	}
}


/*
aligned(8) class TrackReferenceTypeBox() extends Box('hind') {
 unsigned int(32) trackIds[];
 } 
*/
public partial class TrackReferenceTypeBoxhindDup : Box
{
	public const string TYPE = "hind";
	public override string DisplayName { get { return "TrackReferenceTypeBoxhindDup"; } }

	protected uint[] trackIds; 
	public uint[] TrackIds { get { return this.trackIds; } set { this.trackIds = value; } }

	public TrackReferenceTypeBoxhindDup(): base(IsoStream.FromFourCC("hind"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32ArrayTillEnd(boxSize, readSize,  out this.trackIds, "trackIds"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32ArrayTillEnd( this.trackIds, "trackIds"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)trackIds.Length * 32); // trackIds
		return boxSize;
	}
}


/*
aligned(8) class TrackReferenceTypeBox() extends Box('vdep') {
 unsigned int(32) trackIds[];
 } 
*/
public partial class TrackReferenceTypeBoxvdepDup : Box
{
	public const string TYPE = "vdep";
	public override string DisplayName { get { return "TrackReferenceTypeBoxvdepDup"; } }

	protected uint[] trackIds; 
	public uint[] TrackIds { get { return this.trackIds; } set { this.trackIds = value; } }

	public TrackReferenceTypeBoxvdepDup(): base(IsoStream.FromFourCC("vdep"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32ArrayTillEnd(boxSize, readSize,  out this.trackIds, "trackIds"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32ArrayTillEnd( this.trackIds, "trackIds"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)trackIds.Length * 32); // trackIds
		return boxSize;
	}
}


/*
aligned(8) class TrackReferenceTypeBox() extends Box('vplx') {
 unsigned int(32) trackIds[];
 } 
*/
public partial class TrackReferenceTypeBoxvplxDup : Box
{
	public const string TYPE = "vplx";
	public override string DisplayName { get { return "TrackReferenceTypeBoxvplxDup"; } }

	protected uint[] trackIds; 
	public uint[] TrackIds { get { return this.trackIds; } set { this.trackIds = value; } }

	public TrackReferenceTypeBoxvplxDup(): base(IsoStream.FromFourCC("vplx"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32ArrayTillEnd(boxSize, readSize,  out this.trackIds, "trackIds"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32ArrayTillEnd( this.trackIds, "trackIds"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)trackIds.Length * 32); // trackIds
		return boxSize;
	}
}


/*
aligned(8) class DoViConfigurationBox() extends Box('dvcC') {
 unsigned int(8) dvVersionMajor;
 unsigned int(8) dvVersionMinor;
 unsigned int(16) profileLevelFlags;
 unsigned int(32) reserved1;
 unsigned int(32) reserved2;
unsigned int(32) reserved3;
unsigned int(32) reserved4;
 
 } 
*/
public partial class DoViConfigurationBox : Box
{
	public const string TYPE = "dvcC";
	public override string DisplayName { get { return "DoViConfigurationBox"; } }

	protected byte dvVersionMajor; 
	public byte DvVersionMajor { get { return this.dvVersionMajor; } set { this.dvVersionMajor = value; } }

	protected byte dvVersionMinor; 
	public byte DvVersionMinor { get { return this.dvVersionMinor; } set { this.dvVersionMinor = value; } }

	protected ushort profileLevelFlags; 
	public ushort ProfileLevelFlags { get { return this.profileLevelFlags; } set { this.profileLevelFlags = value; } }

	protected uint reserved1; 
	public uint Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected uint reserved2; 
	public uint Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

	protected uint reserved3; 
	public uint Reserved3 { get { return this.reserved3; } set { this.reserved3 = value; } }

	protected uint reserved4; 
	public uint Reserved4 { get { return this.reserved4; } set { this.reserved4 = value; } }

	public DoViConfigurationBox(): base(IsoStream.FromFourCC("dvcC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.dvVersionMajor, "dvVersionMajor"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.dvVersionMinor, "dvVersionMinor"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.profileLevelFlags, "profileLevelFlags"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.reserved1, "reserved1"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.reserved2, "reserved2"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.reserved3, "reserved3"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.reserved4, "reserved4"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.dvVersionMajor, "dvVersionMajor"); 
		boxSize += stream.WriteUInt8( this.dvVersionMinor, "dvVersionMinor"); 
		boxSize += stream.WriteUInt16( this.profileLevelFlags, "profileLevelFlags"); 
		boxSize += stream.WriteUInt32( this.reserved1, "reserved1"); 
		boxSize += stream.WriteUInt32( this.reserved2, "reserved2"); 
		boxSize += stream.WriteUInt32( this.reserved3, "reserved3"); 
		boxSize += stream.WriteUInt32( this.reserved4, "reserved4"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // dvVersionMajor
		boxSize += 8; // dvVersionMinor
		boxSize += 16; // profileLevelFlags
		boxSize += 32; // reserved1
		boxSize += 32; // reserved2
		boxSize += 32; // reserved3
		boxSize += 32; // reserved4
		return boxSize;
	}
}


/*
aligned(8) class DfxpSampleEntry() extends SampleEntry('dfxp') {
 } 
*/
public partial class DfxpSampleEntry : SampleEntry
{
	public const string TYPE = "dfxp";
	public override string DisplayName { get { return "DfxpSampleEntry"; } }

	public DfxpSampleEntry(): base(IsoStream.FromFourCC("dfxp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
aligned(8) class ContentLightLevelBox() extends FullBox('CoLL') {
 unsigned int(16) maxCLL;
 unsigned int(8) maxFALL;
 } 
*/
public partial class ContentLightLevelBoxCoLLDup : FullBox
{
	public const string TYPE = "CoLL";
	public override string DisplayName { get { return "ContentLightLevelBoxCoLLDup"; } }

	protected ushort maxCLL; 
	public ushort MaxCLL { get { return this.maxCLL; } set { this.maxCLL = value; } }

	protected byte maxFALL; 
	public byte MaxFALL { get { return this.maxFALL; } set { this.maxFALL = value; } }

	public ContentLightLevelBoxCoLLDup(): base(IsoStream.FromFourCC("CoLL"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.maxCLL, "maxCLL"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.maxFALL, "maxFALL"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.maxCLL, "maxCLL"); 
		boxSize += stream.WriteUInt8( this.maxFALL, "maxFALL"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // maxCLL
		boxSize += 8; // maxFALL
		return boxSize;
	}
}


/*
aligned(8) class SMPTE2086MasteringDisplayMetadataBox() extends FullBox('SmDm') {
 unsigned int(16) primaryRChromaticityX;
unsigned int(16) primaryRChromaticityY;
unsigned int(16) primaryGChromaticityX;
unsigned int(16) primaryGChromaticityY;
unsigned int(16) primaryBChromaticityX;
unsigned int(16) primaryBChromaticityY;
 unsigned int(32) luminanceMax;
 unsigned int(32) luminanceMin;
 } 
*/
public partial class SMPTE2086MasteringDisplayMetadataBox : FullBox
{
	public const string TYPE = "SmDm";
	public override string DisplayName { get { return "SMPTE2086MasteringDisplayMetadataBox"; } }

	protected ushort primaryRChromaticityX; 
	public ushort PrimaryRChromaticityX { get { return this.primaryRChromaticityX; } set { this.primaryRChromaticityX = value; } }

	protected ushort primaryRChromaticityY; 
	public ushort PrimaryRChromaticityY { get { return this.primaryRChromaticityY; } set { this.primaryRChromaticityY = value; } }

	protected ushort primaryGChromaticityX; 
	public ushort PrimaryGChromaticityX { get { return this.primaryGChromaticityX; } set { this.primaryGChromaticityX = value; } }

	protected ushort primaryGChromaticityY; 
	public ushort PrimaryGChromaticityY { get { return this.primaryGChromaticityY; } set { this.primaryGChromaticityY = value; } }

	protected ushort primaryBChromaticityX; 
	public ushort PrimaryBChromaticityX { get { return this.primaryBChromaticityX; } set { this.primaryBChromaticityX = value; } }

	protected ushort primaryBChromaticityY; 
	public ushort PrimaryBChromaticityY { get { return this.primaryBChromaticityY; } set { this.primaryBChromaticityY = value; } }

	protected uint luminanceMax; 
	public uint LuminanceMax { get { return this.luminanceMax; } set { this.luminanceMax = value; } }

	protected uint luminanceMin; 
	public uint LuminanceMin { get { return this.luminanceMin; } set { this.luminanceMin = value; } }

	public SMPTE2086MasteringDisplayMetadataBox(): base(IsoStream.FromFourCC("SmDm"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.primaryRChromaticityX, "primaryRChromaticityX"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.primaryRChromaticityY, "primaryRChromaticityY"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.primaryGChromaticityX, "primaryGChromaticityX"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.primaryGChromaticityY, "primaryGChromaticityY"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.primaryBChromaticityX, "primaryBChromaticityX"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.primaryBChromaticityY, "primaryBChromaticityY"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.luminanceMax, "luminanceMax"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.luminanceMin, "luminanceMin"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.primaryRChromaticityX, "primaryRChromaticityX"); 
		boxSize += stream.WriteUInt16( this.primaryRChromaticityY, "primaryRChromaticityY"); 
		boxSize += stream.WriteUInt16( this.primaryGChromaticityX, "primaryGChromaticityX"); 
		boxSize += stream.WriteUInt16( this.primaryGChromaticityY, "primaryGChromaticityY"); 
		boxSize += stream.WriteUInt16( this.primaryBChromaticityX, "primaryBChromaticityX"); 
		boxSize += stream.WriteUInt16( this.primaryBChromaticityY, "primaryBChromaticityY"); 
		boxSize += stream.WriteUInt32( this.luminanceMax, "luminanceMax"); 
		boxSize += stream.WriteUInt32( this.luminanceMin, "luminanceMin"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // primaryRChromaticityX
		boxSize += 16; // primaryRChromaticityY
		boxSize += 16; // primaryGChromaticityX
		boxSize += 16; // primaryGChromaticityY
		boxSize += 16; // primaryBChromaticityX
		boxSize += 16; // primaryBChromaticityY
		boxSize += 32; // luminanceMax
		boxSize += 32; // luminanceMin
		return boxSize;
	}
}


/*
aligned(8) class SMIBox() extends Box('SMI ') {
	 bit(8) metadata[];
 } 
*/
public partial class SMIBox : Box
{
	public const string TYPE = "SMI ";
	public override string DisplayName { get { return "SMIBox"; } }

	protected byte[] metadata; 
	public byte[] Metadata { get { return this.metadata; } set { this.metadata = value; } }

	public SMIBox(): base(IsoStream.FromFourCC("SMI "))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.metadata, "metadata"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.metadata, "metadata"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)metadata.Length * 8); // metadata
		return boxSize;
	}
}


/*
aligned(8) class C608Box() extends Box('c608') {
	 unsigned int(8) reserved1[4]; unsigned int(16) reserved2;
 unsigned int(16) dataReferenceIndex;
 } 
*/
public partial class C608Box : Box
{
	public const string TYPE = "c608";
	public override string DisplayName { get { return "C608Box"; } }

	protected byte[] reserved1; 
	public byte[] Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected ushort reserved2; 
	public ushort Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

	protected ushort dataReferenceIndex; 
	public ushort DataReferenceIndex { get { return this.dataReferenceIndex; } set { this.dataReferenceIndex = value; } }

	public C608Box(): base(IsoStream.FromFourCC("c608"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 4,  out this.reserved1, "reserved1"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.reserved2, "reserved2"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.dataReferenceIndex, "dataReferenceIndex"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8Array(4,  this.reserved1, "reserved1"); 
		boxSize += stream.WriteUInt16( this.reserved2, "reserved2"); 
		boxSize += stream.WriteUInt16( this.dataReferenceIndex, "dataReferenceIndex"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 4 * 8; // reserved1
		boxSize += 16; // reserved2
		boxSize += 16; // dataReferenceIndex
		return boxSize;
	}
}


/*
aligned(8) class HrefBox() extends Box('href') {
	 unsigned int(8) reserved1[6];
 unsigned int(16) dataReferenceIndex;
 Box boxes[];
 } 
*/
public partial class HrefBox : Box
{
	public const string TYPE = "href";
	public override string DisplayName { get { return "HrefBox"; } }

	protected byte[] reserved1; 
	public byte[] Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected ushort dataReferenceIndex; 
	public ushort DataReferenceIndex { get { return this.dataReferenceIndex; } set { this.dataReferenceIndex = value; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public HrefBox(): base(IsoStream.FromFourCC("href"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 6,  out this.reserved1, "reserved1"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.dataReferenceIndex, "dataReferenceIndex"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8Array(6,  this.reserved1, "reserved1"); 
		boxSize += stream.WriteUInt16( this.dataReferenceIndex, "dataReferenceIndex"); 
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 6 * 8; // reserved1
		boxSize += 16; // dataReferenceIndex
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class IpirBox() extends Box('ipir') {
	 unsigned int(32) entry_count;
 unsigned int(32) trackIDs[ entry_count ];
 } 
*/
public partial class IpirBox : Box
{
	public const string TYPE = "ipir";
	public override string DisplayName { get { return "IpirBox"; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected uint[] trackIDs; 
	public uint[] TrackIDs { get { return this.trackIDs; } set { this.trackIDs = value; } }

	public IpirBox(): base(IsoStream.FromFourCC("ipir"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 
		boxSize += stream.ReadUInt32Array(boxSize, readSize, (uint)( entry_count ),  out this.trackIDs, "trackIDs"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 
		boxSize += stream.WriteUInt32Array((uint)( entry_count ),  this.trackIDs, "trackIDs"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // entry_count
		boxSize += ((ulong)( entry_count ) * 32); // trackIDs
		return boxSize;
	}
}


/*
aligned(8) class XMPBox() extends Box('uuid be7acfcb97a942e89c71999491e3afac') {
	 string data;
 }
*/
public partial class XMPBox : Box
{
	public const string TYPE = "uuid";
	public override string DisplayName { get { return "XMPBox"; } }

	protected BinaryUTF8String data; 
	public BinaryUTF8String Data { get { return this.data; } set { this.data = value; } }

	public XMPBox(): base(IsoStream.FromFourCC("uuid"), Convert.FromHexString("be7acfcb97a942e89c71999491e3afac"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(data); // data
		return boxSize;
	}
}


/*
aligned(8) class PspUsmtExtensionBox() extends Box('uuid 55534d5421d24fcebb88695cfac9c740') {
	 Box boxes[];
 }
*/
public partial class PspUsmtExtensionBox : Box
{
	public const string TYPE = "uuid";
	public override string DisplayName { get { return "PspUsmtExtensionBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public PspUsmtExtensionBox(): base(IsoStream.FromFourCC("uuid"), Convert.FromHexString("55534d5421d24fcebb88695cfac9c740"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class PspProfExtensionBox() extends Box('uuid 50524f4621d24fcebb88695cfac9c740') {
	 unsigned int(32) unknown1;
 unsigned int(32) entry_count;
 Box boxes[];
 }
*/
public partial class PspProfExtensionBox : Box
{
	public const string TYPE = "uuid";
	public override string DisplayName { get { return "PspProfExtensionBox"; } }

	protected uint unknown1; 
	public uint Unknown1 { get { return this.unknown1; } set { this.unknown1 = value; } }

	protected uint entry_count; 
	public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public PspProfExtensionBox(): base(IsoStream.FromFourCC("uuid"), Convert.FromHexString("50524f4621d24fcebb88695cfac9c740"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.unknown1, "unknown1"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entry_count, "entry_count"); 
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.unknown1, "unknown1"); 
		boxSize += stream.WriteUInt32( this.entry_count, "entry_count"); 
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // unknown1
		boxSize += 32; // entry_count
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class PspMtdtBox() extends Box('MTDT') {
	 unsigned int(16) entry_count;
 MtdtEntry entries[ entry_count ];
 }
 
*/
public partial class PspMtdtBox : Box
{
	public const string TYPE = "MTDT";
	public override string DisplayName { get { return "PspMtdtBox"; } }

	protected ushort entry_count; 
	public ushort EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected MtdtEntry[] entries; 
	public MtdtEntry[] Entries { get { return this.entries; } set { this.entries = value; } }

	public PspMtdtBox(): base(IsoStream.FromFourCC("MTDT"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.entry_count, "entry_count"); 
		boxSize += stream.ReadClass(boxSize, readSize, this, (uint)( entry_count ), () => new MtdtEntry(),  out this.entries, "entries"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.entry_count, "entry_count"); 
		boxSize += stream.WriteClass( this.entries, "entries"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // entry_count
		boxSize += IsoStream.CalculateClassSize(entries); // entries
		return boxSize;
	}
}


/*
aligned(8) class MtdtEntry() {
 unsigned int(16) size;
 unsigned int(32) type;
 bit(1) reserved;
unsigned int(5)[3] language;
 unsigned int(16) dataType;
 bit(8) data[size-10];
 }

*/
public partial class MtdtEntry : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "MtdtEntry"; } }

	protected ushort size; 
	public ushort Size { get { return this.size; } set { this.size = value; } }

	protected uint type; 
	public uint Type { get { return this.type; } set { this.type = value; } }

	protected bool reserved; 
	public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected string language; 
	public string Language { get { return this.language; } set { this.language = value; } }

	protected ushort dataType; 
	public ushort DataType { get { return this.dataType; } set { this.dataType = value; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public MtdtEntry(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.size, "size"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.type, "type"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadIso639(boxSize, readSize,  out this.language, "language"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.dataType, "dataType"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(size-10),  out this.data, "data"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt16( this.size, "size"); 
		boxSize += stream.WriteUInt32( this.type, "type"); 
		boxSize += stream.WriteBit( this.reserved, "reserved"); 
		boxSize += stream.WriteIso639( this.language, "language"); 
		boxSize += stream.WriteUInt16( this.dataType, "dataType"); 
		boxSize += stream.WriteUInt8Array((uint)(size-10),  this.data, "data"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 16; // size
		boxSize += 32; // type
		boxSize += 1; // reserved
		boxSize += 15; // language
		boxSize += 16; // dataType
		boxSize += ((ulong)(size-10) * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class PspFprfBox() extends Box('FPRF') {
	 unsigned int(32) unknown1;
 unsigned int(32) unknown2;
 unsigned int(32) unknown3;
 }
*/
public partial class PspFprfBox : Box
{
	public const string TYPE = "FPRF";
	public override string DisplayName { get { return "PspFprfBox"; } }

	protected uint unknown1; 
	public uint Unknown1 { get { return this.unknown1; } set { this.unknown1 = value; } }

	protected uint unknown2; 
	public uint Unknown2 { get { return this.unknown2; } set { this.unknown2 = value; } }

	protected uint unknown3; 
	public uint Unknown3 { get { return this.unknown3; } set { this.unknown3 = value; } }

	public PspFprfBox(): base(IsoStream.FromFourCC("FPRF"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.unknown1, "unknown1"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.unknown2, "unknown2"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.unknown3, "unknown3"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.unknown1, "unknown1"); 
		boxSize += stream.WriteUInt32( this.unknown2, "unknown2"); 
		boxSize += stream.WriteUInt32( this.unknown3, "unknown3"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // unknown1
		boxSize += 32; // unknown2
		boxSize += 32; // unknown3
		return boxSize;
	}
}


/*
aligned(8) class PspAprfBox() extends Box('APRF') {
	 unsigned int(32) unknown1;
 unsigned int(32) unknown2;
 unsigned int(32) codec;
 unsigned int(32) unknown3;
 unsigned int(32) unknown4;
 unsigned int(32) maxBitrate;
 unsigned int(32) avgBitrate;
 unsigned int(32) frameRate;
 unsigned int(32) channels;
 }
*/
public partial class PspAprfBox : Box
{
	public const string TYPE = "APRF";
	public override string DisplayName { get { return "PspAprfBox"; } }

	protected uint unknown1; 
	public uint Unknown1 { get { return this.unknown1; } set { this.unknown1 = value; } }

	protected uint unknown2; 
	public uint Unknown2 { get { return this.unknown2; } set { this.unknown2 = value; } }

	protected uint codec; 
	public uint Codec { get { return this.codec; } set { this.codec = value; } }

	protected uint unknown3; 
	public uint Unknown3 { get { return this.unknown3; } set { this.unknown3 = value; } }

	protected uint unknown4; 
	public uint Unknown4 { get { return this.unknown4; } set { this.unknown4 = value; } }

	protected uint maxBitrate; 
	public uint MaxBitrate { get { return this.maxBitrate; } set { this.maxBitrate = value; } }

	protected uint avgBitrate; 
	public uint AvgBitrate { get { return this.avgBitrate; } set { this.avgBitrate = value; } }

	protected uint frameRate; 
	public uint FrameRate { get { return this.frameRate; } set { this.frameRate = value; } }

	protected uint channels; 
	public uint Channels { get { return this.channels; } set { this.channels = value; } }

	public PspAprfBox(): base(IsoStream.FromFourCC("APRF"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.unknown1, "unknown1"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.unknown2, "unknown2"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.codec, "codec"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.unknown3, "unknown3"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.unknown4, "unknown4"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.maxBitrate, "maxBitrate"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.avgBitrate, "avgBitrate"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.frameRate, "frameRate"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.channels, "channels"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.unknown1, "unknown1"); 
		boxSize += stream.WriteUInt32( this.unknown2, "unknown2"); 
		boxSize += stream.WriteUInt32( this.codec, "codec"); 
		boxSize += stream.WriteUInt32( this.unknown3, "unknown3"); 
		boxSize += stream.WriteUInt32( this.unknown4, "unknown4"); 
		boxSize += stream.WriteUInt32( this.maxBitrate, "maxBitrate"); 
		boxSize += stream.WriteUInt32( this.avgBitrate, "avgBitrate"); 
		boxSize += stream.WriteUInt32( this.frameRate, "frameRate"); 
		boxSize += stream.WriteUInt32( this.channels, "channels"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // unknown1
		boxSize += 32; // unknown2
		boxSize += 32; // codec
		boxSize += 32; // unknown3
		boxSize += 32; // unknown4
		boxSize += 32; // maxBitrate
		boxSize += 32; // avgBitrate
		boxSize += 32; // frameRate
		boxSize += 32; // channels
		return boxSize;
	}
}


/*
aligned(8) class PspVprfBox() extends Box('VPRF') {
	 unsigned int(32) unknown1;
 unsigned int(32) unknown2;
 unsigned int(32) codec;
 unsigned int(32) unknown3;
 unsigned int(32) unknown4;
 unsigned int(32) maxBitrate;
 unsigned int(32) avgBitrate;
 unsigned int(32) frameRate1;
 unsigned int(32) frameRate2;
 unsigned int(16) width;
 unsigned int(16) height;
 unsigned int(32) unknown5;
 }
*/
public partial class PspVprfBox : Box
{
	public const string TYPE = "VPRF";
	public override string DisplayName { get { return "PspVprfBox"; } }

	protected uint unknown1; 
	public uint Unknown1 { get { return this.unknown1; } set { this.unknown1 = value; } }

	protected uint unknown2; 
	public uint Unknown2 { get { return this.unknown2; } set { this.unknown2 = value; } }

	protected uint codec; 
	public uint Codec { get { return this.codec; } set { this.codec = value; } }

	protected uint unknown3; 
	public uint Unknown3 { get { return this.unknown3; } set { this.unknown3 = value; } }

	protected uint unknown4; 
	public uint Unknown4 { get { return this.unknown4; } set { this.unknown4 = value; } }

	protected uint maxBitrate; 
	public uint MaxBitrate { get { return this.maxBitrate; } set { this.maxBitrate = value; } }

	protected uint avgBitrate; 
	public uint AvgBitrate { get { return this.avgBitrate; } set { this.avgBitrate = value; } }

	protected uint frameRate1; 
	public uint FrameRate1 { get { return this.frameRate1; } set { this.frameRate1 = value; } }

	protected uint frameRate2; 
	public uint FrameRate2 { get { return this.frameRate2; } set { this.frameRate2 = value; } }

	protected ushort width; 
	public ushort Width { get { return this.width; } set { this.width = value; } }

	protected ushort height; 
	public ushort Height { get { return this.height; } set { this.height = value; } }

	protected uint unknown5; 
	public uint Unknown5 { get { return this.unknown5; } set { this.unknown5 = value; } }

	public PspVprfBox(): base(IsoStream.FromFourCC("VPRF"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.unknown1, "unknown1"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.unknown2, "unknown2"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.codec, "codec"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.unknown3, "unknown3"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.unknown4, "unknown4"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.maxBitrate, "maxBitrate"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.avgBitrate, "avgBitrate"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.frameRate1, "frameRate1"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.frameRate2, "frameRate2"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.width, "width"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.height, "height"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.unknown5, "unknown5"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.unknown1, "unknown1"); 
		boxSize += stream.WriteUInt32( this.unknown2, "unknown2"); 
		boxSize += stream.WriteUInt32( this.codec, "codec"); 
		boxSize += stream.WriteUInt32( this.unknown3, "unknown3"); 
		boxSize += stream.WriteUInt32( this.unknown4, "unknown4"); 
		boxSize += stream.WriteUInt32( this.maxBitrate, "maxBitrate"); 
		boxSize += stream.WriteUInt32( this.avgBitrate, "avgBitrate"); 
		boxSize += stream.WriteUInt32( this.frameRate1, "frameRate1"); 
		boxSize += stream.WriteUInt32( this.frameRate2, "frameRate2"); 
		boxSize += stream.WriteUInt16( this.width, "width"); 
		boxSize += stream.WriteUInt16( this.height, "height"); 
		boxSize += stream.WriteUInt32( this.unknown5, "unknown5"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // unknown1
		boxSize += 32; // unknown2
		boxSize += 32; // codec
		boxSize += 32; // unknown3
		boxSize += 32; // unknown4
		boxSize += 32; // maxBitrate
		boxSize += 32; // avgBitrate
		boxSize += 32; // frameRate1
		boxSize += 32; // frameRate2
		boxSize += 16; // width
		boxSize += 16; // height
		boxSize += 32; // unknown5
		return boxSize;
	}
}


/*
aligned(8) class PiffSampleEncryptionBox() extends FullBox('uuid a2394f525a9b4f14a2446c427c648df4', version, flags) 
{
 if(flags & 0x1) {
 unsigned int(24) algorithmID;
 unsigned int(8) Per_Sample_IV_Size;
 unsigned int(8) kid[16];
 }
  unsigned int(32)  sample_count;
   SampleEncryptionSample(version, flags, Per_Sample_IV_Size) samples[sample_count];
}

*/
public partial class PiffSampleEncryptionBox : FullBox
{
	public const string TYPE = "uuid";
	public override string DisplayName { get { return "PiffSampleEncryptionBox"; } }

	protected uint algorithmID; 
	public uint AlgorithmID { get { return this.algorithmID; } set { this.algorithmID = value; } }

	protected byte Per_Sample_IV_Size; 
	public byte PerSampleIVSize { get { return this.Per_Sample_IV_Size; } set { this.Per_Sample_IV_Size = value; } }

	protected byte[] kid; 
	public byte[] Kid { get { return this.kid; } set { this.kid = value; } }

	protected uint sample_count; 
	public uint SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

	protected SampleEncryptionSample[] samples; 
	public SampleEncryptionSample[] Samples { get { return this.samples; } set { this.samples = value; } }

	public PiffSampleEncryptionBox(byte version = 0, uint flags = 0): base(IsoStream.FromFourCC("uuid"), version, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if ((flags  &  0x1) ==  0x1)
		{
			boxSize += stream.ReadUInt24(boxSize, readSize,  out this.algorithmID, "algorithmID"); 
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.Per_Sample_IV_Size, "Per_Sample_IV_Size"); 
			boxSize += stream.ReadUInt8Array(boxSize, readSize, 16,  out this.kid, "kid"); 
		}
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.sample_count, "sample_count"); 
		boxSize += stream.ReadClass(boxSize, readSize, this, (uint)(sample_count), () => new SampleEncryptionSample(version, flags, Per_Sample_IV_Size),  out this.samples, "samples"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if ((flags  &  0x1) ==  0x1)
		{
			boxSize += stream.WriteUInt24( this.algorithmID, "algorithmID"); 
			boxSize += stream.WriteUInt8( this.Per_Sample_IV_Size, "Per_Sample_IV_Size"); 
			boxSize += stream.WriteUInt8Array(16,  this.kid, "kid"); 
		}
		boxSize += stream.WriteUInt32( this.sample_count, "sample_count"); 
		boxSize += stream.WriteClass( this.samples, "samples"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if ((flags  &  0x1) ==  0x1)
		{
			boxSize += 24; // algorithmID
			boxSize += 8; // Per_Sample_IV_Size
			boxSize += 16 * 8; // kid
		}
		boxSize += 32; // sample_count
		boxSize += IsoStream.CalculateClassSize(samples); // samples
		return boxSize;
	}
}


/*
aligned(8) class PiffTrackEncryptionBox() extends FullBox('uuid 8974dbce7be74c5184f97148f9882554', version, flags) 
{
 unsigned int(24) algorithmID;
 unsigned int(8) Per_Sample_IV_Size;
 unsigned int(8) kid[16];
 }

*/
public partial class PiffTrackEncryptionBox : FullBox
{
	public const string TYPE = "uuid";
	public override string DisplayName { get { return "PiffTrackEncryptionBox"; } }

	protected uint algorithmID; 
	public uint AlgorithmID { get { return this.algorithmID; } set { this.algorithmID = value; } }

	protected byte Per_Sample_IV_Size; 
	public byte PerSampleIVSize { get { return this.Per_Sample_IV_Size; } set { this.Per_Sample_IV_Size = value; } }

	protected byte[] kid; 
	public byte[] Kid { get { return this.kid; } set { this.kid = value; } }

	public PiffTrackEncryptionBox(byte version = 0, uint flags = 0): base(IsoStream.FromFourCC("uuid"), version, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt24(boxSize, readSize,  out this.algorithmID, "algorithmID"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.Per_Sample_IV_Size, "Per_Sample_IV_Size"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 16,  out this.kid, "kid"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt24( this.algorithmID, "algorithmID"); 
		boxSize += stream.WriteUInt8( this.Per_Sample_IV_Size, "Per_Sample_IV_Size"); 
		boxSize += stream.WriteUInt8Array(16,  this.kid, "kid"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 24; // algorithmID
		boxSize += 8; // Per_Sample_IV_Size
		boxSize += 16 * 8; // kid
		return boxSize;
	}
}


/*
aligned(8) class TfrfBox() extends FullBox('uuid d4807ef2ca3946958e5426cb9e46a79f') {
	 unsigned int(8) fragmentCount;
 for(i = 0; i < fragmentCount; i++) {
 if(version == 0x1) {
 unsigned int(64) fragmentAbsoluteTime;
 unsigned int(64) fragmentAbsoluteDuration;
 } else {
 unsigned int(32) fragmentAbsoluteTime;
 unsigned int(32) fragmentAbsoluteDuration;
 }
 } }
*/
public partial class TfrfBox : FullBox
{
	public const string TYPE = "uuid";
	public override string DisplayName { get { return "TfrfBox"; } }

	protected byte fragmentCount; 
	public byte FragmentCount { get { return this.fragmentCount; } set { this.fragmentCount = value; } }

	protected ulong[] fragmentAbsoluteTime; 
	public ulong[] FragmentAbsoluteTime { get { return this.fragmentAbsoluteTime; } set { this.fragmentAbsoluteTime = value; } }

	protected ulong[] fragmentAbsoluteDuration; 
	public ulong[] FragmentAbsoluteDuration { get { return this.fragmentAbsoluteDuration; } set { this.fragmentAbsoluteDuration = value; } }

	public TfrfBox(): base(IsoStream.FromFourCC("uuid"), Convert.FromHexString("d4807ef2ca3946958e5426cb9e46a79f"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.fragmentCount, "fragmentCount"); 

		this.fragmentAbsoluteTime = new ulong[IsoStream.GetInt( fragmentCount)];
		this.fragmentAbsoluteDuration = new ulong[IsoStream.GetInt( fragmentCount)];
		for (int i = 0; i < fragmentCount; i++)
		{

			if (version == 0x1)
			{
				boxSize += stream.ReadUInt64(boxSize, readSize,  out this.fragmentAbsoluteTime[i], "fragmentAbsoluteTime"); 
				boxSize += stream.ReadUInt64(boxSize, readSize,  out this.fragmentAbsoluteDuration[i], "fragmentAbsoluteDuration"); 
			}

			else 
			{
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.fragmentAbsoluteTime[i], "fragmentAbsoluteTime"); 
				boxSize += stream.ReadUInt32(boxSize, readSize,  out this.fragmentAbsoluteDuration[i], "fragmentAbsoluteDuration"); 
			}
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.fragmentCount, "fragmentCount"); 

		for (int i = 0; i < fragmentCount; i++)
		{

			if (version == 0x1)
			{
				boxSize += stream.WriteUInt64( this.fragmentAbsoluteTime[i], "fragmentAbsoluteTime"); 
				boxSize += stream.WriteUInt64( this.fragmentAbsoluteDuration[i], "fragmentAbsoluteDuration"); 
			}

			else 
			{
				boxSize += stream.WriteUInt32( this.fragmentAbsoluteTime[i], "fragmentAbsoluteTime"); 
				boxSize += stream.WriteUInt32( this.fragmentAbsoluteDuration[i], "fragmentAbsoluteDuration"); 
			}
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // fragmentCount

		for (int i = 0; i < fragmentCount; i++)
		{

			if (version == 0x1)
			{
				boxSize += 64; // fragmentAbsoluteTime
				boxSize += 64; // fragmentAbsoluteDuration
			}

			else 
			{
				boxSize += 32; // fragmentAbsoluteTime
				boxSize += 32; // fragmentAbsoluteDuration
			}
		}
		return boxSize;
	}
}


/*
aligned(8) class TfxdBox() extends FullBox('uuid 6d1d9b0542d544e680e2141daff757b2') {
	 if(version == 0x1) {
 unsigned int(64) fragmentAbsoluteTime;
 unsigned int(64) fragmentAbsoluteDuration;
 } else {
 unsigned int(32) fragmentAbsoluteTime;
 unsigned int(32) fragmentAbsoluteDuration;
 } }
*/
public partial class TfxdBox : FullBox
{
	public const string TYPE = "uuid";
	public override string DisplayName { get { return "TfxdBox"; } }

	protected ulong fragmentAbsoluteTime; 
	public ulong FragmentAbsoluteTime { get { return this.fragmentAbsoluteTime; } set { this.fragmentAbsoluteTime = value; } }

	protected ulong fragmentAbsoluteDuration; 
	public ulong FragmentAbsoluteDuration { get { return this.fragmentAbsoluteDuration; } set { this.fragmentAbsoluteDuration = value; } }

	public TfxdBox(): base(IsoStream.FromFourCC("uuid"), Convert.FromHexString("6d1d9b0542d544e680e2141daff757b2"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);

		if (version == 0x1)
		{
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.fragmentAbsoluteTime, "fragmentAbsoluteTime"); 
			boxSize += stream.ReadUInt64(boxSize, readSize,  out this.fragmentAbsoluteDuration, "fragmentAbsoluteDuration"); 
		}

		else 
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.fragmentAbsoluteTime, "fragmentAbsoluteTime"); 
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.fragmentAbsoluteDuration, "fragmentAbsoluteDuration"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);

		if (version == 0x1)
		{
			boxSize += stream.WriteUInt64( this.fragmentAbsoluteTime, "fragmentAbsoluteTime"); 
			boxSize += stream.WriteUInt64( this.fragmentAbsoluteDuration, "fragmentAbsoluteDuration"); 
		}

		else 
		{
			boxSize += stream.WriteUInt32( this.fragmentAbsoluteTime, "fragmentAbsoluteTime"); 
			boxSize += stream.WriteUInt32( this.fragmentAbsoluteDuration, "fragmentAbsoluteDuration"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();

		if (version == 0x1)
		{
			boxSize += 64; // fragmentAbsoluteTime
			boxSize += 64; // fragmentAbsoluteDuration
		}

		else 
		{
			boxSize += 32; // fragmentAbsoluteTime
			boxSize += 32; // fragmentAbsoluteDuration
		}
		return boxSize;
	}
}


/*
aligned(8) class UuidBasedProtectionSystemSpecificHeaderBox() extends FullBox('uuid d08a4f1810f34a82b6c832d8aba183d3') {
	 unsigned int(8) systemID[16];
 unsigned int(32) count;
 unsigned int(8) data[count];
 }
*/
public partial class UuidBasedProtectionSystemSpecificHeaderBox : FullBox
{
	public const string TYPE = "uuid";
	public override string DisplayName { get { return "UuidBasedProtectionSystemSpecificHeaderBox"; } }

	protected byte[] systemID; 
	public byte[] SystemID { get { return this.systemID; } set { this.systemID = value; } }

	protected uint count; 
	public uint Count { get { return this.count; } set { this.count = value; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public UuidBasedProtectionSystemSpecificHeaderBox(): base(IsoStream.FromFourCC("uuid"), Convert.FromHexString("d08a4f1810f34a82b6c832d8aba183d3"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8Array(boxSize, readSize, 16,  out this.systemID, "systemID"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.count, "count"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(count),  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8Array(16,  this.systemID, "systemID"); 
		boxSize += stream.WriteUInt32( this.count, "count"); 
		boxSize += stream.WriteUInt8Array((uint)(count),  this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16 * 8; // systemID
		boxSize += 32; // count
		boxSize += ((ulong)(count) * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class PadsBox() extends Box('pads') {
	 bit(8) data[];
 } 
*/
public partial class PadsBox : Box
{
	public const string TYPE = "pads";
	public override string DisplayName { get { return "PadsBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public PadsBox(): base(IsoStream.FromFourCC("pads"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class AlternativesEntityGroupBox() extends TrackGroupTypeBox('altr') {
	 unsigned int(32) entity_count;
 unsigned int(32) entity_ids[]; 
 } 
*/
public partial class AlternativesEntityGroupBox : TrackGroupTypeBox
{
	public const string TYPE = "altr";
	public override string DisplayName { get { return "AlternativesEntityGroupBox"; } }

	protected uint entity_count; 
	public uint EntityCount { get { return this.entity_count; } set { this.entity_count = value; } }

	protected uint[] entity_ids; 
	public uint[] EntityIds { get { return this.entity_ids; } set { this.entity_ids = value; } }

	public AlternativesEntityGroupBox(): base(IsoStream.FromFourCC("altr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entity_count, "entity_count"); 
		boxSize += stream.ReadUInt32ArrayTillEnd(boxSize, readSize,  out this.entity_ids, "entity_ids"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.entity_count, "entity_count"); 
		boxSize += stream.WriteUInt32ArrayTillEnd( this.entity_ids, "entity_ids"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // entity_count
		boxSize += ((ulong)entity_ids.Length * 32); // entity_ids
		return boxSize;
	}
}


/*
aligned(8) class StereoEntityGroupBox() extends TrackGroupTypeBox('ster') {
	 unsigned int(32) entity_count;
 unsigned int(32) entity_ids[]; 
 } 
*/
public partial class StereoEntityGroupBox : TrackGroupTypeBox
{
	public const string TYPE = "ster";
	public override string DisplayName { get { return "StereoEntityGroupBox"; } }

	protected uint entity_count; 
	public uint EntityCount { get { return this.entity_count; } set { this.entity_count = value; } }

	protected uint[] entity_ids; 
	public uint[] EntityIds { get { return this.entity_ids; } set { this.entity_ids = value; } }

	public StereoEntityGroupBox(): base(IsoStream.FromFourCC("ster"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entity_count, "entity_count"); 
		boxSize += stream.ReadUInt32ArrayTillEnd(boxSize, readSize,  out this.entity_ids, "entity_ids"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.entity_count, "entity_count"); 
		boxSize += stream.WriteUInt32ArrayTillEnd( this.entity_ids, "entity_ids"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // entity_count
		boxSize += ((ulong)entity_ids.Length * 32); // entity_ids
		return boxSize;
	}
}


/*
aligned(8) class ImagePyramidEntityGroupBox() extends TrackGroupTypeBox('pymd') {
	 unsigned int(32) entity_count;
 unsigned int(32) entity_ids[]; 
 } 
*/
public partial class ImagePyramidEntityGroupBox : TrackGroupTypeBox
{
	public const string TYPE = "pymd";
	public override string DisplayName { get { return "ImagePyramidEntityGroupBox"; } }

	protected uint entity_count; 
	public uint EntityCount { get { return this.entity_count; } set { this.entity_count = value; } }

	protected uint[] entity_ids; 
	public uint[] EntityIds { get { return this.entity_ids; } set { this.entity_ids = value; } }

	public ImagePyramidEntityGroupBox(): base(IsoStream.FromFourCC("pymd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.entity_count, "entity_count"); 
		boxSize += stream.ReadUInt32ArrayTillEnd(boxSize, readSize,  out this.entity_ids, "entity_ids"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.entity_count, "entity_count"); 
		boxSize += stream.WriteUInt32ArrayTillEnd( this.entity_ids, "entity_ids"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // entity_count
		boxSize += ((ulong)entity_ids.Length * 32); // entity_ids
		return boxSize;
	}
}


/*
aligned(8) class TimeSynchronizedCaptureEntityGroupBox() extends TrackGroupTypeBox('tsyn') {
	 bit(8) data[];
 } 
*/
public partial class TimeSynchronizedCaptureEntityGroupBox : TrackGroupTypeBox
{
	public const string TYPE = "tsyn";
	public override string DisplayName { get { return "TimeSynchronizedCaptureEntityGroupBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public TimeSynchronizedCaptureEntityGroupBox(): base(IsoStream.FromFourCC("tsyn"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class MicrosoftWindowsVersionBox() extends Box('uuid 5ca708fb328e4205a861650eca0a9596') {
	 unsigned int(16) unknown1;
 unsigned int(16) count;
 char version[count];
 }
*/
public partial class MicrosoftWindowsVersionBox : Box
{
	public const string TYPE = "uuid";
	public override string DisplayName { get { return "MicrosoftWindowsVersionBox"; } }

	protected ushort unknown1; 
	public ushort Unknown1 { get { return this.unknown1; } set { this.unknown1 = value; } }

	protected ushort count; 
	public ushort Count { get { return this.count; } set { this.count = value; } }

	protected byte[] version; 
	public byte[] Version { get { return this.version; } set { this.version = value; } }

	public MicrosoftWindowsVersionBox(): base(IsoStream.FromFourCC("uuid"), Convert.FromHexString("5ca708fb328e4205a861650eca0a9596"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.unknown1, "unknown1"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.count, "count"); 
		boxSize += stream.ReadUInt8Array(boxSize, readSize, (uint)(count),  out this.version, "version"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.unknown1, "unknown1"); 
		boxSize += stream.WriteUInt16( this.count, "count"); 
		boxSize += stream.WriteUInt8Array((uint)(count),  this.version, "version"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // unknown1
		boxSize += 16; // count
		boxSize += ((ulong)(count) * 8); // version
		return boxSize;
	}
}


/*
aligned(8) class CameraIntrinsicMatrixBox() extends FullBox('cmin') {
	 signed int(32) matrix_focal_length_x;
 signed int(32) matrix_principal_point_x;
 signed int(32) matrix_principal_point_y;
 if( flags & 0x1 ) { 
 signed int(32) matrix_focal_length_y;
 signed int(32) matrix_skew;
 }
 } 
*/
public partial class CameraIntrinsicMatrixBox : FullBox
{
	public const string TYPE = "cmin";
	public override string DisplayName { get { return "CameraIntrinsicMatrixBox"; } }

	protected int matrix_focal_length_x; 
	public int MatrixFocalLengthx { get { return this.matrix_focal_length_x; } set { this.matrix_focal_length_x = value; } }

	protected int matrix_principal_point_x; 
	public int MatrixPrincipalPointx { get { return this.matrix_principal_point_x; } set { this.matrix_principal_point_x = value; } }

	protected int matrix_principal_point_y; 
	public int MatrixPrincipalPointy { get { return this.matrix_principal_point_y; } set { this.matrix_principal_point_y = value; } }

	protected int matrix_focal_length_y; 
	public int MatrixFocalLengthy { get { return this.matrix_focal_length_y; } set { this.matrix_focal_length_y = value; } }

	protected int matrix_skew; 
	public int MatrixSkew { get { return this.matrix_skew; } set { this.matrix_skew = value; } }

	public CameraIntrinsicMatrixBox(): base(IsoStream.FromFourCC("cmin"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.matrix_focal_length_x, "matrix_focal_length_x"); 
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.matrix_principal_point_x, "matrix_principal_point_x"); 
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.matrix_principal_point_y, "matrix_principal_point_y"); 

		if (( flags  &  0x1 ) ==  0x1 )
		{
			boxSize += stream.ReadInt32(boxSize, readSize,  out this.matrix_focal_length_y, "matrix_focal_length_y"); 
			boxSize += stream.ReadInt32(boxSize, readSize,  out this.matrix_skew, "matrix_skew"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt32( this.matrix_focal_length_x, "matrix_focal_length_x"); 
		boxSize += stream.WriteInt32( this.matrix_principal_point_x, "matrix_principal_point_x"); 
		boxSize += stream.WriteInt32( this.matrix_principal_point_y, "matrix_principal_point_y"); 

		if (( flags  &  0x1 ) ==  0x1 )
		{
			boxSize += stream.WriteInt32( this.matrix_focal_length_y, "matrix_focal_length_y"); 
			boxSize += stream.WriteInt32( this.matrix_skew, "matrix_skew"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // matrix_focal_length_x
		boxSize += 32; // matrix_principal_point_x
		boxSize += 32; // matrix_principal_point_y

		if (( flags  &  0x1 ) ==  0x1 )
		{
			boxSize += 32; // matrix_focal_length_y
			boxSize += 32; // matrix_skew
		}
		return boxSize;
	}
}


/*
aligned(8) class UuidCameraIntrinsicMatrixBox() extends FullBox('uuid 22cc04c7d6d94e079d904eb6ecbaf3a3') {
	 signed int(32) matrix_focal_length_x;
 signed int(32) matrix_principal_point_x;
 signed int(32) matrix_principal_point_y;
 if( flags & 0x1 ) { 
 signed int(32) matrix_focal_length_y;
 signed int(32) matrix_skew;
 }
 } 
*/
public partial class UuidCameraIntrinsicMatrixBox : FullBox
{
	public const string TYPE = "uuid";
	public override string DisplayName { get { return "UuidCameraIntrinsicMatrixBox"; } }

	protected int matrix_focal_length_x; 
	public int MatrixFocalLengthx { get { return this.matrix_focal_length_x; } set { this.matrix_focal_length_x = value; } }

	protected int matrix_principal_point_x; 
	public int MatrixPrincipalPointx { get { return this.matrix_principal_point_x; } set { this.matrix_principal_point_x = value; } }

	protected int matrix_principal_point_y; 
	public int MatrixPrincipalPointy { get { return this.matrix_principal_point_y; } set { this.matrix_principal_point_y = value; } }

	protected int matrix_focal_length_y; 
	public int MatrixFocalLengthy { get { return this.matrix_focal_length_y; } set { this.matrix_focal_length_y = value; } }

	protected int matrix_skew; 
	public int MatrixSkew { get { return this.matrix_skew; } set { this.matrix_skew = value; } }

	public UuidCameraIntrinsicMatrixBox(): base(IsoStream.FromFourCC("uuid"), Convert.FromHexString("22cc04c7d6d94e079d904eb6ecbaf3a3"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.matrix_focal_length_x, "matrix_focal_length_x"); 
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.matrix_principal_point_x, "matrix_principal_point_x"); 
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.matrix_principal_point_y, "matrix_principal_point_y"); 

		if (( flags  &  0x1 ) ==  0x1 )
		{
			boxSize += stream.ReadInt32(boxSize, readSize,  out this.matrix_focal_length_y, "matrix_focal_length_y"); 
			boxSize += stream.ReadInt32(boxSize, readSize,  out this.matrix_skew, "matrix_skew"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt32( this.matrix_focal_length_x, "matrix_focal_length_x"); 
		boxSize += stream.WriteInt32( this.matrix_principal_point_x, "matrix_principal_point_x"); 
		boxSize += stream.WriteInt32( this.matrix_principal_point_y, "matrix_principal_point_y"); 

		if (( flags  &  0x1 ) ==  0x1 )
		{
			boxSize += stream.WriteInt32( this.matrix_focal_length_y, "matrix_focal_length_y"); 
			boxSize += stream.WriteInt32( this.matrix_skew, "matrix_skew"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // matrix_focal_length_x
		boxSize += 32; // matrix_principal_point_x
		boxSize += 32; // matrix_principal_point_y

		if (( flags  &  0x1 ) ==  0x1 )
		{
			boxSize += 32; // matrix_focal_length_y
			boxSize += 32; // matrix_skew
		}
		return boxSize;
	}
}


/*
aligned(8) class GenericCompressionConfigurationBox() extends FullBox('cmpC') {
	 unsigned int(32) compression_type;
 unsigned int(8) unit_type;
 } 
*/
public partial class GenericCompressionConfigurationBox : FullBox
{
	public const string TYPE = "cmpC";
	public override string DisplayName { get { return "GenericCompressionConfigurationBox"; } }

	protected uint compression_type; 
	public uint CompressionType { get { return this.compression_type; } set { this.compression_type = value; } }

	protected byte unit_type; 
	public byte UnitType { get { return this.unit_type; } set { this.unit_type = value; } }

	public GenericCompressionConfigurationBox(): base(IsoStream.FromFourCC("cmpC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.compression_type, "compression_type"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.unit_type, "unit_type"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.compression_type, "compression_type"); 
		boxSize += stream.WriteUInt8( this.unit_type, "unit_type"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // compression_type
		boxSize += 8; // unit_type
		return boxSize;
	}
}


/*
aligned(8) class J2kHBox() extends Box('j2kH') {
	 Box boxes[];
 } 
*/
public partial class J2kHBox : Box
{
	public const string TYPE = "j2kH";
	public override string DisplayName { get { return "J2kHBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public J2kHBox(): base(IsoStream.FromFourCC("j2kH"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class J2kChannelDefinitionBox() extends Box('cdef') {
	 unsigned int(16) channel_count;
 Channel channels[];
 } 
*/
public partial class J2kChannelDefinitionBox : Box
{
	public const string TYPE = "cdef";
	public override string DisplayName { get { return "J2kChannelDefinitionBox"; } }

	protected ushort channel_count; 
	public ushort ChannelCount { get { return this.channel_count; } set { this.channel_count = value; } }

	protected Channel[] channels; 
	public Channel[] Channels { get { return this.channels; } set { this.channels = value; } }

	public J2kChannelDefinitionBox(): base(IsoStream.FromFourCC("cdef"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.channel_count, "channel_count"); 
		boxSize += stream.ReadClass(boxSize, readSize, this, (uint)(uint.MaxValue), () => new Channel(),  out this.channels, "channels"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.channel_count, "channel_count"); 
		boxSize += stream.WriteClass( this.channels, "channels"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // channel_count
		boxSize += IsoStream.CalculateClassSize(channels); // channels
		return boxSize;
	}
}


/*
aligned(8) class Channel() {
 unsigned int(16) channel_index;
 unsigned int(16) channel_type;
 unsigned int(16) channel_association;
 } 
*/
public partial class Channel : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "Channel"; } }

	protected ushort channel_index; 
	public ushort ChannelIndex { get { return this.channel_index; } set { this.channel_index = value; } }

	protected ushort channel_type; 
	public ushort ChannelType { get { return this.channel_type; } set { this.channel_type = value; } }

	protected ushort channel_association; 
	public ushort ChannelAssociation { get { return this.channel_association; } set { this.channel_association = value; } }

	public Channel(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.channel_index, "channel_index"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.channel_type, "channel_type"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.channel_association, "channel_association"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt16( this.channel_index, "channel_index"); 
		boxSize += stream.WriteUInt16( this.channel_type, "channel_type"); 
		boxSize += stream.WriteUInt16( this.channel_association, "channel_association"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 16; // channel_index
		boxSize += 16; // channel_type
		boxSize += 16; // channel_association
		return boxSize;
	}
}


/*
aligned(8) class ItaiBox() extends FullBox('itai') {
	 unsigned int(64) tai_timestamp;
 unsigned int(8) status_bits;
 } 
*/
public partial class ItaiBox : FullBox
{
	public const string TYPE = "itai";
	public override string DisplayName { get { return "ItaiBox"; } }

	protected ulong tai_timestamp; 
	public ulong TaiTimestamp { get { return this.tai_timestamp; } set { this.tai_timestamp = value; } }

	protected byte status_bits; 
	public byte StatusBits { get { return this.status_bits; } set { this.status_bits = value; } }

	public ItaiBox(): base(IsoStream.FromFourCC("itai"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt64(boxSize, readSize,  out this.tai_timestamp, "tai_timestamp"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.status_bits, "status_bits"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt64( this.tai_timestamp, "tai_timestamp"); 
		boxSize += stream.WriteUInt8( this.status_bits, "status_bits"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 64; // tai_timestamp
		boxSize += 8; // status_bits
		return boxSize;
	}
}


/*
aligned(8) class TaicBox() extends FullBox('taic') {
	 unsigned int(64) time_uncertainty;
 unsigned int(32) clock_resolution;
 signed int(32) clock_drift_rate;
 unsigned int(8) clock_type;
 } 
*/
public partial class TaicBox : FullBox
{
	public const string TYPE = "taic";
	public override string DisplayName { get { return "TaicBox"; } }

	protected ulong time_uncertainty; 
	public ulong TimeUncertainty { get { return this.time_uncertainty; } set { this.time_uncertainty = value; } }

	protected uint clock_resolution; 
	public uint ClockResolution { get { return this.clock_resolution; } set { this.clock_resolution = value; } }

	protected int clock_drift_rate; 
	public int ClockDriftRate { get { return this.clock_drift_rate; } set { this.clock_drift_rate = value; } }

	protected byte clock_type; 
	public byte ClockType { get { return this.clock_type; } set { this.clock_type = value; } }

	public TaicBox(): base(IsoStream.FromFourCC("taic"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt64(boxSize, readSize,  out this.time_uncertainty, "time_uncertainty"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.clock_resolution, "clock_resolution"); 
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.clock_drift_rate, "clock_drift_rate"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.clock_type, "clock_type"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt64( this.time_uncertainty, "time_uncertainty"); 
		boxSize += stream.WriteUInt32( this.clock_resolution, "clock_resolution"); 
		boxSize += stream.WriteInt32( this.clock_drift_rate, "clock_drift_rate"); 
		boxSize += stream.WriteUInt8( this.clock_type, "clock_type"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 64; // time_uncertainty
		boxSize += 32; // clock_resolution
		boxSize += 32; // clock_drift_rate
		boxSize += 8; // clock_type
		return boxSize;
	}
}


/*
aligned(8) class UncompressedFrameConfigurationBox() extends FullBox('uncC') {
	 bit(8) data[];
 } 
*/
public partial class UncompressedFrameConfigurationBox : FullBox
{
	public const string TYPE = "uncC";
	public override string DisplayName { get { return "UncompressedFrameConfigurationBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public UncompressedFrameConfigurationBox(): base(IsoStream.FromFourCC("uncC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class GenericCompressedUnitsItemInfoBox() extends FullBox('icef') {
	 bit(8) data[];
 } 
*/
public partial class GenericCompressedUnitsItemInfoBox : FullBox
{
	public const string TYPE = "icef";
	public override string DisplayName { get { return "GenericCompressedUnitsItemInfoBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public GenericCompressedUnitsItemInfoBox(): base(IsoStream.FromFourCC("icef"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class CameraExtrinsicMatrixBox() extends FullBox('cmex') {
	 bit(8) data[];
 } 
*/
public partial class CameraExtrinsicMatrixBox : FullBox
{
	public const string TYPE = "cmex";
	public override string DisplayName { get { return "CameraExtrinsicMatrixBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public CameraExtrinsicMatrixBox(): base(IsoStream.FromFourCC("cmex"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class UuidCameraExtrinsicMatrixBox() extends FullBox('uuid 4363e9145b7d4aab97aebea69803b434') {
	 bit(8) data[];
 } 
*/
public partial class UuidCameraExtrinsicMatrixBox : FullBox
{
	public const string TYPE = "uuid";
	public override string DisplayName { get { return "UuidCameraExtrinsicMatrixBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public UuidCameraExtrinsicMatrixBox(): base(IsoStream.FromFourCC("uuid"), Convert.FromHexString("4363e9145b7d4aab97aebea69803b434"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class ComponentDefinitionBox() extends Box('cmpd') {
	 bit(8) data[];
 } 
*/
public partial class ComponentDefinitionBox : Box
{
	public const string TYPE = "cmpd";
	public override string DisplayName { get { return "ComponentDefinitionBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ComponentDefinitionBox(): base(IsoStream.FromFourCC("cmpd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class ComponentPatternDefinitionBox() extends FullBox('cpat') {
	 bit(8) data[];
 } 
*/
public partial class ComponentPatternDefinitionBox : FullBox
{
	public const string TYPE = "cpat";
	public override string DisplayName { get { return "ComponentPatternDefinitionBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ComponentPatternDefinitionBox(): base(IsoStream.FromFourCC("cpat"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class J2kComponentMappingBox() extends Box('cmap') {
	 bit(8) data[];
 } 
*/
public partial class J2kComponentMappingBox : Box
{
	public const string TYPE = "cmap";
	public override string DisplayName { get { return "J2kComponentMappingBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public J2kComponentMappingBox(): base(IsoStream.FromFourCC("cmap"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class TiledImageBox() extends FullBox('tilC') {
	 bit(8) data[];
 } 
*/
public partial class TiledImageBox : FullBox
{
	public const string TYPE = "tilC";
	public override string DisplayName { get { return "TiledImageBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public TiledImageBox(): base(IsoStream.FromFourCC("tilC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class J2kPaletteBox() extends Box('pclr') {
	 bit(8) data[];
 } 
*/
public partial class J2kPaletteBox : Box
{
	public const string TYPE = "pclr";
	public override string DisplayName { get { return "J2kPaletteBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public J2kPaletteBox(): base(IsoStream.FromFourCC("pclr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class J2kLayersBox() extends Box('j2kL') {
	 bit(8) data[];
 } 
*/
public partial class J2kLayersBox : Box
{
	public const string TYPE = "j2kL";
	public override string DisplayName { get { return "J2kLayersBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public J2kLayersBox(): base(IsoStream.FromFourCC("j2kL"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class MiniBox() extends Box('mini') {
	 bit(8) data[];
 } 
*/
public partial class MiniBox : Box
{
	public const string TYPE = "mini";
	public override string DisplayName { get { return "MiniBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public MiniBox(): base(IsoStream.FromFourCC("mini"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class IpcmBox() extends Box('ipcm') {
	 Box boxes[];
 } 
*/
public partial class IpcmBox : Box
{
	public const string TYPE = "ipcm";
	public override string DisplayName { get { return "IpcmBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public IpcmBox(): base(IsoStream.FromFourCC("ipcm"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class FpcmBox() extends Box('fpcm') {
	 Box boxes[];
 } 
*/
public partial class FpcmBox : Box
{
	public const string TYPE = "fpcm";
	public override string DisplayName { get { return "FpcmBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public FpcmBox(): base(IsoStream.FromFourCC("fpcm"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class PcmCBox() extends FullBox('pcmC') {
	 unsigned int(8) formatFlags;
	 unsigned int(8) pcmSampleSize;
 } 
*/
public partial class PcmCBox : FullBox
{
	public const string TYPE = "pcmC";
	public override string DisplayName { get { return "PcmCBox"; } }

	protected byte formatFlags; 
	public byte FormatFlags { get { return this.formatFlags; } set { this.formatFlags = value; } }

	protected byte pcmSampleSize; 
	public byte PcmSampleSize { get { return this.pcmSampleSize; } set { this.pcmSampleSize = value; } }

	public PcmCBox(): base(IsoStream.FromFourCC("pcmC"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.formatFlags, "formatFlags"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.pcmSampleSize, "pcmSampleSize"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.formatFlags, "formatFlags"); 
		boxSize += stream.WriteUInt8( this.pcmSampleSize, "pcmSampleSize"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // formatFlags
		boxSize += 8; // pcmSampleSize
		return boxSize;
	}
}


/*
aligned(8) class SmrdBox() extends Box('smrd') {
	 bit(8) data[];
 } 
*/
public partial class SmrdBox : Box
{
	public const string TYPE = "smrd";
	public override string DisplayName { get { return "SmrdBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public SmrdBox(): base(IsoStream.FromFourCC("smrd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class SmtaBox() extends Box('smta') {
	 bit(8) data[];
 } 
*/
public partial class SmtaBox : Box
{
	public const string TYPE = "smta";
	public override string DisplayName { get { return "SmtaBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public SmtaBox(): base(IsoStream.FromFourCC("smta"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class SDLNBox() extends Box('SDLN') {
	 bit(8) data[];
 } 
*/
public partial class SDLNBox : Box
{
	public const string TYPE = "SDLN";
	public override string DisplayName { get { return "SDLNBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public SDLNBox(): base(IsoStream.FromFourCC("SDLN"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class MoatBox() extends Box('moat') {
	 bit(8) data[];
 } 
*/
public partial class MoatBox : Box
{
	public const string TYPE = "moat";
	public override string DisplayName { get { return "MoatBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public MoatBox(): base(IsoStream.FromFourCC("moat"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class SeigBox() extends Box('seig') {
	 bit(8) data[];
 } 
*/
public partial class SeigBox : Box
{
	public const string TYPE = "seig";
	public override string DisplayName { get { return "SeigBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public SeigBox(): base(IsoStream.FromFourCC("seig"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class UserRatingBox() extends Box('urat') {
	 bit(8) data[];
 } 
*/
public partial class UserRatingBox : Box
{
	public const string TYPE = "urat";
	public override string DisplayName { get { return "UserRatingBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public UserRatingBox(): base(IsoStream.FromFourCC("urat"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class OrieBox() extends Box('orie') {
	 bit(8) data[];
 } 
*/
public partial class OrieBox : Box
{
	public const string TYPE = "orie";
	public override string DisplayName { get { return "OrieBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public OrieBox(): base(IsoStream.FromFourCC("orie"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class KodakFreaBox() extends Box ('frea'){
 Box boxes[];
 }

*/
public partial class KodakFreaBox : Box
{
	public const string TYPE = "frea";
	public override string DisplayName { get { return "KodakFreaBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public KodakFreaBox(): base(IsoStream.FromFourCC("frea"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class KodakThumbnailImageBox() extends Box ('thma'){
 bit(8) data[];
 }

*/
public partial class KodakThumbnailImageBox : Box
{
	public const string TYPE = "thma";
	public override string DisplayName { get { return "KodakThumbnailImageBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public KodakThumbnailImageBox(): base(IsoStream.FromFourCC("thma"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class KodakPreviewImageBox() extends Box ('scra'){
 bit(8) data[];
 }

*/
public partial class KodakPreviewImageBox : Box
{
	public const string TYPE = "scra";
	public override string DisplayName { get { return "KodakPreviewImageBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public KodakPreviewImageBox(): base(IsoStream.FromFourCC("scra"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class KodakDurationBox() extends Box ('tima'){
 unsigned int(32) duration;
 }

*/
public partial class KodakDurationBox : Box
{
	public const string TYPE = "tima";
	public override string DisplayName { get { return "KodakDurationBox"; } }

	protected uint duration; 
	public uint Duration { get { return this.duration; } set { this.duration = value; } }

	public KodakDurationBox(): base(IsoStream.FromFourCC("tima"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.duration, "duration"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.duration, "duration"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // duration
		return boxSize;
	}
}


/*
class KodakVersionBox() extends Box ('ver '){
 bit(8) data[];
 }

*/
public partial class KodakVersionBox : Box
{
	public const string TYPE = "ver ";
	public override string DisplayName { get { return "KodakVersionBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public KodakVersionBox(): base(IsoStream.FromFourCC("ver "))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class Stereoscopic3D extends FullBox('st3d', 0, 0) {
    unsigned int(8) stereo_mode;
 }

*/
public partial class Stereoscopic3D : FullBox
{
	public const string TYPE = "st3d";
	public override string DisplayName { get { return "Stereoscopic3D"; } }

	protected byte stereo_mode; 
	public byte StereoMode { get { return this.stereo_mode; } set { this.stereo_mode = value; } }

	public Stereoscopic3D(): base(IsoStream.FromFourCC("st3d"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.stereo_mode, "stereo_mode"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.stereo_mode, "stereo_mode"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // stereo_mode
		return boxSize;
	}
}


/*
aligned(8) class SphericalVideoBox extends Box('sv3d') {
 Box boxes[];
 }

*/
public partial class SphericalVideoBox : Box
{
	public const string TYPE = "sv3d";
	public override string DisplayName { get { return "SphericalVideoBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public SphericalVideoBox(): base(IsoStream.FromFourCC("sv3d"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class SphericalVideoHeader extends FullBox('svhd', 0, 0) {
 string metadata_source;
 }

*/
public partial class SphericalVideoHeader : FullBox
{
	public const string TYPE = "svhd";
	public override string DisplayName { get { return "SphericalVideoHeader"; } }

	protected BinaryUTF8String metadata_source; 
	public BinaryUTF8String MetadataSource { get { return this.metadata_source; } set { this.metadata_source = value; } }

	public SphericalVideoHeader(): base(IsoStream.FromFourCC("svhd"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadStringZeroTerminated(boxSize, readSize,  out this.metadata_source, "metadata_source"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteStringZeroTerminated( this.metadata_source, "metadata_source"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateStringSize(metadata_source); // metadata_source
		return boxSize;
	}
}


/*
aligned(8) class ProjectionBox extends Box('proj') {
 Box boxes[];
}

*/
public partial class ProjectionBox : Box
{
	public const string TYPE = "proj";
	public override string DisplayName { get { return "ProjectionBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public ProjectionBox(): base(IsoStream.FromFourCC("proj"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class ProjectionHeader extends FullBox('prhd', 0, 0) {
    int(32) pose_yaw_degrees;
    int(32) pose_pitch_degrees;
    int(32) pose_roll_degrees;
 }

*/
public partial class ProjectionHeader : FullBox
{
	public const string TYPE = "prhd";
	public override string DisplayName { get { return "ProjectionHeader"; } }

	protected int pose_yaw_degrees; 
	public int PoseYawDegrees { get { return this.pose_yaw_degrees; } set { this.pose_yaw_degrees = value; } }

	protected int pose_pitch_degrees; 
	public int PosePitchDegrees { get { return this.pose_pitch_degrees; } set { this.pose_pitch_degrees = value; } }

	protected int pose_roll_degrees; 
	public int PoseRollDegrees { get { return this.pose_roll_degrees; } set { this.pose_roll_degrees = value; } }

	public ProjectionHeader(): base(IsoStream.FromFourCC("prhd"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.pose_yaw_degrees, "pose_yaw_degrees"); 
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.pose_pitch_degrees, "pose_pitch_degrees"); 
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.pose_roll_degrees, "pose_roll_degrees"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt32( this.pose_yaw_degrees, "pose_yaw_degrees"); 
		boxSize += stream.WriteInt32( this.pose_pitch_degrees, "pose_pitch_degrees"); 
		boxSize += stream.WriteInt32( this.pose_roll_degrees, "pose_roll_degrees"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // pose_yaw_degrees
		boxSize += 32; // pose_pitch_degrees
		boxSize += 32; // pose_roll_degrees
		return boxSize;
	}
}


/*
aligned(8) class ProjectionDataBox(unsigned int(32) proj_type, unsigned int(8) version, unsigned int(24) flags) extends FullBox(proj_type, version, flags) {
 }

*/
public partial class ProjectionDataBox : FullBox
{
	public override string DisplayName { get { return "ProjectionDataBox"; } }

	public ProjectionDataBox(uint proj_type, byte version = 0, uint flags = 0): base(proj_type, version, flags)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
aligned(8) class CubemapProjection ProjectionDataBox('cbmp', 0, 0) {
    unsigned int(32) layout;
    unsigned int(32) projection_padding;
 }

*/
public partial class CubemapProjection : ProjectionDataBox
{
	public const string TYPE = "cbmp";
	public override string DisplayName { get { return "CubemapProjection"; } }

	protected uint layout; 
	public uint Layout { get { return this.layout; } set { this.layout = value; } }

	protected uint projection_padding; 
	public uint ProjectionPadding { get { return this.projection_padding; } set { this.projection_padding = value; } }

	public CubemapProjection(): base(IsoStream.FromFourCC("cbmp"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.layout, "layout"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.projection_padding, "projection_padding"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.layout, "layout"); 
		boxSize += stream.WriteUInt32( this.projection_padding, "projection_padding"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // layout
		boxSize += 32; // projection_padding
		return boxSize;
	}
}


/*
aligned(8) class EquirectangularProjection ProjectionDataBox('equi', 0, 0) {
    unsigned int(32) projection_bounds_top;
    unsigned int(32) projection_bounds_bottom;
    unsigned int(32) projection_bounds_left;
    unsigned int(32) projection_bounds_right;
 }

*/
public partial class EquirectangularProjection : ProjectionDataBox
{
	public const string TYPE = "equi";
	public override string DisplayName { get { return "EquirectangularProjection"; } }

	protected uint projection_bounds_top; 
	public uint ProjectionBoundsTop { get { return this.projection_bounds_top; } set { this.projection_bounds_top = value; } }

	protected uint projection_bounds_bottom; 
	public uint ProjectionBoundsBottom { get { return this.projection_bounds_bottom; } set { this.projection_bounds_bottom = value; } }

	protected uint projection_bounds_left; 
	public uint ProjectionBoundsLeft { get { return this.projection_bounds_left; } set { this.projection_bounds_left = value; } }

	protected uint projection_bounds_right; 
	public uint ProjectionBoundsRight { get { return this.projection_bounds_right; } set { this.projection_bounds_right = value; } }

	public EquirectangularProjection(): base(IsoStream.FromFourCC("equi"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.projection_bounds_top, "projection_bounds_top"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.projection_bounds_bottom, "projection_bounds_bottom"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.projection_bounds_left, "projection_bounds_left"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.projection_bounds_right, "projection_bounds_right"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.projection_bounds_top, "projection_bounds_top"); 
		boxSize += stream.WriteUInt32( this.projection_bounds_bottom, "projection_bounds_bottom"); 
		boxSize += stream.WriteUInt32( this.projection_bounds_left, "projection_bounds_left"); 
		boxSize += stream.WriteUInt32( this.projection_bounds_right, "projection_bounds_right"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // projection_bounds_top
		boxSize += 32; // projection_bounds_bottom
		boxSize += 32; // projection_bounds_left
		boxSize += 32; // projection_bounds_right
		return boxSize;
	}
}


/*
aligned(8) class MeshProjection ProjectionDataBox('mshp', 0, 0) {
    unsigned int(32) crc;
    unsigned int(32) encoding_four_cc;

    // All bytes below this point are compressed according to
    // the algorithm specified by the encoding_four_cc field.
    // MeshBox() meshes[]; // At least 1 mesh box must be present.
    Box boxes[]; // further boxes as needed
}
*/
public partial class MeshProjection : ProjectionDataBox
{
	public const string TYPE = "mshp";
	public override string DisplayName { get { return "MeshProjection"; } }

	protected uint crc; 
	public uint Crc { get { return this.crc; } set { this.crc = value; } }

	protected uint encoding_four_cc;  //  All bytes below this point are compressed according to
	public uint EncodingFourCc { get { return this.encoding_four_cc; } set { this.encoding_four_cc = value; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public MeshProjection(): base(IsoStream.FromFourCC("mshp"), 0, 0)
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.crc, "crc"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.encoding_four_cc, "encoding_four_cc"); // All bytes below this point are compressed according to
		/*  the algorithm specified by the encoding_four_cc field. */
		/*  MeshBox() meshes[]; // At least 1 mesh box must be present. */
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); // further boxes as needed
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.crc, "crc"); 
		boxSize += stream.WriteUInt32( this.encoding_four_cc, "encoding_four_cc"); // All bytes below this point are compressed according to
		/*  the algorithm specified by the encoding_four_cc field. */
		/*  MeshBox() meshes[]; // At least 1 mesh box must be present. */
		// boxSize += stream.WriteBox( this.boxes, "boxes"); // further boxes as needed
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // crc
		boxSize += 32; // encoding_four_cc
		/*  the algorithm specified by the encoding_four_cc field. */
		/*  MeshBox() meshes[]; // At least 1 mesh box must be present. */
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
aligned(8) class Mesh Box('mesh') {
    const unsigned int(1) reserved = 0;
    unsigned int(31) coordinate_count;
     for (i = 0; i < coordinate_count; i++) {
      float(32) coordinate;
    }
    const unsigned int(1) reserved = 0;
    unsigned int(31) vertex_count;
    for (i = 0; i < vertex_count; i++) {
      unsigned int(ceil(log2(coordinate_count * 2))) x_index_delta;
      unsigned int(ceil(log2(coordinate_count * 2))) y_index_delta;
      unsigned int(ceil(log2(coordinate_count * 2))) z_index_delta;
      unsigned int(ceil(log2(coordinate_count * 2))) u_index_delta;
      unsigned int(ceil(log2(coordinate_count * 2))) v_index_delta;
    }
    const unsigned int(1) mesh_padding;

    const unsigned int(1) reserved = 0;
    unsigned int(31) vertex_list_count;
    for (i = 0; i < vertex_list_count; i++) {
      unsigned int(8) texture_id;
      unsigned int(8) index_type;
      const unsigned int(1) reserved = 0;
      unsigned int(31) index_count;
      for (j = 0; j < index_count; j++) {
        unsigned int(ceil(log2(vertex_count * 2))) index_as_delta;
      }
      const unsigned int(1) mesh_padding2;
    }
}
*/
public partial class Mesh : Box
{
	public const string TYPE = "mesh";
	public override string DisplayName { get { return "Mesh"; } }

	protected bool reserved = false; 
	public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected uint coordinate_count; 
	public uint CoordinateCount { get { return this.coordinate_count; } set { this.coordinate_count = value; } }

	protected double[] coordinate; 
	public double[] Coordinate { get { return this.coordinate; } set { this.coordinate = value; } }

	protected bool reserved0 = false; 
	public bool Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected uint vertex_count; 
	public uint VertexCount { get { return this.vertex_count; } set { this.vertex_count = value; } }

	protected byte[][] x_index_delta; 
	public byte[][] xIndexDelta { get { return this.x_index_delta; } set { this.x_index_delta = value; } }

	protected byte[][] y_index_delta; 
	public byte[][] yIndexDelta { get { return this.y_index_delta; } set { this.y_index_delta = value; } }

	protected byte[][] z_index_delta; 
	public byte[][] zIndexDelta { get { return this.z_index_delta; } set { this.z_index_delta = value; } }

	protected byte[][] u_index_delta; 
	public byte[][] uIndexDelta { get { return this.u_index_delta; } set { this.u_index_delta = value; } }

	protected byte[][] v_index_delta; 
	public byte[][] vIndexDelta { get { return this.v_index_delta; } set { this.v_index_delta = value; } }

	protected bool mesh_padding; 
	public bool MeshPadding { get { return this.mesh_padding; } set { this.mesh_padding = value; } }

	protected bool reserved1 = false; 
	public bool Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected uint vertex_list_count; 
	public uint VertexListCount { get { return this.vertex_list_count; } set { this.vertex_list_count = value; } }

	protected byte[] texture_id; 
	public byte[] TextureId { get { return this.texture_id; } set { this.texture_id = value; } }

	protected byte[] index_type; 
	public byte[] IndexType { get { return this.index_type; } set { this.index_type = value; } }

	protected bool[] reserved2; 
	public bool[] Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

	protected uint[] index_count; 
	public uint[] IndexCount { get { return this.index_count; } set { this.index_count = value; } }

	protected byte[][][] index_as_delta; 
	public byte[][][] IndexAsDelta { get { return this.index_as_delta; } set { this.index_as_delta = value; } }

	protected bool[] mesh_padding2; 
	public bool[] MeshPadding2 { get { return this.mesh_padding2; } set { this.mesh_padding2 = value; } }

	public Mesh(): base(IsoStream.FromFourCC("mesh"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBits(boxSize, readSize, 31,  out this.coordinate_count, "coordinate_count"); 

		this.coordinate = new double[IsoStream.GetInt( coordinate_count)];
		for (int i = 0; i < coordinate_count; i++)
		{
			boxSize += stream.ReadDouble32(boxSize, readSize,  out this.coordinate[i], "coordinate"); 
		}
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved0, "reserved0"); 
		boxSize += stream.ReadBits(boxSize, readSize, 31,  out this.vertex_count, "vertex_count"); 

		this.x_index_delta = new byte[IsoStream.GetInt( vertex_count)][];
		this.y_index_delta = new byte[IsoStream.GetInt( vertex_count)][];
		this.z_index_delta = new byte[IsoStream.GetInt( vertex_count)][];
		this.u_index_delta = new byte[IsoStream.GetInt( vertex_count)][];
		this.v_index_delta = new byte[IsoStream.GetInt( vertex_count)][];
		for (int i = 0; i < vertex_count; i++)
		{
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(Math.Ceiling(Math.Log2(coordinate_count * 2)) ),  out this.x_index_delta[i], "x_index_delta"); 
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(Math.Ceiling(Math.Log2(coordinate_count * 2)) ),  out this.y_index_delta[i], "y_index_delta"); 
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(Math.Ceiling(Math.Log2(coordinate_count * 2)) ),  out this.z_index_delta[i], "z_index_delta"); 
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(Math.Ceiling(Math.Log2(coordinate_count * 2)) ),  out this.u_index_delta[i], "u_index_delta"); 
			boxSize += stream.ReadBits(boxSize, readSize, (uint)(Math.Ceiling(Math.Log2(coordinate_count * 2)) ),  out this.v_index_delta[i], "v_index_delta"); 
		}
		boxSize += stream.ReadBit(boxSize, readSize,  out this.mesh_padding, "mesh_padding"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved1, "reserved1"); 
		boxSize += stream.ReadBits(boxSize, readSize, 31,  out this.vertex_list_count, "vertex_list_count"); 

		this.texture_id = new byte[IsoStream.GetInt( vertex_list_count)];
		this.index_type = new byte[IsoStream.GetInt( vertex_list_count)];
		this.reserved2 = new bool[IsoStream.GetInt( vertex_list_count)];
		this.index_count = new uint[IsoStream.GetInt( vertex_list_count)];
		this.index_as_delta = new byte[IsoStream.GetInt( vertex_list_count)][][];
		this.mesh_padding2 = new bool[IsoStream.GetInt( vertex_list_count)];
		for (int i = 0; i < vertex_list_count; i++)
		{
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.texture_id[i], "texture_id"); 
			boxSize += stream.ReadUInt8(boxSize, readSize,  out this.index_type[i], "index_type"); 
			boxSize += stream.ReadBit(boxSize, readSize,  out this.reserved2[i], "reserved2"); 
			boxSize += stream.ReadBits(boxSize, readSize, 31,  out this.index_count[i], "index_count"); 

			this.index_as_delta[i] = new byte[IsoStream.GetInt( index_count[i])][];
			for (int j = 0; j < index_count[i]; j++)
			{
				boxSize += stream.ReadBits(boxSize, readSize, (uint)(Math.Ceiling(Math.Log2(vertex_count * 2)) ),  out this.index_as_delta[i][j], "index_as_delta"); 
			}
			boxSize += stream.ReadBit(boxSize, readSize,  out this.mesh_padding2[i], "mesh_padding2"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBit( this.reserved, "reserved"); 
		boxSize += stream.WriteBits(31,  this.coordinate_count, "coordinate_count"); 

		for (int i = 0; i < coordinate_count; i++)
		{
			boxSize += stream.WriteDouble32( this.coordinate[i], "coordinate"); 
		}
		boxSize += stream.WriteBit( this.reserved0, "reserved0"); 
		boxSize += stream.WriteBits(31,  this.vertex_count, "vertex_count"); 

		for (int i = 0; i < vertex_count; i++)
		{
			boxSize += stream.WriteBits((uint)(Math.Ceiling(Math.Log2(coordinate_count * 2)) ),  this.x_index_delta[i], "x_index_delta"); 
			boxSize += stream.WriteBits((uint)(Math.Ceiling(Math.Log2(coordinate_count * 2)) ),  this.y_index_delta[i], "y_index_delta"); 
			boxSize += stream.WriteBits((uint)(Math.Ceiling(Math.Log2(coordinate_count * 2)) ),  this.z_index_delta[i], "z_index_delta"); 
			boxSize += stream.WriteBits((uint)(Math.Ceiling(Math.Log2(coordinate_count * 2)) ),  this.u_index_delta[i], "u_index_delta"); 
			boxSize += stream.WriteBits((uint)(Math.Ceiling(Math.Log2(coordinate_count * 2)) ),  this.v_index_delta[i], "v_index_delta"); 
		}
		boxSize += stream.WriteBit( this.mesh_padding, "mesh_padding"); 
		boxSize += stream.WriteBit( this.reserved1, "reserved1"); 
		boxSize += stream.WriteBits(31,  this.vertex_list_count, "vertex_list_count"); 

		for (int i = 0; i < vertex_list_count; i++)
		{
			boxSize += stream.WriteUInt8( this.texture_id[i], "texture_id"); 
			boxSize += stream.WriteUInt8( this.index_type[i], "index_type"); 
			boxSize += stream.WriteBit( this.reserved2[i], "reserved2"); 
			boxSize += stream.WriteBits(31,  this.index_count[i], "index_count"); 

			for (int j = 0; j < index_count[i]; j++)
			{
				boxSize += stream.WriteBits((uint)(Math.Ceiling(Math.Log2(vertex_count * 2)) ),  this.index_as_delta[i][j], "index_as_delta"); 
			}
			boxSize += stream.WriteBit( this.mesh_padding2[i], "mesh_padding2"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 1; // reserved
		boxSize += 31; // coordinate_count

		for (int i = 0; i < coordinate_count; i++)
		{
			boxSize += 32; // coordinate
		}
		boxSize += 1; // reserved0
		boxSize += 31; // vertex_count

		for (int i = 0; i < vertex_count; i++)
		{
			boxSize += (ulong)(Math.Ceiling(Math.Log2(coordinate_count * 2)) ); // x_index_delta
			boxSize += (ulong)(Math.Ceiling(Math.Log2(coordinate_count * 2)) ); // y_index_delta
			boxSize += (ulong)(Math.Ceiling(Math.Log2(coordinate_count * 2)) ); // z_index_delta
			boxSize += (ulong)(Math.Ceiling(Math.Log2(coordinate_count * 2)) ); // u_index_delta
			boxSize += (ulong)(Math.Ceiling(Math.Log2(coordinate_count * 2)) ); // v_index_delta
		}
		boxSize += 1; // mesh_padding
		boxSize += 1; // reserved1
		boxSize += 31; // vertex_list_count

		for (int i = 0; i < vertex_list_count; i++)
		{
			boxSize += 8; // texture_id
			boxSize += 8; // index_type
			boxSize += 1; // reserved2
			boxSize += 31; // index_count

			for (int j = 0; j < index_count[i]; j++)
			{
				boxSize += (ulong)(Math.Ceiling(Math.Log2(vertex_count * 2)) ); // index_as_delta
			}
			boxSize += 1; // mesh_padding2
		}
		return boxSize;
	}
}


/*
aligned(8) class SpatialAudioBox extends Box('SA3D') {
    unsigned int(8)  version;
    unsigned int(8)  ambisonic_type;
    unsigned int(32) ambisonic_order;
    unsigned int(8)  ambisonic_channel_ordering;
    unsigned int(8)  ambisonic_normalization;
    unsigned int(32) num_channels;
    for (i = 0; i < num_channels; i++) {
        unsigned int(32) channel_map;
    }
}
*/
public partial class SpatialAudioBox : Box
{
	public const string TYPE = "SA3D";
	public override string DisplayName { get { return "SpatialAudioBox"; } }

	protected byte version; 
	public byte Version { get { return this.version; } set { this.version = value; } }

	protected byte ambisonic_type; 
	public byte AmbisonicType { get { return this.ambisonic_type; } set { this.ambisonic_type = value; } }

	protected uint ambisonic_order; 
	public uint AmbisonicOrder { get { return this.ambisonic_order; } set { this.ambisonic_order = value; } }

	protected byte ambisonic_channel_ordering; 
	public byte AmbisonicChannelOrdering { get { return this.ambisonic_channel_ordering; } set { this.ambisonic_channel_ordering = value; } }

	protected byte ambisonic_normalization; 
	public byte AmbisonicNormalization { get { return this.ambisonic_normalization; } set { this.ambisonic_normalization = value; } }

	protected uint num_channels; 
	public uint NumChannels { get { return this.num_channels; } set { this.num_channels = value; } }

	protected uint[] channel_map; 
	public uint[] ChannelMap { get { return this.channel_map; } set { this.channel_map = value; } }

	public SpatialAudioBox(): base(IsoStream.FromFourCC("SA3D"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.version, "version"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.ambisonic_type, "ambisonic_type"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.ambisonic_order, "ambisonic_order"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.ambisonic_channel_ordering, "ambisonic_channel_ordering"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.ambisonic_normalization, "ambisonic_normalization"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.num_channels, "num_channels"); 

		this.channel_map = new uint[IsoStream.GetInt( num_channels)];
		for (int i = 0; i < num_channels; i++)
		{
			boxSize += stream.ReadUInt32(boxSize, readSize,  out this.channel_map[i], "channel_map"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.version, "version"); 
		boxSize += stream.WriteUInt8( this.ambisonic_type, "ambisonic_type"); 
		boxSize += stream.WriteUInt32( this.ambisonic_order, "ambisonic_order"); 
		boxSize += stream.WriteUInt8( this.ambisonic_channel_ordering, "ambisonic_channel_ordering"); 
		boxSize += stream.WriteUInt8( this.ambisonic_normalization, "ambisonic_normalization"); 
		boxSize += stream.WriteUInt32( this.num_channels, "num_channels"); 

		for (int i = 0; i < num_channels; i++)
		{
			boxSize += stream.WriteUInt32( this.channel_map[i], "channel_map"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // version
		boxSize += 8; // ambisonic_type
		boxSize += 32; // ambisonic_order
		boxSize += 8; // ambisonic_channel_ordering
		boxSize += 8; // ambisonic_normalization
		boxSize += 32; // num_channels

		for (int i = 0; i < num_channels; i++)
		{
			boxSize += 32; // channel_map
		}
		return boxSize;
	}
}


/*
class AV1SampleEntry
extends VisualSampleEntry('av01')
{
  AV1CodecConfigurationBox config;
}

*/
public partial class AV1SampleEntry : VisualSampleEntry
{
	public const string TYPE = "av01";
	public override string DisplayName { get { return "AV1SampleEntry"; } }
	public AV1CodecConfigurationBox Config { get { return this.children.OfType<AV1CodecConfigurationBox>().FirstOrDefault(); } }

	public AV1SampleEntry(): base(IsoStream.FromFourCC("av01"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.config, "config"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.config, "config"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(config); // config
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class AV1CodecConfigurationBox
extends Box('av1C')
{
  AV1CodecConfigurationRecord av1Config;
}

*/
public partial class AV1CodecConfigurationBox : Box
{
	public const string TYPE = "av1C";
	public override string DisplayName { get { return "AV1CodecConfigurationBox"; } }

	protected AV1CodecConfigurationRecord av1Config; 
	public AV1CodecConfigurationRecord Av1Config { get { return this.av1Config; } set { this.av1Config = value; } }

	public AV1CodecConfigurationBox(): base(IsoStream.FromFourCC("av1C"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new AV1CodecConfigurationRecord(),  out this.av1Config, "av1Config"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteClass( this.av1Config, "av1Config"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += IsoStream.CalculateClassSize(av1Config); // av1Config
		return boxSize;
	}
}


/*
aligned(8) class AV1CodecConfigurationRecord
{
  unsigned int(1) marker = 1;
  unsigned int(7) version = 1;
  unsigned int(3) seq_profile;
  unsigned int(5) seq_level_idx_0;
  unsigned int(1) seq_tier_0;
  unsigned int(1) high_bitdepth;
  unsigned int(1) twelve_bit;
  unsigned int(1) monochrome;
  unsigned int(1) chroma_subsampling_x;
  unsigned int(1) chroma_subsampling_y;
  unsigned int(2) chroma_sample_position;
  unsigned int(3) reserved = 0;

  unsigned int(1) initial_presentation_delay_present;
  if(initial_presentation_delay_present) {
    unsigned int(4) initial_presentation_delay_minus_one;
  } else {
    unsigned int(4) reserved = 0;
  }

  unsigned int(8) configOBUs[];
}

*/
public partial class AV1CodecConfigurationRecord : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "AV1CodecConfigurationRecord"; } }

	protected bool marker = true; 
	public bool Marker { get { return this.marker; } set { this.marker = value; } }

	protected byte version = 1; 
	public byte Version { get { return this.version; } set { this.version = value; } }

	protected byte seq_profile; 
	public byte SeqProfile { get { return this.seq_profile; } set { this.seq_profile = value; } }

	protected byte seq_level_idx_0; 
	public byte SeqLevelIdx0 { get { return this.seq_level_idx_0; } set { this.seq_level_idx_0 = value; } }

	protected bool seq_tier_0; 
	public bool SeqTier0 { get { return this.seq_tier_0; } set { this.seq_tier_0 = value; } }

	protected bool high_bitdepth; 
	public bool HighBitdepth { get { return this.high_bitdepth; } set { this.high_bitdepth = value; } }

	protected bool twelve_bit; 
	public bool TwelveBit { get { return this.twelve_bit; } set { this.twelve_bit = value; } }

	protected bool monochrome; 
	public bool Monochrome { get { return this.monochrome; } set { this.monochrome = value; } }

	protected bool chroma_subsampling_x; 
	public bool ChromaSubsamplingx { get { return this.chroma_subsampling_x; } set { this.chroma_subsampling_x = value; } }

	protected bool chroma_subsampling_y; 
	public bool ChromaSubsamplingy { get { return this.chroma_subsampling_y; } set { this.chroma_subsampling_y = value; } }

	protected byte chroma_sample_position; 
	public byte ChromaSamplePosition { get { return this.chroma_sample_position; } set { this.chroma_sample_position = value; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected bool initial_presentation_delay_present; 
	public bool InitialPresentationDelayPresent { get { return this.initial_presentation_delay_present; } set { this.initial_presentation_delay_present = value; } }

	protected byte initial_presentation_delay_minus_one; 
	public byte InitialPresentationDelayMinusOne { get { return this.initial_presentation_delay_minus_one; } set { this.initial_presentation_delay_minus_one = value; } }

	protected byte reserved0 = 0; 
	public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

	protected byte[] configOBUs; 
	public byte[] ConfigOBUs { get { return this.configOBUs; } set { this.configOBUs = value; } }

	public AV1CodecConfigurationRecord(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadBit(boxSize, readSize,  out this.marker, "marker"); 
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.version, "version"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.seq_profile, "seq_profile"); 
		boxSize += stream.ReadBits(boxSize, readSize, 5,  out this.seq_level_idx_0, "seq_level_idx_0"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.seq_tier_0, "seq_tier_0"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.high_bitdepth, "high_bitdepth"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.twelve_bit, "twelve_bit"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.monochrome, "monochrome"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.chroma_subsampling_x, "chroma_subsampling_x"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.chroma_subsampling_y, "chroma_subsampling_y"); 
		boxSize += stream.ReadBits(boxSize, readSize, 2,  out this.chroma_sample_position, "chroma_sample_position"); 
		boxSize += stream.ReadBits(boxSize, readSize, 3,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.initial_presentation_delay_present, "initial_presentation_delay_present"); 

		if (initial_presentation_delay_present)
		{
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.initial_presentation_delay_minus_one, "initial_presentation_delay_minus_one"); 
		}

		else 
		{
			boxSize += stream.ReadBits(boxSize, readSize, 4,  out this.reserved0, "reserved0"); 
		}
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.configOBUs, "configOBUs"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteBit( this.marker, "marker"); 
		boxSize += stream.WriteBits(7,  this.version, "version"); 
		boxSize += stream.WriteBits(3,  this.seq_profile, "seq_profile"); 
		boxSize += stream.WriteBits(5,  this.seq_level_idx_0, "seq_level_idx_0"); 
		boxSize += stream.WriteBit( this.seq_tier_0, "seq_tier_0"); 
		boxSize += stream.WriteBit( this.high_bitdepth, "high_bitdepth"); 
		boxSize += stream.WriteBit( this.twelve_bit, "twelve_bit"); 
		boxSize += stream.WriteBit( this.monochrome, "monochrome"); 
		boxSize += stream.WriteBit( this.chroma_subsampling_x, "chroma_subsampling_x"); 
		boxSize += stream.WriteBit( this.chroma_subsampling_y, "chroma_subsampling_y"); 
		boxSize += stream.WriteBits(2,  this.chroma_sample_position, "chroma_sample_position"); 
		boxSize += stream.WriteBits(3,  this.reserved, "reserved"); 
		boxSize += stream.WriteBit( this.initial_presentation_delay_present, "initial_presentation_delay_present"); 

		if (initial_presentation_delay_present)
		{
			boxSize += stream.WriteBits(4,  this.initial_presentation_delay_minus_one, "initial_presentation_delay_minus_one"); 
		}

		else 
		{
			boxSize += stream.WriteBits(4,  this.reserved0, "reserved0"); 
		}
		boxSize += stream.WriteUInt8ArrayTillEnd( this.configOBUs, "configOBUs"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 1; // marker
		boxSize += 7; // version
		boxSize += 3; // seq_profile
		boxSize += 5; // seq_level_idx_0
		boxSize += 1; // seq_tier_0
		boxSize += 1; // high_bitdepth
		boxSize += 1; // twelve_bit
		boxSize += 1; // monochrome
		boxSize += 1; // chroma_subsampling_x
		boxSize += 1; // chroma_subsampling_y
		boxSize += 2; // chroma_sample_position
		boxSize += 3; // reserved
		boxSize += 1; // initial_presentation_delay_present

		if (initial_presentation_delay_present)
		{
			boxSize += 4; // initial_presentation_delay_minus_one
		}

		else 
		{
			boxSize += 4; // reserved0
		}
		boxSize += ((ulong)configOBUs.Length * 8); // configOBUs
		return boxSize;
	}
}


/*
class AV1ForwardKeyFrameSampleGroupEntry
extends VisualSampleGroupEntry('av1f')
{
  unsigned int(8) fwd_distance;
}

*/
public partial class AV1ForwardKeyFrameSampleGroupEntry : VisualSampleGroupEntry
{
	public const string TYPE = "av1f";
	public override string DisplayName { get { return "AV1ForwardKeyFrameSampleGroupEntry"; } }

	protected byte fwd_distance; 
	public byte FwdDistance { get { return this.fwd_distance; } set { this.fwd_distance = value; } }

	public AV1ForwardKeyFrameSampleGroupEntry(): base(IsoStream.FromFourCC("av1f"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.fwd_distance, "fwd_distance"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.fwd_distance, "fwd_distance"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // fwd_distance
		return boxSize;
	}
}


/*
class AV1SwitchFrameSampleGroupEntry
extends VisualSampleGroupEntry('av1s')
{
}

*/
public partial class AV1SwitchFrameSampleGroupEntry : VisualSampleGroupEntry
{
	public const string TYPE = "av1s";
	public override string DisplayName { get { return "AV1SwitchFrameSampleGroupEntry"; } }

	public AV1SwitchFrameSampleGroupEntry(): base(IsoStream.FromFourCC("av1s"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
class AV1MetadataSampleGroupEntry
extends VisualSampleGroupEntry('av1M')
{
}

*/
public partial class AV1MetadataSampleGroupEntry : VisualSampleGroupEntry
{
	public const string TYPE = "av1M";
	public override string DisplayName { get { return "AV1MetadataSampleGroupEntry"; } }

	public AV1MetadataSampleGroupEntry(): base(IsoStream.FromFourCC("av1M"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		return boxSize;
	}
}


/*
class OperatingPointSelectorProperty extends ItemProperty('a1op') {
    unsigned int(8) op_index;
}

*/
public partial class OperatingPointSelectorProperty : ItemProperty
{
	public const string TYPE = "a1op";
	public override string DisplayName { get { return "OperatingPointSelectorProperty"; } }

	protected byte op_index; 
	public byte OpIndex { get { return this.op_index; } set { this.op_index = value; } }

	public OperatingPointSelectorProperty(): base(IsoStream.FromFourCC("a1op"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.op_index, "op_index"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.op_index, "op_index"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // op_index
		return boxSize;
	}
}


/*
class AV1LayeredImageIndexingProperty extends ItemProperty('a1lx') {
    unsigned int(7) reserved = 0;
    unsigned int(1) large_size;
    if(large_size) {
       unsigned int(32) layer_size[3];
    }
    else {
       unsigned int(16) layer_size[3];
    }
}
*/
public partial class AV1LayeredImageIndexingProperty : ItemProperty
{
	public const string TYPE = "a1lx";
	public override string DisplayName { get { return "AV1LayeredImageIndexingProperty"; } }

	protected byte reserved = 0; 
	public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

	protected bool large_size; 
	public bool LargeSize { get { return this.large_size; } set { this.large_size = value; } }

	protected uint[] layer_size; 
	public uint[] LayerSize { get { return this.layer_size; } set { this.layer_size = value; } }

	public AV1LayeredImageIndexingProperty(): base(IsoStream.FromFourCC("a1lx"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadBits(boxSize, readSize, 7,  out this.reserved, "reserved"); 
		boxSize += stream.ReadBit(boxSize, readSize,  out this.large_size, "large_size"); 

		if (large_size)
		{
			boxSize += stream.ReadUInt32Array(boxSize, readSize, 3,  out this.layer_size, "layer_size"); 
		}

		else 
		{
			boxSize += stream.ReadUInt16Array(boxSize, readSize, 3,  out this.layer_size, "layer_size"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteBits(7,  this.reserved, "reserved"); 
		boxSize += stream.WriteBit( this.large_size, "large_size"); 

		if (large_size)
		{
			boxSize += stream.WriteUInt32Array(3,  this.layer_size, "layer_size"); 
		}

		else 
		{
			boxSize += stream.WriteUInt16Array(3,  this.layer_size, "layer_size"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 7; // reserved
		boxSize += 1; // large_size

		if (large_size)
		{
			boxSize += 3 * 32; // layer_size
		}

		else 
		{
			boxSize += 3 * 16; // layer_size
		}
		return boxSize;
	}
}


/*
class AppleCompressedMoovDataBox() extends Box ('cmvd'){
 unsigned int(32) uncompressedSize;
bit(8) compressedData[];
 }
*/
public partial class AppleCompressedMoovDataBox : Box
{
	public const string TYPE = "cmvd";
	public override string DisplayName { get { return "AppleCompressedMoovDataBox"; } }

	protected uint uncompressedSize; 
	public uint UncompressedSize { get { return this.uncompressedSize; } set { this.uncompressedSize = value; } }

	protected byte[] compressedData; 
	public byte[] CompressedData { get { return this.compressedData; } set { this.compressedData = value; } }

	public AppleCompressedMoovDataBox(): base(IsoStream.FromFourCC("cmvd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.uncompressedSize, "uncompressedSize"); 
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.compressedData, "compressedData"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.uncompressedSize, "uncompressedSize"); 
		boxSize += stream.WriteUInt8ArrayTillEnd( this.compressedData, "compressedData"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // uncompressedSize
		boxSize += ((ulong)compressedData.Length * 8); // compressedData
		return boxSize;
	}
}


/*
class AppleDecompressorBox() extends Box ('dcom'){
 unsigned int(32) decompressor;
 }
*/
public partial class AppleDecompressorBox : Box
{
	public const string TYPE = "dcom";
	public override string DisplayName { get { return "AppleDecompressorBox"; } }

	protected uint decompressor; 
	public uint Decompressor { get { return this.decompressor; } set { this.decompressor = value; } }

	public AppleDecompressorBox(): base(IsoStream.FromFourCC("dcom"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.decompressor, "decompressor"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.decompressor, "decompressor"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // decompressor
		return boxSize;
	}
}


/*
class AppleCompressedMoovBox() extends Box ('cmov'){
 Box boxes[];
 }
*/
public partial class AppleCompressedMoovBox : Box
{
	public const string TYPE = "cmov";
	public override string DisplayName { get { return "AppleCompressedMoovBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleCompressedMoovBox(): base(IsoStream.FromFourCC("cmov"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class AppleJunkBox() extends Box ('junk'){
 bit(8) data[];
 }
*/
public partial class AppleJunkBox : Box
{
	public const string TYPE = "junk";
	public override string DisplayName { get { return "AppleJunkBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleJunkBox(): base(IsoStream.FromFourCC("junk"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ApplePreviewPictureBox() extends Box ('pict'){
 bit(8) data[];
 }
*/
public partial class ApplePreviewPictureBox : Box
{
	public const string TYPE = "pict";
	public override string DisplayName { get { return "ApplePreviewPictureBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ApplePreviewPictureBox(): base(IsoStream.FromFourCC("pict"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class AppleImagePreviewBox() extends Box ('pnot'){
 unsigned int(32) modificationDate;
 signed int(16) version;
 signed int(32) atomType;
 signed int(16) atomIndex;
 }
*/
public partial class AppleImagePreviewBox : Box
{
	public const string TYPE = "pnot";
	public override string DisplayName { get { return "AppleImagePreviewBox"; } }

	protected uint modificationDate; 
	public uint ModificationDate { get { return this.modificationDate; } set { this.modificationDate = value; } }

	protected short version; 
	public short Version { get { return this.version; } set { this.version = value; } }

	protected int atomType; 
	public int AtomType { get { return this.atomType; } set { this.atomType = value; } }

	protected short atomIndex; 
	public short AtomIndex { get { return this.atomIndex; } set { this.atomIndex = value; } }

	public AppleImagePreviewBox(): base(IsoStream.FromFourCC("pnot"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.modificationDate, "modificationDate"); 
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.version, "version"); 
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.atomType, "atomType"); 
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.atomIndex, "atomIndex"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.modificationDate, "modificationDate"); 
		boxSize += stream.WriteInt16( this.version, "version"); 
		boxSize += stream.WriteInt32( this.atomType, "atomType"); 
		boxSize += stream.WriteInt16( this.atomIndex, "atomIndex"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // modificationDate
		boxSize += 16; // version
		boxSize += 32; // atomType
		boxSize += 16; // atomIndex
		return boxSize;
	}
}


/*
class AppleComponentDetectBox() extends Box ('rmcd'){
 unsigned int(32) flags;
 ComponentDescription description;
 unsigned int(32) minimumVersion;
 } 
*/
public partial class AppleComponentDetectBox : Box
{
	public const string TYPE = "rmcd";
	public override string DisplayName { get { return "AppleComponentDetectBox"; } }

	protected uint flags; 
	public uint Flags { get { return this.flags; } set { this.flags = value; } }

	protected ComponentDescription description; 
	public ComponentDescription Description { get { return this.description; } set { this.description = value; } }

	protected uint minimumVersion; 
	public uint MinimumVersion { get { return this.minimumVersion; } set { this.minimumVersion = value; } }

	public AppleComponentDetectBox(): base(IsoStream.FromFourCC("rmcd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.flags, "flags"); 
		boxSize += stream.ReadClass(boxSize, readSize, this, () => new ComponentDescription(),  out this.description, "description"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.minimumVersion, "minimumVersion"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.flags, "flags"); 
		boxSize += stream.WriteClass( this.description, "description"); 
		boxSize += stream.WriteUInt32( this.minimumVersion, "minimumVersion"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // flags
		boxSize += IsoStream.CalculateClassSize(description); // description
		boxSize += 32; // minimumVersion
		return boxSize;
	}
}


/*
class ComponentDescription() { 
 unsigned int(32) componentType;
 unsigned int(32) componentSubType;
 unsigned int(32) componentManufacturer;
 unsigned int(32) componentFlags;
 unsigned int(32) componentFlagsMask;
 }
*/
public partial class ComponentDescription : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "ComponentDescription"; } }

	protected uint componentType; 
	public uint ComponentType { get { return this.componentType; } set { this.componentType = value; } }

	protected uint componentSubType; 
	public uint ComponentSubType { get { return this.componentSubType; } set { this.componentSubType = value; } }

	protected uint componentManufacturer; 
	public uint ComponentManufacturer { get { return this.componentManufacturer; } set { this.componentManufacturer = value; } }

	protected uint componentFlags; 
	public uint ComponentFlags { get { return this.componentFlags; } set { this.componentFlags = value; } }

	protected uint componentFlagsMask; 
	public uint ComponentFlagsMask { get { return this.componentFlagsMask; } set { this.componentFlagsMask = value; } }

	public ComponentDescription(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.componentType, "componentType"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.componentSubType, "componentSubType"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.componentManufacturer, "componentManufacturer"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.componentFlags, "componentFlags"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.componentFlagsMask, "componentFlagsMask"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt32( this.componentType, "componentType"); 
		boxSize += stream.WriteUInt32( this.componentSubType, "componentSubType"); 
		boxSize += stream.WriteUInt32( this.componentManufacturer, "componentManufacturer"); 
		boxSize += stream.WriteUInt32( this.componentFlags, "componentFlags"); 
		boxSize += stream.WriteUInt32( this.componentFlagsMask, "componentFlagsMask"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 32; // componentType
		boxSize += 32; // componentSubType
		boxSize += 32; // componentManufacturer
		boxSize += 32; // componentFlags
		boxSize += 32; // componentFlagsMask
		return boxSize;
	}
}


/*
class AppleCpuSpeedBox() extends Box ('rmcs'){
 unsigned int(32) flags;
 unsigned int(32) cpuSpeed;
 }
*/
public partial class AppleCpuSpeedBox : Box
{
	public const string TYPE = "rmcs";
	public override string DisplayName { get { return "AppleCpuSpeedBox"; } }

	protected uint flags; 
	public uint Flags { get { return this.flags; } set { this.flags = value; } }

	protected uint cpuSpeed; 
	public uint CpuSpeed { get { return this.cpuSpeed; } set { this.cpuSpeed = value; } }

	public AppleCpuSpeedBox(): base(IsoStream.FromFourCC("rmcs"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.flags, "flags"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.cpuSpeed, "cpuSpeed"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.flags, "flags"); 
		boxSize += stream.WriteUInt32( this.cpuSpeed, "cpuSpeed"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // flags
		boxSize += 32; // cpuSpeed
		return boxSize;
	}
}


/*
class AppleQualityBox() extends Box ('rmqu'){
 unsigned int(32) flags;
 unsigned int(32) quality;
 }
*/
public partial class AppleQualityBox : Box
{
	public const string TYPE = "rmqu";
	public override string DisplayName { get { return "AppleQualityBox"; } }

	protected uint flags; 
	public uint Flags { get { return this.flags; } set { this.flags = value; } }

	protected uint quality; 
	public uint Quality { get { return this.quality; } set { this.quality = value; } }

	public AppleQualityBox(): base(IsoStream.FromFourCC("rmqu"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.flags, "flags"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.quality, "quality"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.flags, "flags"); 
		boxSize += stream.WriteUInt32( this.quality, "quality"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // flags
		boxSize += 32; // quality
		return boxSize;
	}
}


/*
class AppleVersionCheckBox() extends Box ('rmvc'){
 unsigned int(32) flags;
 unsigned int(32) softwarePackage;
 unsigned int(32) version;
 unsigned int(32) mask;
 signed int(16) checkType;
 }
*/
public partial class AppleVersionCheckBox : Box
{
	public const string TYPE = "rmvc";
	public override string DisplayName { get { return "AppleVersionCheckBox"; } }

	protected uint flags; 
	public uint Flags { get { return this.flags; } set { this.flags = value; } }

	protected uint softwarePackage; 
	public uint SoftwarePackage { get { return this.softwarePackage; } set { this.softwarePackage = value; } }

	protected uint version; 
	public uint Version { get { return this.version; } set { this.version = value; } }

	protected uint mask; 
	public uint Mask { get { return this.mask; } set { this.mask = value; } }

	protected short checkType; 
	public short CheckType { get { return this.checkType; } set { this.checkType = value; } }

	public AppleVersionCheckBox(): base(IsoStream.FromFourCC("rmvc"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.flags, "flags"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.softwarePackage, "softwarePackage"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.version, "version"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.mask, "mask"); 
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.checkType, "checkType"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.flags, "flags"); 
		boxSize += stream.WriteUInt32( this.softwarePackage, "softwarePackage"); 
		boxSize += stream.WriteUInt32( this.version, "version"); 
		boxSize += stream.WriteUInt32( this.mask, "mask"); 
		boxSize += stream.WriteInt16( this.checkType, "checkType"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // flags
		boxSize += 32; // softwarePackage
		boxSize += 32; // version
		boxSize += 32; // mask
		boxSize += 16; // checkType
		return boxSize;
	}
}


/*
class MicrosoftWaveFormatExBox() extends Box ('wfex'){
 bit(8) data[];
 }
*/
public partial class MicrosoftWaveFormatExBox : Box
{
	public const string TYPE = "wfex";
	public override string DisplayName { get { return "MicrosoftWaveFormatExBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public MicrosoftWaveFormatExBox(): base(IsoStream.FromFourCC("wfex"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class AppleClippingBox() extends Box ('clip'){
 Box boxes[];
 }
*/
public partial class AppleClippingBox : Box
{
	public const string TYPE = "clip";
	public override string DisplayName { get { return "AppleClippingBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleClippingBox(): base(IsoStream.FromFourCC("clip"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class AppleClippingRegionBox() extends Box ('crgn'){
 unsigned int(16) regionSize;
 unsigned int(64) regionBoundaryBox;
 unsigned int(8) clippingRegionData[];
 }
*/
public partial class AppleClippingRegionBox : Box
{
	public const string TYPE = "crgn";
	public override string DisplayName { get { return "AppleClippingRegionBox"; } }

	protected ushort regionSize; 
	public ushort RegionSize { get { return this.regionSize; } set { this.regionSize = value; } }

	protected ulong regionBoundaryBox; 
	public ulong RegionBoundaryBox { get { return this.regionBoundaryBox; } set { this.regionBoundaryBox = value; } }

	protected byte[] clippingRegionData; 
	public byte[] ClippingRegionData { get { return this.clippingRegionData; } set { this.clippingRegionData = value; } }

	public AppleClippingRegionBox(): base(IsoStream.FromFourCC("crgn"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.regionSize, "regionSize"); 
		boxSize += stream.ReadUInt64(boxSize, readSize,  out this.regionBoundaryBox, "regionBoundaryBox"); 
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.clippingRegionData, "clippingRegionData"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.regionSize, "regionSize"); 
		boxSize += stream.WriteUInt64( this.regionBoundaryBox, "regionBoundaryBox"); 
		boxSize += stream.WriteUInt8ArrayTillEnd( this.clippingRegionData, "clippingRegionData"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // regionSize
		boxSize += 64; // regionBoundaryBox
		boxSize += ((ulong)clippingRegionData.Length * 8); // clippingRegionData
		return boxSize;
	}
}


/*
class AppleTrackMatteBox() extends Box ('matt'){
 Box boxes[];
 }
*/
public partial class AppleTrackMatteBox : Box
{
	public const string TYPE = "matt";
	public override string DisplayName { get { return "AppleTrackMatteBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleTrackMatteBox(): base(IsoStream.FromFourCC("matt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class AppleCompressedMatteBox() extends FullBox ('kmat'){
 bit(8) data[];
 }
*/
public partial class AppleCompressedMatteBox : FullBox
{
	public const string TYPE = "kmat";
	public override string DisplayName { get { return "AppleCompressedMatteBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleCompressedMatteBox(): base(IsoStream.FromFourCC("kmat"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class AppleCountryListBox() extends Box ('ctry') {
 unsigned int(16) entry_count;
 CountryListEntry entries[];
 }
 
*/
public partial class AppleCountryListBox : Box
{
	public const string TYPE = "ctry";
	public override string DisplayName { get { return "AppleCountryListBox"; } }

	protected ushort entry_count; 
	public ushort EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

	protected CountryListEntry[] entries; 
	public CountryListEntry[] Entries { get { return this.entries; } set { this.entries = value; } }

	public AppleCountryListBox(): base(IsoStream.FromFourCC("ctry"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.entry_count, "entry_count"); 
		boxSize += stream.ReadClass(boxSize, readSize, this, (uint)(uint.MaxValue), () => new CountryListEntry(),  out this.entries, "entries"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt16( this.entry_count, "entry_count"); 
		boxSize += stream.WriteClass( this.entries, "entries"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 16; // entry_count
		boxSize += IsoStream.CalculateClassSize(entries); // entries
		return boxSize;
	}
}


/*
class CountryListEntry() { 
 unsigned int(16) country_count;
 unsigned int(16) country[ country_count ];
 }

*/
public partial class CountryListEntry : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "CountryListEntry"; } }

	protected ushort country_count; 
	public ushort CountryCount { get { return this.country_count; } set { this.country_count = value; } }

	protected ushort[] country; 
	public ushort[] Country { get { return this.country; } set { this.country = value; } }

	public CountryListEntry(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.country_count, "country_count"); 
		boxSize += stream.ReadUInt16Array(boxSize, readSize, (uint)( country_count ),  out this.country, "country"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt16( this.country_count, "country_count"); 
		boxSize += stream.WriteUInt16Array((uint)( country_count ),  this.country, "country"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 16; // country_count
		boxSize += ((ulong)( country_count ) * 16); // country
		return boxSize;
	}
}


/*
class AppleDataReferenceResourceBox() extends Box ('rsrc'){
 bit(8) data[];
 }
*/
public partial class AppleDataReferenceResourceBox : Box
{
	public const string TYPE = "rsrc";
	public override string DisplayName { get { return "AppleDataReferenceResourceBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleDataReferenceResourceBox(): base(IsoStream.FromFourCC("rsrc"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class AppleQTVRTrackBox() extends Box ('qtvr'){
 unsigned int(32) reserved1;
 unsigned int(16) reserved2;
 unsigned int(16) dataRefIndex;
 unsigned int(32) data;
 }
*/
public partial class AppleQTVRTrackBox : Box
{
	public const string TYPE = "qtvr";
	public override string DisplayName { get { return "AppleQTVRTrackBox"; } }

	protected uint reserved1; 
	public uint Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

	protected ushort reserved2; 
	public ushort Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

	protected ushort dataRefIndex; 
	public ushort DataRefIndex { get { return this.dataRefIndex; } set { this.dataRefIndex = value; } }

	protected uint data; 
	public uint Data { get { return this.data; } set { this.data = value; } }

	public AppleQTVRTrackBox(): base(IsoStream.FromFourCC("qtvr"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.reserved1, "reserved1"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.reserved2, "reserved2"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.dataRefIndex, "dataRefIndex"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt32( this.reserved1, "reserved1"); 
		boxSize += stream.WriteUInt16( this.reserved2, "reserved2"); 
		boxSize += stream.WriteUInt16( this.dataRefIndex, "dataRefIndex"); 
		boxSize += stream.WriteUInt32( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // reserved1
		boxSize += 16; // reserved2
		boxSize += 16; // dataRefIndex
		boxSize += 32; // data
		return boxSize;
	}
}


/*
class AppleColorTableBox() extends Box ('ctab'){
 signed int(32) color_table_seed;
 signed int(16) flags;
 signed int(16) color_table_size;
 AppleColor colors[];
 }
 
*/
public partial class AppleColorTableBox : Box
{
	public const string TYPE = "ctab";
	public override string DisplayName { get { return "AppleColorTableBox"; } }

	protected int color_table_seed; 
	public int ColorTableSeed { get { return this.color_table_seed; } set { this.color_table_seed = value; } }

	protected short flags; 
	public short Flags { get { return this.flags; } set { this.flags = value; } }

	protected short color_table_size; 
	public short ColorTableSize { get { return this.color_table_size; } set { this.color_table_size = value; } }

	protected AppleColor[] colors; 
	public AppleColor[] Colors { get { return this.colors; } set { this.colors = value; } }

	public AppleColorTableBox(): base(IsoStream.FromFourCC("ctab"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadInt32(boxSize, readSize,  out this.color_table_seed, "color_table_seed"); 
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.flags, "flags"); 
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.color_table_size, "color_table_size"); 
		boxSize += stream.ReadClass(boxSize, readSize, this, (uint)(uint.MaxValue), () => new AppleColor(),  out this.colors, "colors"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteInt32( this.color_table_seed, "color_table_seed"); 
		boxSize += stream.WriteInt16( this.flags, "flags"); 
		boxSize += stream.WriteInt16( this.color_table_size, "color_table_size"); 
		boxSize += stream.WriteClass( this.colors, "colors"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 32; // color_table_seed
		boxSize += 16; // flags
		boxSize += 16; // color_table_size
		boxSize += IsoStream.CalculateClassSize(colors); // colors
		return boxSize;
	}
}


/*
class AppleColor() {
unsigned int(16) alpha;
 unsigned int(16) red;
 unsigned int(16) green;
 unsigned int(16) blue;
 }

*/
public partial class AppleColor : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "AppleColor"; } }

	protected ushort alpha; 
	public ushort Alpha { get { return this.alpha; } set { this.alpha = value; } }

	protected ushort red; 
	public ushort Red { get { return this.red; } set { this.red = value; } }

	protected ushort green; 
	public ushort Green { get { return this.green; } set { this.green = value; } }

	protected ushort blue; 
	public ushort Blue { get { return this.blue; } set { this.blue = value; } }

	public AppleColor(): base()
	{
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.alpha, "alpha"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.red, "red"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.green, "green"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.blue, "blue"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt16( this.alpha, "alpha"); 
		boxSize += stream.WriteUInt16( this.red, "red"); 
		boxSize += stream.WriteUInt16( this.green, "green"); 
		boxSize += stream.WriteUInt16( this.blue, "blue"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 16; // alpha
		boxSize += 16; // red
		boxSize += 16; // green
		boxSize += 16; // blue
		return boxSize;
	}
}


/*
class GpsBox() extends Box ('gps '){
 bit(8) data[];
 }
*/
public partial class GpsBox : Box
{
	public const string TYPE = "gps ";
	public override string DisplayName { get { return "GpsBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public GpsBox(): base(IsoStream.FromFourCC("gps "))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class AdobePremiereVersionBox() extends Box ('@PRM'){
 bit(8) data[];
 }
*/
public partial class AdobePremiereVersionBox : Box
{
	public const string TYPE = "@PRM";
	public override string DisplayName { get { return "AdobePremiereVersionBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AdobePremiereVersionBox(): base(IsoStream.FromFourCC("@PRM"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class AdobePremiereQuickTimeVersionBox() extends Box ('@PRQ'){
 bit(8) data[];
 }
*/
public partial class AdobePremiereQuickTimeVersionBox : Box
{
	public const string TYPE = "@PRQ";
	public override string DisplayName { get { return "AdobePremiereQuickTimeVersionBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AdobePremiereQuickTimeVersionBox(): base(IsoStream.FromFourCC("@PRQ"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class RnduBox() extends Box ('rndu'){
 bit(8) data[];
 }
*/
public partial class RnduBox : Box
{
	public const string TYPE = "rndu";
	public override string DisplayName { get { return "RnduBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public RnduBox(): base(IsoStream.FromFourCC("rndu"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class RpduBox() extends Box ('rpdu'){
 bit(8) data[];
 }
*/
public partial class RpduBox : Box
{
	public const string TYPE = "rpdu";
	public override string DisplayName { get { return "RpduBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public RpduBox(): base(IsoStream.FromFourCC("rpdu"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class MediaCleanerProBox() extends Box ('MCPS'){
 bit(8) data[];
 }
*/
public partial class MediaCleanerProBox : Box
{
	public const string TYPE = "MCPS";
	public override string DisplayName { get { return "MediaCleanerProBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public MediaCleanerProBox(): base(IsoStream.FromFourCC("MCPS"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ReferenceMovieLanguageBox() extends Box ('rmla'){
 bit(8) data[];
 }
*/
public partial class ReferenceMovieLanguageBox : Box
{
	public const string TYPE = "rmla";
	public override string DisplayName { get { return "ReferenceMovieLanguageBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ReferenceMovieLanguageBox(): base(IsoStream.FromFourCC("rmla"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class TranscriptBox() extends Box ('scpt'){
 bit(8) data[];
 }
*/
public partial class TranscriptBox : Box
{
	public const string TYPE = "scpt";
	public override string DisplayName { get { return "TranscriptBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public TranscriptBox(): base(IsoStream.FromFourCC("scpt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class NonPrimarySourceBox() extends Box ('ssrc'){
 bit(8) data[];
 }
*/
public partial class NonPrimarySourceBox : Box
{
	public const string TYPE = "ssrc";
	public override string DisplayName { get { return "NonPrimarySourceBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public NonPrimarySourceBox(): base(IsoStream.FromFourCC("ssrc"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class AppleNoSaveBox() extends Box ('nsav'){
 bit(8) data[];
 }
*/
public partial class AppleNoSaveBox : Box
{
	public const string TYPE = "nsav";
	public override string DisplayName { get { return "AppleNoSaveBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleNoSaveBox(): base(IsoStream.FromFourCC("nsav"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ControllerTypeBox() extends Box ('ctyp'){
 bit(8) data[];
 }
*/
public partial class ControllerTypeBox : Box
{
	public const string TYPE = "ctyp";
	public override string DisplayName { get { return "ControllerTypeBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ControllerTypeBox(): base(IsoStream.FromFourCC("ctyp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ImageTrackReferenceBox() extends Box ('imgt'){
 bit(8) data[];
 }
*/
public partial class ImageTrackReferenceBox : Box
{
	public const string TYPE = "imgt";
	public override string DisplayName { get { return "ImageTrackReferenceBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ImageTrackReferenceBox(): base(IsoStream.FromFourCC("imgt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class NikonNCDTBox() extends Box ('NCDT'){
 Box boxes[];
 }
*/
public partial class NikonNCDTBox : Box
{
	public const string TYPE = "NCDT";
	public override string DisplayName { get { return "NikonNCDTBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public NikonNCDTBox(): base(IsoStream.FromFourCC("NCDT"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class NikonCameraThumbnailImageBox() extends Box ('NCTH'){
 bit(8) data[];
 }
*/
public partial class NikonCameraThumbnailImageBox : Box
{
	public const string TYPE = "NCTH";
	public override string DisplayName { get { return "NikonCameraThumbnailImageBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public NikonCameraThumbnailImageBox(): base(IsoStream.FromFourCC("NCTH"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class NikonCameraPreviewImageBox() extends Box ('NCVW'){
 bit(8) data[];
 }
*/
public partial class NikonCameraPreviewImageBox : Box
{
	public const string TYPE = "NCVW";
	public override string DisplayName { get { return "NikonCameraPreviewImageBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public NikonCameraPreviewImageBox(): base(IsoStream.FromFourCC("NCVW"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class NikonCameraPreviewImage1Box() extends Box ('NCM1'){
 bit(8) data[];
 }
*/
public partial class NikonCameraPreviewImage1Box : Box
{
	public const string TYPE = "NCM1";
	public override string DisplayName { get { return "NikonCameraPreviewImage1Box"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public NikonCameraPreviewImage1Box(): base(IsoStream.FromFourCC("NCM1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class NikonCameraPreviewImage2Box() extends Box ('NCM2'){
 bit(8) data[];
 }
*/
public partial class NikonCameraPreviewImage2Box : Box
{
	public const string TYPE = "NCM2";
	public override string DisplayName { get { return "NikonCameraPreviewImage2Box"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public NikonCameraPreviewImage2Box(): base(IsoStream.FromFourCC("NCM2"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class NikonMakerNoteVersionBox() extends Box ('NCHD'){
 bit(8) data[];
 }
*/
public partial class NikonMakerNoteVersionBox : Box
{
	public const string TYPE = "NCHD";
	public override string DisplayName { get { return "NikonMakerNoteVersionBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public NikonMakerNoteVersionBox(): base(IsoStream.FromFourCC("NCHD"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
aligned(8) class NikonExifBox() extends Box('NCTG') {
 bit(8) data[];
 } 
*/
public partial class NikonExifBox : Box
{
	public const string TYPE = "NCTG";
	public override string DisplayName { get { return "NikonExifBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public NikonExifBox(): base(IsoStream.FromFourCC("NCTG"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class NikonNCDBBox() extends Box ('NCDB'){
 bit(8) data[];
 }
*/
public partial class NikonNCDBBox : Box
{
	public const string TYPE = "NCDB";
	public override string DisplayName { get { return "NikonNCDBBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public NikonNCDBBox(): base(IsoStream.FromFourCC("NCDB"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class CanonCompressorVersionBox() extends Box ('CNCV'){
 bit(8) data[];
 }
*/
public partial class CanonCompressorVersionBox : Box
{
	public const string TYPE = "CNCV";
	public override string DisplayName { get { return "CanonCompressorVersionBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public CanonCompressorVersionBox(): base(IsoStream.FromFourCC("CNCV"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class FirmwareBox() extends Box ('FIRM'){
 bit(8) data[];
 }
*/
public partial class FirmwareBox : Box
{
	public const string TYPE = "FIRM";
	public override string DisplayName { get { return "FirmwareBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public FirmwareBox(): base(IsoStream.FromFourCC("FIRM"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class CameraFirmwareBox() extends Box ('CAME'){
 bit(8) data[];
 }
*/
public partial class CameraFirmwareBox : Box
{
	public const string TYPE = "CAME";
	public override string DisplayName { get { return "CameraFirmwareBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public CameraFirmwareBox(): base(IsoStream.FromFourCC("CAME"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class AppleOrientationBox() extends Box ('rcif'){
 bit(8) data[];
 }
*/
public partial class AppleOrientationBox : Box
{
	public const string TYPE = "rcif";
	public override string DisplayName { get { return "AppleOrientationBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleOrientationBox(): base(IsoStream.FromFourCC("rcif"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class GPSDataList2Box() extends Box ('GPS '){
 bit(8) data[];
 }
*/
public partial class GPSDataList2Box : Box
{
	public const string TYPE = "GPS ";
	public override string DisplayName { get { return "GPSDataList2Box"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public GPSDataList2Box(): base(IsoStream.FromFourCC("GPS "))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class DateTimeOriginalBox() extends Box ('IDIT'){
 bit(8) data[];
 }
*/
public partial class DateTimeOriginalBox : Box
{
	public const string TYPE = "IDIT";
	public override string DisplayName { get { return "DateTimeOriginalBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public DateTimeOriginalBox(): base(IsoStream.FromFourCC("IDIT"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class PreviewPICTBox() extends Box ('PICT'){
 bit(8) data[];
 }
*/
public partial class PreviewPICTBox : Box
{
	public const string TYPE = "PICT";
	public override string DisplayName { get { return "PreviewPICTBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public PreviewPICTBox(): base(IsoStream.FromFourCC("PICT"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class SEALBox() extends Box ('SEAL'){
 bit(8) data[];
 }
*/
public partial class SEALBox : Box
{
	public const string TYPE = "SEAL";
	public override string DisplayName { get { return "SEALBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public SEALBox(): base(IsoStream.FromFourCC("SEAL"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class HTCInfoBox() extends Box ('_htc'){
 bit(8) data[];
 }
*/
public partial class HTCInfoBox : Box
{
	public const string TYPE = "_htc";
	public override string DisplayName { get { return "HTCInfoBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public HTCInfoBox(): base(IsoStream.FromFourCC("_htc"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ARDroneFileBox() extends Box ('ardt'){
 bit(8) data[];
 }
*/
public partial class ARDroneFileBox : Box
{
	public const string TYPE = "ardt";
	public override string DisplayName { get { return "ARDroneFileBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ARDroneFileBox(): base(IsoStream.FromFourCC("ardt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class CustomInfoBox() extends Box ('cust'){
 bit(8) data[];
 }
*/
public partial class CustomInfoBox : Box
{
	public const string TYPE = "cust";
	public override string DisplayName { get { return "CustomInfoBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public CustomInfoBox(): base(IsoStream.FromFourCC("cust"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class GPSDataBox() extends Box ('gdat'){
 bit(8) data[];
 }
*/
public partial class GPSDataBox : Box
{
	public const string TYPE = "gdat";
	public override string DisplayName { get { return "GPSDataBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public GPSDataBox(): base(IsoStream.FromFourCC("gdat"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class GPSTrackBox() extends Box ('gps0'){
 bit(8) data[];
 }
*/
public partial class GPSTrackBox : Box
{
	public const string TYPE = "gps0";
	public override string DisplayName { get { return "GPSTrackBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public GPSTrackBox(): base(IsoStream.FromFourCC("gps0"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class GSensorBox() extends Box ('gsen'){
 bit(8) data[];
 }
*/
public partial class GSensorBox : Box
{
	public const string TYPE = "gsen";
	public override string DisplayName { get { return "GSensorBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public GSensorBox(): base(IsoStream.FromFourCC("gsen"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class Insta360InfoBox() extends Box ('inst'){
 bit(8) data[];
 }
*/
public partial class Insta360InfoBox : Box
{
	public const string TYPE = "inst";
	public override string DisplayName { get { return "Insta360InfoBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public Insta360InfoBox(): base(IsoStream.FromFourCC("inst"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class MotionPhotoVideoBox() extends Box ('mpvd'){
 bit(8) data[];
 }
*/
public partial class MotionPhotoVideoBox : Box
{
	public const string TYPE = "mpvd";
	public override string DisplayName { get { return "MotionPhotoVideoBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public MotionPhotoVideoBox(): base(IsoStream.FromFourCC("mpvd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class NextbaseMetaBox() extends Box ('nbmt'){
 bit(8) data[];
 }
*/
public partial class NextbaseMetaBox : Box
{
	public const string TYPE = "nbmt";
	public override string DisplayName { get { return "NextbaseMetaBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public NextbaseMetaBox(): base(IsoStream.FromFourCC("nbmt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ARDroneTelemetryBox() extends Box ('prrt'){
 bit(8) data[];
 }
*/
public partial class ARDroneTelemetryBox : Box
{
	public const string TYPE = "prrt";
	public override string DisplayName { get { return "ARDroneTelemetryBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ARDroneTelemetryBox(): base(IsoStream.FromFourCC("prrt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class SamsungTrailerBox() extends Box ('sefd'){
 bit(8) data[];
 }
*/
public partial class SamsungTrailerBox : Box
{
	public const string TYPE = "sefd";
	public override string DisplayName { get { return "SamsungTrailerBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public SamsungTrailerBox(): base(IsoStream.FromFourCC("sefd"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ThumbnailImageBox() extends Box ('thm '){
 bit(8) data[];
 }
*/
public partial class ThumbnailImageBox : Box
{
	public const string TYPE = "thm ";
	public override string DisplayName { get { return "ThumbnailImageBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ThumbnailImageBox(): base(IsoStream.FromFourCC("thm "))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ThumbnailImage2Box() extends Box ('thum'){
 bit(8) data[];
 }
*/
public partial class ThumbnailImage2Box : Box
{
	public const string TYPE = "thum";
	public override string DisplayName { get { return "ThumbnailImage2Box"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ThumbnailImage2Box(): base(IsoStream.FromFourCC("thum"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class GPSLogBox() extends Box ('udat'){
 bit(8) data[];
 }
*/
public partial class GPSLogBox : Box
{
	public const string TYPE = "udat";
	public override string DisplayName { get { return "GPSLogBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public GPSLogBox(): base(IsoStream.FromFourCC("udat"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class Url0Box() extends Box ('url\0'){
 bit(8) data[];
 }
*/
public partial class Url0Box : Box
{
	public const string TYPE = "url\0";
	public override string DisplayName { get { return "Url0Box"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public Url0Box(): base(IsoStream.FromFourCC("url\0"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ParentShortTitleBox() extends Box ('@PST'){
 bit(8) data[];
 }
*/
public partial class ParentShortTitleBox : Box
{
	public const string TYPE = "@PST";
	public override string DisplayName { get { return "ParentShortTitleBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ParentShortTitleBox(): base(IsoStream.FromFourCC("@PST"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ParentProductIDBox() extends Box ('@ppi'){
 bit(8) data[];
 }
*/
public partial class ParentProductIDBox : Box
{
	public const string TYPE = "@ppi";
	public override string DisplayName { get { return "ParentProductIDBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ParentProductIDBox(): base(IsoStream.FromFourCC("@ppi"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ParentTitleBox() extends Box ('@pti'){
 bit(8) data[];
 }
*/
public partial class ParentTitleBox : Box
{
	public const string TYPE = "@pti";
	public override string DisplayName { get { return "ParentTitleBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ParentTitleBox(): base(IsoStream.FromFourCC("@pti"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ShortTitleBox() extends Box ('@sti'){
 bit(8) data[];
 }
*/
public partial class ShortTitleBox : Box
{
	public const string TYPE = "@sti";
	public override string DisplayName { get { return "ShortTitleBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ShortTitleBox(): base(IsoStream.FromFourCC("@sti"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class GUIDBox() extends Box ('GUID'){
 bit(8) data[];
 }
*/
public partial class GUIDBox : Box
{
	public const string TYPE = "GUID";
	public override string DisplayName { get { return "GUIDBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public GUIDBox(): base(IsoStream.FromFourCC("GUID"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ProductVersionBox() extends Box ('VERS'){
 bit(8) data[];
 }
*/
public partial class ProductVersionBox : Box
{
	public const string TYPE = "VERS";
	public override string DisplayName { get { return "ProductVersionBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ProductVersionBox(): base(IsoStream.FromFourCC("VERS"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class GroupingBox() extends Box ('grup'){
 bit(8) data[];
 }
*/
public partial class GroupingBox : Box
{
	public const string TYPE = "grup";
	public override string DisplayName { get { return "GroupingBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public GroupingBox(): base(IsoStream.FromFourCC("grup"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ITunesUBox() extends Box ('itnu'){
 bit(8) data[];
 }
*/
public partial class ITunesUBox : Box
{
	public const string TYPE = "itnu";
	public override string DisplayName { get { return "ITunesUBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ITunesUBox(): base(IsoStream.FromFourCC("itnu"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ProductIDBox() extends Box ('prID'){
 bit(8) data[];
 }
*/
public partial class ProductIDBox : Box
{
	public const string TYPE = "prID";
	public override string DisplayName { get { return "ProductIDBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ProductIDBox(): base(IsoStream.FromFourCC("prID"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class RatingPercentBox() extends Box ('rate'){
 bit(8) data[];
 }
*/
public partial class RatingPercentBox : Box
{
	public const string TYPE = "rate";
	public override string DisplayName { get { return "RatingPercentBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public RatingPercentBox(): base(IsoStream.FromFourCC("rate"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ReleaseDateBox() extends Box ('rldt'){
 bit(8) data[];
 }
*/
public partial class ReleaseDateBox : Box
{
	public const string TYPE = "rldt";
	public override string DisplayName { get { return "ReleaseDateBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ReleaseDateBox(): base(IsoStream.FromFourCC("rldt"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ShowMovementBox() extends Box ('shwm'){
 bit(8) data[];
 }
*/
public partial class ShowMovementBox : Box
{
	public const string TYPE = "shwm";
	public override string DisplayName { get { return "ShowMovementBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ShowMovementBox(): base(IsoStream.FromFourCC("shwm"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class PreviewImageBox() extends Box ('snal'){
 bit(8) data[];
 }
*/
public partial class PreviewImageBox : Box
{
	public const string TYPE = "snal";
	public override string DisplayName { get { return "PreviewImageBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public PreviewImageBox(): base(IsoStream.FromFourCC("snal"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ThumbnailImageBox() extends Box ('tnal'){
 bit(8) data[];
 }
*/
public partial class ThumbnailImageBoxtnalDup : Box
{
	public const string TYPE = "tnal";
	public override string DisplayName { get { return "ThumbnailImageBoxtnalDup"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ThumbnailImageBoxtnalDup(): base(IsoStream.FromFourCC("tnal"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class AuxiliaryImageReferenceBox() extends Box ('auxl'){
 bit(8) data[];
 }
*/
public partial class AuxiliaryImageReferenceBox : Box
{
	public const string TYPE = "auxl";
	public override string DisplayName { get { return "AuxiliaryImageReferenceBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AuxiliaryImageReferenceBox(): base(IsoStream.FromFourCC("auxl"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class HTCTrackBox() extends Box ('htka'){
 bit(8) data[];
 }
*/
public partial class HTCTrackBox : Box
{
	public const string TYPE = "htka";
	public override string DisplayName { get { return "HTCTrackBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public HTCTrackBox(): base(IsoStream.FromFourCC("htka"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class TCMediaInfoBox() extends Box ('tcmi'){
 bit(8) data[];
 }
*/
public partial class TCMediaInfoBox : Box
{
	public const string TYPE = "tcmi";
	public override string DisplayName { get { return "TCMediaInfoBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public TCMediaInfoBox(): base(IsoStream.FromFourCC("tcmi"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class PurchaseInfoBox() extends Box ('pinf'){
 bit(8) data[];
 }
*/
public partial class PurchaseInfoBox : Box
{
	public const string TYPE = "pinf";
	public override string DisplayName { get { return "PurchaseInfoBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public PurchaseInfoBox(): base(IsoStream.FromFourCC("pinf"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class CertificateBox() extends Box ('cert'){
 bit(8) data[];
 }
*/
public partial class CertificateBox : Box
{
	public const string TYPE = "cert";
	public override string DisplayName { get { return "CertificateBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public CertificateBox(): base(IsoStream.FromFourCC("cert"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class RightsBox() extends Box ('righ'){
 bit(8) data[];
 }
*/
public partial class RightsBox : Box
{
	public const string TYPE = "righ";
	public override string DisplayName { get { return "RightsBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public RightsBox(): base(IsoStream.FromFourCC("righ"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class AppleICCProfileBox() extends Box ('iicc'){
 bit(8) data[];
 }
*/
public partial class AppleICCProfileBox : Box
{
	public const string TYPE = "iicc";
	public override string DisplayName { get { return "AppleICCProfileBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public AppleICCProfileBox(): base(IsoStream.FromFourCC("iicc"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class AppleImageDescriptionBox() extends Box ('idsc'){
 Box boxes[];
 }
*/
public partial class AppleImageDescriptionBox : Box
{
	public const string TYPE = "idsc";
	public override string DisplayName { get { return "AppleImageDescriptionBox"; } }
	public IEnumerable<Box> Boxes { get { return this.children.OfType<Box>(); } }

	public AppleImageDescriptionBox(): base(IsoStream.FromFourCC("idsc"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.boxes, "boxes"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.boxes, "boxes"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(boxes); // boxes
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class CanonCDI1TagsBox() extends Box ('CDI1'){
 bit(8) data[];
 }
*/
public partial class CanonCDI1TagsBox : Box
{
	public const string TYPE = "CDI1";
	public override string DisplayName { get { return "CanonCDI1TagsBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public CanonCDI1TagsBox(): base(IsoStream.FromFourCC("CDI1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class CanonCMP1TagsBox() extends Box ('CMP1'){
 bit(8) data[];
 }
*/
public partial class CanonCMP1TagsBox : Box
{
	public const string TYPE = "CMP1";
	public override string DisplayName { get { return "CanonCMP1TagsBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public CanonCMP1TagsBox(): base(IsoStream.FromFourCC("CMP1"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class JPEGInfoBox() extends Box ('JPEG'){
 bit(8) data[];
 }
*/
public partial class JPEGInfoBox : Box
{
	public const string TYPE = "JPEG";
	public override string DisplayName { get { return "JPEGInfoBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public JPEGInfoBox(): base(IsoStream.FromFourCC("JPEG"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class GammaBox() extends Box ('gama'){
 bit(8) data[];
 }
*/
public partial class GammaBox : Box
{
	public const string TYPE = "gama";
	public override string DisplayName { get { return "GammaBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public GammaBox(): base(IsoStream.FromFourCC("gama"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class MarlinDictionaryBox() extends Box ('mrld'){
 bit(8) data[];
 }
*/
public partial class MarlinDictionaryBox : Box
{
	public const string TYPE = "mrld";
	public override string DisplayName { get { return "MarlinDictionaryBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public MarlinDictionaryBox(): base(IsoStream.FromFourCC("mrld"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class MarlinHeaderBox() extends Box ('mrlh'){
 bit(8) data[];
 }
*/
public partial class MarlinHeaderBox : Box
{
	public const string TYPE = "mrlh";
	public override string DisplayName { get { return "MarlinHeaderBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public MarlinHeaderBox(): base(IsoStream.FromFourCC("mrlh"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class MarlinValuesBox() extends Box ('mrlv'){
 bit(8) data[];
 }
*/
public partial class MarlinValuesBox : Box
{
	public const string TYPE = "mrlv";
	public override string DisplayName { get { return "MarlinValuesBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public MarlinValuesBox(): base(IsoStream.FromFourCC("mrlv"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ClosedCaptionTrackBox() extends Box ('clcp'){
 bit(8) data[];
 }
*/
public partial class ClosedCaptionTrackBox : Box
{
	public const string TYPE = "clcp";
	public override string DisplayName { get { return "ClosedCaptionTrackBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ClosedCaptionTrackBox(): base(IsoStream.FromFourCC("clcp"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class SubtitleTrackBox() extends Box ('folw'){
 bit(8) data[];
 }
*/
public partial class SubtitleTrackBox : Box
{
	public const string TYPE = "folw";
	public override string DisplayName { get { return "SubtitleTrackBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public SubtitleTrackBox(): base(IsoStream.FromFourCC("folw"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class ForcedSubtitleTrackBox() extends Box ('forc'){
 bit(8) data[];
 }
*/
public partial class ForcedSubtitleTrackBox : Box
{
	public const string TYPE = "forc";
	public override string DisplayName { get { return "ForcedSubtitleTrackBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public ForcedSubtitleTrackBox(): base(IsoStream.FromFourCC("forc"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class SynchronizedTrackBox() extends Box ('sync'){
 bit(8) data[];
 }
*/
public partial class SynchronizedTrackBox : Box
{
	public const string TYPE = "sync";
	public override string DisplayName { get { return "SynchronizedTrackBox"; } }

	protected byte[] data; 
	public byte[] Data { get { return this.data; } set { this.data = value; } }

	public SynchronizedTrackBox(): base(IsoStream.FromFourCC("sync"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8ArrayTillEnd(boxSize, readSize,  out this.data, "data"); 
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8ArrayTillEnd( this.data, "data"); 
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += ((ulong)data.Length * 8); // data
		return boxSize;
	}
}


/*
class OpusSampleEntry() extends AudioSampleEntry ('Opus'){
 OpusSpecificBox();
 }
*/
public partial class OpusSampleEntry : AudioSampleEntry
{
	public const string TYPE = "Opus";
	public override string DisplayName { get { return "OpusSampleEntry"; } }
	public OpusSpecificBox _OpusSpecificBox { get { return this.children.OfType<OpusSpecificBox>().FirstOrDefault(); } }

	public OpusSampleEntry(): base(IsoStream.FromFourCC("Opus"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		// boxSize += stream.ReadBox(boxSize, readSize, this,  out this.OpusSpecificBox, "OpusSpecificBox"); 
		boxSize += stream.ReadBoxArrayTillEnd(boxSize, readSize, this);
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		// boxSize += stream.WriteBox( this.OpusSpecificBox, "OpusSpecificBox"); 
		boxSize += stream.WriteBoxArrayTillEnd(this);
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		// boxSize += IsoStream.CalculateBoxSize(OpusSpecificBox); // OpusSpecificBox
		boxSize += IsoStream.CalculateBoxArray(this);
		return boxSize;
	}
}


/*
class ChannelMappingTable (unsigned int(8) OutputChannelCount){
 unsigned int(8) StreamCount;
 unsigned int(8) CoupledCount;
 unsigned int(8 * OutputChannelCount) ChannelMapping;
 }

 
*/
public partial class ChannelMappingTable : IMp4Serializable
{
	public StreamMarker Padding { get; set; }
	protected IMp4Serializable parent = null;
	public IMp4Serializable GetParent() { return parent; }
	public void SetParent(IMp4Serializable parent) { this.parent = parent; }
	public virtual string DisplayName { get { return "ChannelMappingTable"; } }

	protected byte StreamCount; 
	public byte _StreamCount { get { return this.StreamCount; } set { this.StreamCount = value; } }

	protected byte CoupledCount; 
	public byte _CoupledCount { get { return this.CoupledCount; } set { this.CoupledCount = value; } }

	protected byte[] ChannelMapping; 
	public byte[] _ChannelMapping { get { return this.ChannelMapping; } set { this.ChannelMapping = value; } }

	protected byte OutputChannelCount; 
	public byte _OutputChannelCount { get { return this.OutputChannelCount; } set { this.OutputChannelCount = value; } }

	public ChannelMappingTable(byte OutputChannelCount): base()
	{
		this.OutputChannelCount = OutputChannelCount;
	}

	public virtual ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.StreamCount, "StreamCount"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.CoupledCount, "CoupledCount"); 
		boxSize += stream.ReadBits(boxSize, readSize, (uint)(8 * OutputChannelCount ),  out this.ChannelMapping, "ChannelMapping"); 
		return boxSize;
	}

	public virtual ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += stream.WriteUInt8( this.StreamCount, "StreamCount"); 
		boxSize += stream.WriteUInt8( this.CoupledCount, "CoupledCount"); 
		boxSize += stream.WriteBits((uint)(8 * OutputChannelCount ),  this.ChannelMapping, "ChannelMapping"); 
		return boxSize;
	}

	public virtual ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += 8; // StreamCount
		boxSize += 8; // CoupledCount
		boxSize += (ulong)(8 * OutputChannelCount ); // ChannelMapping
		return boxSize;
	}
}


/*
aligned(8) class OpusSpecificBox extends Box('dOps'){
 unsigned int(8) Version;
 unsigned int(8) OutputChannelCount;
 unsigned int(16) PreSkip;
 unsigned int(32) InputSampleRate;
 signed int(16) OutputGain;
 unsigned int(8) ChannelMappingFamily;
 if (ChannelMappingFamily != 0) {
 ChannelMappingTable(OutputChannelCount);
 }
 }
*/
public partial class OpusSpecificBox : Box
{
	public const string TYPE = "dOps";
	public override string DisplayName { get { return "OpusSpecificBox"; } }

	protected byte Version; 
	public byte _Version { get { return this.Version; } set { this.Version = value; } }

	protected byte OutputChannelCount; 
	public byte _OutputChannelCount { get { return this.OutputChannelCount; } set { this.OutputChannelCount = value; } }

	protected ushort PreSkip; 
	public ushort _PreSkip { get { return this.PreSkip; } set { this.PreSkip = value; } }

	protected uint InputSampleRate; 
	public uint _InputSampleRate { get { return this.InputSampleRate; } set { this.InputSampleRate = value; } }

	protected short OutputGain; 
	public short _OutputGain { get { return this.OutputGain; } set { this.OutputGain = value; } }

	protected byte ChannelMappingFamily; 
	public byte _ChannelMappingFamily { get { return this.ChannelMappingFamily; } set { this.ChannelMappingFamily = value; } }

	protected ChannelMappingTable ChannelMappingTable; 
	public ChannelMappingTable _ChannelMappingTable { get { return this.ChannelMappingTable; } set { this.ChannelMappingTable = value; } }

	public OpusSpecificBox(): base(IsoStream.FromFourCC("dOps"))
	{
	}

	public override ulong Read(IsoStream stream, ulong readSize)
	{
		ulong boxSize = 0;
		boxSize += base.Read(stream, readSize);
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.Version, "Version"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.OutputChannelCount, "OutputChannelCount"); 
		boxSize += stream.ReadUInt16(boxSize, readSize,  out this.PreSkip, "PreSkip"); 
		boxSize += stream.ReadUInt32(boxSize, readSize,  out this.InputSampleRate, "InputSampleRate"); 
		boxSize += stream.ReadInt16(boxSize, readSize,  out this.OutputGain, "OutputGain"); 
		boxSize += stream.ReadUInt8(boxSize, readSize,  out this.ChannelMappingFamily, "ChannelMappingFamily"); 

		if (ChannelMappingFamily != 0)
		{
			boxSize += stream.ReadClass(boxSize, readSize, this, () => new ChannelMappingTable(OutputChannelCount),  out this.ChannelMappingTable, "ChannelMappingTable"); 
		}
		return boxSize;
	}

	public override ulong Write(IsoStream stream)
	{
		ulong boxSize = 0;
		boxSize += base.Write(stream);
		boxSize += stream.WriteUInt8( this.Version, "Version"); 
		boxSize += stream.WriteUInt8( this.OutputChannelCount, "OutputChannelCount"); 
		boxSize += stream.WriteUInt16( this.PreSkip, "PreSkip"); 
		boxSize += stream.WriteUInt32( this.InputSampleRate, "InputSampleRate"); 
		boxSize += stream.WriteInt16( this.OutputGain, "OutputGain"); 
		boxSize += stream.WriteUInt8( this.ChannelMappingFamily, "ChannelMappingFamily"); 

		if (ChannelMappingFamily != 0)
		{
			boxSize += stream.WriteClass( this.ChannelMappingTable, "ChannelMappingTable"); 
		}
		return boxSize;
	}

	public override ulong CalculateSize()
	{
		ulong boxSize = 0;
		boxSize += base.CalculateSize();
		boxSize += 8; // Version
		boxSize += 8; // OutputChannelCount
		boxSize += 16; // PreSkip
		boxSize += 32; // InputSampleRate
		boxSize += 16; // OutputGain
		boxSize += 8; // ChannelMappingFamily

		if (ChannelMappingFamily != 0)
		{
			boxSize += IsoStream.CalculateClassSize(ChannelMappingTable); // ChannelMappingTable
		}
		return boxSize;
	}
}



}
