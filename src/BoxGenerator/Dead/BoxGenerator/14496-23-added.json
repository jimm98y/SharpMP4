{
  "name": "Descriptors",
  "description": "Descriptors",
  "entries": [
    {
      "type": "Descriptor",
      "containers": [ "*" ],
      "syntax": "class SymbolicMusicSpecificConfig\r\n{  // the bitstream header  \r\n    bit(4) version; //version of this specification is 0b0000 \r\n \r\n    unsigned int(12) pictureWidth; // rendering window X size \r\n    unsigned int(12) pictureHight; // rendering window Y size \r\n \r\n    bit(1) isScoreMultiwindow; // 0: one window only – 1: multiple windows \r\n \r\n    unsigned int(8) numberOfParts; // parts of the main score \r\n \r\n    unsigned int(3) notationFormat; // CWMN or other sets \r\n \r\n    vluimsbf8 urlMIDIStream_length; //length in bytes \r\n    byte(urlMIDIStream_length) urlMIDIStream; // reference to the MIDI stream, as url \r\n    bit(2) codingType; // coding of the XML chunks \r\n    vluimsbf8 length; //length in bits of decoder configuration, unsigned integer \r\n    // start of decoderConfiguration \r\n    if (codingType == 0b11) { \r\n       bit(3) decoderInitConfig; \r\n       if (decoderInitConfig == 0b000) { \r\n           bit(length-3)  decoderInit; \r\n       }\r\n    } else\r\n    {\r\n      bit(length) reserved;\r\n    }\r\n    // end of decoderConfiguration \r\n    bit more_data; // 1 if yes, 0 if no \r\n    while (more_data)\r\n    {\r\n        aligned bit(3) chunk_type;\r\n        bit(5) reserved; // for alignment \r\n        vluimsbf8 chunk_length;  // length of the chunk in byte \r\n        switch (chunk_type)\r\n        {\r\n            case 0b000:\r\n                mainscore_file sco;\r\n                break;\r\n            case 0b001:\r\n                bit(8) partID; // ID of the part at which the following info refers \r\n                part_file npf;\r\n                break;\r\n            case 0b010:\r\n                // this segment is always in binary as stated in Section 9 \r\n                synch_file sync;\r\n                break;\r\n            case 0b011:\r\n                format_file fmt;\r\n                break;\r\n            case 0b100:\r\n                bit(8) partID;\r\n                bit(8) lyricID;\r\n                lyrics_file lyr;\r\n                break;\r\n            case 0b101:\r\n                // this segment is always in binary as stated in Section 11.4 \r\n                font_file fon;\r\n                break;\r\n            case 0b110: reserved;\r\n            break;\r\n            case 0b111: reserved;\r\n            break;\r\n        }\r\n        aligned bit(1) more_data;\r\n        bit(7) reserved; //for alignment \r\n    } \r\n} "
    }
  ]
}