using System;
using System.IO;
using System.Threading.Tasks;

namespace BoxGenerator2
{
    public class FullBox : Box
    {
        public override string FourCC { get { return "uuid"; } }

        protected byte version; // = v
        public byte Version { get { return version; } set { version = value; } }

        protected uint flags; // = f
        public uint Flags { get { return flags; } set { flags = value; } }

        public FullBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.version);
            boxSize += IsoReaderWriter.ReadBits(stream, 24, out this.flags);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.version);
            boxSize += IsoReaderWriter.WriteBits(stream, 24, this.flags);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // version
            boxSize += 24; // flags
            return boxSize;
        }
    }


    public abstract class SampleGroupDescriptionEntry : Box
    {


        public SampleGroupDescriptionEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public abstract class VisualSampleGroupEntry : SampleGroupDescriptionEntry
    {


        public VisualSampleGroupEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public abstract class AudioSampleGroupEntry : SampleGroupDescriptionEntry
    {


        public AudioSampleGroupEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public abstract class HintSampleGroupEntry : SampleGroupDescriptionEntry
    {


        public HintSampleGroupEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public abstract class SubtitleSampleGroupEntry : SampleGroupDescriptionEntry
    {


        public SubtitleSampleGroupEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public abstract class TextSampleGroupEntry : SampleGroupDescriptionEntry
    {


        public TextSampleGroupEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public abstract class SubtitleSampleEntry : SampleEntry
    {


        public SubtitleSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class XMLSubtitleSampleEntry : SubtitleSampleEntry
    {


        protected string ns;
        public string Ns { get { return ns; } set { ns = value; } }

        protected string schema_location;  //  optional 
        public string SchemaLocation { get { return schema_location; } set { schema_location = value; } }

        protected string auxiliary_mime_types;  //  optional, required if auxiliary resources are present 
        public string AuxiliaryMimeTypes { get { return auxiliary_mime_types; } set { auxiliary_mime_types = value; } }

        protected BitRateBox BitRateBox;
        public BitRateBox _BitRateBox { get { return BitRateBox; } set { BitRateBox = value; } }

        public XMLSubtitleSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadString(stream, out this.ns);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadString(stream, out this.schema_location); // optional 
            if (boxSize < size) boxSize += IsoReaderWriter.ReadString(stream, out this.auxiliary_mime_types); // optional, required if auxiliary resources are present 
            boxSize += IsoReaderWriter.ReadBox(stream, out this.BitRateBox);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteString(stream, this.ns);
            if (this.schema_location != null) boxSize += IsoReaderWriter.WriteString(stream, this.schema_location); // optional 
            if (this.auxiliary_mime_types != null) boxSize += IsoReaderWriter.WriteString(stream, this.auxiliary_mime_types); // optional, required if auxiliary resources are present 
            boxSize += IsoReaderWriter.WriteBox(stream, this.BitRateBox);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)ns.Length * 8; // ns
            if (this.schema_location != null) boxSize += (ulong)schema_location.Length * 8; // schema_location
            if (this.auxiliary_mime_types != null) boxSize += (ulong)auxiliary_mime_types.Length * 8; // auxiliary_mime_types
            boxSize += IsoReaderWriter.CalculateSize(BitRateBox); // BitRateBox
            return boxSize;
        }
    }


    public class TextSubtitleSampleEntry : SubtitleSampleEntry
    {


        protected string content_encoding;  //  optional 
        public string ContentEncoding { get { return content_encoding; } set { content_encoding = value; } }

        protected string mime_format;
        public string MimeFormat { get { return mime_format; } set { mime_format = value; } }

        protected BitRateBox BitRateBox;  //  optional 
        public BitRateBox _BitRateBox { get { return BitRateBox; } set { BitRateBox = value; } }

        protected TextConfigBox TextConfigBox;  //  optional 
        public TextConfigBox _TextConfigBox { get { return TextConfigBox; } set { TextConfigBox = value; } }

        public TextSubtitleSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadString(stream, out this.content_encoding); // optional 
            boxSize += IsoReaderWriter.ReadString(stream, out this.mime_format);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.BitRateBox); // optional 
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.TextConfigBox); // optional 
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.content_encoding != null) boxSize += IsoReaderWriter.WriteString(stream, this.content_encoding); // optional 
            boxSize += IsoReaderWriter.WriteString(stream, this.mime_format);
            if (this.BitRateBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.BitRateBox); // optional 
            if (this.TextConfigBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.TextConfigBox); // optional 
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.content_encoding != null) boxSize += (ulong)content_encoding.Length * 8; // content_encoding
            boxSize += (ulong)mime_format.Length * 8; // mime_format
            if (this.BitRateBox != null) boxSize += IsoReaderWriter.CalculateSize(BitRateBox); // BitRateBox
            if (this.TextConfigBox != null) boxSize += IsoReaderWriter.CalculateSize(TextConfigBox); // TextConfigBox
            return boxSize;
        }
    }


    public class LoudnessBaseBox : FullBox
    {


        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected byte downmix_ID;  //  matching downmix 
        public byte DownmixID { get { return downmix_ID; } set { downmix_ID = value; } }

        protected byte DRC_set_ID;  //  to match a DRC box 
        public byte DRCSetID { get { return DRC_set_ID; } set { DRC_set_ID = value; } }

        protected short bs_sample_peak_level;
        public short BsSamplePeakLevel { get { return bs_sample_peak_level; } set { bs_sample_peak_level = value; } }

        protected short bs_true_peak_level;
        public short BsTruePeakLevel { get { return bs_true_peak_level; } set { bs_true_peak_level = value; } }

        protected byte measurement_system_for_TP;
        public byte MeasurementSystemForTP { get { return measurement_system_for_TP; } set { measurement_system_for_TP = value; } }

        protected byte reliability_for_TP;
        public byte ReliabilityForTP { get { return reliability_for_TP; } set { reliability_for_TP = value; } }

        protected byte measurement_count;
        public byte MeasurementCount { get { return measurement_count; } set { measurement_count = value; } }

        protected byte method_definition;
        public byte MethodDefinition { get { return method_definition; } set { method_definition = value; } }

        protected byte method_value;
        public byte MethodValue { get { return method_value; } set { method_value = value; } }

        protected byte measurement_system;
        public byte MeasurementSystem { get { return measurement_system; } set { measurement_system = value; } }

        protected byte reliability;
        public byte Reliability { get { return reliability; } set { reliability = value; } }

        public LoudnessBaseBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.reserved);
            boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.downmix_ID); // matching downmix 
            boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.DRC_set_ID); // to match a DRC box 
            boxSize += IsoReaderWriter.ReadBits(stream, 12, out this.bs_sample_peak_level);
            boxSize += IsoReaderWriter.ReadBits(stream, 12, out this.bs_true_peak_level);
            boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.measurement_system_for_TP);
            boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.reliability_for_TP);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.measurement_count);


            for (int i = 1; i <= measurement_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.method_definition);
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.method_value);
                boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.measurement_system);
                boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.reliability);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBits(stream, 3, this.reserved);
            boxSize += IsoReaderWriter.WriteBits(stream, 7, this.downmix_ID); // matching downmix 
            boxSize += IsoReaderWriter.WriteBits(stream, 6, this.DRC_set_ID); // to match a DRC box 
            boxSize += IsoReaderWriter.WriteBits(stream, 12, this.bs_sample_peak_level);
            boxSize += IsoReaderWriter.WriteBits(stream, 12, this.bs_true_peak_level);
            boxSize += IsoReaderWriter.WriteBits(stream, 4, this.measurement_system_for_TP);
            boxSize += IsoReaderWriter.WriteBits(stream, 4, this.reliability_for_TP);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.measurement_count);


            for (int i = 1; i <= measurement_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.method_definition);
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.method_value);
                boxSize += IsoReaderWriter.WriteBits(stream, 4, this.measurement_system);
                boxSize += IsoReaderWriter.WriteBits(stream, 4, this.reliability);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 3; // reserved
            boxSize += 7; // downmix_ID
            boxSize += 6; // DRC_set_ID
            boxSize += 12; // bs_sample_peak_level
            boxSize += 12; // bs_true_peak_level
            boxSize += 4; // measurement_system_for_TP
            boxSize += 4; // reliability_for_TP
            boxSize += 8; // measurement_count


            for (int i = 1; i <= measurement_count; i++)
            {
                boxSize += 8; // method_definition
                boxSize += 8; // method_value
                boxSize += 4; // measurement_system
                boxSize += 4; // reliability
            }
            return boxSize;
        }
    }


    public class TrackLoudnessInfo : LoudnessBaseBox
    {


        public TrackLoudnessInfo()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class AlbumLoudnessInfo : LoudnessBaseBox
    {


        public AlbumLoudnessInfo()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class ReceivedSsrcBox : Box
    {
        public override string FourCC { get { return "rssr"; } }

        protected uint SSRC;
        public uint _SSRC { get { return SSRC; } set { SSRC = value; } }

        public ReceivedSsrcBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.SSRC);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.SSRC);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // SSRC
            return boxSize;
        }
    }


    public class timestampsynchrony : Box
    {
        public override string FourCC { get { return "tssy"; } }

        protected byte reserved;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected byte timestamp_sync;
        public byte TimestampSync { get { return timestamp_sync; } set { timestamp_sync = value; } }

        public timestampsynchrony()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.reserved);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.timestamp_sync);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBits(stream, 6, this.reserved);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.timestamp_sync);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 6; // reserved
            boxSize += 2; // timestamp_sync
            return boxSize;
        }
    }


    public class timescaleentry : Box
    {
        public override string FourCC { get { return "tims"; } }

        protected uint timescale;
        public uint Timescale { get { return timescale; } set { timescale = value; } }

        public timescaleentry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.timescale);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.timescale);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // timescale
            return boxSize;
        }
    }


    public class timeoffset : Box
    {
        public override string FourCC { get { return "tims"; } }

        protected int offset;
        public int Offset { get { return offset; } set { offset = value; } }

        public timeoffset()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt32(stream, out this.offset);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt32(stream, this.offset);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // offset
            return boxSize;
        }
    }


    public class sequenceoffset : Box
    {
        public override string FourCC { get { return "tims"; } }

        protected int offset;
        public int Offset { get { return offset; } set { offset = value; } }

        public sequenceoffset()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt32(stream, out this.offset);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt32(stream, this.offset);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // offset
            return boxSize;
        }
    }


    public class timescaleentry1 : Box
    {
        public override string FourCC { get { return "tsro"; } }

        protected uint timescale;
        public uint Timescale { get { return timescale; } set { timescale = value; } }

        public timescaleentry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.timescale);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.timescale);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // timescale
            return boxSize;
        }
    }


    public class timeoffset1 : Box
    {
        public override string FourCC { get { return "tsro"; } }

        protected int offset;
        public int Offset { get { return offset; } set { offset = value; } }

        public timeoffset1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt32(stream, out this.offset);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt32(stream, this.offset);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // offset
            return boxSize;
        }
    }


    public class sequenceoffset1 : Box
    {
        public override string FourCC { get { return "tsro"; } }

        protected int offset;
        public int Offset { get { return offset; } set { offset = value; } }

        public sequenceoffset1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt32(stream, out this.offset);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt32(stream, this.offset);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // offset
            return boxSize;
        }
    }


    public class timescaleentry2 : Box
    {
        public override string FourCC { get { return "snro"; } }

        protected uint timescale;
        public uint Timescale { get { return timescale; } set { timescale = value; } }

        public timescaleentry2()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.timescale);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.timescale);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // timescale
            return boxSize;
        }
    }


    public class timeoffset2 : Box
    {
        public override string FourCC { get { return "snro"; } }

        protected int offset;
        public int Offset { get { return offset; } set { offset = value; } }

        public timeoffset2()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt32(stream, out this.offset);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt32(stream, this.offset);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // offset
            return boxSize;
        }
    }


    public class sequenceoffset2 : Box
    {
        public override string FourCC { get { return "snro"; } }

        protected int offset;
        public int Offset { get { return offset; } set { offset = value; } }

        public sequenceoffset2()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt32(stream, out this.offset);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt32(stream, this.offset);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // offset
            return boxSize;
        }
    }


    public class hintBytesSent : Box
    {
        public override string FourCC { get { return "trpy"; } }

        protected ulong bytessent;
        public ulong Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintBytesSent()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    public class hintPacketsSent : Box
    {
        public override string FourCC { get { return "trpy"; } }

        protected ulong packetssent;
        public ulong Packetssent { get { return packetssent; } set { packetssent = value; } }

        public hintPacketsSent()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.packetssent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.packetssent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // packetssent
            return boxSize;
        }
    }


    public class hintBytesSent1 : Box
    {
        public override string FourCC { get { return "trpy"; } }

        protected ulong bytessent;
        public ulong Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintBytesSent1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    public class hintBytesSent2 : Box
    {
        public override string FourCC { get { return "nump"; } }

        protected ulong bytessent;
        public ulong Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintBytesSent2()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    public class hintPacketsSent1 : Box
    {
        public override string FourCC { get { return "nump"; } }

        protected ulong packetssent;
        public ulong Packetssent { get { return packetssent; } set { packetssent = value; } }

        public hintPacketsSent1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.packetssent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.packetssent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // packetssent
            return boxSize;
        }
    }


    public class hintBytesSent3 : Box
    {
        public override string FourCC { get { return "nump"; } }

        protected ulong bytessent;
        public ulong Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintBytesSent3()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    public class hintBytesSent4 : Box
    {
        public override string FourCC { get { return "tpyl"; } }

        protected ulong bytessent;
        public ulong Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintBytesSent4()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    public class hintPacketsSent2 : Box
    {
        public override string FourCC { get { return "tpyl"; } }

        protected ulong packetssent;
        public ulong Packetssent { get { return packetssent; } set { packetssent = value; } }

        public hintPacketsSent2()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.packetssent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.packetssent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // packetssent
            return boxSize;
        }
    }


    public class hintBytesSent5 : Box
    {
        public override string FourCC { get { return "tpyl"; } }

        protected ulong bytessent;
        public ulong Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintBytesSent5()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    public class hintBytesSent6 : Box
    {
        public override string FourCC { get { return "totl"; } }

        protected uint bytessent;
        public uint Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintBytesSent6()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // bytessent
            return boxSize;
        }
    }


    public class hintPacketsSent3 : Box
    {
        public override string FourCC { get { return "totl"; } }

        protected uint packetssent;
        public uint Packetssent { get { return packetssent; } set { packetssent = value; } }

        public hintPacketsSent3()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.packetssent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.packetssent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // packetssent
            return boxSize;
        }
    }


    public class hintBytesSent7 : Box
    {
        public override string FourCC { get { return "totl"; } }

        protected uint bytessent;
        public uint Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintBytesSent7()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // bytessent
            return boxSize;
        }
    }


    public class hintBytesSent8 : Box
    {
        public override string FourCC { get { return "npck"; } }

        protected uint bytessent;
        public uint Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintBytesSent8()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // bytessent
            return boxSize;
        }
    }


    public class hintPacketsSent4 : Box
    {
        public override string FourCC { get { return "npck"; } }

        protected uint packetssent;
        public uint Packetssent { get { return packetssent; } set { packetssent = value; } }

        public hintPacketsSent4()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.packetssent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.packetssent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // packetssent
            return boxSize;
        }
    }


    public class hintBytesSent9 : Box
    {
        public override string FourCC { get { return "npck"; } }

        protected uint bytessent;
        public uint Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintBytesSent9()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // bytessent
            return boxSize;
        }
    }


    public class hintBytesSent10 : Box
    {
        public override string FourCC { get { return "tpay"; } }

        protected uint bytessent;
        public uint Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintBytesSent10()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // bytessent
            return boxSize;
        }
    }


    public class hintPacketsSent5 : Box
    {
        public override string FourCC { get { return "tpay"; } }

        protected uint packetssent;
        public uint Packetssent { get { return packetssent; } set { packetssent = value; } }

        public hintPacketsSent5()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.packetssent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.packetssent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // packetssent
            return boxSize;
        }
    }


    public class hintBytesSent11 : Box
    {
        public override string FourCC { get { return "tpay"; } }

        protected uint bytessent;
        public uint Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintBytesSent11()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // bytessent
            return boxSize;
        }
    }


    public class hintmaxrate : Box
    {
        public override string FourCC { get { return "maxr"; } }

        protected uint period;  //  in milliseconds
        public uint Period { get { return period; } set { period = value; } }

        protected uint bytes;
        public uint Bytes { get { return bytes; } set { bytes = value; } }

        public hintmaxrate()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            /*  maximum data rate */
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.period); // in milliseconds
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.bytes);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            /*  maximum data rate */
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.period); // in milliseconds
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.bytes);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            /*  maximum data rate */
            boxSize += 32; // period
            boxSize += 32; // bytes
            return boxSize;
        }
    }


    public class hintmediaBytesSent : Box
    {
        public override string FourCC { get { return "dmed"; } }

        protected ulong bytessent;
        public ulong Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintmediaBytesSent()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    public class hintimmediateBytesSent : Box
    {
        public override string FourCC { get { return "dmed"; } }

        protected ulong bytessent;
        public ulong Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintimmediateBytesSent()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    public class hintrepeatedBytesSent : Box
    {
        public override string FourCC { get { return "dmed"; } }

        protected ulong bytessent;
        public ulong Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintrepeatedBytesSent()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    public class hintmediaBytesSent1 : Box
    {
        public override string FourCC { get { return "dimm"; } }

        protected ulong bytessent;
        public ulong Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintmediaBytesSent1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    public class hintimmediateBytesSent1 : Box
    {
        public override string FourCC { get { return "dimm"; } }

        protected ulong bytessent;
        public ulong Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintimmediateBytesSent1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    public class hintrepeatedBytesSent1 : Box
    {
        public override string FourCC { get { return "dimm"; } }

        protected ulong bytessent;
        public ulong Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintrepeatedBytesSent1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    public class hintmediaBytesSent2 : Box
    {
        public override string FourCC { get { return "drep"; } }

        protected ulong bytessent;
        public ulong Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintmediaBytesSent2()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    public class hintimmediateBytesSent2 : Box
    {
        public override string FourCC { get { return "drep"; } }

        protected ulong bytessent;
        public ulong Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintimmediateBytesSent2()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    public class hintrepeatedBytesSent2 : Box
    {
        public override string FourCC { get { return "drep"; } }

        protected ulong bytessent;
        public ulong Bytessent { get { return bytessent; } set { bytessent = value; } }

        public hintrepeatedBytesSent2()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    public class hintminrelativetime : Box
    {
        public override string FourCC { get { return "tmin"; } }

        protected int time;
        public int Time { get { return time; } set { time = value; } }

        public hintminrelativetime()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt32(stream, out this.time);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt32(stream, this.time);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // time
            return boxSize;
        }
    }


    public class hintmaxrelativetime : Box
    {
        public override string FourCC { get { return "tmin"; } }

        protected int time;
        public int Time { get { return time; } set { time = value; } }

        public hintmaxrelativetime()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt32(stream, out this.time);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt32(stream, this.time);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // time
            return boxSize;
        }
    }


    public class hintminrelativetime1 : Box
    {
        public override string FourCC { get { return "tmax"; } }

        protected int time;
        public int Time { get { return time; } set { time = value; } }

        public hintminrelativetime1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt32(stream, out this.time);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt32(stream, this.time);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // time
            return boxSize;
        }
    }


    public class hintmaxrelativetime1 : Box
    {
        public override string FourCC { get { return "tmax"; } }

        protected int time;
        public int Time { get { return time; } set { time = value; } }

        public hintmaxrelativetime1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt32(stream, out this.time);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt32(stream, this.time);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // time
            return boxSize;
        }
    }


    public class hintlargestpacket : Box
    {
        public override string FourCC { get { return "pmax"; } }

        protected uint bytes;
        public uint Bytes { get { return bytes; } set { bytes = value; } }

        public hintlargestpacket()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.bytes);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.bytes);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // bytes
            return boxSize;
        }
    }


    public class hintlongestpacket : Box
    {
        public override string FourCC { get { return "pmax"; } }

        protected uint time;
        public uint Time { get { return time; } set { time = value; } }

        public hintlongestpacket()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.time);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.time);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // time
            return boxSize;
        }
    }


    public class hintlargestpacket1 : Box
    {
        public override string FourCC { get { return "dmax"; } }

        protected uint bytes;
        public uint Bytes { get { return bytes; } set { bytes = value; } }

        public hintlargestpacket1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.bytes);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.bytes);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // bytes
            return boxSize;
        }
    }


    public class hintlongestpacket1 : Box
    {
        public override string FourCC { get { return "dmax"; } }

        protected uint time;
        public uint Time { get { return time; } set { time = value; } }

        public hintlongestpacket1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.time);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.time);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // time
            return boxSize;
        }
    }


    public class hintpayloadID : Box
    {
        public override string FourCC { get { return "payt"; } }

        protected uint payloadID;  //  payload ID used in RTP packets
        public uint PayloadID { get { return payloadID; } set { payloadID = value; } }

        protected byte count;
        public byte Count { get { return count; } set { count = value; } }

        protected sbyte[] rtpmap_string;
        public sbyte[] RtpmapString { get { return rtpmap_string; } set { rtpmap_string = value; } }

        public hintpayloadID()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.payloadID); // payload ID used in RTP packets
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.count);
            boxSize += IsoReaderWriter.ReadInt8Array(stream, count, out this.rtpmap_string);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.payloadID); // payload ID used in RTP packets
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.count);
            boxSize += IsoReaderWriter.WriteInt8Array(stream, count, this.rtpmap_string);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // payloadID
            boxSize += 8; // count
            boxSize += (ulong)count * 8; // rtpmap_string
            return boxSize;
        }
    }


    public class StereoVideoBox : FullBox
    {
        public override string FourCC { get { return "stvi"; } }

        protected uint reserved = 0;
        public uint Reserved { get { return reserved; } set { reserved = value; } }

        protected byte single_view_allowed;
        public byte SingleViewAllowed { get { return single_view_allowed; } set { single_view_allowed = value; } }

        protected uint stereo_scheme;
        public uint StereoScheme { get { return stereo_scheme; } set { stereo_scheme = value; } }

        protected uint length;
        public uint Length { get { return length; } set { length = value; } }

        protected byte[] stereo_indication_type;
        public byte[] StereoIndicationType { get { return stereo_indication_type; } set { stereo_indication_type = value; } }

        protected Box[] any_box;  //  optional
        public Box[] AnyBox { get { return any_box; } set { any_box = value; } }

        public StereoVideoBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBits(stream, 30, out this.reserved);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.single_view_allowed);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.stereo_scheme);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.length);
            boxSize += IsoReaderWriter.ReadBytes(stream, length, out this.stereo_indication_type);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.any_box); // optional
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBits(stream, 30, this.reserved);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.single_view_allowed);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.stereo_scheme);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.length);
            boxSize += IsoReaderWriter.WriteBytes(stream, length, this.stereo_indication_type);
            if (this.any_box != null) boxSize += IsoReaderWriter.WriteBox(stream, this.any_box); // optional
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 30; // reserved
            boxSize += 2; // single_view_allowed
            boxSize += 32; // stereo_scheme
            boxSize += 32; // length
            boxSize += (ulong)length * 8; // stereo_indication_type
            if (this.any_box != null) boxSize += IsoReaderWriter.CalculateSize(any_box); // any_box
            return boxSize;
        }
    }


    public class ExtendedLanguageBox : FullBox
    {
        public override string FourCC { get { return "elng"; } }

        protected string extended_language;
        public string ExtendedLanguage { get { return extended_language; } set { extended_language = value; } }

        public ExtendedLanguageBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadString(stream, out this.extended_language);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteString(stream, this.extended_language);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)extended_language.Length * 8; // extended_language
            return boxSize;
        }
    }


    public class BitRateBox : Box
    {
        public override string FourCC { get { return "btrt"; } }

        protected uint bufferSizeDB;
        public uint BufferSizeDB { get { return bufferSizeDB; } set { bufferSizeDB = value; } }

        protected uint maxBitrate;
        public uint MaxBitrate { get { return maxBitrate; } set { maxBitrate = value; } }

        protected uint avgBitrate;
        public uint AvgBitrate { get { return avgBitrate; } set { avgBitrate = value; } }

        public BitRateBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.bufferSizeDB);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.maxBitrate);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.avgBitrate);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.bufferSizeDB);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.maxBitrate);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.avgBitrate);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // bufferSizeDB
            boxSize += 32; // maxBitrate
            boxSize += 32; // avgBitrate
            return boxSize;
        }
    }


    public class PixelAspectRatioBox : Box
    {
        public override string FourCC { get { return "pasp"; } }

        protected uint hSpacing;
        public uint HSpacing { get { return hSpacing; } set { hSpacing = value; } }

        protected uint vSpacing;
        public uint VSpacing { get { return vSpacing; } set { vSpacing = value; } }

        public PixelAspectRatioBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.hSpacing);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.vSpacing);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.hSpacing);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.vSpacing);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // hSpacing
            boxSize += 32; // vSpacing
            return boxSize;
        }
    }


    public class CleanApertureBox : Box
    {
        public override string FourCC { get { return "clap"; } }

        protected uint cleanApertureWidthN;
        public uint CleanApertureWidthN { get { return cleanApertureWidthN; } set { cleanApertureWidthN = value; } }

        protected uint cleanApertureWidthD;
        public uint CleanApertureWidthD { get { return cleanApertureWidthD; } set { cleanApertureWidthD = value; } }

        protected uint cleanApertureHeightN;
        public uint CleanApertureHeightN { get { return cleanApertureHeightN; } set { cleanApertureHeightN = value; } }

        protected uint cleanApertureHeightD;
        public uint CleanApertureHeightD { get { return cleanApertureHeightD; } set { cleanApertureHeightD = value; } }

        protected uint horizOffN;
        public uint HorizOffN { get { return horizOffN; } set { horizOffN = value; } }

        protected uint horizOffD;
        public uint HorizOffD { get { return horizOffD; } set { horizOffD = value; } }

        protected uint vertOffN;
        public uint VertOffN { get { return vertOffN; } set { vertOffN = value; } }

        protected uint vertOffD;
        public uint VertOffD { get { return vertOffD; } set { vertOffD = value; } }

        public CleanApertureBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.cleanApertureWidthN);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.cleanApertureWidthD);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.cleanApertureHeightN);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.cleanApertureHeightD);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.horizOffN);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.horizOffD);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.vertOffN);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.vertOffD);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.cleanApertureWidthN);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.cleanApertureWidthD);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.cleanApertureHeightN);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.cleanApertureHeightD);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.horizOffN);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.horizOffD);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.vertOffN);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.vertOffD);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // cleanApertureWidthN
            boxSize += 32; // cleanApertureWidthD
            boxSize += 32; // cleanApertureHeightN
            boxSize += 32; // cleanApertureHeightD
            boxSize += 32; // horizOffN
            boxSize += 32; // horizOffD
            boxSize += 32; // vertOffN
            boxSize += 32; // vertOffD
            return boxSize;
        }
    }


    public class ContentColourVolumeBox : Box
    {
        public override string FourCC { get { return "cclv"; } }

        protected bool reserved1 = false;  //  ccv_cancel_flag
        public bool Reserved1 { get { return reserved1; } set { reserved1 = value; } }

        protected bool reserved2 = false;  //  ccv_persistence_flag
        public bool Reserved2 { get { return reserved2; } set { reserved2 = value; } }

        protected bool ccv_primaries_present_flag;
        public bool CcvPrimariesPresentFlag { get { return ccv_primaries_present_flag; } set { ccv_primaries_present_flag = value; } }

        protected bool ccv_min_luminance_value_present_flag;
        public bool CcvMinLuminanceValuePresentFlag { get { return ccv_min_luminance_value_present_flag; } set { ccv_min_luminance_value_present_flag = value; } }

        protected bool ccv_max_luminance_value_present_flag;
        public bool CcvMaxLuminanceValuePresentFlag { get { return ccv_max_luminance_value_present_flag; } set { ccv_max_luminance_value_present_flag = value; } }

        protected bool ccv_avg_luminance_value_present_flag;
        public bool CcvAvgLuminanceValuePresentFlag { get { return ccv_avg_luminance_value_present_flag; } set { ccv_avg_luminance_value_present_flag = value; } }

        protected byte ccv_reserved_zero_2bits = 0;
        public byte CcvReservedZero2bits { get { return ccv_reserved_zero_2bits; } set { ccv_reserved_zero_2bits = value; } }

        protected int[] ccv_primaries_x;
        public int[] CcvPrimariesX { get { return ccv_primaries_x; } set { ccv_primaries_x = value; } }

        protected int[] ccv_primaries_y;
        public int[] CcvPrimariesY { get { return ccv_primaries_y; } set { ccv_primaries_y = value; } }

        protected uint ccv_min_luminance_value;
        public uint CcvMinLuminanceValue { get { return ccv_min_luminance_value; } set { ccv_min_luminance_value = value; } }

        protected uint ccv_max_luminance_value;
        public uint CcvMaxLuminanceValue { get { return ccv_max_luminance_value; } set { ccv_max_luminance_value = value; } }

        protected uint ccv_avg_luminance_value;
        public uint CcvAvgLuminanceValue { get { return ccv_avg_luminance_value; } set { ccv_avg_luminance_value = value; } }

        public ContentColourVolumeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.reserved1); // ccv_cancel_flag
            boxSize += IsoReaderWriter.ReadBit(stream, out this.reserved2); // ccv_persistence_flag
            boxSize += IsoReaderWriter.ReadBit(stream, out this.ccv_primaries_present_flag);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.ccv_min_luminance_value_present_flag);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.ccv_max_luminance_value_present_flag);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.ccv_avg_luminance_value_present_flag);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.ccv_reserved_zero_2bits);

            if (ccv_primaries_present_flag)
            {

                for (int c = 0; c < 3; c++)
                {
                    boxSize += IsoReaderWriter.ReadInt32(stream, out this.ccv_primaries_x[c]);
                    boxSize += IsoReaderWriter.ReadInt32(stream, out this.ccv_primaries_y[c]);
                }
            }

            if (ccv_min_luminance_value_present_flag)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.ccv_min_luminance_value);
            }

            if (ccv_max_luminance_value_present_flag)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.ccv_max_luminance_value);
            }

            if (ccv_avg_luminance_value_present_flag)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.ccv_avg_luminance_value);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBit(stream, this.reserved1); // ccv_cancel_flag
            boxSize += IsoReaderWriter.WriteBit(stream, this.reserved2); // ccv_persistence_flag
            boxSize += IsoReaderWriter.WriteBit(stream, this.ccv_primaries_present_flag);
            boxSize += IsoReaderWriter.WriteBit(stream, this.ccv_min_luminance_value_present_flag);
            boxSize += IsoReaderWriter.WriteBit(stream, this.ccv_max_luminance_value_present_flag);
            boxSize += IsoReaderWriter.WriteBit(stream, this.ccv_avg_luminance_value_present_flag);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.ccv_reserved_zero_2bits);

            if (ccv_primaries_present_flag)
            {

                for (int c = 0; c < 3; c++)
                {
                    boxSize += IsoReaderWriter.WriteInt32(stream, this.ccv_primaries_x[c]);
                    boxSize += IsoReaderWriter.WriteInt32(stream, this.ccv_primaries_y[c]);
                }
            }

            if (ccv_min_luminance_value_present_flag)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.ccv_min_luminance_value);
            }

            if (ccv_max_luminance_value_present_flag)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.ccv_max_luminance_value);
            }

            if (ccv_avg_luminance_value_present_flag)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.ccv_avg_luminance_value);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // reserved1
            boxSize += 1; // reserved2
            boxSize += 1; // ccv_primaries_present_flag
            boxSize += 1; // ccv_min_luminance_value_present_flag
            boxSize += 1; // ccv_max_luminance_value_present_flag
            boxSize += 1; // ccv_avg_luminance_value_present_flag
            boxSize += 2; // ccv_reserved_zero_2bits

            if (ccv_primaries_present_flag)
            {

                for (int c = 0; c < 3; c++)
                {
                    boxSize += 32; // ccv_primaries_x
                    boxSize += 32; // ccv_primaries_y
                }
            }

            if (ccv_min_luminance_value_present_flag)
            {
                boxSize += 32; // ccv_min_luminance_value
            }

            if (ccv_max_luminance_value_present_flag)
            {
                boxSize += 32; // ccv_max_luminance_value
            }

            if (ccv_avg_luminance_value_present_flag)
            {
                boxSize += 32; // ccv_avg_luminance_value
            }
            return boxSize;
        }
    }


    public class ColourInformationBox : Box
    {
        public override string FourCC { get { return "colr"; } }

        protected uint colour_type;
        public uint ColourType { get { return colour_type; } set { colour_type = value; } }

        protected ushort colour_primaries;
        public ushort ColourPrimaries { get { return colour_primaries; } set { colour_primaries = value; } }

        protected ushort transfer_characteristics;
        public ushort TransferCharacteristics { get { return transfer_characteristics; } set { transfer_characteristics = value; } }

        protected ushort matrix_coefficients;
        public ushort MatrixCoefficients { get { return matrix_coefficients; } set { matrix_coefficients = value; } }

        protected bool full_range_flag;
        public bool FullRangeFlag { get { return full_range_flag; } set { full_range_flag = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected ICC_profile ICC_profile;  //  restricted ICC profile
        public ICC_profile ICCProfile { get { return ICC_profile; } set { ICC_profile = value; } }

        protected ICC_profile ICC_profile0;  //  unrestricted ICC profile
        public ICC_profile ICCProfile0 { get { return ICC_profile0; } set { ICC_profile0 = value; } }

        public ColourInformationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.colour_type);

            if (colour_type == IsoReaderWriter.FromFourCC("nclx"))
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.colour_primaries);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.transfer_characteristics);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.matrix_coefficients);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.full_range_flag);
                boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.reserved);
            }

            else if (colour_type == IsoReaderWriter.FromFourCC("rICC"))
            {
                boxSize += IsoReaderWriter.ReadClass(stream, out this.ICC_profile); // restricted ICC profile
            }

            else if (colour_type == IsoReaderWriter.FromFourCC("prof"))
            {
                boxSize += IsoReaderWriter.ReadClass(stream, out this.ICC_profile0); // unrestricted ICC profile
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.colour_type);

            if (colour_type == IsoReaderWriter.FromFourCC("nclx"))
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.colour_primaries);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.transfer_characteristics);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.matrix_coefficients);
                boxSize += IsoReaderWriter.WriteBit(stream, this.full_range_flag);
                boxSize += IsoReaderWriter.WriteBits(stream, 7, this.reserved);
            }

            else if (colour_type == IsoReaderWriter.FromFourCC("rICC"))
            {
                boxSize += IsoReaderWriter.WriteClass(stream, this.ICC_profile); // restricted ICC profile
            }

            else if (colour_type == IsoReaderWriter.FromFourCC("prof"))
            {
                boxSize += IsoReaderWriter.WriteClass(stream, this.ICC_profile0); // unrestricted ICC profile
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // colour_type

            if (colour_type == IsoReaderWriter.FromFourCC("nclx"))
            {
                boxSize += 16; // colour_primaries
                boxSize += 16; // transfer_characteristics
                boxSize += 16; // matrix_coefficients
                boxSize += 1; // full_range_flag
                boxSize += 7; // reserved
            }

            else if (colour_type == IsoReaderWriter.FromFourCC("rICC"))
            {
                boxSize += IsoReaderWriter.CalculateClassSize(ICC_profile); // ICC_profile
            }

            else if (colour_type == IsoReaderWriter.FromFourCC("prof"))
            {
                boxSize += IsoReaderWriter.CalculateClassSize(ICC_profile0); // ICC_profile0
            }
            return boxSize;
        }
    }


    public class ContentLightLevelBox : Box
    {
        public override string FourCC { get { return "clli"; } }

        protected ushort max_content_light_level;
        public ushort MaxContentLightLevel { get { return max_content_light_level; } set { max_content_light_level = value; } }

        protected ushort max_pic_average_light_level;
        public ushort MaxPicAverageLightLevel { get { return max_pic_average_light_level; } set { max_pic_average_light_level = value; } }

        public ContentLightLevelBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.max_content_light_level);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.max_pic_average_light_level);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.max_content_light_level);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.max_pic_average_light_level);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // max_content_light_level
            boxSize += 16; // max_pic_average_light_level
            return boxSize;
        }
    }


    public class MasteringDisplayColourVolumeBox : Box
    {
        public override string FourCC { get { return "mdcv"; } }

        protected ushort display_primaries_x;
        public ushort DisplayPrimariesX { get { return display_primaries_x; } set { display_primaries_x = value; } }

        protected ushort display_primaries_y;
        public ushort DisplayPrimariesY { get { return display_primaries_y; } set { display_primaries_y = value; } }

        protected ushort white_point_x;
        public ushort WhitePointX { get { return white_point_x; } set { white_point_x = value; } }

        protected ushort white_point_y;
        public ushort WhitePointY { get { return white_point_y; } set { white_point_y = value; } }

        protected uint max_display_mastering_luminance;
        public uint MaxDisplayMasteringLuminance { get { return max_display_mastering_luminance; } set { max_display_mastering_luminance = value; } }

        protected uint min_display_mastering_luminance;
        public uint MinDisplayMasteringLuminance { get { return min_display_mastering_luminance; } set { min_display_mastering_luminance = value; } }

        public MasteringDisplayColourVolumeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            for (int c = 0; c < 3; c++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.display_primaries_x);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.display_primaries_y);
            }
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.white_point_x);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.white_point_y);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.max_display_mastering_luminance);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.min_display_mastering_luminance);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            for (int c = 0; c < 3; c++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.display_primaries_x);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.display_primaries_y);
            }
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.white_point_x);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.white_point_y);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.max_display_mastering_luminance);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.min_display_mastering_luminance);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            for (int c = 0; c < 3; c++)
            {
                boxSize += 16; // display_primaries_x
                boxSize += 16; // display_primaries_y
            }
            boxSize += 16; // white_point_x
            boxSize += 16; // white_point_y
            boxSize += 32; // max_display_mastering_luminance
            boxSize += 32; // min_display_mastering_luminance
            return boxSize;
        }
    }


    public class ScrambleSchemeInfoBox : Box
    {
        public override string FourCC { get { return "scrb"; } }

        protected SchemeTypeBox scheme_type_box;
        public SchemeTypeBox SchemeTypeBox { get { return scheme_type_box; } set { scheme_type_box = value; } }

        protected SchemeInformationBox info;  //  optional
        public SchemeInformationBox Info { get { return info; } set { info = value; } }

        public ScrambleSchemeInfoBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.scheme_type_box);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.info); // optional
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.scheme_type_box);
            if (this.info != null) boxSize += IsoReaderWriter.WriteBox(stream, this.info); // optional
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(scheme_type_box); // scheme_type_box
            if (this.info != null) boxSize += IsoReaderWriter.CalculateSize(info); // info
            return boxSize;
        }
    }


    public class ChannelLayout : FullBox
    {
        public override string FourCC { get { return "chnl"; } }

        protected byte stream_structure;
        public byte StreamStructure { get { return stream_structure; } set { stream_structure = value; } }

        protected byte definedLayout;
        public byte DefinedLayout { get { return definedLayout; } set { definedLayout = value; } }

        protected byte speaker_position;
        public byte SpeakerPosition { get { return speaker_position; } set { speaker_position = value; } }

        protected short azimuth;
        public short Azimuth { get { return azimuth; } set { azimuth = value; } }

        protected sbyte elevation;
        public sbyte Elevation { get { return elevation; } set { elevation = value; } }

        protected ulong omittedChannelsMap;  //  a ‘1’ bit indicates ‘not in this track’
        public ulong OmittedChannelsMap { get { return omittedChannelsMap; } set { omittedChannelsMap = value; } }

        protected byte object_count;
        public byte ObjectCount { get { return object_count; } set { object_count = value; } }

        protected byte stream_structure0;
        public byte StreamStructure0 { get { return stream_structure0; } set { stream_structure0 = value; } }

        protected byte format_ordering;
        public byte FormatOrdering { get { return format_ordering; } set { format_ordering = value; } }

        protected byte baseChannelCount;
        public byte BaseChannelCount { get { return baseChannelCount; } set { baseChannelCount = value; } }

        protected byte definedLayout0;
        public byte DefinedLayout0 { get { return definedLayout0; } set { definedLayout0 = value; } }

        protected byte layout_channel_count;
        public byte LayoutChannelCount { get { return layout_channel_count; } set { layout_channel_count = value; } }

        protected byte speaker_position0;
        public byte SpeakerPosition0 { get { return speaker_position0; } set { speaker_position0 = value; } }

        protected short azimuth0;
        public short Azimuth0 { get { return azimuth0; } set { azimuth0 = value; } }

        protected sbyte elevation0;
        public sbyte Elevation0 { get { return elevation0; } set { elevation0 = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected byte channel_order_definition;
        public byte ChannelOrderDefinition { get { return channel_order_definition; } set { channel_order_definition = value; } }

        protected bool omitted_channels_present;
        public bool OmittedChannelsPresent { get { return omitted_channels_present; } set { omitted_channels_present = value; } }

        protected ulong omittedChannelsMap0;  //  a ‘1’ bit indicates ‘not in this track’
        public ulong OmittedChannelsMap0 { get { return omittedChannelsMap0; } set { omittedChannelsMap0 = value; } }

        public ChannelLayout()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.stream_structure);

                if ((stream_structure & 1) == 1)
                {
                    boxSize += IsoReaderWriter.ReadUInt8(stream, out this.definedLayout);

                    if (definedLayout == 0)
                    {

                        for (int i = 1; i <= layout_channel_count; i++)
                        {
                            /*   layout_channel_count comes from the sample entry */
                            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.speaker_position);

                            if (speaker_position == 126)
                            {
                                /*  explicit position */
                                boxSize += IsoReaderWriter.ReadInt16(stream, out this.azimuth);
                                boxSize += IsoReaderWriter.ReadInt8(stream, out this.elevation);
                            }
                        }
                    }

                    else
                    {
                        boxSize += IsoReaderWriter.ReadUInt64(stream, out this.omittedChannelsMap); // a ‘1’ bit indicates ‘not in this track’
                    }
                }

                if ((stream_structure & 2) == 2)
                {
                    boxSize += IsoReaderWriter.ReadUInt8(stream, out this.object_count);
                }
            }

            else
            {
                boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.stream_structure0);
                boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.format_ordering);
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.baseChannelCount);

                if ((stream_structure & 1) == 1)
                {
                    boxSize += IsoReaderWriter.ReadUInt8(stream, out this.definedLayout0);

                    if (definedLayout == 0)
                    {
                        boxSize += IsoReaderWriter.ReadUInt8(stream, out this.layout_channel_count);

                        for (int i = 1; i <= layout_channel_count; i++)
                        {
                            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.speaker_position0);

                            if (speaker_position == 126)
                            {
                                /*  explicit position */
                                boxSize += IsoReaderWriter.ReadInt16(stream, out this.azimuth0);
                                boxSize += IsoReaderWriter.ReadInt8(stream, out this.elevation0);
                            }
                        }
                    }

                    else
                    {
                        boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.reserved);
                        boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.channel_order_definition);
                        boxSize += IsoReaderWriter.ReadBit(stream, out this.omitted_channels_present);

                        if (omitted_channels_present == true)
                        {
                            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.omittedChannelsMap0); // a ‘1’ bit indicates ‘not in this track’
                        }
                    }
                }

                if ((stream_structure & 2) == 2)
                {
                    /*  object_count is derived from baseChannelCount */
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.stream_structure);

                if ((stream_structure & 1) == 1)
                {
                    boxSize += IsoReaderWriter.WriteUInt8(stream, this.definedLayout);

                    if (definedLayout == 0)
                    {

                        for (int i = 1; i <= layout_channel_count; i++)
                        {
                            /*   layout_channel_count comes from the sample entry */
                            boxSize += IsoReaderWriter.WriteUInt8(stream, this.speaker_position);

                            if (speaker_position == 126)
                            {
                                /*  explicit position */
                                boxSize += IsoReaderWriter.WriteInt16(stream, this.azimuth);
                                boxSize += IsoReaderWriter.WriteInt8(stream, this.elevation);
                            }
                        }
                    }

                    else
                    {
                        boxSize += IsoReaderWriter.WriteUInt64(stream, this.omittedChannelsMap); // a ‘1’ bit indicates ‘not in this track’
                    }
                }

                if ((stream_structure & 2) == 2)
                {
                    boxSize += IsoReaderWriter.WriteUInt8(stream, this.object_count);
                }
            }

            else
            {
                boxSize += IsoReaderWriter.WriteBits(stream, 4, this.stream_structure0);
                boxSize += IsoReaderWriter.WriteBits(stream, 4, this.format_ordering);
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.baseChannelCount);

                if ((stream_structure & 1) == 1)
                {
                    boxSize += IsoReaderWriter.WriteUInt8(stream, this.definedLayout0);

                    if (definedLayout == 0)
                    {
                        boxSize += IsoReaderWriter.WriteUInt8(stream, this.layout_channel_count);

                        for (int i = 1; i <= layout_channel_count; i++)
                        {
                            boxSize += IsoReaderWriter.WriteUInt8(stream, this.speaker_position0);

                            if (speaker_position == 126)
                            {
                                /*  explicit position */
                                boxSize += IsoReaderWriter.WriteInt16(stream, this.azimuth0);
                                boxSize += IsoReaderWriter.WriteInt8(stream, this.elevation0);
                            }
                        }
                    }

                    else
                    {
                        boxSize += IsoReaderWriter.WriteBits(stream, 4, this.reserved);
                        boxSize += IsoReaderWriter.WriteBits(stream, 3, this.channel_order_definition);
                        boxSize += IsoReaderWriter.WriteBit(stream, this.omitted_channels_present);

                        if (omitted_channels_present == true)
                        {
                            boxSize += IsoReaderWriter.WriteUInt64(stream, this.omittedChannelsMap0); // a ‘1’ bit indicates ‘not in this track’
                        }
                    }
                }

                if ((stream_structure & 2) == 2)
                {
                    /*  object_count is derived from baseChannelCount */
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 0)
            {
                boxSize += 8; // stream_structure

                if ((stream_structure & 1) == 1)
                {
                    boxSize += 8; // definedLayout

                    if (definedLayout == 0)
                    {

                        for (int i = 1; i <= layout_channel_count; i++)
                        {
                            /*   layout_channel_count comes from the sample entry */
                            boxSize += 8; // speaker_position

                            if (speaker_position == 126)
                            {
                                /*  explicit position */
                                boxSize += 16; // azimuth
                                boxSize += 8; // elevation
                            }
                        }
                    }

                    else
                    {
                        boxSize += 64; // omittedChannelsMap
                    }
                }

                if ((stream_structure & 2) == 2)
                {
                    boxSize += 8; // object_count
                }
            }

            else
            {
                boxSize += 4; // stream_structure0
                boxSize += 4; // format_ordering
                boxSize += 8; // baseChannelCount

                if ((stream_structure & 1) == 1)
                {
                    boxSize += 8; // definedLayout0

                    if (definedLayout == 0)
                    {
                        boxSize += 8; // layout_channel_count

                        for (int i = 1; i <= layout_channel_count; i++)
                        {
                            boxSize += 8; // speaker_position0

                            if (speaker_position == 126)
                            {
                                /*  explicit position */
                                boxSize += 16; // azimuth0
                                boxSize += 8; // elevation0
                            }
                        }
                    }

                    else
                    {
                        boxSize += 4; // reserved
                        boxSize += 3; // channel_order_definition
                        boxSize += 1; // omitted_channels_present

                        if (omitted_channels_present == true)
                        {
                            boxSize += 64; // omittedChannelsMap0
                        }
                    }
                }

                if ((stream_structure & 2) == 2)
                {
                    /*  object_count is derived from baseChannelCount */
                }
            }
            return boxSize;
        }
    }


    public class DownMixInstructions : FullBox
    {
        public override string FourCC { get { return "dmix"; } }

        protected bool reserved = false;
        public bool Reserved { get { return reserved; } set { reserved = value; } }

        protected byte downmix_instructions_count;
        public byte DownmixInstructionsCount { get { return downmix_instructions_count; } set { downmix_instructions_count = value; } }

        protected int downmix_instructions_count0 = 1;
        public int DownmixInstructionsCount0 { get { return downmix_instructions_count0; } set { downmix_instructions_count0 = value; } }

        protected byte targetLayout;
        public byte TargetLayout { get { return targetLayout; } set { targetLayout = value; } }

        protected bool reserved0 = false;
        public bool Reserved0 { get { return reserved0; } set { reserved0 = value; } }

        protected byte targetChannelCount;
        public byte TargetChannelCount { get { return targetChannelCount; } set { targetChannelCount = value; } }

        protected bool in_stream;
        public bool InStream { get { return in_stream; } set { in_stream = value; } }

        protected byte downmix_ID;
        public byte DownmixID { get { return downmix_ID; } set { downmix_ID = value; } }

        protected byte bs_downmix_offset;
        public byte BsDownmixOffset { get { return bs_downmix_offset; } set { bs_downmix_offset = value; } }

        protected byte bs_downmix_coefficient_v1;
        public byte BsDownmixCoefficientV1 { get { return bs_downmix_coefficient_v1; } set { bs_downmix_coefficient_v1 = value; } }

        protected byte[] reserved00 = [];  //  byte align
        public byte[] Reserved00 { get { return reserved00; } set { reserved00 = value; } }

        protected byte bs_downmix_coefficient;
        public byte BsDownmixCoefficient { get { return bs_downmix_coefficient; } set { bs_downmix_coefficient = value; } }

        public DownMixInstructions()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            int baseChannelCount = 0; // TODO: get somewhere

            if (version >= 1)
            {
                boxSize += IsoReaderWriter.ReadBit(stream, out this.reserved);
                boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.downmix_instructions_count);
            }

            else
            {
                boxSize += IsoReaderWriter.ReadInt32(stream, out this.downmix_instructions_count0);
            }

            for (int a = 1; a <= downmix_instructions_count; a++)
            {
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.targetLayout);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.reserved0);
                boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.targetChannelCount);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.in_stream);
                boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.downmix_ID);

                if (in_stream == false)
                {
                    /*  downmix coefficients are out of stream and supplied here */


                    if (version >= 1)
                    {
                        boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.bs_downmix_offset);
                        int size = 4;

                        for (int i = 1; i <= targetChannelCount; i++)
                        {

                            for (int j = 1; j <= baseChannelCount; j++)
                            {
                                boxSize += IsoReaderWriter.ReadBits(stream, 5, out this.bs_downmix_coefficient_v1);
                                size += 5;
                            }
                        }
                        boxSize += IsoReaderWriter.ReadBytes(stream, (ulong)(Math.Ceiling(size / 8d) - size), out this.reserved00); // byte align
                    }

                    else
                    {

                        for (int i = 1; i <= targetChannelCount; i++)
                        {

                            for (int j = 1; j <= baseChannelCount; j++)
                            {
                                boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.bs_downmix_coefficient);
                            }
                        }
                    }
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            int baseChannelCount = 0; // TODO: get somewhere

            if (version >= 1)
            {
                boxSize += IsoReaderWriter.WriteBit(stream, this.reserved);
                boxSize += IsoReaderWriter.WriteBits(stream, 7, this.downmix_instructions_count);
            }

            else
            {
                boxSize += IsoReaderWriter.WriteInt32(stream, this.downmix_instructions_count0);
            }

            for (int a = 1; a <= downmix_instructions_count; a++)
            {
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.targetLayout);
                boxSize += IsoReaderWriter.WriteBit(stream, this.reserved0);
                boxSize += IsoReaderWriter.WriteBits(stream, 7, this.targetChannelCount);
                boxSize += IsoReaderWriter.WriteBit(stream, this.in_stream);
                boxSize += IsoReaderWriter.WriteBits(stream, 7, this.downmix_ID);

                if (in_stream == false)
                {
                    /*  downmix coefficients are out of stream and supplied here */


                    if (version >= 1)
                    {
                        boxSize += IsoReaderWriter.WriteBits(stream, 4, this.bs_downmix_offset);
                        int size = 4;

                        for (int i = 1; i <= targetChannelCount; i++)
                        {

                            for (int j = 1; j <= baseChannelCount; j++)
                            {
                                boxSize += IsoReaderWriter.WriteBits(stream, 5, this.bs_downmix_coefficient_v1);
                                size += 5;
                            }
                        }
                        boxSize += IsoReaderWriter.WriteBytes(stream, (ulong)(Math.Ceiling(size / 8d) - size), this.reserved00); // byte align
                    }

                    else
                    {

                        for (int i = 1; i <= targetChannelCount; i++)
                        {

                            for (int j = 1; j <= baseChannelCount; j++)
                            {
                                boxSize += IsoReaderWriter.WriteBits(stream, 4, this.bs_downmix_coefficient);
                            }
                        }
                    }
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            int baseChannelCount = 0; // TODO: get somewhere

            if (version >= 1)
            {
                boxSize += 1; // reserved
                boxSize += 7; // downmix_instructions_count
            }

            else
            {
                boxSize += 32; // downmix_instructions_count0
            }

            for (int a = 1; a <= downmix_instructions_count; a++)
            {
                boxSize += 8; // targetLayout
                boxSize += 1; // reserved0
                boxSize += 7; // targetChannelCount
                boxSize += 1; // in_stream
                boxSize += 7; // downmix_ID

                if (in_stream == false)
                {
                    /*  downmix coefficients are out of stream and supplied here */


                    if (version >= 1)
                    {
                        boxSize += 4; // bs_downmix_offset
                        int size = 4;

                        for (int i = 1; i <= targetChannelCount; i++)
                        {

                            for (int j = 1; j <= baseChannelCount; j++)
                            {
                                boxSize += 5; // bs_downmix_coefficient_v1
                                size += 5;
                            }
                        }
                        boxSize += (ulong)(Math.Ceiling(size / 8d) - size) * 8; // reserved00
                    }

                    else
                    {

                        for (int i = 1; i <= targetChannelCount; i++)
                        {

                            for (int j = 1; j <= baseChannelCount; j++)
                            {
                                boxSize += 4; // bs_downmix_coefficient
                            }
                        }
                    }
                }
            }
            return boxSize;
        }
    }


    public class SamplingRateBox : FullBox
    {
        public override string FourCC { get { return "srat"; } }

        protected uint sampling_rate;
        public uint SamplingRate { get { return sampling_rate; } set { sampling_rate = value; } }

        public SamplingRateBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sampling_rate);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.sampling_rate);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // sampling_rate
            return boxSize;
        }
    }


    public class TextConfigBox : FullBox
    {
        public override string FourCC { get { return "txtC"; } }

        protected string text_config;
        public string TextConfig { get { return text_config; } set { text_config = value; } }

        public TextConfigBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadString(stream, out this.text_config);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteString(stream, this.text_config);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)text_config.Length * 8; // text_config
            return boxSize;
        }
    }


    public class URIInitBox : FullBox
    {
        public override string FourCC { get { return "uriI"; } }

        protected byte[] uri_initialization_data;
        public byte[] UriInitializationData { get { return uri_initialization_data; } set { uri_initialization_data = value; } }

        public URIInitBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8Array(stream, out this.uri_initialization_data);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8Array(stream, this.uri_initialization_data);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)uri_initialization_data.Length * 8; // uri_initialization_data
            return boxSize;
        }
    }


    public class CopyrightBox : FullBox
    {
        public override string FourCC { get { return "cprt"; } }

        protected bool pad = false;
        public bool Pad { get { return pad; } set { pad = value; } }

        protected byte[] language;  //  ISO-639-2/T language code
        public byte[] Language { get { return language; } set { language = value; } }

        protected string notice;
        public string Notice { get { return notice; } set { notice = value; } }

        public CopyrightBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.pad);
            boxSize += IsoReaderWriter.ReadBitsArray(stream, 5, 3, out this.language); // ISO-639-2/T language code
            boxSize += IsoReaderWriter.ReadString(stream, out this.notice);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBit(stream, this.pad);
            boxSize += IsoReaderWriter.WriteBitsArray(stream, 5, 3, this.language); // ISO-639-2/T language code
            boxSize += IsoReaderWriter.WriteString(stream, this.notice);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // pad
            boxSize += 3 * 5; // language
            boxSize += (ulong)notice.Length * 8; // notice
            return boxSize;
        }
    }


    public class KindBox : FullBox
    {
        public override string FourCC { get { return "kind"; } }

        protected string schemeURI;
        public string SchemeURI { get { return schemeURI; } set { schemeURI = value; } }

        protected string value;
        public string Value { get { return value; } set { value = value; } }

        public KindBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadString(stream, out this.schemeURI);
            boxSize += IsoReaderWriter.ReadString(stream, out this.value);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteString(stream, this.schemeURI);
            boxSize += IsoReaderWriter.WriteString(stream, this.value);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)schemeURI.Length * 8; // schemeURI
            boxSize += (ulong)value.Length * 8; // value
            return boxSize;
        }
    }


    public class TrackSelectionBox : FullBox
    {
        public override string FourCC { get { return "tsel"; } }

        protected int switch_group = 0;
        public int SwitchGroup { get { return switch_group; } set { switch_group = value; } }

        protected uint[] attribute_list;  //  to end of the box
        public uint[] AttributeList { get { return attribute_list; } set { attribute_list = value; } }

        public TrackSelectionBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt32(stream, out this.switch_group);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.attribute_list); // to end of the box
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt32(stream, this.switch_group);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.attribute_list); // to end of the box
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // switch_group
            boxSize += 32; // attribute_list
            return boxSize;
        }
    }


    public class SubTrackBox : Box
    {
        public override string FourCC { get { return "strk"; } }

        public SubTrackBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class trackhintinformation : Box
    {
        public override string FourCC { get { return "hnti"; } }

        public trackhintinformation()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class rtptracksdphintinformation : Box
    {
        public override string FourCC { get { return "hnti"; } }

        protected sbyte[] sdptext;
        public sbyte[] Sdptext { get { return sdptext; } set { sdptext = value; } }

        public rtptracksdphintinformation()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt8Array(stream, out this.sdptext);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt8Array(stream, this.sdptext);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)sdptext.Length * 8; // sdptext
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class trackhintinformation1 : Box
    {
        public override string FourCC { get { return "sdp "; } }

        public trackhintinformation1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class rtptracksdphintinformation1 : Box
    {
        public override string FourCC { get { return "sdp "; } }

        protected sbyte[] sdptext;
        public sbyte[] Sdptext { get { return sdptext; } set { sdptext = value; } }

        public rtptracksdphintinformation1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt8Array(stream, out this.sdptext);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt8Array(stream, this.sdptext);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)sdptext.Length * 8; // sdptext
            return boxSize;
        }
    }


    public class moviehintinformation : Box
    {
        public override string FourCC { get { return "rtp "; } }

        public moviehintinformation()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class rtpmoviehintinformation : Box
    {
        public override string FourCC { get { return "rtp "; } }

        protected uint descriptionformat = IsoReaderWriter.FromFourCC("sdp ");
        public uint Descriptionformat { get { return descriptionformat; } set { descriptionformat = value; } }

        protected sbyte[] sdptext;
        public sbyte[] Sdptext { get { return sdptext; } set { sdptext = value; } }

        public rtpmoviehintinformation()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.descriptionformat);
            boxSize += IsoReaderWriter.ReadInt8Array(stream, out this.sdptext);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.descriptionformat);
            boxSize += IsoReaderWriter.WriteInt8Array(stream, this.sdptext);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // descriptionformat
            boxSize += (ulong)sdptext.Length * 8; // sdptext
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class hintstatisticsbox : Box
    {
        public override string FourCC { get { return "hinf"; } }

        public hintstatisticsbox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class LoudnessBox : Box
    {
        public override string FourCC { get { return "ludt"; } }

        protected TrackLoudnessInfo[] loudness;  //  not more than one AlbumLoudnessInfo box with version>=1 is allowed
        public TrackLoudnessInfo[] Loudness { get { return loudness; } set { loudness = value; } }

        protected AlbumLoudnessInfo[] albumLoudness;
        public AlbumLoudnessInfo[] AlbumLoudness { get { return albumLoudness; } set { albumLoudness = value; } }

        public LoudnessBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            /*  not more than one TrackLoudnessInfo box with version>=1 is allowed */
            boxSize += IsoReaderWriter.ReadBox(stream, out this.loudness); // not more than one AlbumLoudnessInfo box with version>=1 is allowed
            boxSize += IsoReaderWriter.ReadBox(stream, out this.albumLoudness);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            /*  not more than one TrackLoudnessInfo box with version>=1 is allowed */
            boxSize += IsoReaderWriter.WriteBox(stream, this.loudness); // not more than one AlbumLoudnessInfo box with version>=1 is allowed
            boxSize += IsoReaderWriter.WriteBox(stream, this.albumLoudness);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            /*  not more than one TrackLoudnessInfo box with version>=1 is allowed */
            boxSize += IsoReaderWriter.CalculateSize(loudness); // loudness
            boxSize += IsoReaderWriter.CalculateSize(albumLoudness); // albumLoudness
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class TrackLoudnessInfo1 : LoudnessBaseBox
    {
        public override string FourCC { get { return "tlou"; } }

        public TrackLoudnessInfo1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class AlbumLoudnessInfo1 : LoudnessBaseBox
    {
        public override string FourCC { get { return "alou"; } }

        public AlbumLoudnessInfo1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class DataEntryUrlBox : DataEntryBaseBox
    {
        public override string FourCC { get { return "url "; } }

        protected string location;
        public string Location { get { return location; } set { location = value; } }

        public DataEntryUrlBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadString(stream, out this.location);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteString(stream, this.location);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)location.Length * 8; // location
            return boxSize;
        }
    }


    public class DataEntryUrnBox : DataEntryBaseBox
    {
        public override string FourCC { get { return "urn "; } }

        protected string name;
        public string Name { get { return name; } set { name = value; } }

        protected string location;
        public string Location { get { return location; } set { location = value; } }

        public DataEntryUrnBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadString(stream, out this.name);
            boxSize += IsoReaderWriter.ReadString(stream, out this.location);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteString(stream, this.name);
            boxSize += IsoReaderWriter.WriteString(stream, this.location);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)name.Length * 8; // name
            boxSize += (ulong)location.Length * 8; // location
            return boxSize;
        }
    }


    public class DataEntryImdaBox : DataEntryBaseBox
    {
        public override string FourCC { get { return "imdt"; } }

        protected uint imda_ref_identifier;
        public uint ImdaRefIdentifier { get { return imda_ref_identifier; } set { imda_ref_identifier = value; } }

        public DataEntryImdaBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.imda_ref_identifier);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.imda_ref_identifier);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // imda_ref_identifier
            return boxSize;
        }
    }


    public class DataEntrySeqNumImdaBox : DataEntryBaseBox
    {
        public override string FourCC { get { return "snim"; } }

        public DataEntrySeqNumImdaBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class ItemPropertyContainerBox : Box
    {
        public override string FourCC { get { return "ipco"; } }

        protected Box[] properties;  //  boxes derived from
        public Box[] Properties { get { return properties; } set { properties = value; } }

        public ItemPropertyContainerBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.properties); // boxes derived from
            /*  ItemProperty or ItemFullProperty, or FreeSpaceBox(es) */
            /*  to fill the box */
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.properties); // boxes derived from
            /*  ItemProperty or ItemFullProperty, or FreeSpaceBox(es) */
            /*  to fill the box */
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(properties); // properties
            /*  ItemProperty or ItemFullProperty, or FreeSpaceBox(es) */
            /*  to fill the box */
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class ItemPropertyAssociationBox : FullBox
    {
        public override string FourCC { get { return "ipma"; } }

        protected uint entry_count;
        public uint EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected ushort item_ID;
        public ushort ItemID { get { return item_ID; } set { item_ID = value; } }

        protected uint item_ID0;
        public uint ItemID0 { get { return item_ID0; } set { item_ID0 = value; } }

        protected byte association_count;
        public byte AssociationCount { get { return association_count; } set { association_count = value; } }

        protected bool essential;
        public bool Essential { get { return essential; } set { essential = value; } }

        protected ushort property_index;
        public ushort PropertyIndex { get { return property_index; } set { property_index = value; } }

        protected byte property_index0;
        public byte PropertyIndex0 { get { return property_index0; } set { property_index0 = value; } }

        public ItemPropertyAssociationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count);

            for (int i = 0; i < entry_count; i++)
            {

                if (version < 1)
                {
                    boxSize += IsoReaderWriter.ReadUInt16(stream, out this.item_ID);
                }

                else
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.item_ID0);
                }
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.association_count);

                for (int j = 0; j < association_count; j++)
                {
                    boxSize += IsoReaderWriter.ReadBit(stream, out this.essential);

                    if ((flags & 1) == 1)
                    {
                        boxSize += IsoReaderWriter.ReadBits(stream, 15, out this.property_index);
                    }

                    else
                    {
                        boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.property_index0);
                    }
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count);

            for (int i = 0; i < entry_count; i++)
            {

                if (version < 1)
                {
                    boxSize += IsoReaderWriter.WriteUInt16(stream, this.item_ID);
                }

                else
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.item_ID0);
                }
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.association_count);

                for (int j = 0; j < association_count; j++)
                {
                    boxSize += IsoReaderWriter.WriteBit(stream, this.essential);

                    if ((flags & 1) == 1)
                    {
                        boxSize += IsoReaderWriter.WriteBits(stream, 15, this.property_index);
                    }

                    else
                    {
                        boxSize += IsoReaderWriter.WriteBits(stream, 7, this.property_index0);
                    }
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count

            for (int i = 0; i < entry_count; i++)
            {

                if (version < 1)
                {
                    boxSize += 16; // item_ID
                }

                else
                {
                    boxSize += 32; // item_ID0
                }
                boxSize += 8; // association_count

                for (int j = 0; j < association_count; j++)
                {
                    boxSize += 1; // essential

                    if ((flags & 1) == 1)
                    {
                        boxSize += 15; // property_index
                    }

                    else
                    {
                        boxSize += 7; // property_index0
                    }
                }
            }
            return boxSize;
        }
    }


    public class ItemPropertiesBox : Box
    {
        public override string FourCC { get { return "iprp"; } }

        protected ItemPropertyContainerBox property_container;
        public ItemPropertyContainerBox PropertyContainer { get { return property_container; } set { property_container = value; } }

        protected ItemPropertyAssociationBox[] association;
        public ItemPropertyAssociationBox[] Association { get { return association; } set { association = value; } }

        public ItemPropertiesBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.property_container);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.association);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.property_container);
            boxSize += IsoReaderWriter.WriteBox(stream, this.association);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(property_container); // property_container
            boxSize += IsoReaderWriter.CalculateSize(association); // association
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class AlternativeStartupSequencePropertiesBox : FullBox
    {
        public override string FourCC { get { return "assp"; } }

        protected int min_initial_alt_startup_offset;
        public int MinInitialAltStartupOffset { get { return min_initial_alt_startup_offset; } set { min_initial_alt_startup_offset = value; } }

        protected uint num_entries;
        public uint NumEntries { get { return num_entries; } set { num_entries = value; } }

        protected uint grouping_type_parameter;
        public uint GroupingTypeParameter { get { return grouping_type_parameter; } set { grouping_type_parameter = value; } }

        protected int min_initial_alt_startup_offset0;
        public int MinInitialAltStartupOffset0 { get { return min_initial_alt_startup_offset0; } set { min_initial_alt_startup_offset0 = value; } }

        public AlternativeStartupSequencePropertiesBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.ReadInt32(stream, out this.min_initial_alt_startup_offset);
            }

            else if (version == 1)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entries);

                for (int j = 1; j <= num_entries; j++)
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.grouping_type_parameter);
                    boxSize += IsoReaderWriter.ReadInt32(stream, out this.min_initial_alt_startup_offset0);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.WriteInt32(stream, this.min_initial_alt_startup_offset);
            }

            else if (version == 1)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entries);

                for (int j = 1; j <= num_entries; j++)
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.grouping_type_parameter);
                    boxSize += IsoReaderWriter.WriteInt32(stream, this.min_initial_alt_startup_offset0);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 0)
            {
                boxSize += 32; // min_initial_alt_startup_offset
            }

            else if (version == 1)
            {
                boxSize += 32; // num_entries

                for (int j = 1; j <= num_entries; j++)
                {
                    boxSize += 32; // grouping_type_parameter
                    boxSize += 32; // min_initial_alt_startup_offset0
                }
            }
            return boxSize;
        }
    }


    public class BinaryXMLBox : FullBox
    {
        public override string FourCC { get { return "bxml"; } }

        protected byte[] data;  //  to end of box
        public byte[] Data { get { return data; } set { data = value; } }

        public BinaryXMLBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8Array(stream, out this.data); // to end of box
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8Array(stream, this.data); // to end of box
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)data.Length * 8; // data
            return boxSize;
        }
    }


    public class CompleteTrackInfoBox : Box
    {
        public override string FourCC { get { return "cinf"; } }

        protected OriginalFormatBox original_format;
        public OriginalFormatBox OriginalFormat { get { return original_format; } set { original_format = value; } }

        public CompleteTrackInfoBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.original_format);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.original_format);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(original_format); // original_format
            return boxSize;
        }
    }


    public class ChunkLargeOffsetBox : FullBox
    {
        public override string FourCC { get { return "co64"; } }

        protected uint entry_count;
        public uint EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected ulong chunk_offset;
        public ulong ChunkOffset { get { return chunk_offset; } set { chunk_offset = value; } }

        public ChunkLargeOffsetBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt64(stream, out this.chunk_offset);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt64(stream, this.chunk_offset);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += 64; // chunk_offset
            }
            return boxSize;
        }
    }


    public class CompactSampleToGroupBox : FullBox
    {
        public override string FourCC { get { return "csgp"; } }

        protected uint grouping_type;
        public uint GroupingType { get { return grouping_type; } set { grouping_type = value; } }

        protected uint grouping_type_parameter;
        public uint GroupingTypeParameter { get { return grouping_type_parameter; } set { grouping_type_parameter = value; } }

        protected uint pattern_count;
        public uint PatternCount { get { return pattern_count; } set { pattern_count = value; } }

        protected byte[] pattern_length;
        public byte[] PatternLength { get { return pattern_length; } set { pattern_length = value; } }

        protected byte[] sample_count;
        public byte[] SampleCount { get { return sample_count; } set { sample_count = value; } }

        protected byte[][] sample_group_description_index;  //  whose msb might indicate fragment_local or global
        public byte[][] SampleGroupDescriptionIndex { get { return sample_group_description_index; } set { sample_group_description_index = value; } }

        public CompactSampleToGroupBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            bool grouping_type_parameter_present = (flags & (1 << 6)) == (1 << 6);
            uint count_size_code = (flags >> 2) & 0x3;
            uint pattern_size_code = (flags >> 4) & 0x3;
            uint index_size_code = flags & 0x3;

            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.grouping_type);

            if (grouping_type_parameter_present == true)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.grouping_type_parameter);
            }
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.pattern_count);
            uint totalPatternLength = 0;

            for (int i = 1; i <= pattern_count; i++)
            {
                boxSize += IsoReaderWriter.ReadBits(stream, pattern_size_code, out this.pattern_length[i]);
                boxSize += IsoReaderWriter.ReadBits(stream, count_size_code, out this.sample_count[i]);
            }

            for (int j = 1; j <= pattern_count; j++)
            {

                for (int k = 1; k <= pattern_length[j]; k++)
                {
                    boxSize += IsoReaderWriter.ReadBits(stream, index_size_code, out this.sample_group_description_index[j][k]); // whose msb might indicate fragment_local or global
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            bool grouping_type_parameter_present = (flags & (1 << 6)) == (1 << 6);
            uint count_size_code = (flags >> 2) & 0x3;
            uint pattern_size_code = (flags >> 4) & 0x3;
            uint index_size_code = flags & 0x3;

            boxSize += IsoReaderWriter.WriteUInt32(stream, this.grouping_type);

            if (grouping_type_parameter_present == true)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.grouping_type_parameter);
            }
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.pattern_count);
            uint totalPatternLength = 0;

            for (int i = 1; i <= pattern_count; i++)
            {
                boxSize += IsoReaderWriter.WriteBits(stream, pattern_size_code, this.pattern_length[i]);
                boxSize += IsoReaderWriter.WriteBits(stream, count_size_code, this.sample_count[i]);
            }

            for (int j = 1; j <= pattern_count; j++)
            {

                for (int k = 1; k <= pattern_length[j]; k++)
                {
                    boxSize += IsoReaderWriter.WriteBits(stream, index_size_code, this.sample_group_description_index[j][k]); // whose msb might indicate fragment_local or global
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            bool grouping_type_parameter_present = (flags & (1 << 6)) == (1 << 6);
            uint count_size_code = (flags >> 2) & 0x3;
            uint pattern_size_code = (flags >> 4) & 0x3;
            uint index_size_code = flags & 0x3;

            boxSize += 32; // grouping_type

            if (grouping_type_parameter_present == true)
            {
                boxSize += 32; // grouping_type_parameter
            }
            boxSize += 32; // pattern_count
            uint totalPatternLength = 0;

            for (int i = 1; i <= pattern_count; i++)
            {
                boxSize += (ulong)pattern_size_code; // pattern_length
                boxSize += (ulong)count_size_code; // sample_count
            }

            for (int j = 1; j <= pattern_count; j++)
            {

                for (int k = 1; k <= pattern_length[j]; k++)
                {
                    boxSize += (ulong)index_size_code; // sample_group_description_index
                }
            }
            return boxSize;
        }
    }


    public class CompositionToDecodeBox : FullBox
    {
        public override string FourCC { get { return "cslg"; } }

        protected int compositionToDTSShift;
        public int CompositionToDTSShift { get { return compositionToDTSShift; } set { compositionToDTSShift = value; } }

        protected int leastDecodeToDisplayDelta;
        public int LeastDecodeToDisplayDelta { get { return leastDecodeToDisplayDelta; } set { leastDecodeToDisplayDelta = value; } }

        protected int greatestDecodeToDisplayDelta;
        public int GreatestDecodeToDisplayDelta { get { return greatestDecodeToDisplayDelta; } set { greatestDecodeToDisplayDelta = value; } }

        protected int compositionStartTime;
        public int CompositionStartTime { get { return compositionStartTime; } set { compositionStartTime = value; } }

        protected int compositionEndTime;
        public int CompositionEndTime { get { return compositionEndTime; } set { compositionEndTime = value; } }

        protected long compositionToDTSShift0;
        public long CompositionToDTSShift0 { get { return compositionToDTSShift0; } set { compositionToDTSShift0 = value; } }

        protected long leastDecodeToDisplayDelta0;
        public long LeastDecodeToDisplayDelta0 { get { return leastDecodeToDisplayDelta0; } set { leastDecodeToDisplayDelta0 = value; } }

        protected long greatestDecodeToDisplayDelta0;
        public long GreatestDecodeToDisplayDelta0 { get { return greatestDecodeToDisplayDelta0; } set { greatestDecodeToDisplayDelta0 = value; } }

        protected long compositionStartTime0;
        public long CompositionStartTime0 { get { return compositionStartTime0; } set { compositionStartTime0 = value; } }

        protected long compositionEndTime0;
        public long CompositionEndTime0 { get { return compositionEndTime0; } set { compositionEndTime0 = value; } }

        public CompositionToDecodeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.ReadInt32(stream, out this.compositionToDTSShift);
                boxSize += IsoReaderWriter.ReadInt32(stream, out this.leastDecodeToDisplayDelta);
                boxSize += IsoReaderWriter.ReadInt32(stream, out this.greatestDecodeToDisplayDelta);
                boxSize += IsoReaderWriter.ReadInt32(stream, out this.compositionStartTime);
                boxSize += IsoReaderWriter.ReadInt32(stream, out this.compositionEndTime);
            }

            else
            {
                boxSize += IsoReaderWriter.ReadInt64(stream, out this.compositionToDTSShift0);
                boxSize += IsoReaderWriter.ReadInt64(stream, out this.leastDecodeToDisplayDelta0);
                boxSize += IsoReaderWriter.ReadInt64(stream, out this.greatestDecodeToDisplayDelta0);
                boxSize += IsoReaderWriter.ReadInt64(stream, out this.compositionStartTime0);
                boxSize += IsoReaderWriter.ReadInt64(stream, out this.compositionEndTime0);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.WriteInt32(stream, this.compositionToDTSShift);
                boxSize += IsoReaderWriter.WriteInt32(stream, this.leastDecodeToDisplayDelta);
                boxSize += IsoReaderWriter.WriteInt32(stream, this.greatestDecodeToDisplayDelta);
                boxSize += IsoReaderWriter.WriteInt32(stream, this.compositionStartTime);
                boxSize += IsoReaderWriter.WriteInt32(stream, this.compositionEndTime);
            }

            else
            {
                boxSize += IsoReaderWriter.WriteInt64(stream, this.compositionToDTSShift0);
                boxSize += IsoReaderWriter.WriteInt64(stream, this.leastDecodeToDisplayDelta0);
                boxSize += IsoReaderWriter.WriteInt64(stream, this.greatestDecodeToDisplayDelta0);
                boxSize += IsoReaderWriter.WriteInt64(stream, this.compositionStartTime0);
                boxSize += IsoReaderWriter.WriteInt64(stream, this.compositionEndTime0);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 0)
            {
                boxSize += 32; // compositionToDTSShift
                boxSize += 32; // leastDecodeToDisplayDelta
                boxSize += 32; // greatestDecodeToDisplayDelta
                boxSize += 32; // compositionStartTime
                boxSize += 32; // compositionEndTime
            }

            else
            {
                boxSize += 64; // compositionToDTSShift0
                boxSize += 64; // leastDecodeToDisplayDelta0
                boxSize += 64; // greatestDecodeToDisplayDelta0
                boxSize += 64; // compositionStartTime0
                boxSize += 64; // compositionEndTime0
            }
            return boxSize;
        }
    }


    public class CompositionOffsetBox : FullBox
    {
        public override string FourCC { get { return "ctts"; } }

        protected uint entry_count;
        public uint EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected uint sample_count;
        public uint SampleCount { get { return sample_count; } set { sample_count = value; } }

        protected uint sample_offset;
        public uint SampleOffset { get { return sample_offset; } set { sample_offset = value; } }

        protected uint sample_count0;
        public uint SampleCount0 { get { return sample_count0; } set { sample_count0 = value; } }

        protected int sample_offset0;
        public int SampleOffset0 { get { return sample_offset0; } set { sample_offset0 = value; } }

        public CompositionOffsetBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count);


            if (version == 0)
            {

                for (int i = 0; i < entry_count; i++)
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_count);
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_offset);
                }
            }

            else if (version == 1)
            {

                for (int i = 0; i < entry_count; i++)
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_count0);
                    boxSize += IsoReaderWriter.ReadInt32(stream, out this.sample_offset0);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count);


            if (version == 0)
            {

                for (int i = 0; i < entry_count; i++)
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_count);
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_offset);
                }
            }

            else if (version == 1)
            {

                for (int i = 0; i < entry_count; i++)
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_count0);
                    boxSize += IsoReaderWriter.WriteInt32(stream, this.sample_offset0);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count


            if (version == 0)
            {

                for (int i = 0; i < entry_count; i++)
                {
                    boxSize += 32; // sample_count
                    boxSize += 32; // sample_offset
                }
            }

            else if (version == 1)
            {

                for (int i = 0; i < entry_count; i++)
                {
                    boxSize += 32; // sample_count0
                    boxSize += 32; // sample_offset0
                }
            }
            return boxSize;
        }
    }


    public class DataInformationBox : Box
    {
        public override string FourCC { get { return "dinf"; } }

        public DataInformationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class DataReferenceBox : FullBox
    {
        public override string FourCC { get { return "dref"; } }

        protected uint entry_count;
        public uint EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected DataEntryBaseBox data_entry;
        public DataEntryBaseBox DataEntry { get { return data_entry; } set { data_entry = value; } }

        public DataReferenceBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.ReadBox(stream, out this.data_entry);
            }
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.WriteBox(stream, this.data_entry);
            }
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.CalculateSize(data_entry); // data_entry
            }
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class EditBox : Box
    {
        public override string FourCC { get { return "edts"; } }

        public EditBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class EditListBox : FullBox
    {
        public override string FourCC { get { return "elst"; } }

        protected uint entry_count;
        public uint EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected ulong edit_duration;
        public ulong EditDuration { get { return edit_duration; } set { edit_duration = value; } }

        protected long media_time;
        public long MediaTime { get { return media_time; } set { media_time = value; } }

        protected uint edit_duration0;
        public uint EditDuration0 { get { return edit_duration0; } set { edit_duration0 = value; } }

        protected int media_time0;
        public int MediaTime0 { get { return media_time0; } set { media_time0 = value; } }

        protected short media_rate_integer;
        public short MediaRateInteger { get { return media_rate_integer; } set { media_rate_integer = value; } }

        protected short media_rate_fraction;
        public short MediaRateFraction { get { return media_rate_fraction; } set { media_rate_fraction = value; } }

        public EditListBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {

                if (version == 1)
                {
                    boxSize += IsoReaderWriter.ReadUInt64(stream, out this.edit_duration);
                    boxSize += IsoReaderWriter.ReadInt64(stream, out this.media_time);
                }

                else
                {
                    /*  version==0 */
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.edit_duration0);
                    boxSize += IsoReaderWriter.ReadInt32(stream, out this.media_time0);
                }
                boxSize += IsoReaderWriter.ReadInt16(stream, out this.media_rate_integer);
                boxSize += IsoReaderWriter.ReadInt16(stream, out this.media_rate_fraction);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {

                if (version == 1)
                {
                    boxSize += IsoReaderWriter.WriteUInt64(stream, this.edit_duration);
                    boxSize += IsoReaderWriter.WriteInt64(stream, this.media_time);
                }

                else
                {
                    /*  version==0 */
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.edit_duration0);
                    boxSize += IsoReaderWriter.WriteInt32(stream, this.media_time0);
                }
                boxSize += IsoReaderWriter.WriteInt16(stream, this.media_rate_integer);
                boxSize += IsoReaderWriter.WriteInt16(stream, this.media_rate_fraction);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {

                if (version == 1)
                {
                    boxSize += 64; // edit_duration
                    boxSize += 64; // media_time
                }

                else
                {
                    /*  version==0 */
                    boxSize += 32; // edit_duration0
                    boxSize += 32; // media_time0
                }
                boxSize += 16; // media_rate_integer
                boxSize += 16; // media_rate_fraction
            }
            return boxSize;
        }
    }


    public class ExtendedTypeBox : Box
    {
        public override string FourCC { get { return "etyp"; } }

        protected TypeCombinationBox[] compatible_combinations;  //  to end of the box
        public TypeCombinationBox[] CompatibleCombinations { get { return compatible_combinations; } set { compatible_combinations = value; } }

        public ExtendedTypeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.compatible_combinations); // to end of the box
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.compatible_combinations); // to end of the box
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(compatible_combinations); // compatible_combinations
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class FDItemInfoExtension : ItemInfoExtension
    {
        public override string FourCC { get { return "fdel"; } }

        protected string content_location;
        public string ContentLocation { get { return content_location; } set { content_location = value; } }

        protected string content_MD5;
        public string ContentMD5 { get { return content_MD5; } set { content_MD5 = value; } }

        protected ulong content_length;
        public ulong ContentLength { get { return content_length; } set { content_length = value; } }

        protected ulong transfer_length;
        public ulong TransferLength { get { return transfer_length; } set { transfer_length = value; } }

        protected byte entry_count;
        public byte EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected uint group_id;
        public uint GroupId { get { return group_id; } set { group_id = value; } }

        public FDItemInfoExtension()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadString(stream, out this.content_location);
            boxSize += IsoReaderWriter.ReadString(stream, out this.content_MD5);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.content_length);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.transfer_length);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_id);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteString(stream, this.content_location);
            boxSize += IsoReaderWriter.WriteString(stream, this.content_MD5);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.content_length);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.transfer_length);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_id);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)content_location.Length * 8; // content_location
            boxSize += (ulong)content_MD5.Length * 8; // content_MD5
            boxSize += 64; // content_length
            boxSize += 64; // transfer_length
            boxSize += 8; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += 32; // group_id
            }
            return boxSize;
        }
    }


    public class FECReservoirBox : FullBox
    {
        public override string FourCC { get { return "fecr"; } }

        protected ushort entry_count;
        public ushort EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected uint entry_count0;
        public uint EntryCount0 { get { return entry_count0; } set { entry_count0 = value; } }

        protected ushort item_ID;
        public ushort ItemID { get { return item_ID; } set { item_ID = value; } }

        protected uint item_ID0;
        public uint ItemID0 { get { return item_ID0; } set { item_ID0 = value; } }

        protected uint symbol_count;
        public uint SymbolCount { get { return symbol_count; } set { symbol_count = value; } }

        public FECReservoirBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.entry_count);
            }

            else
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count0);
            }

            for (int i = 1; i <= entry_count; i++)
            {

                if (version == 0)
                {
                    boxSize += IsoReaderWriter.ReadUInt16(stream, out this.item_ID);
                }

                else
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.item_ID0);
                }
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.symbol_count);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.entry_count);
            }

            else
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count0);
            }

            for (int i = 1; i <= entry_count; i++)
            {

                if (version == 0)
                {
                    boxSize += IsoReaderWriter.WriteUInt16(stream, this.item_ID);
                }

                else
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.item_ID0);
                }
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.symbol_count);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 0)
            {
                boxSize += 16; // entry_count
            }

            else
            {
                boxSize += 32; // entry_count0
            }

            for (int i = 1; i <= entry_count; i++)
            {

                if (version == 0)
                {
                    boxSize += 16; // item_ID
                }

                else
                {
                    boxSize += 32; // item_ID0
                }
                boxSize += 32; // symbol_count
            }
            return boxSize;
        }
    }


    public class PartitionEntry : Box
    {
        public override string FourCC { get { return "fiin"; } }

        protected FilePartitionBox blocks_and_symbols;
        public FilePartitionBox BlocksAndSymbols { get { return blocks_and_symbols; } set { blocks_and_symbols = value; } }

        protected FECReservoirBox FEC_symbol_locations;  // optional
        public FECReservoirBox FECSymbolLocations { get { return FEC_symbol_locations; } set { FEC_symbol_locations = value; } }

        protected FileReservoirBox File_symbol_locations;  // optional
        public FileReservoirBox FileSymbolLocations { get { return File_symbol_locations; } set { File_symbol_locations = value; } }

        public PartitionEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.blocks_and_symbols);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.FEC_symbol_locations); //optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.File_symbol_locations); //optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.blocks_and_symbols);
            if (this.FEC_symbol_locations != null) boxSize += IsoReaderWriter.WriteBox(stream, this.FEC_symbol_locations); //optional
            if (this.File_symbol_locations != null) boxSize += IsoReaderWriter.WriteBox(stream, this.File_symbol_locations); //optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(blocks_and_symbols); // blocks_and_symbols
            if (this.FEC_symbol_locations != null) boxSize += IsoReaderWriter.CalculateSize(FEC_symbol_locations); // FEC_symbol_locations
            if (this.File_symbol_locations != null) boxSize += IsoReaderWriter.CalculateSize(File_symbol_locations); // File_symbol_locations
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class FDItemInformationBox : FullBox
    {
        public override string FourCC { get { return "fiin"; } }

        protected ushort entry_count;
        public ushort EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected PartitionEntry[] partition_entries;
        public PartitionEntry[] PartitionEntries { get { return partition_entries; } set { partition_entries = value; } }

        protected FDSessionGroupBox session_info;  // optional
        public FDSessionGroupBox SessionInfo { get { return session_info; } set { session_info = value; } }

        protected GroupIdToNameBox group_id_to_name;  // optional
        public GroupIdToNameBox GroupIdToName { get { return group_id_to_name; } set { group_id_to_name = value; } }

        public FDItemInformationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.entry_count);
            boxSize += IsoReaderWriter.ReadClass(stream, entry_count, out this.partition_entries);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.session_info); //optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.group_id_to_name); //optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.entry_count);
            boxSize += IsoReaderWriter.WriteClass(stream, entry_count, this.partition_entries);
            if (this.session_info != null) boxSize += IsoReaderWriter.WriteBox(stream, this.session_info); //optional
            if (this.group_id_to_name != null) boxSize += IsoReaderWriter.WriteBox(stream, this.group_id_to_name); //optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // entry_count
            boxSize += IsoReaderWriter.CalculateSize(partition_entries); // partition_entries
            if (this.session_info != null) boxSize += IsoReaderWriter.CalculateSize(session_info); // session_info
            if (this.group_id_to_name != null) boxSize += IsoReaderWriter.CalculateSize(group_id_to_name); // group_id_to_name
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class FileReservoirBox : FullBox
    {
        public override string FourCC { get { return "fire"; } }

        protected ushort entry_count;
        public ushort EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected uint entry_count0;
        public uint EntryCount0 { get { return entry_count0; } set { entry_count0 = value; } }

        protected ushort item_ID;
        public ushort ItemID { get { return item_ID; } set { item_ID = value; } }

        protected uint item_ID0;
        public uint ItemID0 { get { return item_ID0; } set { item_ID0 = value; } }

        protected uint symbol_count;
        public uint SymbolCount { get { return symbol_count; } set { symbol_count = value; } }

        public FileReservoirBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.entry_count);
            }

            else
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count0);
            }

            for (int i = 1; i <= entry_count; i++)
            {

                if (version == 0)
                {
                    boxSize += IsoReaderWriter.ReadUInt16(stream, out this.item_ID);
                }

                else
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.item_ID0);
                }
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.symbol_count);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.entry_count);
            }

            else
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count0);
            }

            for (int i = 1; i <= entry_count; i++)
            {

                if (version == 0)
                {
                    boxSize += IsoReaderWriter.WriteUInt16(stream, this.item_ID);
                }

                else
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.item_ID0);
                }
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.symbol_count);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 0)
            {
                boxSize += 16; // entry_count
            }

            else
            {
                boxSize += 32; // entry_count0
            }

            for (int i = 1; i <= entry_count; i++)
            {

                if (version == 0)
                {
                    boxSize += 16; // item_ID
                }

                else
                {
                    boxSize += 32; // item_ID0
                }
                boxSize += 32; // symbol_count
            }
            return boxSize;
        }
    }


    public class FilePartitionBox : FullBox
    {
        public override string FourCC { get { return "fpar"; } }

        protected ushort item_ID;
        public ushort ItemID { get { return item_ID; } set { item_ID = value; } }

        protected uint item_ID0;
        public uint ItemID0 { get { return item_ID0; } set { item_ID0 = value; } }

        protected ushort packet_payload_size;
        public ushort PacketPayloadSize { get { return packet_payload_size; } set { packet_payload_size = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected byte FEC_encoding_ID;
        public byte FECEncodingID { get { return FEC_encoding_ID; } set { FEC_encoding_ID = value; } }

        protected ushort FEC_instance_ID;
        public ushort FECInstanceID { get { return FEC_instance_ID; } set { FEC_instance_ID = value; } }

        protected ushort max_source_block_length;
        public ushort MaxSourceBlockLength { get { return max_source_block_length; } set { max_source_block_length = value; } }

        protected ushort encoding_symbol_length;
        public ushort EncodingSymbolLength { get { return encoding_symbol_length; } set { encoding_symbol_length = value; } }

        protected ushort max_number_of_encoding_symbols;
        public ushort MaxNumberOfEncodingSymbols { get { return max_number_of_encoding_symbols; } set { max_number_of_encoding_symbols = value; } }

        protected string scheme_specific_info;
        public string SchemeSpecificInfo { get { return scheme_specific_info; } set { scheme_specific_info = value; } }

        protected ushort entry_count;
        public ushort EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected uint entry_count0;
        public uint EntryCount0 { get { return entry_count0; } set { entry_count0 = value; } }

        protected ushort block_count;
        public ushort BlockCount { get { return block_count; } set { block_count = value; } }

        protected uint block_size;
        public uint BlockSize { get { return block_size; } set { block_size = value; } }

        public FilePartitionBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.item_ID);
            }

            else
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.item_ID0);
            }
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.packet_payload_size);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.reserved);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.FEC_encoding_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.FEC_instance_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.max_source_block_length);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.encoding_symbol_length);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.max_number_of_encoding_symbols);
            boxSize += IsoReaderWriter.ReadString(stream, out this.scheme_specific_info);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.entry_count);
            }

            else
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count0);
            }

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.block_count);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.block_size);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.item_ID);
            }

            else
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.item_ID0);
            }
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.packet_payload_size);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.reserved);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.FEC_encoding_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.FEC_instance_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.max_source_block_length);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.encoding_symbol_length);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.max_number_of_encoding_symbols);
            boxSize += IsoReaderWriter.WriteString(stream, this.scheme_specific_info);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.entry_count);
            }

            else
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count0);
            }

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.block_count);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.block_size);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 0)
            {
                boxSize += 16; // item_ID
            }

            else
            {
                boxSize += 32; // item_ID0
            }
            boxSize += 16; // packet_payload_size
            boxSize += 8; // reserved
            boxSize += 8; // FEC_encoding_ID
            boxSize += 16; // FEC_instance_ID
            boxSize += 16; // max_source_block_length
            boxSize += 16; // encoding_symbol_length
            boxSize += 16; // max_number_of_encoding_symbols
            boxSize += (ulong)scheme_specific_info.Length * 8; // scheme_specific_info

            if (version == 0)
            {
                boxSize += 16; // entry_count
            }

            else
            {
                boxSize += 32; // entry_count0
            }

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += 16; // block_count
                boxSize += 32; // block_size
            }
            return boxSize;
        }
    }


    public class FreeSpaceBox : Box
    {
        public override string FourCC { get { return "free"; } }

        protected byte[] data;
        public byte[] Data { get { return data; } set { data = value; } }

        public FreeSpaceBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8Array(stream, out this.data);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8Array(stream, this.data);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)data.Length * 8; // data
            return boxSize;
        }
    }


    public class OriginalFormatBox : Box
    {
        public override string FourCC { get { return "frma"; } }

        protected uint data_format; // = codingname
        public uint DataFormat { get { return data_format; } set { data_format = value; } }

        public OriginalFormatBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.data_format); // format of decrypted, encoded data (in case of protection)
            /*  or un-transformed sample entry (in case of restriction */
            /*  and complete track information) */
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.data_format); // format of decrypted, encoded data (in case of protection)
            /*  or un-transformed sample entry (in case of restriction */
            /*  and complete track information) */
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // data_format
            /*  or un-transformed sample entry (in case of restriction */
            /*  and complete track information) */
            return boxSize;
        }
    }


    public class FileTypeBox : Box
    {
        public override string FourCC { get { return "ftyp"; } }

        protected uint major_brand;
        public uint MajorBrand { get { return major_brand; } set { major_brand = value; } }

        protected uint minor_version;
        public uint MinorVersion { get { return minor_version; } set { minor_version = value; } }

        protected uint[] compatible_brands;  //  to end of the box
        public uint[] CompatibleBrands { get { return compatible_brands; } set { compatible_brands = value; } }

        public FileTypeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.major_brand);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.minor_version);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.compatible_brands); // to end of the box
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.major_brand);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.minor_version);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.compatible_brands); // to end of the box
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // major_brand
            boxSize += 32; // minor_version
            boxSize += 32; // compatible_brands
            return boxSize;
        }
    }


    public class GroupIdToNameBox : FullBox
    {
        public override string FourCC { get { return "gitn"; } }

        protected ushort entry_count;
        public ushort EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected uint group_ID;
        public uint GroupID { get { return group_ID; } set { group_ID = value; } }

        protected string group_name;
        public string GroupName { get { return group_name; } set { group_name = value; } }

        public GroupIdToNameBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_ID);
                boxSize += IsoReaderWriter.ReadString(stream, out this.group_name);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_ID);
                boxSize += IsoReaderWriter.WriteString(stream, this.group_name);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += 32; // group_ID
                boxSize += (ulong)group_name.Length * 8; // group_name
            }
            return boxSize;
        }
    }


    public class GroupsListBox : Box
    {
        public override string FourCC { get { return "grpl"; } }

        public GroupsListBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class HandlerBox : FullBox
    {
        public override string FourCC { get { return "hdlr"; } }

        protected uint pre_defined = 0;
        public uint PreDefined { get { return pre_defined; } set { pre_defined = value; } }

        protected uint handler_type;
        public uint HandlerType { get { return handler_type; } set { handler_type = value; } }

        protected uint[] reserved = [];
        public uint[] Reserved { get { return reserved; } set { reserved = value; } }

        protected string name;
        public string Name { get { return name; } set { name = value; } }

        public HandlerBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.pre_defined);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.handler_type);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, 3, out this.reserved);
            boxSize += IsoReaderWriter.ReadString(stream, out this.name);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.pre_defined);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.handler_type);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, 3, this.reserved);
            boxSize += IsoReaderWriter.WriteString(stream, this.name);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // pre_defined
            boxSize += 32; // handler_type
            boxSize += 3 * 32; // reserved
            boxSize += (ulong)name.Length * 8; // name
            return boxSize;
        }
    }


    public class HintMediaHeaderBox : FullBox
    {
        public override string FourCC { get { return "hmhd"; } }

        protected ushort maxPDUsize;
        public ushort MaxPDUsize { get { return maxPDUsize; } set { maxPDUsize = value; } }

        protected ushort avgPDUsize;
        public ushort AvgPDUsize { get { return avgPDUsize; } set { avgPDUsize = value; } }

        protected uint maxbitrate;
        public uint Maxbitrate { get { return maxbitrate; } set { maxbitrate = value; } }

        protected uint avgbitrate;
        public uint Avgbitrate { get { return avgbitrate; } set { avgbitrate = value; } }

        protected uint reserved = 0;
        public uint Reserved { get { return reserved; } set { reserved = value; } }

        public HintMediaHeaderBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.maxPDUsize);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.avgPDUsize);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.maxbitrate);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.avgbitrate);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.reserved);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.maxPDUsize);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.avgPDUsize);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.maxbitrate);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.avgbitrate);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.reserved);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // maxPDUsize
            boxSize += 16; // avgPDUsize
            boxSize += 32; // maxbitrate
            boxSize += 32; // avgbitrate
            boxSize += 32; // reserved
            return boxSize;
        }
    }


    public class ItemDataBox : Box
    {
        public override string FourCC { get { return "idat"; } }

        protected byte[] data;
        public byte[] Data { get { return data; } set { data = value; } }

        public ItemDataBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8Array(stream, out this.data);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8Array(stream, this.data);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8 * (ulong)data.Length; // data
            return boxSize;
        }
    }


    public class ItemInfoBox : FullBox
    {
        public override string FourCC { get { return "iinf"; } }

        protected ushort entry_count;
        public ushort EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected uint entry_count0;
        public uint EntryCount0 { get { return entry_count0; } set { entry_count0 = value; } }

        protected ItemInfoEntry[] item_infos;
        public ItemInfoEntry[] ItemInfos { get { return item_infos; } set { item_infos = value; } }

        public ItemInfoBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.entry_count);
            }

            else
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count0);
            }
            boxSize += IsoReaderWriter.ReadClass(stream, out this.item_infos);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.entry_count);
            }

            else
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count0);
            }
            boxSize += IsoReaderWriter.WriteClass(stream, entry_count, this.item_infos);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 0)
            {
                boxSize += 16; // entry_count
            }

            else
            {
                boxSize += 32; // entry_count0
            }
            boxSize += IsoReaderWriter.CalculateClassSize(item_infos); // item_infos
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class ItemLocationBox : FullBox
    {
        public override string FourCC { get { return "iloc"; } }

        protected byte offset_size;
        public byte OffsetSize { get { return offset_size; } set { offset_size = value; } }

        protected byte length_size;
        public byte LengthSize { get { return length_size; } set { length_size = value; } }

        protected byte base_offset_size;
        public byte BaseOffsetSize { get { return base_offset_size; } set { base_offset_size = value; } }

        protected byte index_size;
        public byte IndexSize { get { return index_size; } set { index_size = value; } }

        protected byte reserved;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected ushort item_count;
        public ushort ItemCount { get { return item_count; } set { item_count = value; } }

        protected uint item_count0;
        public uint ItemCount0 { get { return item_count0; } set { item_count0 = value; } }

        protected ushort item_ID;
        public ushort ItemID { get { return item_ID; } set { item_ID = value; } }

        protected uint item_ID0;
        public uint ItemID0 { get { return item_ID0; } set { item_ID0 = value; } }

        protected ushort reserved0 = 0;
        public ushort Reserved0 { get { return reserved0; } set { reserved0 = value; } }

        protected byte construction_method;
        public byte ConstructionMethod { get { return construction_method; } set { construction_method = value; } }

        protected ushort data_reference_index;
        public ushort DataReferenceIndex { get { return data_reference_index; } set { data_reference_index = value; } }

        protected byte[] base_offset;
        public byte[] BaseOffset { get { return base_offset; } set { base_offset = value; } }

        protected ushort extent_count;
        public ushort ExtentCount { get { return extent_count; } set { extent_count = value; } }

        protected byte[] item_reference_index;
        public byte[] ItemReferenceIndex { get { return item_reference_index; } set { item_reference_index = value; } }

        protected byte[] extent_offset;
        public byte[] ExtentOffset { get { return extent_offset; } set { extent_offset = value; } }

        protected byte[] extent_length;
        public byte[] ExtentLength { get { return extent_length; } set { extent_length = value; } }

        public ItemLocationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.offset_size);
            boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.length_size);
            boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.base_offset_size);

            if ((version == 1) || (version == 2))
            {
                boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.index_size);
            }

            else
            {
                boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.reserved);
            }

            if (version < 2)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.item_count);
            }

            else if (version == 2)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.item_count0);
            }

            for (int i = 0; i < item_count; i++)
            {

                if (version < 2)
                {
                    boxSize += IsoReaderWriter.ReadUInt16(stream, out this.item_ID);
                }

                else if (version == 2)
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.item_ID0);
                }

                if ((version == 1) || (version == 2))
                {
                    boxSize += IsoReaderWriter.ReadBits(stream, 12, out this.reserved0);
                    boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.construction_method);
                }
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.data_reference_index);
                boxSize += IsoReaderWriter.ReadBytes(stream, base_offset_size, out this.base_offset);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.extent_count);

                for (int j = 0; j < extent_count; j++)
                {

                    if (((version == 1) || (version == 2)) && (index_size > 0))
                    {
                        boxSize += IsoReaderWriter.ReadBytes(stream, index_size, out this.item_reference_index);
                    }
                    boxSize += IsoReaderWriter.ReadBytes(stream, offset_size, out this.extent_offset);
                    boxSize += IsoReaderWriter.ReadBytes(stream, length_size, out this.extent_length);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBits(stream, 4, this.offset_size);
            boxSize += IsoReaderWriter.WriteBits(stream, 4, this.length_size);
            boxSize += IsoReaderWriter.WriteBits(stream, 4, this.base_offset_size);

            if ((version == 1) || (version == 2))
            {
                boxSize += IsoReaderWriter.WriteBits(stream, 4, this.index_size);
            }

            else
            {
                boxSize += IsoReaderWriter.WriteBits(stream, 4, this.reserved);
            }

            if (version < 2)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.item_count);
            }

            else if (version == 2)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.item_count0);
            }

            for (int i = 0; i < item_count; i++)
            {

                if (version < 2)
                {
                    boxSize += IsoReaderWriter.WriteUInt16(stream, this.item_ID);
                }

                else if (version == 2)
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.item_ID0);
                }

                if ((version == 1) || (version == 2))
                {
                    boxSize += IsoReaderWriter.WriteBits(stream, 12, this.reserved0);
                    boxSize += IsoReaderWriter.WriteBits(stream, 4, this.construction_method);
                }
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.data_reference_index);
                boxSize += IsoReaderWriter.WriteBytes(stream, base_offset_size, this.base_offset);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.extent_count);

                for (int j = 0; j < extent_count; j++)
                {

                    if (((version == 1) || (version == 2)) && (index_size > 0))
                    {
                        boxSize += IsoReaderWriter.WriteBytes(stream, index_size, this.item_reference_index);
                    }
                    boxSize += IsoReaderWriter.WriteBytes(stream, offset_size, this.extent_offset);
                    boxSize += IsoReaderWriter.WriteBytes(stream, length_size, this.extent_length);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 4; // offset_size
            boxSize += 4; // length_size
            boxSize += 4; // base_offset_size

            if ((version == 1) || (version == 2))
            {
                boxSize += 4; // index_size
            }

            else
            {
                boxSize += 4; // reserved
            }

            if (version < 2)
            {
                boxSize += 16; // item_count
            }

            else if (version == 2)
            {
                boxSize += 32; // item_count0
            }

            for (int i = 0; i < item_count; i++)
            {

                if (version < 2)
                {
                    boxSize += 16; // item_ID
                }

                else if (version == 2)
                {
                    boxSize += 32; // item_ID0
                }

                if ((version == 1) || (version == 2))
                {
                    boxSize += 12; // reserved0
                    boxSize += 4; // construction_method
                }
                boxSize += 16; // data_reference_index
                boxSize += (ulong)base_offset_size * 8; // base_offset
                boxSize += 16; // extent_count

                for (int j = 0; j < extent_count; j++)
                {

                    if (((version == 1) || (version == 2)) && (index_size > 0))
                    {
                        boxSize += (ulong)index_size * 8; // item_reference_index
                    }
                    boxSize += (ulong)offset_size * 8; // extent_offset
                    boxSize += (ulong)length_size * 8; // extent_length
                }
            }
            return boxSize;
        }
    }


    public class IdentifiedMediaDataBox : Box
    {
        public override string FourCC { get { return "imda"; } }

        protected uint imda_identifier;
        public uint ImdaIdentifier { get { return imda_identifier; } set { imda_identifier = value; } }

        protected byte[] data;  //  until the end of the box
        public byte[] Data { get { return data; } set { data = value; } }

        public IdentifiedMediaDataBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.imda_identifier);
            boxSize += IsoReaderWriter.ReadUInt8Array(stream, out this.data); // until the end of the box
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.imda_identifier);
            boxSize += IsoReaderWriter.WriteUInt8Array(stream, this.data); // until the end of the box
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // imda_identifier
            boxSize += 8 * (ulong)data.Length; // data
            return boxSize;
        }
    }


    public class ItemInfoEntry : FullBox
    {
        public override string FourCC { get { return "infe"; } }

        protected ushort item_ID;
        public ushort ItemID { get { return item_ID; } set { item_ID = value; } }

        protected ushort item_protection_index;
        public ushort ItemProtectionIndex { get { return item_protection_index; } set { item_protection_index = value; } }

        protected string item_name;
        public string ItemName { get { return item_name; } set { item_name = value; } }

        protected string content_type;
        public string ContentType { get { return content_type; } set { content_type = value; } }

        protected string content_encoding;  // optional
        public string ContentEncoding { get { return content_encoding; } set { content_encoding = value; } }

        protected uint extension_type;  // optional
        public uint ExtensionType { get { return extension_type; } set { extension_type = value; } }

        protected ItemInfoExtension ItemInfoExtension;  // optional
        public ItemInfoExtension _ItemInfoExtension { get { return ItemInfoExtension; } set { ItemInfoExtension = value; } }

        protected ushort item_ID0;
        public ushort ItemID0 { get { return item_ID0; } set { item_ID0 = value; } }

        protected uint item_ID00;
        public uint ItemID00 { get { return item_ID00; } set { item_ID00 = value; } }

        protected ushort item_protection_index0;
        public ushort ItemProtectionIndex0 { get { return item_protection_index0; } set { item_protection_index0 = value; } }

        protected uint item_type;
        public uint ItemType { get { return item_type; } set { item_type = value; } }

        protected string item_name0;
        public string ItemName0 { get { return item_name0; } set { item_name0 = value; } }

        protected string content_type0;
        public string ContentType0 { get { return content_type0; } set { content_type0 = value; } }

        protected string content_encoding0;  // optional
        public string ContentEncoding0 { get { return content_encoding0; } set { content_encoding0 = value; } }

        protected string item_uri_type;
        public string ItemUriType { get { return item_uri_type; } set { item_uri_type = value; } }

        public ItemInfoEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if ((version == 0) || (version == 1))
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.item_ID);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.item_protection_index);
                boxSize += IsoReaderWriter.ReadString(stream, out this.item_name);
                boxSize += IsoReaderWriter.ReadString(stream, out this.content_type);
                if (boxSize < size) boxSize += IsoReaderWriter.ReadString(stream, out this.content_encoding); //optional
            }

            if (version == 1)
            {
                if (boxSize < size) boxSize += IsoReaderWriter.ReadUInt32(stream, out this.extension_type); //optional
                if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.ItemInfoExtension); //optional
            }

            if (version >= 2)
            {

                if (version == 2)
                {
                    boxSize += IsoReaderWriter.ReadUInt16(stream, out this.item_ID0);
                }

                else if (version == 3)
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.item_ID00);
                }
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.item_protection_index0);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.item_type);
                boxSize += IsoReaderWriter.ReadString(stream, out this.item_name0);

                if (item_type == IsoReaderWriter.FromFourCC("mime"))
                {
                    boxSize += IsoReaderWriter.ReadString(stream, out this.content_type0);
                    if (boxSize < size) boxSize += IsoReaderWriter.ReadString(stream, out this.content_encoding0); //optional
                }

                else if (item_type == IsoReaderWriter.FromFourCC("uri "))
                {
                    boxSize += IsoReaderWriter.ReadString(stream, out this.item_uri_type);
                }
            }
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if ((version == 0) || (version == 1))
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.item_ID);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.item_protection_index);
                boxSize += IsoReaderWriter.WriteString(stream, this.item_name);
                boxSize += IsoReaderWriter.WriteString(stream, this.content_type);
                if (this.content_encoding != null) boxSize += IsoReaderWriter.WriteString(stream, this.content_encoding); //optional
            }

            if (version == 1)
            {
                if (this.extension_type != null) boxSize += IsoReaderWriter.WriteUInt32(stream, this.extension_type); //optional
                if (this.ItemInfoExtension != null) boxSize += IsoReaderWriter.WriteBox(stream, this.ItemInfoExtension); //optional
            }

            if (version >= 2)
            {

                if (version == 2)
                {
                    boxSize += IsoReaderWriter.WriteUInt16(stream, this.item_ID0);
                }

                else if (version == 3)
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.item_ID00);
                }
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.item_protection_index0);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.item_type);
                boxSize += IsoReaderWriter.WriteString(stream, this.item_name0);

                if (item_type == IsoReaderWriter.FromFourCC("mime"))
                {
                    boxSize += IsoReaderWriter.WriteString(stream, this.content_type0);
                    if (this.content_encoding0 != null) boxSize += IsoReaderWriter.WriteString(stream, this.content_encoding0); //optional
                }

                else if (item_type == IsoReaderWriter.FromFourCC("uri "))
                {
                    boxSize += IsoReaderWriter.WriteString(stream, this.item_uri_type);
                }
            }
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if ((version == 0) || (version == 1))
            {
                boxSize += 16; // item_ID
                boxSize += 16; // item_protection_index
                boxSize += (ulong)item_name.Length * 8; // item_name
                boxSize += (ulong)content_type.Length * 8; // content_type
                if (this.content_encoding != null) boxSize += (ulong)content_encoding.Length * 8; // content_encoding
            }

            if (version == 1)
            {
                if (this.extension_type != null) boxSize += 32; // extension_type
                if (this.ItemInfoExtension != null) boxSize += IsoReaderWriter.CalculateSize(ItemInfoExtension); // ItemInfoExtension
            }

            if (version >= 2)
            {

                if (version == 2)
                {
                    boxSize += 16; // item_ID0
                }

                else if (version == 3)
                {
                    boxSize += 32; // item_ID00
                }
                boxSize += 16; // item_protection_index0
                boxSize += 32; // item_type
                boxSize += (ulong)item_name0.Length * 8; // item_name0

                if (item_type == IsoReaderWriter.FromFourCC("mime"))
                {
                    boxSize += (ulong)content_type0.Length * 8; // content_type0
                    if (this.content_encoding0 != null) boxSize += (ulong)content_encoding0.Length * 8; // content_encoding0
                }

                else if (item_type == IsoReaderWriter.FromFourCC("uri "))
                {
                    boxSize += (ulong)item_uri_type.Length * 8; // item_uri_type
                }
            }
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class ItemProtectionBox : FullBox
    {
        public override string FourCC { get { return "ipro"; } }

        protected ushort protection_count;
        public ushort ProtectionCount { get { return protection_count; } set { protection_count = value; } }

        protected ProtectionSchemeInfoBox protection_information;
        public ProtectionSchemeInfoBox ProtectionInformation { get { return protection_information; } set { protection_information = value; } }

        public ItemProtectionBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.protection_count);

            for (int i = 1; i <= protection_count; i++)
            {
                boxSize += IsoReaderWriter.ReadBox(stream, out this.protection_information);
            }
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.protection_count);

            for (int i = 1; i <= protection_count; i++)
            {
                boxSize += IsoReaderWriter.WriteBox(stream, this.protection_information);
            }
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // protection_count

            for (int i = 1; i <= protection_count; i++)
            {
                boxSize += IsoReaderWriter.CalculateSize(protection_information); // protection_information
            }
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class ItemReferenceBox : FullBox
    {
        public override string FourCC { get { return "iref"; } }

        protected SingleItemTypeReferenceBox[] references;
        public SingleItemTypeReferenceBox[] References { get { return references; } set { references = value; } }

        protected SingleItemTypeReferenceBoxLarge[] references0;
        public SingleItemTypeReferenceBoxLarge[] References0 { get { return references0; } set { references0 = value; } }

        public ItemReferenceBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.ReadBox(stream, out this.references);
            }

            else if (version == 1)
            {
                boxSize += IsoReaderWriter.ReadBox(stream, out this.references0);
            }
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.WriteBox(stream, this.references);
            }

            else if (version == 1)
            {
                boxSize += IsoReaderWriter.WriteBox(stream, this.references0);
            }
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 0)
            {
                boxSize += IsoReaderWriter.CalculateSize(references); // references
            }

            else if (version == 1)
            {
                boxSize += IsoReaderWriter.CalculateSize(references0); // references0
            }
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class LevelAssignmentBox : FullBox
    {
        public override string FourCC { get { return "leva"; } }

        protected byte level_count;
        public byte LevelCount { get { return level_count; } set { level_count = value; } }

        protected uint track_ID;
        public uint TrackID { get { return track_ID; } set { track_ID = value; } }

        protected bool padding_flag;
        public bool PaddingFlag { get { return padding_flag; } set { padding_flag = value; } }

        protected byte assignment_type;
        public byte AssignmentType { get { return assignment_type; } set { assignment_type = value; } }

        protected uint grouping_type;
        public uint GroupingType { get { return grouping_type; } set { grouping_type = value; } }

        protected uint grouping_type0;
        public uint GroupingType0 { get { return grouping_type0; } set { grouping_type0 = value; } }

        protected uint grouping_type_parameter;
        public uint GroupingTypeParameter { get { return grouping_type_parameter; } set { grouping_type_parameter = value; } }

        protected uint sub_track_ID;
        public uint SubTrackID { get { return sub_track_ID; } set { sub_track_ID = value; } }

        public LevelAssignmentBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.level_count);

            for (int j = 1; j <= level_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.track_ID);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.padding_flag);
                boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.assignment_type);

                if (assignment_type == 0)
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.grouping_type);
                }

                else if (assignment_type == 1)
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.grouping_type0);
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.grouping_type_parameter);
                }

                else if (assignment_type == 2)
                {
                }
                /*  no further syntax elements needed */

                else if (assignment_type == 3)
                {
                }
                /*  no further syntax elements needed */

                else if (assignment_type == 4)
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sub_track_ID);
                }
                /*  other assignment_type values are reserved */
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.level_count);

            for (int j = 1; j <= level_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.track_ID);
                boxSize += IsoReaderWriter.WriteBit(stream, this.padding_flag);
                boxSize += IsoReaderWriter.WriteBits(stream, 7, this.assignment_type);

                if (assignment_type == 0)
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.grouping_type);
                }

                else if (assignment_type == 1)
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.grouping_type0);
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.grouping_type_parameter);
                }

                else if (assignment_type == 2)
                {
                }
                /*  no further syntax elements needed */

                else if (assignment_type == 3)
                {
                }
                /*  no further syntax elements needed */

                else if (assignment_type == 4)
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.sub_track_ID);
                }
                /*  other assignment_type values are reserved */
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // level_count

            for (int j = 1; j <= level_count; j++)
            {
                boxSize += 32; // track_ID
                boxSize += 1; // padding_flag
                boxSize += 7; // assignment_type

                if (assignment_type == 0)
                {
                    boxSize += 32; // grouping_type
                }

                else if (assignment_type == 1)
                {
                    boxSize += 32; // grouping_type0
                    boxSize += 32; // grouping_type_parameter
                }

                else if (assignment_type == 2)
                {
                }
                /*  no further syntax elements needed */

                else if (assignment_type == 3)
                {
                }
                /*  no further syntax elements needed */

                else if (assignment_type == 4)
                {
                    boxSize += 32; // sub_track_ID
                }
                /*  other assignment_type values are reserved */
            }
            return boxSize;
        }
    }


    public class MediaDataBox : Box
    {
        public override string FourCC { get { return "mdat"; } }

        protected byte[] data;
        public byte[] Data { get { return data; } set { data = value; } }

        public MediaDataBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8Array(stream, out this.data);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8Array(stream, this.data);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8 * (ulong)data.Length; // data
            return boxSize;
        }
    }


    public class MediaHeaderBox : FullBox
    {
        public override string FourCC { get { return "mdhd"; } }

        protected ulong creation_time;
        public ulong CreationTime { get { return creation_time; } set { creation_time = value; } }

        protected ulong modification_time;
        public ulong ModificationTime { get { return modification_time; } set { modification_time = value; } }

        protected uint timescale;
        public uint Timescale { get { return timescale; } set { timescale = value; } }

        protected ulong duration;
        public ulong Duration { get { return duration; } set { duration = value; } }

        protected uint creation_time0;
        public uint CreationTime0 { get { return creation_time0; } set { creation_time0 = value; } }

        protected uint modification_time0;
        public uint ModificationTime0 { get { return modification_time0; } set { modification_time0 = value; } }

        protected uint timescale0;
        public uint Timescale0 { get { return timescale0; } set { timescale0 = value; } }

        protected uint duration0;
        public uint Duration0 { get { return duration0; } set { duration0 = value; } }

        protected bool pad = false;
        public bool Pad { get { return pad; } set { pad = value; } }

        protected byte[] language;  //  ISO-639-2/T language code
        public byte[] Language { get { return language; } set { language = value; } }

        protected ushort pre_defined = 0;
        public ushort PreDefined { get { return pre_defined; } set { pre_defined = value; } }

        public MediaHeaderBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 1)
            {
                boxSize += IsoReaderWriter.ReadUInt64(stream, out this.creation_time);
                boxSize += IsoReaderWriter.ReadUInt64(stream, out this.modification_time);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.timescale);
                boxSize += IsoReaderWriter.ReadUInt64(stream, out this.duration);
            }

            else
            {
                /*  version==0 */
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.creation_time0);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.modification_time0);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.timescale0);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.duration0);
            }
            boxSize += IsoReaderWriter.ReadBit(stream, out this.pad);
            boxSize += IsoReaderWriter.ReadBitsArray(stream, 5, 3, out this.language); // ISO-639-2/T language code
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.pre_defined);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 1)
            {
                boxSize += IsoReaderWriter.WriteUInt64(stream, this.creation_time);
                boxSize += IsoReaderWriter.WriteUInt64(stream, this.modification_time);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.timescale);
                boxSize += IsoReaderWriter.WriteUInt64(stream, this.duration);
            }

            else
            {
                /*  version==0 */
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.creation_time0);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.modification_time0);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.timescale0);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.duration0);
            }
            boxSize += IsoReaderWriter.WriteBit(stream, this.pad);
            boxSize += IsoReaderWriter.WriteBitsArray(stream, 5, 3, this.language); // ISO-639-2/T language code
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.pre_defined);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 1)
            {
                boxSize += 64; // creation_time
                boxSize += 64; // modification_time
                boxSize += 32; // timescale
                boxSize += 64; // duration
            }

            else
            {
                /*  version==0 */
                boxSize += 32; // creation_time0
                boxSize += 32; // modification_time0
                boxSize += 32; // timescale0
                boxSize += 32; // duration0
            }
            boxSize += 1; // pad
            boxSize += 3 * 5; // language
            boxSize += 16; // pre_defined
            return boxSize;
        }
    }


    public class MediaBox : Box
    {
        public override string FourCC { get { return "mdia"; } }

        public MediaBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class MovieExtendsHeaderBox : FullBox
    {
        public override string FourCC { get { return "mehd"; } }

        protected ulong fragment_duration;
        public ulong FragmentDuration { get { return fragment_duration; } set { fragment_duration = value; } }

        protected uint fragment_duration0;
        public uint FragmentDuration0 { get { return fragment_duration0; } set { fragment_duration0 = value; } }

        public MovieExtendsHeaderBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 1)
            {
                boxSize += IsoReaderWriter.ReadUInt64(stream, out this.fragment_duration);
            }

            else
            {
                /*  version==0 */
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.fragment_duration0);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 1)
            {
                boxSize += IsoReaderWriter.WriteUInt64(stream, this.fragment_duration);
            }

            else
            {
                /*  version==0 */
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.fragment_duration0);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 1)
            {
                boxSize += 64; // fragment_duration
            }

            else
            {
                /*  version==0 */
                boxSize += 32; // fragment_duration0
            }
            return boxSize;
        }
    }


    public class MetaBox : FullBox
    {
        public override string FourCC { get { return "meta"; } }

        protected HandlerBox theHandler;
        public HandlerBox TheHandler { get { return theHandler; } set { theHandler = value; } }

        protected PrimaryItemBox primary_resource;  //  optional
        public PrimaryItemBox PrimaryResource { get { return primary_resource; } set { primary_resource = value; } }

        protected DataInformationBox file_locations;  //  optional
        public DataInformationBox FileLocations { get { return file_locations; } set { file_locations = value; } }

        protected ItemLocationBox item_locations;  //  optional
        public ItemLocationBox ItemLocations { get { return item_locations; } set { item_locations = value; } }

        protected ItemProtectionBox protections;  //  optional
        public ItemProtectionBox Protections { get { return protections; } set { protections = value; } }

        protected ItemInfoBox item_infos;  //  optional
        public ItemInfoBox ItemInfos { get { return item_infos; } set { item_infos = value; } }

        protected IPMPControlBox IPMP_control;  //  optional
        public IPMPControlBox IPMPControl { get { return IPMP_control; } set { IPMP_control = value; } }

        protected ItemReferenceBox item_refs;  //  optional
        public ItemReferenceBox ItemRefs { get { return item_refs; } set { item_refs = value; } }

        protected ItemDataBox item_data;  //  optional
        public ItemDataBox ItemData { get { return item_data; } set { item_data = value; } }

        protected Box[] other_boxes;  //  optional
        public Box[] OtherBoxes { get { return other_boxes; } set { other_boxes = value; } }

        public MetaBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.theHandler);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.primary_resource); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.file_locations); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.item_locations); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.protections); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.item_infos); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.IPMP_control); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.item_refs); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.item_data); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.other_boxes); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.theHandler);
            if (this.primary_resource != null) boxSize += IsoReaderWriter.WriteBox(stream, this.primary_resource); // optional
            if (this.file_locations != null) boxSize += IsoReaderWriter.WriteBox(stream, this.file_locations); // optional
            if (this.item_locations != null) boxSize += IsoReaderWriter.WriteBox(stream, this.item_locations); // optional
            if (this.protections != null) boxSize += IsoReaderWriter.WriteBox(stream, this.protections); // optional
            if (this.item_infos != null) boxSize += IsoReaderWriter.WriteBox(stream, this.item_infos); // optional
            if (this.IPMP_control != null) boxSize += IsoReaderWriter.WriteBox(stream, this.IPMP_control); // optional
            if (this.item_refs != null) boxSize += IsoReaderWriter.WriteBox(stream, this.item_refs); // optional
            if (this.item_data != null) boxSize += IsoReaderWriter.WriteBox(stream, this.item_data); // optional
            if (this.other_boxes != null) boxSize += IsoReaderWriter.WriteBox(stream, this.other_boxes); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(theHandler); // theHandler
            if (this.primary_resource != null) boxSize += IsoReaderWriter.CalculateSize(primary_resource); // primary_resource
            if (this.file_locations != null) boxSize += IsoReaderWriter.CalculateSize(file_locations); // file_locations
            if (this.item_locations != null) boxSize += IsoReaderWriter.CalculateSize(item_locations); // item_locations
            if (this.protections != null) boxSize += IsoReaderWriter.CalculateSize(protections); // protections
            if (this.item_infos != null) boxSize += IsoReaderWriter.CalculateSize(item_infos); // item_infos
            if (this.IPMP_control != null) boxSize += IsoReaderWriter.CalculateSize(IPMP_control); // IPMP_control
            if (this.item_refs != null) boxSize += IsoReaderWriter.CalculateSize(item_refs); // item_refs
            if (this.item_data != null) boxSize += IsoReaderWriter.CalculateSize(item_data); // item_data
            if (this.other_boxes != null) boxSize += IsoReaderWriter.CalculateSize(other_boxes); // other_boxes
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class MovieFragmentHeaderBox : FullBox
    {
        public override string FourCC { get { return "mfhd"; } }

        protected uint sequence_number;
        public uint SequenceNumber { get { return sequence_number; } set { sequence_number = value; } }

        public MovieFragmentHeaderBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sequence_number);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.sequence_number);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // sequence_number
            return boxSize;
        }
    }


    public class MovieFragmentRandomAccessBox : Box
    {
        public override string FourCC { get { return "mfra"; } }

        public MovieFragmentRandomAccessBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class MovieFragmentRandomAccessOffsetBox : FullBox
    {
        public override string FourCC { get { return "mfro"; } }

        protected uint parent_size;
        public uint ParentSize { get { return parent_size; } set { parent_size = value; } }

        public MovieFragmentRandomAccessOffsetBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.parent_size);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.parent_size);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // parent_size
            return boxSize;
        }
    }


    public class MediaInformationBox : Box
    {
        public override string FourCC { get { return "minf"; } }

        public MediaInformationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class CompressedMovieFragmentBox : CompressedBox
    {
        public override string FourCC { get { return "moof"; } }

        public CompressedMovieFragmentBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class CompressedMovieBox : CompressedBox
    {
        public override string FourCC { get { return "moov"; } }

        public CompressedMovieBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class MovieExtendsBox : Box
    {
        public override string FourCC { get { return "mvex"; } }

        public MovieExtendsBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class MovieHeaderBox : FullBox
    {
        public override string FourCC { get { return "mvhd"; } }

        protected ulong creation_time;
        public ulong CreationTime { get { return creation_time; } set { creation_time = value; } }

        protected ulong modification_time;
        public ulong ModificationTime { get { return modification_time; } set { modification_time = value; } }

        protected uint timescale;
        public uint Timescale { get { return timescale; } set { timescale = value; } }

        protected ulong duration;
        public ulong Duration { get { return duration; } set { duration = value; } }

        protected uint creation_time0;
        public uint CreationTime0 { get { return creation_time0; } set { creation_time0 = value; } }

        protected uint modification_time0;
        public uint ModificationTime0 { get { return modification_time0; } set { modification_time0 = value; } }

        protected uint timescale0;
        public uint Timescale0 { get { return timescale0; } set { timescale0 = value; } }

        protected uint duration0;
        public uint Duration0 { get { return duration0; } set { duration0 = value; } }

        protected int rate = 0x00010000;  //  typically 1.0
        public int Rate { get { return rate; } set { rate = value; } }

        protected short volume = 0x0100;  //  typically, full volume
        public short Volume { get { return volume; } set { volume = value; } }

        protected ushort reserved = 0;
        public ushort Reserved { get { return reserved; } set { reserved = value; } }

        protected uint[] reserved0 = [];
        public uint[] Reserved0 { get { return reserved0; } set { reserved0 = value; } }

        protected uint[] matrix =
            { 0x00010000,0,0,0,0x00010000,0,0,0,0x40000000 };  //  Unity matrix
        public uint[] Matrix { get { return matrix; } set { matrix = value; } }

        protected uint[] pre_defined = [];
        public uint[] PreDefined { get { return pre_defined; } set { pre_defined = value; } }

        protected uint next_track_ID;
        public uint NextTrackID { get { return next_track_ID; } set { next_track_ID = value; } }

        public MovieHeaderBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 1)
            {
                boxSize += IsoReaderWriter.ReadUInt64(stream, out this.creation_time);
                boxSize += IsoReaderWriter.ReadUInt64(stream, out this.modification_time);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.timescale);
                boxSize += IsoReaderWriter.ReadUInt64(stream, out this.duration);
            }

            else
            {
                /*  version==0 */
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.creation_time0);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.modification_time0);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.timescale0);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.duration0);
            }
            boxSize += IsoReaderWriter.ReadInt32(stream, out this.rate); // typically 1.0
            boxSize += IsoReaderWriter.ReadInt16(stream, out this.volume); // typically, full volume
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reserved);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, 2, out this.reserved0);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, 9, out this.matrix); // Unity matrix
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, 6, out this.pre_defined);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.next_track_ID);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 1)
            {
                boxSize += IsoReaderWriter.WriteUInt64(stream, this.creation_time);
                boxSize += IsoReaderWriter.WriteUInt64(stream, this.modification_time);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.timescale);
                boxSize += IsoReaderWriter.WriteUInt64(stream, this.duration);
            }

            else
            {
                /*  version==0 */
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.creation_time0);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.modification_time0);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.timescale0);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.duration0);
            }
            boxSize += IsoReaderWriter.WriteInt32(stream, this.rate); // typically 1.0
            boxSize += IsoReaderWriter.WriteInt16(stream, this.volume); // typically, full volume
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reserved);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, 2, this.reserved0);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, 9, this.matrix); // Unity matrix
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, 6, this.pre_defined);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.next_track_ID);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 1)
            {
                boxSize += 64; // creation_time
                boxSize += 64; // modification_time
                boxSize += 32; // timescale
                boxSize += 64; // duration
            }

            else
            {
                /*  version==0 */
                boxSize += 32; // creation_time0
                boxSize += 32; // modification_time0
                boxSize += 32; // timescale0
                boxSize += 32; // duration0
            }
            boxSize += 32; // rate
            boxSize += 16; // volume
            boxSize += 16; // reserved
            boxSize += 2 * 32; // reserved0
            boxSize += 9 * 32; // matrix
            boxSize += 6 * 32; // pre_defined
            boxSize += 32; // next_track_ID
            return boxSize;
        }
    }


    public class NullMediaHeaderBox : FullBox
    {
        public override string FourCC { get { return "nmhd"; } }

        public NullMediaHeaderBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class OriginalFileTypeBox : Box
    {
        public override string FourCC { get { return "otyp"; } }

        public OriginalFileTypeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class PaddingBitsBox : FullBox
    {
        public override string FourCC { get { return "padb"; } }

        protected uint sample_count;
        public uint SampleCount { get { return sample_count; } set { sample_count = value; } }

        protected bool reserved = false;
        public bool Reserved { get { return reserved; } set { reserved = value; } }

        protected byte pad1;
        public byte Pad1 { get { return pad1; } set { pad1 = value; } }

        protected bool reserved0 = false;
        public bool Reserved0 { get { return reserved0; } set { reserved0 = value; } }

        protected byte pad2;
        public byte Pad2 { get { return pad2; } set { pad2 = value; } }

        public PaddingBitsBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_count);


            for (int i = 0; i < ((sample_count + 1) / 2); i++)
            {
                boxSize += IsoReaderWriter.ReadBit(stream, out this.reserved);
                boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.pad1);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.reserved0);
                boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.pad2);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_count);


            for (int i = 0; i < ((sample_count + 1) / 2); i++)
            {
                boxSize += IsoReaderWriter.WriteBit(stream, this.reserved);
                boxSize += IsoReaderWriter.WriteBits(stream, 3, this.pad1);
                boxSize += IsoReaderWriter.WriteBit(stream, this.reserved0);
                boxSize += IsoReaderWriter.WriteBits(stream, 3, this.pad2);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // sample_count


            for (int i = 0; i < ((sample_count + 1) / 2); i++)
            {
                boxSize += 1; // reserved
                boxSize += 3; // pad1
                boxSize += 1; // reserved0
                boxSize += 3; // pad2
            }
            return boxSize;
        }
    }


    public class PartitionEntry1 : Box
    {
        public override string FourCC { get { return "paen"; } }

        protected FilePartitionBox blocks_and_symbols;
        public FilePartitionBox BlocksAndSymbols { get { return blocks_and_symbols; } set { blocks_and_symbols = value; } }

        protected FECReservoirBox FEC_symbol_locations;  // optional
        public FECReservoirBox FECSymbolLocations { get { return FEC_symbol_locations; } set { FEC_symbol_locations = value; } }

        protected FileReservoirBox File_symbol_locations;  // optional
        public FileReservoirBox FileSymbolLocations { get { return File_symbol_locations; } set { File_symbol_locations = value; } }

        public PartitionEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.blocks_and_symbols);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.FEC_symbol_locations); //optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.File_symbol_locations); //optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.blocks_and_symbols);
            if (this.FEC_symbol_locations != null) boxSize += IsoReaderWriter.WriteBox(stream, this.FEC_symbol_locations); //optional
            if (this.File_symbol_locations != null) boxSize += IsoReaderWriter.WriteBox(stream, this.File_symbol_locations); //optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(blocks_and_symbols); // blocks_and_symbols
            if (this.FEC_symbol_locations != null) boxSize += IsoReaderWriter.CalculateSize(FEC_symbol_locations); // FEC_symbol_locations
            if (this.File_symbol_locations != null) boxSize += IsoReaderWriter.CalculateSize(File_symbol_locations); // File_symbol_locations
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class FDItemInformationBox1 : FullBox
    {
        public override string FourCC { get { return "paen"; } }

        protected ushort entry_count;
        public ushort EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected PartitionEntry[] partition_entries;
        public PartitionEntry[] PartitionEntries { get { return partition_entries; } set { partition_entries = value; } }

        protected FDSessionGroupBox session_info;  // optional
        public FDSessionGroupBox SessionInfo { get { return session_info; } set { session_info = value; } }

        protected GroupIdToNameBox group_id_to_name;  // optional
        public GroupIdToNameBox GroupIdToName { get { return group_id_to_name; } set { group_id_to_name = value; } }

        public FDItemInformationBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.entry_count);
            boxSize += IsoReaderWriter.ReadClass(stream, entry_count, out this.partition_entries);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.session_info); //optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.group_id_to_name); //optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.entry_count);
            boxSize += IsoReaderWriter.WriteClass(stream, entry_count, this.partition_entries);
            if (this.session_info != null) boxSize += IsoReaderWriter.WriteBox(stream, this.session_info); //optional
            if (this.group_id_to_name != null) boxSize += IsoReaderWriter.WriteBox(stream, this.group_id_to_name); //optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // entry_count
            boxSize += IsoReaderWriter.CalculateSize(partition_entries); // partition_entries
            if (this.session_info != null) boxSize += IsoReaderWriter.CalculateSize(session_info); // session_info
            if (this.group_id_to_name != null) boxSize += IsoReaderWriter.CalculateSize(group_id_to_name); // group_id_to_name
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class ProgressiveDownloadInfoBox : FullBox
    {
        public override string FourCC { get { return "pdin"; } }

        protected uint rate;
        public uint Rate { get { return rate; } set { rate = value; } }

        protected uint initial_delay;
        public uint InitialDelay { get { return initial_delay; } set { initial_delay = value; } }

        public ProgressiveDownloadInfoBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            for (int i = 0; ; i++)
            {
                /*  to end of box */
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.rate);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.initial_delay);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            for (int i = 0; ; i++)
            {
                /*  to end of box */
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.rate);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.initial_delay);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            for (int i = 0; ; i++)
            {
                /*  to end of box */
                boxSize += 32; // rate
                boxSize += 32; // initial_delay
            }
            return boxSize;
        }
    }


    public class PrimaryItemBox : FullBox
    {
        public override string FourCC { get { return "pitm"; } }

        protected ushort item_ID;
        public ushort ItemID { get { return item_ID; } set { item_ID = value; } }

        protected uint item_ID0;
        public uint ItemID0 { get { return item_ID0; } set { item_ID0 = value; } }

        public PrimaryItemBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.item_ID);
            }

            else
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.item_ID0);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.item_ID);
            }

            else
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.item_ID0);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 0)
            {
                boxSize += 16; // item_ID
            }

            else
            {
                boxSize += 32; // item_ID0
            }
            return boxSize;
        }
    }


    public class ProducerReferenceTimeBox : FullBox
    {
        public override string FourCC { get { return "prft"; } }

        protected uint reference_track_ID;
        public uint ReferenceTrackID { get { return reference_track_ID; } set { reference_track_ID = value; } }

        protected ulong ntp_timestamp;
        public ulong NtpTimestamp { get { return ntp_timestamp; } set { ntp_timestamp = value; } }

        protected uint media_time;
        public uint MediaTime { get { return media_time; } set { media_time = value; } }

        protected ulong media_time0;
        public ulong MediaTime0 { get { return media_time0; } set { media_time0 = value; } }

        public ProducerReferenceTimeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.reference_track_ID);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.ntp_timestamp);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.media_time);
            }

            else
            {
                boxSize += IsoReaderWriter.ReadUInt64(stream, out this.media_time0);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.reference_track_ID);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.ntp_timestamp);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.media_time);
            }

            else
            {
                boxSize += IsoReaderWriter.WriteUInt64(stream, this.media_time0);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // reference_track_ID
            boxSize += 64; // ntp_timestamp

            if (version == 0)
            {
                boxSize += 32; // media_time
            }

            else
            {
                boxSize += 64; // media_time0
            }
            return boxSize;
        }
    }


    public class RestrictedSchemeInfoBox : Box
    {
        public override string FourCC { get { return "rinf"; } }

        protected OriginalFormatBox original_format;
        public OriginalFormatBox OriginalFormat { get { return original_format; } set { original_format = value; } }

        protected SchemeTypeBox scheme_type_box;
        public SchemeTypeBox SchemeTypeBox { get { return scheme_type_box; } set { scheme_type_box = value; } }

        protected SchemeInformationBox info;  //  optional
        public SchemeInformationBox Info { get { return info; } set { info = value; } }

        public RestrictedSchemeInfoBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.original_format);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.scheme_type_box);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.info); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.original_format);
            boxSize += IsoReaderWriter.WriteBox(stream, this.scheme_type_box);
            if (this.info != null) boxSize += IsoReaderWriter.WriteBox(stream, this.info); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(original_format); // original_format
            boxSize += IsoReaderWriter.CalculateSize(scheme_type_box); // scheme_type_box
            if (this.info != null) boxSize += IsoReaderWriter.CalculateSize(info); // info
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class SampleAuxiliaryInformationOffsetsBox : FullBox
    {
        public override string FourCC { get { return "saio"; } }

        protected uint aux_info_type;
        public uint AuxInfoType { get { return aux_info_type; } set { aux_info_type = value; } }

        protected uint aux_info_type_parameter;
        public uint AuxInfoTypeParameter { get { return aux_info_type_parameter; } set { aux_info_type_parameter = value; } }

        protected uint entry_count;
        public uint EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected uint[] offset;
        public uint[] Offset { get { return offset; } set { offset = value; } }

        protected ulong[] offset0;
        public ulong[] Offset0 { get { return offset0; } set { offset0 = value; } }

        public SampleAuxiliaryInformationOffsetsBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if ((flags & 1) == 1)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.aux_info_type);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.aux_info_type_parameter);
            }
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.ReadUInt32Array(stream, entry_count, out this.offset);
            }

            else
            {
                boxSize += IsoReaderWriter.ReadUInt64Array(stream, entry_count, out this.offset0);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if ((flags & 1) == 1)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.aux_info_type);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.aux_info_type_parameter);
            }
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count);

            if (version == 0)
            {
                boxSize += IsoReaderWriter.WriteUInt32Array(stream, entry_count, this.offset);
            }

            else
            {
                boxSize += IsoReaderWriter.WriteUInt64Array(stream, entry_count, this.offset0);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if ((flags & 1) == 1)
            {
                boxSize += 32; // aux_info_type
                boxSize += 32; // aux_info_type_parameter
            }
            boxSize += 32; // entry_count

            if (version == 0)
            {
                boxSize += (ulong)entry_count * 32; // offset
            }

            else
            {
                boxSize += (ulong)entry_count * 64; // offset0
            }
            return boxSize;
        }
    }


    public class SampleAuxiliaryInformationSizesBox : FullBox
    {
        public override string FourCC { get { return "saiz"; } }

        protected uint aux_info_type;
        public uint AuxInfoType { get { return aux_info_type; } set { aux_info_type = value; } }

        protected uint aux_info_type_parameter;
        public uint AuxInfoTypeParameter { get { return aux_info_type_parameter; } set { aux_info_type_parameter = value; } }

        protected byte default_sample_info_size;
        public byte DefaultSampleInfoSize { get { return default_sample_info_size; } set { default_sample_info_size = value; } }

        protected uint sample_count;
        public uint SampleCount { get { return sample_count; } set { sample_count = value; } }

        protected byte[] sample_info_size;
        public byte[] SampleInfoSize { get { return sample_info_size; } set { sample_info_size = value; } }

        public SampleAuxiliaryInformationSizesBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if ((flags & 1) == 1)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.aux_info_type);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.aux_info_type_parameter);
            }
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.default_sample_info_size);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_count);

            if (default_sample_info_size == 0)
            {
                boxSize += IsoReaderWriter.ReadBytes(stream, sample_count, out this.sample_info_size);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if ((flags & 1) == 1)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.aux_info_type);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.aux_info_type_parameter);
            }
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.default_sample_info_size);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_count);

            if (default_sample_info_size == 0)
            {
                boxSize += IsoReaderWriter.WriteBytes(stream, sample_count, this.sample_info_size);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if ((flags & 1) == 1)
            {
                boxSize += 32; // aux_info_type
                boxSize += 32; // aux_info_type_parameter
            }
            boxSize += 8; // default_sample_info_size
            boxSize += 32; // sample_count

            if (default_sample_info_size == 0)
            {
                boxSize += (ulong)sample_count * 8; // sample_info_size
            }
            return boxSize;
        }
    }


    public class SampleToGroupBox : FullBox
    {
        public override string FourCC { get { return "sbgp"; } }

        protected uint grouping_type;
        public uint GroupingType { get { return grouping_type; } set { grouping_type = value; } }

        protected uint grouping_type_parameter;
        public uint GroupingTypeParameter { get { return grouping_type_parameter; } set { grouping_type_parameter = value; } }

        protected uint entry_count;
        public uint EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected uint sample_count;
        public uint SampleCount { get { return sample_count; } set { sample_count = value; } }

        protected uint group_description_index;
        public uint GroupDescriptionIndex { get { return group_description_index; } set { group_description_index = value; } }

        public SampleToGroupBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.grouping_type);

            if (version == 1)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.grouping_type_parameter);
            }
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_count);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_description_index);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.grouping_type);

            if (version == 1)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.grouping_type_parameter);
            }
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_count);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_description_index);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // grouping_type

            if (version == 1)
            {
                boxSize += 32; // grouping_type_parameter
            }
            boxSize += 32; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += 32; // sample_count
                boxSize += 32; // group_description_index
            }
            return boxSize;
        }
    }


    public class SchemeInformationBox : Box
    {
        public override string FourCC { get { return "schi"; } }

        protected Box[] scheme_specific_data;
        public Box[] SchemeSpecificData { get { return scheme_specific_data; } set { scheme_specific_data = value; } }

        public SchemeInformationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.scheme_specific_data);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.scheme_specific_data);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(scheme_specific_data); // scheme_specific_data
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class SchemeTypeBox : FullBox
    {
        public override string FourCC { get { return "schm"; } }

        protected uint scheme_type;  //  4CC identifying the scheme
        public uint SchemeType { get { return scheme_type; } set { scheme_type = value; } }

        protected uint scheme_version;  //  scheme version
        public uint SchemeVersion { get { return scheme_version; } set { scheme_version = value; } }

        protected string scheme_uri;  //  browser uri
        public string SchemeUri { get { return scheme_uri; } set { scheme_uri = value; } }

        public SchemeTypeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.scheme_type); // 4CC identifying the scheme
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.scheme_version); // scheme version

            if ((flags & 0x000001) == 0x000001)
            {
                boxSize += IsoReaderWriter.ReadString(stream, out this.scheme_uri); // browser uri
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.scheme_type); // 4CC identifying the scheme
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.scheme_version); // scheme version

            if ((flags & 0x000001) == 0x000001)
            {
                boxSize += IsoReaderWriter.WriteString(stream, this.scheme_uri); // browser uri
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // scheme_type
            boxSize += 32; // scheme_version

            if ((flags & 0x000001) == 0x000001)
            {
                boxSize += (ulong)scheme_uri.Length * 8; // scheme_uri
            }
            return boxSize;
        }
    }


    public class CompatibleSchemeTypeBox : FullBox
    {
        public override string FourCC { get { return "csch"; } }

        protected uint scheme_type;  //  4CC identifying the scheme
        public uint SchemeType { get { return scheme_type; } set { scheme_type = value; } }

        protected uint scheme_version;  //  scheme version 
        public uint SchemeVersion { get { return scheme_version; } set { scheme_version = value; } }

        protected string scheme_uri;  //  browser uri
        public string SchemeUri { get { return scheme_uri; } set { scheme_uri = value; } }

        public CompatibleSchemeTypeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            /*  identical syntax to SchemeTypeBox */
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.scheme_type); // 4CC identifying the scheme
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.scheme_version); // scheme version 

            if ((flags & 0x000001) == 0x000001)
            {
                boxSize += IsoReaderWriter.ReadString(stream, out this.scheme_uri); // browser uri
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            /*  identical syntax to SchemeTypeBox */
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.scheme_type); // 4CC identifying the scheme
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.scheme_version); // scheme version 

            if ((flags & 0x000001) == 0x000001)
            {
                boxSize += IsoReaderWriter.WriteString(stream, this.scheme_uri); // browser uri
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            /*  identical syntax to SchemeTypeBox */
            boxSize += 32; // scheme_type
            boxSize += 32; // scheme_version

            if ((flags & 0x000001) == 0x000001)
            {
                boxSize += (ulong)scheme_uri.Length * 8; // scheme_uri
            }
            return boxSize;
        }
    }


    public class SampleDependencyTypeBox : FullBox
    {
        public override string FourCC { get { return "sdtp"; } }

        protected byte is_leading;
        public byte IsLeading { get { return is_leading; } set { is_leading = value; } }

        protected byte sample_depends_on;
        public byte SampleDependsOn { get { return sample_depends_on; } set { sample_depends_on = value; } }

        protected byte sample_is_depended_on;
        public byte SampleIsDependedOn { get { return sample_is_depended_on; } set { sample_is_depended_on = value; } }

        protected byte sample_has_redundancy;
        public byte SampleHasRedundancy { get { return sample_has_redundancy; } set { sample_has_redundancy = value; } }

        public SampleDependencyTypeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            int sample_count = 0; // TODO: taken from the stsz sample_count


            for (int i = 0; i < sample_count; i++)
            {
                boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.is_leading);
                boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.sample_depends_on);
                boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.sample_is_depended_on);
                boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.sample_has_redundancy);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            int sample_count = 0; // TODO: taken from the stsz sample_count


            for (int i = 0; i < sample_count; i++)
            {
                boxSize += IsoReaderWriter.WriteBits(stream, 2, this.is_leading);
                boxSize += IsoReaderWriter.WriteBits(stream, 2, this.sample_depends_on);
                boxSize += IsoReaderWriter.WriteBits(stream, 2, this.sample_is_depended_on);
                boxSize += IsoReaderWriter.WriteBits(stream, 2, this.sample_has_redundancy);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            int sample_count = 0; // TODO: taken from the stsz sample_count


            for (int i = 0; i < sample_count; i++)
            {
                boxSize += 2; // is_leading
                boxSize += 2; // sample_depends_on
                boxSize += 2; // sample_is_depended_on
                boxSize += 2; // sample_has_redundancy
            }
            return boxSize;
        }
    }


    public class FDSessionGroupBox : Box
    {
        public override string FourCC { get { return "segr"; } }

        protected ushort num_session_groups;
        public ushort NumSessionGroups { get { return num_session_groups; } set { num_session_groups = value; } }

        protected byte entry_count;
        public byte EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected uint group_ID;
        public uint GroupID { get { return group_ID; } set { group_ID = value; } }

        protected ushort num_channels_in_session_group;
        public ushort NumChannelsInSessionGroup { get { return num_channels_in_session_group; } set { num_channels_in_session_group = value; } }

        protected uint hint_track_ID;
        public uint HintTrackID { get { return hint_track_ID; } set { hint_track_ID = value; } }

        public FDSessionGroupBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.num_session_groups);

            for (int i = 0; i < num_session_groups; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.entry_count);

                for (int j = 0; j < entry_count; j++)
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_ID);
                }
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.num_channels_in_session_group);

                for (int k = 0; k < num_channels_in_session_group; k++)
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.hint_track_ID);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.num_session_groups);

            for (int i = 0; i < num_session_groups; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.entry_count);

                for (int j = 0; j < entry_count; j++)
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_ID);
                }
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.num_channels_in_session_group);

                for (int k = 0; k < num_channels_in_session_group; k++)
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.hint_track_ID);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // num_session_groups

            for (int i = 0; i < num_session_groups; i++)
            {
                boxSize += 8; // entry_count

                for (int j = 0; j < entry_count; j++)
                {
                    boxSize += 32; // group_ID
                }
                boxSize += 16; // num_channels_in_session_group

                for (int k = 0; k < num_channels_in_session_group; k++)
                {
                    boxSize += 32; // hint_track_ID
                }
            }
            return boxSize;
        }
    }


    public class SampleGroupDescriptionBox : FullBox
    {
        public override string FourCC { get { return "sgpd"; } }

        protected uint grouping_type;
        public uint GroupingType { get { return grouping_type; } set { grouping_type = value; } }

        protected uint default_length;
        public uint DefaultLength { get { return default_length; } set { default_length = value; } }

        protected uint default_group_description_index;
        public uint DefaultGroupDescriptionIndex { get { return default_group_description_index; } set { default_group_description_index = value; } }

        protected uint entry_count;
        public uint EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected uint description_length;
        public uint DescriptionLength { get { return description_length; } set { description_length = value; } }

        protected SampleGroupDescriptionEntry SampleGroupDescriptionEntry;  //  an instance of a class derived from SampleGroupDescriptionEntry
        public SampleGroupDescriptionEntry _SampleGroupDescriptionEntry { get { return SampleGroupDescriptionEntry; } set { SampleGroupDescriptionEntry = value; } }

        public SampleGroupDescriptionBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.grouping_type);

            if (version >= 1)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.default_length);
            }

            if (version >= 2)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.default_group_description_index);
            }
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count);


            for (int i = 1; i <= entry_count; i++)
            {

                if (version >= 1)
                {

                    if (default_length == 0)
                    {
                        boxSize += IsoReaderWriter.ReadUInt32(stream, out this.description_length);
                    }
                }
                boxSize += IsoReaderWriter.ReadBox(stream, out this.SampleGroupDescriptionEntry); // an instance of a class derived from SampleGroupDescriptionEntry
                /*   that is appropriate and permitted for the media type */
            }
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.grouping_type);

            if (version >= 1)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.default_length);
            }

            if (version >= 2)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.default_group_description_index);
            }
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count);


            for (int i = 1; i <= entry_count; i++)
            {

                if (version >= 1)
                {

                    if (default_length == 0)
                    {
                        boxSize += IsoReaderWriter.WriteUInt32(stream, this.description_length);
                    }
                }
                boxSize += IsoReaderWriter.WriteBox(stream, this.SampleGroupDescriptionEntry); // an instance of a class derived from SampleGroupDescriptionEntry
                /*   that is appropriate and permitted for the media type */
            }
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // grouping_type

            if (version >= 1)
            {
                boxSize += 32; // default_length
            }

            if (version >= 2)
            {
                boxSize += 32; // default_group_description_index
            }
            boxSize += 32; // entry_count


            for (int i = 1; i <= entry_count; i++)
            {

                if (version >= 1)
                {

                    if (default_length == 0)
                    {
                        boxSize += 32; // description_length
                    }
                }
                boxSize += IsoReaderWriter.CalculateSize(SampleGroupDescriptionEntry); // SampleGroupDescriptionEntry
                /*   that is appropriate and permitted for the media type */
            }
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class CompressedSegmentIndexBox : CompressedBox
    {
        public override string FourCC { get { return "sidx"; } }

        public CompressedSegmentIndexBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class ProtectionSchemeInfoBox : Box
    {
        public override string FourCC { get { return "sinf"; } }

        protected OriginalFormatBox original_format;
        public OriginalFormatBox OriginalFormat { get { return original_format; } set { original_format = value; } }

        protected SchemeTypeBox scheme_type_box;  //  optional
        public SchemeTypeBox SchemeTypeBox { get { return scheme_type_box; } set { scheme_type_box = value; } }

        protected SchemeInformationBox info;  //  optional
        public SchemeInformationBox Info { get { return info; } set { info = value; } }

        public ProtectionSchemeInfoBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.original_format);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.scheme_type_box); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.info); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.original_format);
            if (this.scheme_type_box != null) boxSize += IsoReaderWriter.WriteBox(stream, this.scheme_type_box); // optional
            if (this.info != null) boxSize += IsoReaderWriter.WriteBox(stream, this.info); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(original_format); // original_format
            if (this.scheme_type_box != null) boxSize += IsoReaderWriter.CalculateSize(scheme_type_box); // scheme_type_box
            if (this.info != null) boxSize += IsoReaderWriter.CalculateSize(info); // info
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class FreeSpaceBox1 : Box
    {
        public override string FourCC { get { return "skip"; } }

        protected byte[] data;
        public byte[] Data { get { return data; } set { data = value; } }

        public FreeSpaceBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8Array(stream, out this.data);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8Array(stream, this.data);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)data.Length * 8; // data
            return boxSize;
        }
    }


    public class SoundMediaHeaderBox : FullBox
    {
        public override string FourCC { get { return "smhd"; } }

        protected short balance = 0;
        public short Balance { get { return balance; } set { balance = value; } }

        protected ushort reserved = 0;
        public ushort Reserved { get { return reserved; } set { reserved = value; } }

        public SoundMediaHeaderBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt16(stream, out this.balance);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reserved);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt16(stream, this.balance);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reserved);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // balance
            boxSize += 16; // reserved
            return boxSize;
        }
    }


    public class SRTPProcessBox : FullBox
    {
        public override string FourCC { get { return "srpp"; } }

        protected uint encryption_algorithm_rtp;
        public uint EncryptionAlgorithmRtp { get { return encryption_algorithm_rtp; } set { encryption_algorithm_rtp = value; } }

        protected uint encryption_algorithm_rtcp;
        public uint EncryptionAlgorithmRtcp { get { return encryption_algorithm_rtcp; } set { encryption_algorithm_rtcp = value; } }

        protected uint integrity_algorithm_rtp;
        public uint IntegrityAlgorithmRtp { get { return integrity_algorithm_rtp; } set { integrity_algorithm_rtp = value; } }

        protected uint integrity_algorithm_rtcp;
        public uint IntegrityAlgorithmRtcp { get { return integrity_algorithm_rtcp; } set { integrity_algorithm_rtcp = value; } }

        protected SchemeTypeBox scheme_type_box;
        public SchemeTypeBox SchemeTypeBox { get { return scheme_type_box; } set { scheme_type_box = value; } }

        protected SchemeInformationBox info;
        public SchemeInformationBox Info { get { return info; } set { info = value; } }

        public SRTPProcessBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.encryption_algorithm_rtp);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.encryption_algorithm_rtcp);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.integrity_algorithm_rtp);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.integrity_algorithm_rtcp);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.scheme_type_box);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.info);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.encryption_algorithm_rtp);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.encryption_algorithm_rtcp);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.integrity_algorithm_rtp);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.integrity_algorithm_rtcp);
            boxSize += IsoReaderWriter.WriteBox(stream, this.scheme_type_box);
            boxSize += IsoReaderWriter.WriteBox(stream, this.info);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // encryption_algorithm_rtp
            boxSize += 32; // encryption_algorithm_rtcp
            boxSize += 32; // integrity_algorithm_rtp
            boxSize += 32; // integrity_algorithm_rtcp
            boxSize += IsoReaderWriter.CalculateSize(scheme_type_box); // scheme_type_box
            boxSize += IsoReaderWriter.CalculateSize(info); // info
            return boxSize;
        }
    }


    public class CompressedSubsegmentIndexBox : CompressedBox
    {
        public override string FourCC { get { return "ssix"; } }

        public CompressedSubsegmentIndexBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class SampleTableBox : Box
    {
        public override string FourCC { get { return "stbl"; } }

        public SampleTableBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class ChunkOffsetBox : FullBox
    {
        public override string FourCC { get { return "stco"; } }

        protected uint entry_count;
        public uint EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected uint chunk_offset;
        public uint ChunkOffset { get { return chunk_offset; } set { chunk_offset = value; } }

        public ChunkOffsetBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.chunk_offset);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.chunk_offset);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += 32; // chunk_offset
            }
            return boxSize;
        }
    }


    public class DegradationPriorityBox : FullBox
    {
        public override string FourCC { get { return "stdp"; } }

        protected ushort priority;
        public ushort Priority { get { return priority; } set { priority = value; } }

        public DegradationPriorityBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            int sample_count = 0; // TODO: taken from the stsz sample_count



            for (int i = 0; i < sample_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.priority);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            int sample_count = 0; // TODO: taken from the stsz sample_count



            for (int i = 0; i < sample_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.priority);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            int sample_count = 0; // TODO: taken from the stsz sample_count



            for (int i = 0; i < sample_count; i++)
            {
                boxSize += 16; // priority
            }
            return boxSize;
        }
    }


    public class SubtitleMediaHeaderBox : FullBox
    {
        public override string FourCC { get { return "sthd"; } }

        public SubtitleMediaHeaderBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class SubTrackDefinitionBox : Box
    {
        public override string FourCC { get { return "strd"; } }

        public SubTrackDefinitionBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class SubTrackInformationBox : FullBox
    {
        public override string FourCC { get { return "stri"; } }

        protected short switch_group = 0;
        public short SwitchGroup { get { return switch_group; } set { switch_group = value; } }

        protected short alternate_group = 0;
        public short AlternateGroup { get { return alternate_group; } set { alternate_group = value; } }

        protected uint sub_track_ID = 0;
        public uint SubTrackID { get { return sub_track_ID; } set { sub_track_ID = value; } }

        protected uint[] attribute_list;  //  to the end of the box
        public uint[] AttributeList { get { return attribute_list; } set { attribute_list = value; } }

        public SubTrackInformationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt16(stream, out this.switch_group);
            boxSize += IsoReaderWriter.ReadInt16(stream, out this.alternate_group);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sub_track_ID);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.attribute_list); // to the end of the box
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt16(stream, this.switch_group);
            boxSize += IsoReaderWriter.WriteInt16(stream, this.alternate_group);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.sub_track_ID);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.attribute_list); // to the end of the box
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // switch_group
            boxSize += 16; // alternate_group
            boxSize += 32; // sub_track_ID
            boxSize += 32; // attribute_list
            return boxSize;
        }
    }


    public class SampleToChunkBox : FullBox
    {
        public override string FourCC { get { return "stsc"; } }

        protected uint entry_count;
        public uint EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected uint first_chunk;
        public uint FirstChunk { get { return first_chunk; } set { first_chunk = value; } }

        protected uint samples_per_chunk;
        public uint SamplesPerChunk { get { return samples_per_chunk; } set { samples_per_chunk = value; } }

        protected uint sample_description_index;
        public uint SampleDescriptionIndex { get { return sample_description_index; } set { sample_description_index = value; } }

        public SampleToChunkBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.first_chunk);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.samples_per_chunk);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_description_index);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.first_chunk);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.samples_per_chunk);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_description_index);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += 32; // first_chunk
                boxSize += 32; // samples_per_chunk
                boxSize += 32; // sample_description_index
            }
            return boxSize;
        }
    }


    public class SampleDescriptionBox : FullBox
    {
        public override string FourCC { get { return "stsd"; } }

        protected uint entry_count;
        public uint EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected SampleEntry SampleEntry;  //  an instance of a class derived from SampleEntry
        public SampleEntry _SampleEntry { get { return SampleEntry; } set { SampleEntry = value; } }

        public SampleDescriptionBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.ReadBox(stream, out this.SampleEntry); // an instance of a class derived from SampleEntry
            }
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.WriteBox(stream, this.SampleEntry); // an instance of a class derived from SampleEntry
            }
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            boxSize += 32; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.CalculateSize(SampleEntry); // SampleEntry
            }
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class SubTrackSampleGroupBox : FullBox
    {
        public override string FourCC { get { return "stsg"; } }

        protected uint grouping_type;
        public uint GroupingType { get { return grouping_type; } set { grouping_type = value; } }

        protected ushort item_count;
        public ushort ItemCount { get { return item_count; } set { item_count = value; } }

        protected uint group_description_index;
        public uint GroupDescriptionIndex { get { return group_description_index; } set { group_description_index = value; } }

        public SubTrackSampleGroupBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.grouping_type);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_description_index);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.grouping_type);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_description_index);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // grouping_type
            boxSize += 16; // item_count

            for (int i = 0; i < item_count; i++)
            {
                boxSize += 32; // group_description_index
            }
            return boxSize;
        }
    }


    public class ShadowSyncSampleBox : FullBox
    {
        public override string FourCC { get { return "stsh"; } }

        protected uint entry_count;
        public uint EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected uint shadowed_sample_number;
        public uint ShadowedSampleNumber { get { return shadowed_sample_number; } set { shadowed_sample_number = value; } }

        protected uint sync_sample_number;
        public uint SyncSampleNumber { get { return sync_sample_number; } set { sync_sample_number = value; } }

        public ShadowSyncSampleBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count);


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.shadowed_sample_number);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sync_sample_number);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count);


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.shadowed_sample_number);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.sync_sample_number);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += 32; // shadowed_sample_number
                boxSize += 32; // sync_sample_number
            }
            return boxSize;
        }
    }


    public class SyncSampleBox : FullBox
    {
        public override string FourCC { get { return "stss"; } }

        protected uint entry_count;
        public uint EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected uint sample_number;
        public uint SampleNumber { get { return sample_number; } set { sample_number = value; } }

        public SyncSampleBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count);


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_number);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count);


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_number);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += 32; // sample_number
            }
            return boxSize;
        }
    }


    public class SampleSizeBox : FullBox
    {
        public override string FourCC { get { return "stsz"; } }

        protected uint sample_size;
        public uint SampleSize { get { return sample_size; } set { sample_size = value; } }

        protected uint sample_count;
        public uint SampleCount { get { return sample_count; } set { sample_count = value; } }

        protected uint entry_size;
        public uint EntrySize { get { return entry_size; } set { entry_size = value; } }

        public SampleSizeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_size);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_count);

            if (sample_size == 0)
            {

                for (int i = 1; i <= sample_count; i++)
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_size);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_size);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_count);

            if (sample_size == 0)
            {

                for (int i = 1; i <= sample_count; i++)
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_size);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // sample_size
            boxSize += 32; // sample_count

            if (sample_size == 0)
            {

                for (int i = 1; i <= sample_count; i++)
                {
                    boxSize += 32; // entry_size
                }
            }
            return boxSize;
        }
    }


    public class TimeToSampleBox : FullBox
    {
        public override string FourCC { get { return "stts"; } }

        protected uint entry_count;
        public uint EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected uint sample_count;
        public uint SampleCount { get { return sample_count; } set { sample_count = value; } }

        protected uint sample_delta;
        public uint SampleDelta { get { return sample_delta; } set { sample_delta = value; } }

        public TimeToSampleBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count);


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_count);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_delta);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count);


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_count);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_delta);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += 32; // sample_count
                boxSize += 32; // sample_delta
            }
            return boxSize;
        }
    }


    public class SegmentTypeBox : GeneralTypeBox
    {
        public override string FourCC { get { return "styp"; } }

        public SegmentTypeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class CompactSampleSizeBox : FullBox
    {
        public override string FourCC { get { return "stz2"; } }

        protected uint reserved = 0;
        public uint Reserved { get { return reserved; } set { reserved = value; } }

        protected byte field_size;
        public byte FieldSize { get { return field_size; } set { field_size = value; } }

        protected uint sample_count;
        public uint SampleCount { get { return sample_count; } set { sample_count = value; } }

        protected byte[] entry_size;
        public byte[] EntrySize { get { return entry_size; } set { entry_size = value; } }

        public CompactSampleSizeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt24(stream, out this.reserved);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.field_size);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_count);

            for (int i = 1; i <= sample_count; i++)
            {
                boxSize += IsoReaderWriter.ReadBytes(stream, field_size, out this.entry_size);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt24(stream, this.reserved);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.field_size);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_count);

            for (int i = 1; i <= sample_count; i++)
            {
                boxSize += IsoReaderWriter.WriteBytes(stream, field_size, this.entry_size);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 24; // reserved
            boxSize += 8; // field_size
            boxSize += 32; // sample_count

            for (int i = 1; i <= sample_count; i++)
            {
                boxSize += (ulong)field_size; // entry_size
            }
            return boxSize;
        }
    }


    public class SubSampleInformationBox : FullBox
    {
        public override string FourCC { get { return "subs"; } }

        protected uint entry_count;
        public uint EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected uint sample_delta;
        public uint SampleDelta { get { return sample_delta; } set { sample_delta = value; } }

        protected ushort subsample_count;
        public ushort SubsampleCount { get { return subsample_count; } set { subsample_count = value; } }

        protected uint subsample_size;
        public uint SubsampleSize { get { return subsample_size; } set { subsample_size = value; } }

        protected ushort subsample_size0;
        public ushort SubsampleSize0 { get { return subsample_size0; } set { subsample_size0 = value; } }

        protected byte subsample_priority;
        public byte SubsamplePriority { get { return subsample_priority; } set { subsample_priority = value; } }

        protected byte discardable;
        public byte Discardable { get { return discardable; } set { discardable = value; } }

        protected uint codec_specific_parameters;
        public uint CodecSpecificParameters { get { return codec_specific_parameters; } set { codec_specific_parameters = value; } }

        public SubSampleInformationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count);


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_delta);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.subsample_count);

                if (subsample_count > 0)
                {

                    for (int j = 0; j < subsample_count; j++)
                    {

                        if (version == 1)
                        {
                            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.subsample_size);
                        }

                        else
                        {
                            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.subsample_size0);
                        }
                        boxSize += IsoReaderWriter.ReadUInt8(stream, out this.subsample_priority);
                        boxSize += IsoReaderWriter.ReadUInt8(stream, out this.discardable);
                        boxSize += IsoReaderWriter.ReadUInt32(stream, out this.codec_specific_parameters);
                    }
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count);


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_delta);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.subsample_count);

                if (subsample_count > 0)
                {

                    for (int j = 0; j < subsample_count; j++)
                    {

                        if (version == 1)
                        {
                            boxSize += IsoReaderWriter.WriteUInt32(stream, this.subsample_size);
                        }

                        else
                        {
                            boxSize += IsoReaderWriter.WriteUInt16(stream, this.subsample_size0);
                        }
                        boxSize += IsoReaderWriter.WriteUInt8(stream, this.subsample_priority);
                        boxSize += IsoReaderWriter.WriteUInt8(stream, this.discardable);
                        boxSize += IsoReaderWriter.WriteUInt32(stream, this.codec_specific_parameters);
                    }
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += 32; // sample_delta
                boxSize += 16; // subsample_count

                if (subsample_count > 0)
                {

                    for (int j = 0; j < subsample_count; j++)
                    {

                        if (version == 1)
                        {
                            boxSize += 32; // subsample_size
                        }

                        else
                        {
                            boxSize += 16; // subsample_size0
                        }
                        boxSize += 8; // subsample_priority
                        boxSize += 8; // discardable
                        boxSize += 32; // codec_specific_parameters
                    }
                }
            }
            return boxSize;
        }
    }


    public class TrackFragmentBaseMediaDecodeTimeBox : FullBox
    {
        public override string FourCC { get { return "tfdt"; } }

        protected ulong baseMediaDecodeTime;
        public ulong BaseMediaDecodeTime { get { return baseMediaDecodeTime; } set { baseMediaDecodeTime = value; } }

        protected uint baseMediaDecodeTime0;
        public uint BaseMediaDecodeTime0 { get { return baseMediaDecodeTime0; } set { baseMediaDecodeTime0 = value; } }

        public TrackFragmentBaseMediaDecodeTimeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 1)
            {
                boxSize += IsoReaderWriter.ReadUInt64(stream, out this.baseMediaDecodeTime);
            }

            else
            {
                /*  version==0 */
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.baseMediaDecodeTime0);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 1)
            {
                boxSize += IsoReaderWriter.WriteUInt64(stream, this.baseMediaDecodeTime);
            }

            else
            {
                /*  version==0 */
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.baseMediaDecodeTime0);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 1)
            {
                boxSize += 64; // baseMediaDecodeTime
            }

            else
            {
                /*  version==0 */
                boxSize += 32; // baseMediaDecodeTime0
            }
            return boxSize;
        }
    }


    public class TrackFragmentHeaderBox : FullBox
    {
        public override string FourCC { get { return "tfhd"; } }

        protected uint track_ID;  //  all the following are optional fields
        public uint TrackID { get { return track_ID; } set { track_ID = value; } }

        protected ulong base_data_offset;
        public ulong BaseDataOffset { get { return base_data_offset; } set { base_data_offset = value; } }

        protected uint sample_description_index;
        public uint SampleDescriptionIndex { get { return sample_description_index; } set { sample_description_index = value; } }

        protected uint default_sample_duration;
        public uint DefaultSampleDuration { get { return default_sample_duration; } set { default_sample_duration = value; } }

        protected uint default_sample_size;
        public uint DefaultSampleSize { get { return default_sample_size; } set { default_sample_size = value; } }

        protected uint default_sample_flags;
        public uint DefaultSampleFlags { get { return default_sample_flags; } set { default_sample_flags = value; } }

        public TrackFragmentHeaderBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadUInt32(stream, out this.track_ID); // all the following are optional fields
            /*  their presence is indicated by bits in the tf_flags */
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.base_data_offset);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_description_index);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.default_sample_duration);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.default_sample_size);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.default_sample_flags);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.track_ID != null) boxSize += IsoReaderWriter.WriteUInt32(stream, this.track_ID); // all the following are optional fields
            /*  their presence is indicated by bits in the tf_flags */
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.base_data_offset);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_description_index);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.default_sample_duration);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.default_sample_size);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.default_sample_flags);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.track_ID != null) boxSize += 32; // track_ID
            /*  their presence is indicated by bits in the tf_flags */
            boxSize += 64; // base_data_offset
            boxSize += 32; // sample_description_index
            boxSize += 32; // default_sample_duration
            boxSize += 32; // default_sample_size
            boxSize += 32; // default_sample_flags
            return boxSize;
        }
    }


    public class TrackFragmentRandomAccessBox : FullBox
    {
        public override string FourCC { get { return "tfra"; } }

        protected uint track_ID;
        public uint TrackID { get { return track_ID; } set { track_ID = value; } }

        protected uint reserved = 0;
        public uint Reserved { get { return reserved; } set { reserved = value; } }

        protected byte length_size_of_traf_num;
        public byte LengthSizeOfTrafNum { get { return length_size_of_traf_num; } set { length_size_of_traf_num = value; } }

        protected byte length_size_of_trun_num;
        public byte LengthSizeOfTrunNum { get { return length_size_of_trun_num; } set { length_size_of_trun_num = value; } }

        protected byte length_size_of_sample_num;
        public byte LengthSizeOfSampleNum { get { return length_size_of_sample_num; } set { length_size_of_sample_num = value; } }

        protected uint number_of_entry;
        public uint NumberOfEntry { get { return number_of_entry; } set { number_of_entry = value; } }

        protected ulong time;
        public ulong Time { get { return time; } set { time = value; } }

        protected ulong moof_offset;
        public ulong MoofOffset { get { return moof_offset; } set { moof_offset = value; } }

        protected uint time0;
        public uint Time0 { get { return time0; } set { time0 = value; } }

        protected uint moof_offset0;
        public uint MoofOffset0 { get { return moof_offset0; } set { moof_offset0 = value; } }

        protected byte[] traf_number;
        public byte[] TrafNumber { get { return traf_number; } set { traf_number = value; } }

        protected byte[] trun_number;
        public byte[] TrunNumber { get { return trun_number; } set { trun_number = value; } }

        protected byte[] sample_delta;
        public byte[] SampleDelta { get { return sample_delta; } set { sample_delta = value; } }

        public TrackFragmentRandomAccessBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.track_ID);
            boxSize += IsoReaderWriter.ReadBits(stream, 26, out this.reserved);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.length_size_of_traf_num);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.length_size_of_trun_num);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.length_size_of_sample_num);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.number_of_entry);

            for (int i = 1; i <= number_of_entry; i++)
            {

                if (version == 1)
                {
                    boxSize += IsoReaderWriter.ReadUInt64(stream, out this.time);
                    boxSize += IsoReaderWriter.ReadUInt64(stream, out this.moof_offset);
                }

                else
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.time0);
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.moof_offset0);
                }
                boxSize += IsoReaderWriter.ReadBytes(stream, (ulong)(length_size_of_traf_num + 1), out this.traf_number);
                boxSize += IsoReaderWriter.ReadBytes(stream, (ulong)(length_size_of_trun_num + 1), out this.trun_number);
                boxSize += IsoReaderWriter.ReadBytes(stream, (ulong)(length_size_of_sample_num + 1), out this.sample_delta);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.track_ID);
            boxSize += IsoReaderWriter.WriteBits(stream, 26, this.reserved);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.length_size_of_traf_num);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.length_size_of_trun_num);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.length_size_of_sample_num);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.number_of_entry);

            for (int i = 1; i <= number_of_entry; i++)
            {

                if (version == 1)
                {
                    boxSize += IsoReaderWriter.WriteUInt64(stream, this.time);
                    boxSize += IsoReaderWriter.WriteUInt64(stream, this.moof_offset);
                }

                else
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.time0);
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.moof_offset0);
                }
                boxSize += IsoReaderWriter.WriteBytes(stream, (ulong)(length_size_of_traf_num + 1), this.traf_number);
                boxSize += IsoReaderWriter.WriteBytes(stream, (ulong)(length_size_of_trun_num + 1), this.trun_number);
                boxSize += IsoReaderWriter.WriteBytes(stream, (ulong)(length_size_of_sample_num + 1), this.sample_delta);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_ID
            boxSize += 26; // reserved
            boxSize += 2; // length_size_of_traf_num
            boxSize += 2; // length_size_of_trun_num
            boxSize += 2; // length_size_of_sample_num
            boxSize += 32; // number_of_entry

            for (int i = 1; i <= number_of_entry; i++)
            {

                if (version == 1)
                {
                    boxSize += 64; // time
                    boxSize += 64; // moof_offset
                }

                else
                {
                    boxSize += 32; // time0
                    boxSize += 32; // moof_offset0
                }
                boxSize += (ulong)(length_size_of_traf_num + 1) * 8; // traf_number
                boxSize += (ulong)(length_size_of_trun_num + 1) * 8; // trun_number
                boxSize += (ulong)(length_size_of_sample_num + 1) * 8; // sample_delta
            }
            return boxSize;
        }
    }


    public class TrackHeaderBox : FullBox
    {
        public override string FourCC { get { return "tkhd"; } }

        protected ulong creation_time;
        public ulong CreationTime { get { return creation_time; } set { creation_time = value; } }

        protected ulong modification_time;
        public ulong ModificationTime { get { return modification_time; } set { modification_time = value; } }

        protected uint track_ID;
        public uint TrackID { get { return track_ID; } set { track_ID = value; } }

        protected uint reserved = 0;
        public uint Reserved { get { return reserved; } set { reserved = value; } }

        protected ulong duration;
        public ulong Duration { get { return duration; } set { duration = value; } }

        protected uint creation_time0;
        public uint CreationTime0 { get { return creation_time0; } set { creation_time0 = value; } }

        protected uint modification_time0;
        public uint ModificationTime0 { get { return modification_time0; } set { modification_time0 = value; } }

        protected uint track_ID0;
        public uint TrackID0 { get { return track_ID0; } set { track_ID0 = value; } }

        protected uint reserved0 = 0;
        public uint Reserved0 { get { return reserved0; } set { reserved0 = value; } }

        protected uint duration0;
        public uint Duration0 { get { return duration0; } set { duration0 = value; } }

        protected uint[] reserved1 = [];
        public uint[] Reserved1 { get { return reserved1; } set { reserved1 = value; } }

        protected short layer = 0;
        public short Layer { get { return layer; } set { layer = value; } }

        protected short alternate_group = 0;
        public short AlternateGroup { get { return alternate_group; } set { alternate_group = value; } }

        protected short volume = 0; // = { default samplerate of media}<<16;
        public short Volume { get { return volume; } set { volume = value; } }

        protected ushort reserved2 = 0;
        public ushort Reserved2 { get { return reserved2; } set { reserved2 = value; } }

        protected uint[] matrix =
            { 0x00010000,0,0,0,0x00010000,0,0,0,0x40000000 };  //  unity matrix
        public uint[] Matrix { get { return matrix; } set { matrix = value; } }

        protected uint width;
        public uint Width { get { return width; } set { width = value; } }

        protected uint height;
        public uint Height { get { return height; } set { height = value; } }

        public TrackHeaderBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 1)
            {
                boxSize += IsoReaderWriter.ReadUInt64(stream, out this.creation_time);
                boxSize += IsoReaderWriter.ReadUInt64(stream, out this.modification_time);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.track_ID);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.reserved);
                boxSize += IsoReaderWriter.ReadUInt64(stream, out this.duration);
            }

            else
            {
                /*  version==0 */
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.creation_time0);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.modification_time0);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.track_ID0);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.reserved0);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.duration0);
            }
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, 2, out this.reserved1);
            boxSize += IsoReaderWriter.ReadInt16(stream, out this.layer);
            boxSize += IsoReaderWriter.ReadInt16(stream, out this.alternate_group);
            boxSize += IsoReaderWriter.ReadInt16(stream, out this.volume);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reserved2);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, 9, out this.matrix); // unity matrix
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.width);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.height);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 1)
            {
                boxSize += IsoReaderWriter.WriteUInt64(stream, this.creation_time);
                boxSize += IsoReaderWriter.WriteUInt64(stream, this.modification_time);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.track_ID);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.reserved);
                boxSize += IsoReaderWriter.WriteUInt64(stream, this.duration);
            }

            else
            {
                /*  version==0 */
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.creation_time0);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.modification_time0);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.track_ID0);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.reserved0);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.duration0);
            }
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, 2, this.reserved1);
            boxSize += IsoReaderWriter.WriteInt16(stream, this.layer);
            boxSize += IsoReaderWriter.WriteInt16(stream, this.alternate_group);
            boxSize += IsoReaderWriter.WriteInt16(stream, this.volume);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reserved2);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, 9, this.matrix); // unity matrix
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.width);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.height);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 1)
            {
                boxSize += 64; // creation_time
                boxSize += 64; // modification_time
                boxSize += 32; // track_ID
                boxSize += 32; // reserved
                boxSize += 64; // duration
            }

            else
            {
                /*  version==0 */
                boxSize += 32; // creation_time0
                boxSize += 32; // modification_time0
                boxSize += 32; // track_ID0
                boxSize += 32; // reserved0
                boxSize += 32; // duration0
            }
            boxSize += 2 * 32; // reserved1
            boxSize += 16; // layer
            boxSize += 16; // alternate_group
            boxSize += 16; // volume
            boxSize += 16; // reserved2
            boxSize += 9 * 32; // matrix
            boxSize += 32; // width
            boxSize += 32; // height
            return boxSize;
        }
    }


    public class TrackFragmentBox : Box
    {
        public override string FourCC { get { return "traf"; } }

        public TrackFragmentBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class TrackBox : Box
    {
        public override string FourCC { get { return "trak"; } }

        public TrackBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class TrackReferenceBox : Box
    {
        public override string FourCC { get { return "tref"; } }

        protected TrackReferenceTypeBox[] TrackReferenceTypeBox;
        public TrackReferenceTypeBox[] _TrackReferenceTypeBox { get { return TrackReferenceTypeBox; } set { TrackReferenceTypeBox = value; } }

        public TrackReferenceBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.TrackReferenceTypeBox);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.TrackReferenceTypeBox);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(TrackReferenceTypeBox); // TrackReferenceTypeBox
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class TrackExtensionPropertiesBox : FullBox
    {
        public override string FourCC { get { return "trep"; } }

        protected uint track_ID;  //  Any number of boxes may follow
        public uint TrackID { get { return track_ID; } set { track_ID = value; } }

        public TrackExtensionPropertiesBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.track_ID); // Any number of boxes may follow
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.track_ID); // Any number of boxes may follow
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_ID
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class TrackExtendsBox : FullBox
    {
        public override string FourCC { get { return "trex"; } }

        protected uint track_ID;
        public uint TrackID { get { return track_ID; } set { track_ID = value; } }

        protected uint default_sample_description_index;
        public uint DefaultSampleDescriptionIndex { get { return default_sample_description_index; } set { default_sample_description_index = value; } }

        protected uint default_sample_duration;
        public uint DefaultSampleDuration { get { return default_sample_duration; } set { default_sample_duration = value; } }

        protected uint default_sample_size;
        public uint DefaultSampleSize { get { return default_sample_size; } set { default_sample_size = value; } }

        protected uint default_sample_flags;
        public uint DefaultSampleFlags { get { return default_sample_flags; } set { default_sample_flags = value; } }

        public TrackExtendsBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.track_ID);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.default_sample_description_index);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.default_sample_duration);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.default_sample_size);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.default_sample_flags);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.track_ID);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.default_sample_description_index);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.default_sample_duration);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.default_sample_size);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.default_sample_flags);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_ID
            boxSize += 32; // default_sample_description_index
            boxSize += 32; // default_sample_duration
            boxSize += 32; // default_sample_size
            boxSize += 32; // default_sample_flags
            return boxSize;
        }
    }


    public class TrackGroupBox : Box
    {
        public override string FourCC { get { return "trgr"; } }

        public TrackGroupBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class TrackRunBox : FullBox
    {
        public override string FourCC { get { return "trun"; } }

        protected uint sample_count;  //  the following are optional fields
        public uint SampleCount { get { return sample_count; } set { sample_count = value; } }

        protected int data_offset;
        public int DataOffset { get { return data_offset; } set { data_offset = value; } }

        protected uint first_sample_flags;  //  all fields in the following array are optional
        public uint FirstSampleFlags { get { return first_sample_flags; } set { first_sample_flags = value; } }

        public TrackRunBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_count); // the following are optional fields
            boxSize += IsoReaderWriter.ReadInt32(stream, out this.data_offset);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadUInt32(stream, out this.first_sample_flags); // all fields in the following array are optional
            /*  as indicated by bits set in the tr_flags */

            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.sample_count != null) boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_count); // the following are optional fields
            boxSize += IsoReaderWriter.WriteInt32(stream, this.data_offset);
            if (this.first_sample_flags != null) boxSize += IsoReaderWriter.WriteUInt32(stream, this.first_sample_flags); // all fields in the following array are optional
            /*  as indicated by bits set in the tr_flags */

            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.sample_count != null) boxSize += 32; // sample_count
            boxSize += 32; // data_offset
            if (this.first_sample_flags != null) boxSize += 32; // first_sample_flags
            /*  as indicated by bits set in the tr_flags */

            return boxSize;
        }
    }


    public class TrackTypeBox : GeneralTypeBox
    {
        public override string FourCC { get { return "ttyp"; } }

        public TrackTypeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class TypeCombinationBox : Box
    {
        public override string FourCC { get { return "tyco"; } }

        protected uint[] compatible_brands;  //  to end of the box
        public uint[] CompatibleBrands { get { return compatible_brands; } set { compatible_brands = value; } }

        public TypeCombinationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.compatible_brands); // to end of the box
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.compatible_brands); // to end of the box
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // compatible_brands
            return boxSize;
        }
    }


    public class UserDataBox : Box
    {
        public override string FourCC { get { return "udta"; } }

        public UserDataBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class BoxHeader
    {


        protected uint size;
        public uint Size { get { return size; } set { size = value; } }

        protected uint type; // = boxtype
        public uint Type { get { return type; } set { type = value; } }

        protected ulong largesize;
        public ulong Largesize { get { return largesize; } set { largesize = value; } }

        protected byte[] usertype; // = extended_type
        public byte[] Usertype { get { return usertype; } set { usertype = value; } }

        public BoxHeader()
        { }

        public async virtual Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.size);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.type);

            if (size == 1)
            {
                boxSize += IsoReaderWriter.ReadUInt64(stream, out this.largesize);
            }

            else if (size == 0)
            {
                /*  box extends to end of file */
            }

            if (type == IsoReaderWriter.FromFourCC("uuid"))
            {
                boxSize += IsoReaderWriter.ReadBytes(stream, 16, out this.usertype);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.size);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.type);

            if (size == 1)
            {
                boxSize += IsoReaderWriter.WriteUInt64(stream, this.largesize);
            }

            else if (size == 0)
            {
                /*  box extends to end of file */
            }

            if (type == IsoReaderWriter.FromFourCC("uuid"))
            {
                boxSize += IsoReaderWriter.WriteBytes(stream, 16, this.usertype);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 32; // size
            boxSize += 32; // type

            if (size == 1)
            {
                boxSize += 64; // largesize
            }

            else if (size == 0)
            {
                /*  box extends to end of file */
            }

            if (type == IsoReaderWriter.FromFourCC("uuid"))
            {
                boxSize += 16 * 8; // usertype
            }
            return boxSize;
        }
    }


    public class VideoMediaHeaderBox : FullBox
    {
        public override string FourCC { get { return "vmhd"; } }

        protected ushort graphicsmode = 0;  //  copy, see below
        public ushort Graphicsmode { get { return graphicsmode; } set { graphicsmode = value; } }

        protected ushort[] opcolor = { 0, 0, 0 };
        public ushort[] Opcolor { get { return opcolor; } set { opcolor = value; } }

        public VideoMediaHeaderBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.graphicsmode); // copy, see below
            boxSize += IsoReaderWriter.ReadUInt16Array(stream, 3, out this.opcolor);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.graphicsmode); // copy, see below
            boxSize += IsoReaderWriter.WriteUInt16Array(stream, 3, this.opcolor);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // graphicsmode
            boxSize += 3 * 16; // opcolor
            return boxSize;
        }
    }


    public class XMLBox : FullBox
    {
        public override string FourCC { get { return "xml "; } }

        protected string xml;
        public string Xml { get { return xml; } set { xml = value; } }

        public XMLBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadString(stream, out this.xml);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteString(stream, this.xml);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)xml.Length * 8; // xml
            return boxSize;
        }
    }


    public class CompressedMovieFragmentBox1 : CompressedBox
    {
        public override string FourCC { get { return "!mof"; } }

        public CompressedMovieFragmentBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class CompressedMovieBox1 : CompressedBox
    {
        public override string FourCC { get { return "!mov"; } }

        public CompressedMovieBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class CompressedSegmentIndexBox1 : CompressedBox
    {
        public override string FourCC { get { return "!six"; } }

        public CompressedSegmentIndexBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class CompressedSubsegmentIndexBox1 : CompressedBox
    {
        public override string FourCC { get { return "!ssx"; } }

        public CompressedSubsegmentIndexBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class AmbientViewingEnvironmentBox : Box
    {
        public override string FourCC { get { return "amve"; } }

        protected uint ambient_illuminance;
        public uint AmbientIlluminance { get { return ambient_illuminance; } set { ambient_illuminance = value; } }

        protected ushort ambient_light_x;
        public ushort AmbientLightX { get { return ambient_light_x; } set { ambient_light_x = value; } }

        protected ushort ambient_light_y;
        public ushort AmbientLightY { get { return ambient_light_y; } set { ambient_light_y = value; } }

        public AmbientViewingEnvironmentBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.ambient_illuminance);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.ambient_light_x);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.ambient_light_y);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.ambient_illuminance);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.ambient_light_x);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.ambient_light_y);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // ambient_illuminance
            boxSize += 16; // ambient_light_x
            boxSize += 16; // ambient_light_y
            return boxSize;
        }
    }


    public class MetadataKeyTableBox : Box
    {
        public override string FourCC { get { return "keys"; } }

        protected MetadataKeyBox[] MetadataKeyBox;
        public MetadataKeyBox[] _MetadataKeyBox { get { return MetadataKeyBox; } set { MetadataKeyBox = value; } }

        public MetadataKeyTableBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.MetadataKeyBox);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.MetadataKeyBox);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(MetadataKeyBox); // MetadataKeyBox
            return boxSize;
        }
    }


    public class URIBox : FullBox
    {
        public override string FourCC { get { return "uri "; } }

        protected string theURI;
        public string TheURI { get { return theURI; } set { theURI = value; } }

        public URIBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadString(stream, out this.theURI);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteString(stream, this.theURI);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)theURI.Length * 8; // theURI
            return boxSize;
        }
    }


    public class IroiInfoBox : Box
    {
        public override string FourCC { get { return "iroi"; } }

        protected byte iroi_type;
        public byte IroiType { get { return iroi_type; } set { iroi_type = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected byte grid_roi_mb_width;
        public byte GridRoiMbWidth { get { return grid_roi_mb_width; } set { grid_roi_mb_width = value; } }

        protected byte grid_roi_mb_height;
        public byte GridRoiMbHeight { get { return grid_roi_mb_height; } set { grid_roi_mb_height = value; } }

        protected uint num_roi;
        public uint NumRoi { get { return num_roi; } set { num_roi = value; } }

        protected uint top_left_mb;
        public uint TopLeftMb { get { return top_left_mb; } set { top_left_mb = value; } }

        protected byte roi_mb_width;
        public byte RoiMbWidth { get { return roi_mb_width; } set { roi_mb_width = value; } }

        protected byte roi_mb_height;
        public byte RoiMbHeight { get { return roi_mb_height; } set { roi_mb_height = value; } }

        public IroiInfoBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.iroi_type);
            boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.reserved);

            if (iroi_type == 0)
            {
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.grid_roi_mb_width);
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.grid_roi_mb_height);
            }

            else if (iroi_type == 1)
            {
                boxSize += IsoReaderWriter.ReadUInt24(stream, out this.num_roi);

                for (int i = 1; i <= num_roi; i++)
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.top_left_mb);
                    boxSize += IsoReaderWriter.ReadUInt8(stream, out this.roi_mb_width);
                    boxSize += IsoReaderWriter.ReadUInt8(stream, out this.roi_mb_height);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.iroi_type);
            boxSize += IsoReaderWriter.WriteBits(stream, 6, this.reserved);

            if (iroi_type == 0)
            {
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.grid_roi_mb_width);
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.grid_roi_mb_height);
            }

            else if (iroi_type == 1)
            {
                boxSize += IsoReaderWriter.WriteUInt24(stream, this.num_roi);

                for (int i = 1; i <= num_roi; i++)
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.top_left_mb);
                    boxSize += IsoReaderWriter.WriteUInt8(stream, this.roi_mb_width);
                    boxSize += IsoReaderWriter.WriteUInt8(stream, this.roi_mb_height);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 2; // iroi_type
            boxSize += 6; // reserved

            if (iroi_type == 0)
            {
                boxSize += 8; // grid_roi_mb_width
                boxSize += 8; // grid_roi_mb_height
            }

            else if (iroi_type == 1)
            {
                boxSize += 24; // num_roi

                for (int i = 1; i <= num_roi; i++)
                {
                    boxSize += 32; // top_left_mb
                    boxSize += 8; // roi_mb_width
                    boxSize += 8; // roi_mb_height
                }
            }
            return boxSize;
        }
    }


    public class TierDependencyBox : Box
    {
        public override string FourCC { get { return "ldep"; } }

        protected ushort entry_count;
        public ushort EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected ushort dependencyTierId;
        public ushort DependencyTierId { get { return dependencyTierId; } set { dependencyTierId = value; } }

        public TierDependencyBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.entry_count);

            for (int i = 0; i < entry_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.dependencyTierId);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.entry_count);

            for (int i = 0; i < entry_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.dependencyTierId);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // entry_count

            for (int i = 0; i < entry_count; i++)
            {
                boxSize += 16; // dependencyTierId
            }
            return boxSize;
        }
    }


    public class SVCDependencyRangeBox : Box
    {
        public override string FourCC { get { return "svdr"; } }

        protected byte min_dependency_id;
        public byte MinDependencyId { get { return min_dependency_id; } set { min_dependency_id = value; } }

        protected byte min_temporal_id;
        public byte MinTemporalId { get { return min_temporal_id; } set { min_temporal_id = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected byte min_quality_id;
        public byte MinQualityId { get { return min_quality_id; } set { min_quality_id = value; } }

        protected byte max_dependency_id;
        public byte MaxDependencyId { get { return max_dependency_id; } set { max_dependency_id = value; } }

        protected byte max_temporal_id;
        public byte MaxTemporalId { get { return max_temporal_id; } set { max_temporal_id = value; } }

        protected byte reserved0 = 0;
        public byte Reserved0 { get { return reserved0; } set { reserved0 = value; } }

        protected byte max_quality_id;
        public byte MaxQualityId { get { return max_quality_id; } set { max_quality_id = value; } }

        public SVCDependencyRangeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.min_dependency_id);
            boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.min_temporal_id);
            boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.reserved);
            boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.min_quality_id);
            boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.max_dependency_id);
            boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.max_temporal_id);
            boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.reserved0);
            boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.max_quality_id);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBits(stream, 3, this.min_dependency_id);
            boxSize += IsoReaderWriter.WriteBits(stream, 3, this.min_temporal_id);
            boxSize += IsoReaderWriter.WriteBits(stream, 6, this.reserved);
            boxSize += IsoReaderWriter.WriteBits(stream, 4, this.min_quality_id);
            boxSize += IsoReaderWriter.WriteBits(stream, 3, this.max_dependency_id);
            boxSize += IsoReaderWriter.WriteBits(stream, 3, this.max_temporal_id);
            boxSize += IsoReaderWriter.WriteBits(stream, 6, this.reserved0);
            boxSize += IsoReaderWriter.WriteBits(stream, 4, this.max_quality_id);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 3; // min_dependency_id
            boxSize += 3; // min_temporal_id
            boxSize += 6; // reserved
            boxSize += 4; // min_quality_id
            boxSize += 3; // max_dependency_id
            boxSize += 3; // max_temporal_id
            boxSize += 6; // reserved0
            boxSize += 4; // max_quality_id
            return boxSize;
        }
    }


    public class InitialParameterSetBox : Box
    {
        public override string FourCC { get { return "svip"; } }

        protected byte sps_id_count;
        public byte SpsIdCount { get { return sps_id_count; } set { sps_id_count = value; } }

        protected byte SPS_index;
        public byte SPSIndex { get { return SPS_index; } set { SPS_index = value; } }

        protected byte pps_id_count;
        public byte PpsIdCount { get { return pps_id_count; } set { pps_id_count = value; } }

        protected byte PPS_index;
        public byte PPSIndex { get { return PPS_index; } set { PPS_index = value; } }

        public InitialParameterSetBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.sps_id_count);

            for (int i = 0; i < sps_id_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.SPS_index);
            }
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.pps_id_count);

            for (int i = 0; i < pps_id_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.PPS_index);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.sps_id_count);

            for (int i = 0; i < sps_id_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.SPS_index);
            }
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.pps_id_count);

            for (int i = 0; i < pps_id_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.PPS_index);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // sps_id_count

            for (int i = 0; i < sps_id_count; i++)
            {
                boxSize += 8; // SPS_index
            }
            boxSize += 8; // pps_id_count

            for (int i = 0; i < pps_id_count; i++)
            {
                boxSize += 8; // PPS_index
            }
            return boxSize;
        }
    }


    public class PriorityRangeBox : Box
    {
        public override string FourCC { get { return "svpr"; } }

        protected byte reserved1 = 0;
        public byte Reserved1 { get { return reserved1; } set { reserved1 = value; } }

        protected byte min_priorityId;
        public byte MinPriorityId { get { return min_priorityId; } set { min_priorityId = value; } }

        protected byte reserved2 = 0;
        public byte Reserved2 { get { return reserved2; } set { reserved2 = value; } }

        protected byte max_priorityId;
        public byte MaxPriorityId { get { return max_priorityId; } set { max_priorityId = value; } }

        public PriorityRangeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.reserved1);
            boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.min_priorityId);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.reserved2);
            boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.max_priorityId);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.reserved1);
            boxSize += IsoReaderWriter.WriteBits(stream, 6, this.min_priorityId);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.reserved2);
            boxSize += IsoReaderWriter.WriteBits(stream, 6, this.max_priorityId);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 2; // reserved1
            boxSize += 6; // min_priorityId
            boxSize += 2; // reserved2
            boxSize += 6; // max_priorityId
            return boxSize;
        }
    }


    public class TranscodingInfoBox : Box
    {
        public override string FourCC { get { return "tran"; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected byte conversion_idc;
        public byte ConversionIdc { get { return conversion_idc; } set { conversion_idc = value; } }

        protected bool cavlc_info_present_flag;
        public bool CavlcInfoPresentFlag { get { return cavlc_info_present_flag; } set { cavlc_info_present_flag = value; } }

        protected bool cabac_info_present_flag;
        public bool CabacInfoPresentFlag { get { return cabac_info_present_flag; } set { cabac_info_present_flag = value; } }

        protected uint cavlc_profile_level_idc;
        public uint CavlcProfileLevelIdc { get { return cavlc_profile_level_idc; } set { cavlc_profile_level_idc = value; } }

        protected uint cavlc_max_bitrate;
        public uint CavlcMaxBitrate { get { return cavlc_max_bitrate; } set { cavlc_max_bitrate = value; } }

        protected uint cavlc_avg_bitrate;
        public uint CavlcAvgBitrate { get { return cavlc_avg_bitrate; } set { cavlc_avg_bitrate = value; } }

        protected uint cabac_profile_level_idc;
        public uint CabacProfileLevelIdc { get { return cabac_profile_level_idc; } set { cabac_profile_level_idc = value; } }

        protected uint cabac_max_bitrate;
        public uint CabacMaxBitrate { get { return cabac_max_bitrate; } set { cabac_max_bitrate = value; } }

        protected uint cabac_avg_bitrate;
        public uint CabacAvgBitrate { get { return cabac_avg_bitrate; } set { cabac_avg_bitrate = value; } }

        public TranscodingInfoBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.reserved);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.conversion_idc);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.cavlc_info_present_flag);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.cabac_info_present_flag);

            if (cavlc_info_present_flag)
            {
                boxSize += IsoReaderWriter.ReadUInt24(stream, out this.cavlc_profile_level_idc);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.cavlc_max_bitrate);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.cavlc_avg_bitrate);
            }

            if (cabac_info_present_flag)
            {
                boxSize += IsoReaderWriter.ReadUInt24(stream, out this.cabac_profile_level_idc);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.cabac_max_bitrate);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.cabac_avg_bitrate);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBits(stream, 4, this.reserved);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.conversion_idc);
            boxSize += IsoReaderWriter.WriteBit(stream, this.cavlc_info_present_flag);
            boxSize += IsoReaderWriter.WriteBit(stream, this.cabac_info_present_flag);

            if (cavlc_info_present_flag)
            {
                boxSize += IsoReaderWriter.WriteUInt24(stream, this.cavlc_profile_level_idc);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.cavlc_max_bitrate);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.cavlc_avg_bitrate);
            }

            if (cabac_info_present_flag)
            {
                boxSize += IsoReaderWriter.WriteUInt24(stream, this.cabac_profile_level_idc);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.cabac_max_bitrate);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.cabac_avg_bitrate);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 4; // reserved
            boxSize += 2; // conversion_idc
            boxSize += 1; // cavlc_info_present_flag
            boxSize += 1; // cabac_info_present_flag

            if (cavlc_info_present_flag)
            {
                boxSize += 24; // cavlc_profile_level_idc
                boxSize += 32; // cavlc_max_bitrate
                boxSize += 32; // cavlc_avg_bitrate
            }

            if (cabac_info_present_flag)
            {
                boxSize += 24; // cabac_profile_level_idc
                boxSize += 32; // cabac_max_bitrate
                boxSize += 32; // cabac_avg_bitrate
            }
            return boxSize;
        }
    }


    public class RectRegionBox : Box
    {
        public override string FourCC { get { return "rrgn"; } }

        protected ushort base_region_tierID;
        public ushort BaseRegionTierID { get { return base_region_tierID; } set { base_region_tierID = value; } }

        protected bool dynamic_rect;
        public bool DynamicRect { get { return dynamic_rect; } set { dynamic_rect = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected ushort horizontal_offset;
        public ushort HorizontalOffset { get { return horizontal_offset; } set { horizontal_offset = value; } }

        protected ushort vertical_offset;
        public ushort VerticalOffset { get { return vertical_offset; } set { vertical_offset = value; } }

        protected ushort region_width;
        public ushort RegionWidth { get { return region_width; } set { region_width = value; } }

        protected ushort region_height;
        public ushort RegionHeight { get { return region_height; } set { region_height = value; } }

        public RectRegionBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.base_region_tierID);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.dynamic_rect);
            boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.reserved);

            if (dynamic_rect == false)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.horizontal_offset);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.vertical_offset);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.region_width);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.region_height);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.base_region_tierID);
            boxSize += IsoReaderWriter.WriteBit(stream, this.dynamic_rect);
            boxSize += IsoReaderWriter.WriteBits(stream, 7, this.reserved);

            if (dynamic_rect == false)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.horizontal_offset);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.vertical_offset);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.region_width);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.region_height);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // base_region_tierID
            boxSize += 1; // dynamic_rect
            boxSize += 7; // reserved

            if (dynamic_rect == false)
            {
                boxSize += 16; // horizontal_offset
                boxSize += 16; // vertical_offset
                boxSize += 16; // region_width
                boxSize += 16; // region_height
            }
            return boxSize;
        }
    }


    public class BufferingBox : Box
    {
        public override string FourCC { get { return "buff"; } }

        protected ushort operating_point_count;
        public ushort OperatingPointCount { get { return operating_point_count; } set { operating_point_count = value; } }

        protected uint byte_rate;
        public uint ByteRate { get { return byte_rate; } set { byte_rate = value; } }

        protected uint cpb_size;
        public uint CpbSize { get { return cpb_size; } set { cpb_size = value; } }

        protected uint dpb_size;
        public uint DpbSize { get { return dpb_size; } set { dpb_size = value; } }

        protected uint init_cpb_delay;
        public uint InitCpbDelay { get { return init_cpb_delay; } set { init_cpb_delay = value; } }

        protected uint init_dpb_delay;
        public uint InitDpbDelay { get { return init_dpb_delay; } set { init_dpb_delay = value; } }

        public BufferingBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.operating_point_count);

            for (int i = 0; i < operating_point_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.byte_rate);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.cpb_size);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.dpb_size);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.init_cpb_delay);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.init_dpb_delay);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.operating_point_count);

            for (int i = 0; i < operating_point_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.byte_rate);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.cpb_size);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.dpb_size);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.init_cpb_delay);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.init_dpb_delay);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // operating_point_count

            for (int i = 0; i < operating_point_count; i++)
            {
                boxSize += 32; // byte_rate
                boxSize += 32; // cpb_size
                boxSize += 32; // dpb_size
                boxSize += 32; // init_cpb_delay
                boxSize += 32; // init_dpb_delay
            }
            return boxSize;
        }
    }


    public class MVCSubTrackViewBox : FullBox
    {
        public override string FourCC { get { return "mstv"; } }

        protected ushort item_count;
        public ushort ItemCount { get { return item_count; } set { item_count = value; } }

        protected ushort view_id;
        public ushort ViewId { get { return view_id; } set { view_id = value; } }

        protected byte temporal_id;
        public byte TemporalId { get { return temporal_id; } set { temporal_id = value; } }

        protected byte reserved;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        public MVCSubTrackViewBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += IsoReaderWriter.ReadBits(stream, 10, out this.view_id);
                boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.temporal_id);
                boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.reserved);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += IsoReaderWriter.WriteBits(stream, 10, this.view_id);
                boxSize += IsoReaderWriter.WriteBits(stream, 4, this.temporal_id);
                boxSize += IsoReaderWriter.WriteBits(stream, 2, this.reserved);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // item_count

            for (int i = 0; i < item_count; i++)
            {
                boxSize += 10; // view_id
                boxSize += 4; // temporal_id
                boxSize += 2; // reserved
            }
            return boxSize;
        }
    }


    public class MultiviewGroupBox : FullBox
    {
        public override string FourCC { get { return "mvcg"; } }

        protected uint multiview_group_id;
        public uint MultiviewGroupId { get { return multiview_group_id; } set { multiview_group_id = value; } }

        protected ushort num_entries;
        public ushort NumEntries { get { return num_entries; } set { num_entries = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected byte entry_type;
        public byte EntryType { get { return entry_type; } set { entry_type = value; } }

        protected uint track_id;
        public uint TrackId { get { return track_id; } set { track_id = value; } }

        protected uint track_id0;
        public uint TrackId0 { get { return track_id0; } set { track_id0 = value; } }

        protected ushort tier_id;
        public ushort TierId { get { return tier_id; } set { tier_id = value; } }

        protected byte reserved1 = 0;
        public byte Reserved1 { get { return reserved1; } set { reserved1 = value; } }

        protected ushort output_view_id;
        public ushort OutputViewId { get { return output_view_id; } set { output_view_id = value; } }

        protected byte reserved2 = 0;
        public byte Reserved2 { get { return reserved2; } set { reserved2 = value; } }

        protected ushort start_view_id;
        public ushort StartViewId { get { return start_view_id; } set { start_view_id = value; } }

        protected ushort view_count;
        public ushort ViewCount { get { return view_count; } set { view_count = value; } }

        protected TierInfoBox subset_stream_info;  //  optional
        public TierInfoBox SubsetStreamInfo { get { return subset_stream_info; } set { subset_stream_info = value; } }

        protected MultiviewRelationAttributeBox relation_attributes;  //  optional
        public MultiviewRelationAttributeBox RelationAttributes { get { return relation_attributes; } set { relation_attributes = value; } }

        protected TierBitRateBox subset_stream_bit_rate;  //  optional
        public TierBitRateBox SubsetStreamBitRate { get { return subset_stream_bit_rate; } set { subset_stream_bit_rate = value; } }

        protected BufferingBox subset_stream_buffering;  //  optional
        public BufferingBox SubsetStreamBuffering { get { return subset_stream_buffering; } set { subset_stream_buffering = value; } }

        protected MultiviewSceneInfoBox multiview_scene_info;  //  optional
        public MultiviewSceneInfoBox MultiviewSceneInfo { get { return multiview_scene_info; } set { multiview_scene_info = value; } }

        public MultiviewGroupBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.multiview_group_id);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.num_entries);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.reserved);

            for (int i = 0; i < num_entries; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.entry_type);

                if (entry_type == 0)
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.track_id);
                }

                else if (entry_type == 1)
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.track_id0);
                    boxSize += IsoReaderWriter.ReadUInt16(stream, out this.tier_id);
                }

                else if (entry_type == 2)
                {
                    boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.reserved1);
                    boxSize += IsoReaderWriter.ReadBits(stream, 10, out this.output_view_id);
                }

                else if (entry_type == 3)
                {
                    boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.reserved2);
                    boxSize += IsoReaderWriter.ReadBits(stream, 10, out this.start_view_id);
                    boxSize += IsoReaderWriter.ReadUInt16(stream, out this.view_count);
                }
            }
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.subset_stream_info); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.relation_attributes); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.subset_stream_bit_rate); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.subset_stream_buffering); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.multiview_scene_info); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.multiview_group_id);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.num_entries);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.reserved);

            for (int i = 0; i < num_entries; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.entry_type);

                if (entry_type == 0)
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.track_id);
                }

                else if (entry_type == 1)
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.track_id0);
                    boxSize += IsoReaderWriter.WriteUInt16(stream, this.tier_id);
                }

                else if (entry_type == 2)
                {
                    boxSize += IsoReaderWriter.WriteBits(stream, 6, this.reserved1);
                    boxSize += IsoReaderWriter.WriteBits(stream, 10, this.output_view_id);
                }

                else if (entry_type == 3)
                {
                    boxSize += IsoReaderWriter.WriteBits(stream, 6, this.reserved2);
                    boxSize += IsoReaderWriter.WriteBits(stream, 10, this.start_view_id);
                    boxSize += IsoReaderWriter.WriteUInt16(stream, this.view_count);
                }
            }
            if (this.subset_stream_info != null) boxSize += IsoReaderWriter.WriteBox(stream, this.subset_stream_info); // optional
            if (this.relation_attributes != null) boxSize += IsoReaderWriter.WriteBox(stream, this.relation_attributes); // optional
            if (this.subset_stream_bit_rate != null) boxSize += IsoReaderWriter.WriteBox(stream, this.subset_stream_bit_rate); // optional
            if (this.subset_stream_buffering != null) boxSize += IsoReaderWriter.WriteBox(stream, this.subset_stream_buffering); // optional
            if (this.multiview_scene_info != null) boxSize += IsoReaderWriter.WriteBox(stream, this.multiview_scene_info); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // multiview_group_id
            boxSize += 16; // num_entries
            boxSize += 8; // reserved

            for (int i = 0; i < num_entries; i++)
            {
                boxSize += 8; // entry_type

                if (entry_type == 0)
                {
                    boxSize += 32; // track_id
                }

                else if (entry_type == 1)
                {
                    boxSize += 32; // track_id0
                    boxSize += 16; // tier_id
                }

                else if (entry_type == 2)
                {
                    boxSize += 6; // reserved1
                    boxSize += 10; // output_view_id
                }

                else if (entry_type == 3)
                {
                    boxSize += 6; // reserved2
                    boxSize += 10; // start_view_id
                    boxSize += 16; // view_count
                }
            }
            if (this.subset_stream_info != null) boxSize += IsoReaderWriter.CalculateSize(subset_stream_info); // subset_stream_info
            if (this.relation_attributes != null) boxSize += IsoReaderWriter.CalculateSize(relation_attributes); // relation_attributes
            if (this.subset_stream_bit_rate != null) boxSize += IsoReaderWriter.CalculateSize(subset_stream_bit_rate); // subset_stream_bit_rate
            if (this.subset_stream_buffering != null) boxSize += IsoReaderWriter.CalculateSize(subset_stream_buffering); // subset_stream_buffering
            if (this.multiview_scene_info != null) boxSize += IsoReaderWriter.CalculateSize(multiview_scene_info); // multiview_scene_info
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class MultiviewInformationBox : FullBox
    {
        public override string FourCC { get { return "mvci"; } }

        public MultiviewInformationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class MVDDepthResolutionBox : Box
    {
        public override string FourCC { get { return "3dpr"; } }

        protected ushort depth_width;
        public ushort DepthWidth { get { return depth_width; } set { depth_width = value; } }

        protected ushort depth_height;
        public ushort DepthHeight { get { return depth_height; } set { depth_height = value; } }

        protected ushort depth_hor_mult_minus1;  //  optional
        public ushort DepthHorMultMinus1 { get { return depth_hor_mult_minus1; } set { depth_hor_mult_minus1 = value; } }

        protected ushort depth_ver_mult_minus1;  //  optional
        public ushort DepthVerMultMinus1 { get { return depth_ver_mult_minus1; } set { depth_ver_mult_minus1 = value; } }

        protected byte depth_hor_rsh;  //  optional
        public byte DepthHorRsh { get { return depth_hor_rsh; } set { depth_hor_rsh = value; } }

        protected byte depth_ver_rsh;  //  optional
        public byte DepthVerRsh { get { return depth_ver_rsh; } set { depth_ver_rsh = value; } }

        protected ushort grid_pos_num_views;  //  optional
        public ushort GridPosNumViews { get { return grid_pos_num_views; } set { grid_pos_num_views = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected ushort[] grid_pos_view_id;
        public ushort[] GridPosViewId { get { return grid_pos_view_id; } set { grid_pos_view_id = value; } }

        protected short[] grid_pos_x;
        public short[] GridPosX { get { return grid_pos_x; } set { grid_pos_x = value; } }

        protected short[] grid_pos_y;
        public short[] GridPosY { get { return grid_pos_y; } set { grid_pos_y = value; } }

        public MVDDepthResolutionBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.depth_width);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.depth_height);
            /*  The following 5 fields are collectively optional; they are either all present or all absent. When grid_pos_num_views is not present, the for loop is not present, equivalent to grid_pos_num_views equal to 0. These fields may be present or absent whenever the box is present (e.g., in MVCDConfigurationBox or A3DConfigurationBox).  */
            if (boxSize < size) boxSize += IsoReaderWriter.ReadUInt16(stream, out this.depth_hor_mult_minus1); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadUInt16(stream, out this.depth_ver_mult_minus1); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.depth_hor_rsh); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.depth_ver_rsh); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadUInt16(stream, out this.grid_pos_num_views); // optional

            for (int i = 0; i < grid_pos_num_views; i++)
            {
                boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.reserved);
                boxSize += IsoReaderWriter.ReadBits(stream, 10, out this.grid_pos_view_id[i]);
                boxSize += IsoReaderWriter.ReadInt16(stream, out this.grid_pos_x[grid_pos_view_id[i]]);
                boxSize += IsoReaderWriter.ReadInt16(stream, out this.grid_pos_y[grid_pos_view_id[i]]);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.depth_width);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.depth_height);
            /*  The following 5 fields are collectively optional; they are either all present or all absent. When grid_pos_num_views is not present, the for loop is not present, equivalent to grid_pos_num_views equal to 0. These fields may be present or absent whenever the box is present (e.g., in MVCDConfigurationBox or A3DConfigurationBox).  */
            if (this.depth_hor_mult_minus1 != null) boxSize += IsoReaderWriter.WriteUInt16(stream, this.depth_hor_mult_minus1); // optional
            if (this.depth_ver_mult_minus1 != null) boxSize += IsoReaderWriter.WriteUInt16(stream, this.depth_ver_mult_minus1); // optional
            if (this.depth_hor_rsh != null) boxSize += IsoReaderWriter.WriteBits(stream, 4, this.depth_hor_rsh); // optional
            if (this.depth_ver_rsh != null) boxSize += IsoReaderWriter.WriteBits(stream, 4, this.depth_ver_rsh); // optional
            if (this.grid_pos_num_views != null) boxSize += IsoReaderWriter.WriteUInt16(stream, this.grid_pos_num_views); // optional

            for (int i = 0; i < grid_pos_num_views; i++)
            {
                boxSize += IsoReaderWriter.WriteBits(stream, 6, this.reserved);
                boxSize += IsoReaderWriter.WriteBits(stream, 10, this.grid_pos_view_id[i]);
                boxSize += IsoReaderWriter.WriteInt16(stream, this.grid_pos_x[grid_pos_view_id[i]]);
                boxSize += IsoReaderWriter.WriteInt16(stream, this.grid_pos_y[grid_pos_view_id[i]]);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // depth_width
            boxSize += 16; // depth_height
            /*  The following 5 fields are collectively optional; they are either all present or all absent. When grid_pos_num_views is not present, the for loop is not present, equivalent to grid_pos_num_views equal to 0. These fields may be present or absent whenever the box is present (e.g., in MVCDConfigurationBox or A3DConfigurationBox).  */
            if (this.depth_hor_mult_minus1 != null) boxSize += 16; // depth_hor_mult_minus1
            if (this.depth_ver_mult_minus1 != null) boxSize += 16; // depth_ver_mult_minus1
            if (this.depth_hor_rsh != null) boxSize += 4; // depth_hor_rsh
            if (this.depth_ver_rsh != null) boxSize += 4; // depth_ver_rsh
            if (this.grid_pos_num_views != null) boxSize += 16; // grid_pos_num_views

            for (int i = 0; i < grid_pos_num_views; i++)
            {
                boxSize += 6; // reserved
                boxSize += 10; // grid_pos_view_id
                boxSize += 16; // grid_pos_x
                boxSize += 16; // grid_pos_y
            }
            return boxSize;
        }
    }


    public class MultiviewRelationAttributeBox : FullBox
    {
        public override string FourCC { get { return "mvra"; } }

        protected ushort reserved1 = 0;
        public ushort Reserved1 { get { return reserved1; } set { reserved1 = value; } }

        protected ushort num_common_attributes;
        public ushort NumCommonAttributes { get { return num_common_attributes; } set { num_common_attributes = value; } }

        protected uint common_attribute;
        public uint CommonAttribute { get { return common_attribute; } set { common_attribute = value; } }

        protected uint common_value;
        public uint CommonValue { get { return common_value; } set { common_value = value; } }

        protected ushort reserved2 = 0;
        public ushort Reserved2 { get { return reserved2; } set { reserved2 = value; } }

        protected ushort num_differentiating_attributes;
        public ushort NumDifferentiatingAttributes { get { return num_differentiating_attributes; } set { num_differentiating_attributes = value; } }

        protected uint differentiating_attribute;
        public uint DifferentiatingAttribute { get { return differentiating_attribute; } set { differentiating_attribute = value; } }

        public MultiviewRelationAttributeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reserved1);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.num_common_attributes);

            for (int i = 0; i < num_common_attributes; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.common_attribute);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.common_value);
            }
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reserved2);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.num_differentiating_attributes);

            for (int i = 0; i < num_differentiating_attributes; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.differentiating_attribute);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reserved1);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.num_common_attributes);

            for (int i = 0; i < num_common_attributes; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.common_attribute);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.common_value);
            }
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reserved2);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.num_differentiating_attributes);

            for (int i = 0; i < num_differentiating_attributes; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.differentiating_attribute);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // reserved1
            boxSize += 16; // num_common_attributes

            for (int i = 0; i < num_common_attributes; i++)
            {
                boxSize += 32; // common_attribute
                boxSize += 32; // common_value
            }
            boxSize += 16; // reserved2
            boxSize += 16; // num_differentiating_attributes

            for (int i = 0; i < num_differentiating_attributes; i++)
            {
                boxSize += 32; // differentiating_attribute
            }
            return boxSize;
        }
    }


    public class SampleDependencyBox : FullBox
    {
        public override string FourCC { get { return "sdep"; } }

        protected ushort dependency_count;
        public ushort DependencyCount { get { return dependency_count; } set { dependency_count = value; } }

        protected short relative_sample_number;
        public short RelativeSampleNumber { get { return relative_sample_number; } set { relative_sample_number = value; } }

        public SampleDependencyBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            int sample_count = 0; // TODO: taken from the stsz sample_count


            for (int i = 0; i < sample_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.dependency_count);

                for (int k = 0; k < dependency_count; k++)
                {
                    boxSize += IsoReaderWriter.ReadInt16(stream, out this.relative_sample_number);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            int sample_count = 0; // TODO: taken from the stsz sample_count


            for (int i = 0; i < sample_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.dependency_count);

                for (int k = 0; k < dependency_count; k++)
                {
                    boxSize += IsoReaderWriter.WriteInt16(stream, this.relative_sample_number);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            int sample_count = 0; // TODO: taken from the stsz sample_count


            for (int i = 0; i < sample_count; i++)
            {
                boxSize += 16; // dependency_count

                for (int k = 0; k < dependency_count; k++)
                {
                    boxSize += 16; // relative_sample_number
                }
            }
            return boxSize;
        }
    }


    public class SeiInformationBox : Box
    {
        public override string FourCC { get { return "seii"; } }

        protected ushort numRequiredSEIs;
        public ushort NumRequiredSEIs { get { return numRequiredSEIs; } set { numRequiredSEIs = value; } }

        protected ushort requiredSEI_ID;
        public ushort RequiredSEIID { get { return requiredSEI_ID; } set { requiredSEI_ID = value; } }

        protected ushort numNotRequiredSEIs;
        public ushort NumNotRequiredSEIs { get { return numNotRequiredSEIs; } set { numNotRequiredSEIs = value; } }

        protected ushort notrequiredSEI_ID;
        public ushort NotrequiredSEIID { get { return notrequiredSEI_ID; } set { notrequiredSEI_ID = value; } }

        public SeiInformationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.numRequiredSEIs);

            for (int i = 0; i < numRequiredSEIs; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.requiredSEI_ID);
            }
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.numNotRequiredSEIs);

            for (int i = 0; i < numNotRequiredSEIs; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.notrequiredSEI_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.numRequiredSEIs);

            for (int i = 0; i < numRequiredSEIs; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.requiredSEI_ID);
            }
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.numNotRequiredSEIs);

            for (int i = 0; i < numNotRequiredSEIs; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.notrequiredSEI_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // numRequiredSEIs

            for (int i = 0; i < numRequiredSEIs; i++)
            {
                boxSize += 16; // requiredSEI_ID
            }
            boxSize += 16; // numNotRequiredSEIs

            for (int i = 0; i < numNotRequiredSEIs; i++)
            {
                boxSize += 16; // notrequiredSEI_ID
            }
            return boxSize;
        }
    }


    public class SVCSubTrackLayerBox : FullBox
    {
        public override string FourCC { get { return "sstl"; } }

        protected ushort item_count;
        public ushort ItemCount { get { return item_count; } set { item_count = value; } }

        protected byte dependency_id;
        public byte DependencyId { get { return dependency_id; } set { dependency_id = value; } }

        protected byte quality_id;
        public byte QualityId { get { return quality_id; } set { quality_id = value; } }

        protected byte temporal_id;
        public byte TemporalId { get { return temporal_id; } set { temporal_id = value; } }

        protected byte priority_id;
        public byte PriorityId { get { return priority_id; } set { priority_id = value; } }

        protected byte dependency_id_range;
        public byte DependencyIdRange { get { return dependency_id_range; } set { dependency_id_range = value; } }

        protected byte quality_id_range;
        public byte QualityIdRange { get { return quality_id_range; } set { quality_id_range = value; } }

        protected byte temporal_id_range;
        public byte TemporalIdRange { get { return temporal_id_range; } set { temporal_id_range = value; } }

        protected byte priority_id_range;
        public byte PriorityIdRange { get { return priority_id_range; } set { priority_id_range = value; } }

        public SVCSubTrackLayerBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.dependency_id);
                boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.quality_id);
                boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.temporal_id);
                boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.priority_id);
                boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.dependency_id_range);
                boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.quality_id_range);
                boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.temporal_id_range);
                boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.priority_id_range);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += IsoReaderWriter.WriteBits(stream, 3, this.dependency_id);
                boxSize += IsoReaderWriter.WriteBits(stream, 4, this.quality_id);
                boxSize += IsoReaderWriter.WriteBits(stream, 3, this.temporal_id);
                boxSize += IsoReaderWriter.WriteBits(stream, 6, this.priority_id);
                boxSize += IsoReaderWriter.WriteBits(stream, 2, this.dependency_id_range);
                boxSize += IsoReaderWriter.WriteBits(stream, 2, this.quality_id_range);
                boxSize += IsoReaderWriter.WriteBits(stream, 2, this.temporal_id_range);
                boxSize += IsoReaderWriter.WriteBits(stream, 2, this.priority_id_range);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // item_count

            for (int i = 0; i < item_count; i++)
            {
                boxSize += 3; // dependency_id
                boxSize += 4; // quality_id
                boxSize += 3; // temporal_id
                boxSize += 6; // priority_id
                boxSize += 2; // dependency_id_range
                boxSize += 2; // quality_id_range
                boxSize += 2; // temporal_id_range
                boxSize += 2; // priority_id_range
            }
            return boxSize;
        }
    }


    public class MVCSubTrackMultiviewGroupBox : FullBox
    {
        public override string FourCC { get { return "stmg"; } }

        protected ushort item_count;
        public ushort ItemCount { get { return item_count; } set { item_count = value; } }

        protected uint MultiviewGroupId;
        public uint _MultiviewGroupId { get { return MultiviewGroupId; } set { MultiviewGroupId = value; } }

        public MVCSubTrackMultiviewGroupBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.MultiviewGroupId);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.MultiviewGroupId);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // item_count

            for (int i = 0; i < item_count; i++)
            {
                boxSize += 32; // MultiviewGroupId
            }
            return boxSize;
        }
    }


    public class SubTrackTierBox : FullBox
    {
        public override string FourCC { get { return "stti"; } }

        protected ushort item_count;
        public ushort ItemCount { get { return item_count; } set { item_count = value; } }

        protected ushort tierID;
        public ushort TierID { get { return tierID; } set { tierID = value; } }

        public SubTrackTierBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.tierID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.tierID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // item_count

            for (int i = 0; i < item_count; i++)
            {
                boxSize += 16; // tierID
            }
            return boxSize;
        }
    }


    public class MultiviewGroupRelationBox : FullBox
    {
        public override string FourCC { get { return "swtc"; } }

        protected uint num_entries;
        public uint NumEntries { get { return num_entries; } set { num_entries = value; } }

        protected uint multiview_group_id;
        public uint MultiviewGroupId { get { return multiview_group_id; } set { multiview_group_id = value; } }

        protected MultiviewRelationAttributeBox relation_attributes;
        public MultiviewRelationAttributeBox RelationAttributes { get { return relation_attributes; } set { relation_attributes = value; } }

        public MultiviewGroupRelationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entries);

            for (int i = 0; i < num_entries; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.multiview_group_id);
            }
            boxSize += IsoReaderWriter.ReadBox(stream, out this.relation_attributes);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entries);

            for (int i = 0; i < num_entries; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.multiview_group_id);
            }
            boxSize += IsoReaderWriter.WriteBox(stream, this.relation_attributes);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // num_entries

            for (int i = 0; i < num_entries; i++)
            {
                boxSize += 32; // multiview_group_id
            }
            boxSize += IsoReaderWriter.CalculateSize(relation_attributes); // relation_attributes
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class TierBitRateBox : Box
    {
        public override string FourCC { get { return "tibr"; } }

        protected uint baseBitRate;
        public uint BaseBitRate { get { return baseBitRate; } set { baseBitRate = value; } }

        protected uint maxBitRate;
        public uint MaxBitRate { get { return maxBitRate; } set { maxBitRate = value; } }

        protected uint avgBitRate;
        public uint AvgBitRate { get { return avgBitRate; } set { avgBitRate = value; } }

        protected uint tierBaseBitRate;
        public uint TierBaseBitRate { get { return tierBaseBitRate; } set { tierBaseBitRate = value; } }

        protected uint tierMaxBitRate;
        public uint TierMaxBitRate { get { return tierMaxBitRate; } set { tierMaxBitRate = value; } }

        protected uint tierAvgBitRate;
        public uint TierAvgBitRate { get { return tierAvgBitRate; } set { tierAvgBitRate = value; } }

        public TierBitRateBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.baseBitRate);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.maxBitRate);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.avgBitRate);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.tierBaseBitRate);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.tierMaxBitRate);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.tierAvgBitRate);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.baseBitRate);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.maxBitRate);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.avgBitRate);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.tierBaseBitRate);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.tierMaxBitRate);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.tierAvgBitRate);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // baseBitRate
            boxSize += 32; // maxBitRate
            boxSize += 32; // avgBitRate
            boxSize += 32; // tierBaseBitRate
            boxSize += 32; // tierMaxBitRate
            boxSize += 32; // tierAvgBitRate
            return boxSize;
        }
    }


    public class TierInfoBox : Box
    {
        public override string FourCC { get { return "tiri"; } }

        protected ushort tierID;
        public ushort TierID { get { return tierID; } set { tierID = value; } }

        protected byte profileIndication;
        public byte ProfileIndication { get { return profileIndication; } set { profileIndication = value; } }

        protected byte profile_compatibility;
        public byte ProfileCompatibility { get { return profile_compatibility; } set { profile_compatibility = value; } }

        protected byte levelIndication;
        public byte LevelIndication { get { return levelIndication; } set { levelIndication = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected ushort visualWidth;
        public ushort VisualWidth { get { return visualWidth; } set { visualWidth = value; } }

        protected ushort visualHeight;
        public ushort VisualHeight { get { return visualHeight; } set { visualHeight = value; } }

        protected byte discardable;
        public byte Discardable { get { return discardable; } set { discardable = value; } }

        protected byte constantFrameRate;
        public byte ConstantFrameRate { get { return constantFrameRate; } set { constantFrameRate = value; } }

        protected byte reserved0 = 0;
        public byte Reserved0 { get { return reserved0; } set { reserved0 = value; } }

        protected ushort frameRate;
        public ushort FrameRate { get { return frameRate; } set { frameRate = value; } }

        public TierInfoBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            /* Mandatory Box */
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.tierID);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.profileIndication);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.profile_compatibility);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.levelIndication);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.reserved);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.visualWidth);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.visualHeight);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.discardable);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.constantFrameRate);
            boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.reserved0);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.frameRate);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            /* Mandatory Box */
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.tierID);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.profileIndication);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.profile_compatibility);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.levelIndication);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.reserved);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.visualWidth);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.visualHeight);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.discardable);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.constantFrameRate);
            boxSize += IsoReaderWriter.WriteBits(stream, 4, this.reserved0);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.frameRate);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            /* Mandatory Box */
            boxSize += 16; // tierID
            boxSize += 8; // profileIndication
            boxSize += 8; // profile_compatibility
            boxSize += 8; // levelIndication
            boxSize += 8; // reserved
            boxSize += 16; // visualWidth
            boxSize += 16; // visualHeight
            boxSize += 2; // discardable
            boxSize += 2; // constantFrameRate
            boxSize += 4; // reserved0
            boxSize += 16; // frameRate
            return boxSize;
        }
    }


    public class TileSubTrackGroupBox : FullBox
    {
        public override string FourCC { get { return "tstb"; } }

        protected ushort item_count;
        public ushort ItemCount { get { return item_count; } set { item_count = value; } }

        protected ushort tileGroupID;
        public ushort TileGroupID { get { return tileGroupID; } set { tileGroupID = value; } }

        public TileSubTrackGroupBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.tileGroupID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.tileGroupID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // item_count

            for (int i = 0; i < item_count; i++)
            {
                boxSize += 16; // tileGroupID
            }
            return boxSize;
        }
    }


    public class MultiviewSceneInfoBox : Box
    {
        public override string FourCC { get { return "vwdi"; } }

        protected byte max_disparity;
        public byte MaxDisparity { get { return max_disparity; } set { max_disparity = value; } }

        public MultiviewSceneInfoBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.max_disparity);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.max_disparity);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // max_disparity
            return boxSize;
        }
    }


    public class MVCDConfigurationBox : Box
    {
        public override string FourCC { get { return "mvdC"; } }

        protected MVDDecoderConfigurationRecord MVDConfig;
        public MVDDecoderConfigurationRecord _MVDConfig { get { return MVDConfig; } set { MVDConfig = value; } }

        protected MVDDepthResolutionBox mvdDepthRes;  // Optional
        public MVDDepthResolutionBox MvdDepthRes { get { return mvdDepthRes; } set { mvdDepthRes = value; } }

        public MVCDConfigurationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.MVDConfig);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.mvdDepthRes); //Optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.MVDConfig);
            boxSize += IsoReaderWriter.WriteBox(stream, this.mvdDepthRes); //Optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(MVDConfig); // MVDConfig
            boxSize += IsoReaderWriter.CalculateSize(mvdDepthRes); // mvdDepthRes
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class A3DConfigurationBox : Box
    {
        public override string FourCC { get { return "a3dC"; } }

        protected MVDDecoderConfigurationRecord MVDConfig;
        public MVDDecoderConfigurationRecord _MVDConfig { get { return MVDConfig; } set { MVDConfig = value; } }

        protected MVDDepthResolutionBox mvdDepthRes;  // Optional
        public MVDDepthResolutionBox MvdDepthRes { get { return mvdDepthRes; } set { mvdDepthRes = value; } }

        public A3DConfigurationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.MVDConfig);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.mvdDepthRes); //Optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.MVDConfig);
            boxSize += IsoReaderWriter.WriteBox(stream, this.mvdDepthRes); //Optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(MVDConfig); // MVDConfig
            boxSize += IsoReaderWriter.CalculateSize(mvdDepthRes); // mvdDepthRes
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class ViewIdentifierBox : FullBox
    {
        public override string FourCC { get { return "vwid"; } }

        protected byte reserved6 = 0;
        public byte Reserved6 { get { return reserved6; } set { reserved6 = value; } }

        protected byte min_temporal_id;
        public byte MinTemporalId { get { return min_temporal_id; } set { min_temporal_id = value; } }

        protected byte max_temporal_id;
        public byte MaxTemporalId { get { return max_temporal_id; } set { max_temporal_id = value; } }

        protected ushort num_views;
        public ushort NumViews { get { return num_views; } set { num_views = value; } }

        protected byte reserved1 = 0;
        public byte Reserved1 { get { return reserved1; } set { reserved1 = value; } }

        protected ushort[] view_id;
        public ushort[] ViewId { get { return view_id; } set { view_id = value; } }

        protected byte reserved2 = 0;
        public byte Reserved2 { get { return reserved2; } set { reserved2 = value; } }

        protected ushort view_order_index;
        public ushort ViewOrderIndex { get { return view_order_index; } set { view_order_index = value; } }

        protected bool[] texture_in_stream;
        public bool[] TextureInStream { get { return texture_in_stream; } set { texture_in_stream = value; } }

        protected bool[] texture_in_track;
        public bool[] TextureInTrack { get { return texture_in_track; } set { texture_in_track = value; } }

        protected bool[] depth_in_stream;
        public bool[] DepthInStream { get { return depth_in_stream; } set { depth_in_stream = value; } }

        protected bool[] depth_in_track;
        public bool[] DepthInTrack { get { return depth_in_track; } set { depth_in_track = value; } }

        protected byte base_view_type;
        public byte BaseViewType { get { return base_view_type; } set { base_view_type = value; } }

        protected ushort num_ref_views;
        public ushort NumRefViews { get { return num_ref_views; } set { num_ref_views = value; } }

        protected byte reserved5 = 0;
        public byte Reserved5 { get { return reserved5; } set { reserved5 = value; } }

        protected byte[][] dependent_component_idc;
        public byte[][] DependentComponentIdc { get { return dependent_component_idc; } set { dependent_component_idc = value; } }

        protected ushort[][] ref_view_id;
        public ushort[][] RefViewId { get { return ref_view_id; } set { ref_view_id = value; } }

        public ViewIdentifierBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.reserved6);
            boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.min_temporal_id);
            boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.max_temporal_id);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.num_views);

            for (int i = 0; i < num_views; i++)
            {
                boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.reserved1);
                boxSize += IsoReaderWriter.ReadBits(stream, 10, out this.view_id[i]);
                boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.reserved2);
                boxSize += IsoReaderWriter.ReadBits(stream, 10, out this.view_order_index);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.texture_in_stream[i]);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.texture_in_track[i]);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.depth_in_stream[i]);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.depth_in_track[i]);
                boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.base_view_type);
                boxSize += IsoReaderWriter.ReadBits(stream, 10, out this.num_ref_views);

                for (int j = 0; j < num_ref_views; j++)
                {
                    boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.reserved5);
                    boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.dependent_component_idc[i][j]);
                    boxSize += IsoReaderWriter.ReadBits(stream, 10, out this.ref_view_id[i][j]);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.reserved6);
            boxSize += IsoReaderWriter.WriteBits(stream, 3, this.min_temporal_id);
            boxSize += IsoReaderWriter.WriteBits(stream, 3, this.max_temporal_id);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.num_views);

            for (int i = 0; i < num_views; i++)
            {
                boxSize += IsoReaderWriter.WriteBits(stream, 6, this.reserved1);
                boxSize += IsoReaderWriter.WriteBits(stream, 10, this.view_id[i]);
                boxSize += IsoReaderWriter.WriteBits(stream, 6, this.reserved2);
                boxSize += IsoReaderWriter.WriteBits(stream, 10, this.view_order_index);
                boxSize += IsoReaderWriter.WriteBit(stream, this.texture_in_stream[i]);
                boxSize += IsoReaderWriter.WriteBit(stream, this.texture_in_track[i]);
                boxSize += IsoReaderWriter.WriteBit(stream, this.depth_in_stream[i]);
                boxSize += IsoReaderWriter.WriteBit(stream, this.depth_in_track[i]);
                boxSize += IsoReaderWriter.WriteBits(stream, 2, this.base_view_type);
                boxSize += IsoReaderWriter.WriteBits(stream, 10, this.num_ref_views);

                for (int j = 0; j < num_ref_views; j++)
                {
                    boxSize += IsoReaderWriter.WriteBits(stream, 4, this.reserved5);
                    boxSize += IsoReaderWriter.WriteBits(stream, 2, this.dependent_component_idc[i][j]);
                    boxSize += IsoReaderWriter.WriteBits(stream, 10, this.ref_view_id[i][j]);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 2; // reserved6
            boxSize += 3; // min_temporal_id
            boxSize += 3; // max_temporal_id
            boxSize += 16; // num_views

            for (int i = 0; i < num_views; i++)
            {
                boxSize += 6; // reserved1
                boxSize += 10; // view_id
                boxSize += 6; // reserved2
                boxSize += 10; // view_order_index
                boxSize += 1; // texture_in_stream
                boxSize += 1; // texture_in_track
                boxSize += 1; // depth_in_stream
                boxSize += 1; // depth_in_track
                boxSize += 2; // base_view_type
                boxSize += 10; // num_ref_views

                for (int j = 0; j < num_ref_views; j++)
                {
                    boxSize += 4; // reserved5
                    boxSize += 2; // dependent_component_idc
                    boxSize += 10; // ref_view_id
                }
            }
            return boxSize;
        }
    }


    public class MVCConfigurationBox : Box
    {
        public override string FourCC { get { return "mvcC"; } }

        protected MVCDecoderConfigurationRecord MVCConfig;
        public MVCDecoderConfigurationRecord _MVCConfig { get { return MVCConfig; } set { MVCConfig = value; } }

        public MVCConfigurationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.MVCConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.MVCConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(MVCConfig); // MVCConfig
            return boxSize;
        }
    }


    public class AVCConfigurationBox : Box
    {
        public override string FourCC { get { return "avcC"; } }

        protected AVCDecoderConfigurationRecord AVCConfig;
        public AVCDecoderConfigurationRecord _AVCConfig { get { return AVCConfig; } set { AVCConfig = value; } }

        public AVCConfigurationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.AVCConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.AVCConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(AVCConfig); // AVCConfig
            return boxSize;
        }
    }


    public class HEVCConfigurationBox : Box
    {
        public override string FourCC { get { return "hvcC"; } }

        protected HEVCDecoderConfigurationRecord HEVCConfig;
        public HEVCDecoderConfigurationRecord _HEVCConfig { get { return HEVCConfig; } set { HEVCConfig = value; } }

        public HEVCConfigurationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.HEVCConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.HEVCConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(HEVCConfig); // HEVCConfig
            return boxSize;
        }
    }


    public class LHEVCConfigurationBox : Box
    {
        public override string FourCC { get { return "lhvC"; } }

        protected LHEVCDecoderConfigurationRecord LHEVCConfig;
        public LHEVCDecoderConfigurationRecord _LHEVCConfig { get { return LHEVCConfig; } set { LHEVCConfig = value; } }

        public LHEVCConfigurationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.LHEVCConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.LHEVCConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(LHEVCConfig); // LHEVCConfig
            return boxSize;
        }
    }


    public class MPEG4ExtensionDescriptorsBox : Box
    {
        public override string FourCC { get { return "m4ds"; } }

        protected Descriptor[] Descr;
        public Descriptor[] _Descr { get { return Descr; } set { Descr = value; } }

        public MPEG4ExtensionDescriptorsBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.Descr);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.Descr);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(Descr); // Descr
            return boxSize;
        }
    }


    public class SVCConfigurationBox : Box
    {
        public override string FourCC { get { return "svcC"; } }

        protected SVCDecoderConfigurationRecord SVCConfig;
        public SVCDecoderConfigurationRecord _SVCConfig { get { return SVCConfig; } set { SVCConfig = value; } }

        public SVCConfigurationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.SVCConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.SVCConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(SVCConfig); // SVCConfig
            return boxSize;
        }
    }


    public class ScalabilityInformationSEIBox : Box
    {
        public override string FourCC { get { return "seib"; } }

        protected byte[] scalinfosei;
        public byte[] Scalinfosei { get { return scalinfosei; } set { scalinfosei = value; } }

        public ScalabilityInformationSEIBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBytes(stream, size - 64, out this.scalinfosei);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBytes(stream, size - 64, this.scalinfosei);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)(size - 64) * 8; // scalinfosei
            return boxSize;
        }
    }


    public class SVCPriorityAssignmentBox : Box
    {
        public override string FourCC { get { return "svcP"; } }

        protected byte method_count;
        public byte MethodCount { get { return method_count; } set { method_count = value; } }

        protected string[] PriorityAssignmentURI;
        public string[] _PriorityAssignmentURI { get { return PriorityAssignmentURI; } set { PriorityAssignmentURI = value; } }

        public SVCPriorityAssignmentBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.method_count);
            boxSize += IsoReaderWriter.ReadStringArray(stream, method_count, out this.PriorityAssignmentURI);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.method_count);
            boxSize += IsoReaderWriter.WriteStringArray(stream, method_count, this.PriorityAssignmentURI);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // method_count
            boxSize += IsoReaderWriter.CalculateSize(PriorityAssignmentURI); // PriorityAssignmentURI
            return boxSize;
        }
    }


    public class ViewScalabilityInformationSEIBox : Box
    {
        public override string FourCC { get { return "vsib"; } }

        protected byte[] mvcscalinfosei;
        public byte[] Mvcscalinfosei { get { return mvcscalinfosei; } set { mvcscalinfosei = value; } }

        public ViewScalabilityInformationSEIBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBytes(stream, size - 64, out this.mvcscalinfosei);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBytes(stream, size - 64, this.mvcscalinfosei);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)(size - 64) * 8; // mvcscalinfosei
            return boxSize;
        }
    }


    public class MVDScalabilityInformationSEIBox : Box
    {
        public override string FourCC { get { return "3sib"; } }

        protected byte[] mvdscalinfosei;
        public byte[] Mvdscalinfosei { get { return mvdscalinfosei; } set { mvdscalinfosei = value; } }

        public MVDScalabilityInformationSEIBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBytes(stream, size - 64, out this.mvdscalinfosei);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBytes(stream, size - 64, this.mvdscalinfosei);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)(size - 64) * 8; // mvdscalinfosei
            return boxSize;
        }
    }


    public class MVCViewPriorityAssignmentBox : Box
    {
        public override string FourCC { get { return "mvcP"; } }

        protected byte method_count;
        public byte MethodCount { get { return method_count; } set { method_count = value; } }

        protected string[] PriorityAssignmentURI;
        public string[] _PriorityAssignmentURI { get { return PriorityAssignmentURI; } set { PriorityAssignmentURI = value; } }

        public MVCViewPriorityAssignmentBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.method_count);
            boxSize += IsoReaderWriter.ReadStringArray(stream, method_count, out this.PriorityAssignmentURI);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.method_count);
            boxSize += IsoReaderWriter.WriteStringArray(stream, method_count, this.PriorityAssignmentURI);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // method_count
            boxSize += IsoReaderWriter.CalculateSize(PriorityAssignmentURI); // PriorityAssignmentURI
            return boxSize;
        }
    }


    public class HEVCTileConfigurationBox : Box
    {
        public override string FourCC { get { return "hvtC"; } }

        protected HEVCTileTierLevelConfigurationRecord HEVCTileTierLevelConfig;
        public HEVCTileTierLevelConfigurationRecord _HEVCTileTierLevelConfig { get { return HEVCTileTierLevelConfig; } set { HEVCTileTierLevelConfig = value; } }

        public HEVCTileConfigurationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.HEVCTileTierLevelConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.HEVCTileTierLevelConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(HEVCTileTierLevelConfig); // HEVCTileTierLevelConfig
            return boxSize;
        }
    }


    public class EVCConfigurationBox : Box
    {
        public override string FourCC { get { return "evcC"; } }

        protected EVCDecoderConfigurationRecord EVCConfig;
        public EVCDecoderConfigurationRecord _EVCConfig { get { return EVCConfig; } set { EVCConfig = value; } }

        public EVCConfigurationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.EVCConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.EVCConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(EVCConfig); // EVCConfig
            return boxSize;
        }
    }


    public class SVCPriorityLayerInfoBox : Box
    {
        public override string FourCC { get { return "qlif"; } }

        protected byte pr_layer_num;
        public byte PrLayerNum { get { return pr_layer_num; } set { pr_layer_num = value; } }

        protected byte pr_layer;
        public byte PrLayer { get { return pr_layer; } set { pr_layer = value; } }

        protected uint profile_level_idc;
        public uint ProfileLevelIdc { get { return profile_level_idc; } set { profile_level_idc = value; } }

        protected uint max_bitrate;
        public uint MaxBitrate { get { return max_bitrate; } set { max_bitrate = value; } }

        protected uint avg_bitrate;
        public uint AvgBitrate { get { return avg_bitrate; } set { avg_bitrate = value; } }

        public SVCPriorityLayerInfoBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.pr_layer_num);

            for (int j = 0; j < pr_layer_num; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.pr_layer);
                boxSize += IsoReaderWriter.ReadUInt24(stream, out this.profile_level_idc);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.max_bitrate);
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.avg_bitrate);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.pr_layer_num);

            for (int j = 0; j < pr_layer_num; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.pr_layer);
                boxSize += IsoReaderWriter.WriteUInt24(stream, this.profile_level_idc);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.max_bitrate);
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.avg_bitrate);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // pr_layer_num

            for (int j = 0; j < pr_layer_num; j++)
            {
                boxSize += 8; // pr_layer
                boxSize += 24; // profile_level_idc
                boxSize += 32; // max_bitrate
                boxSize += 32; // avg_bitrate
            }
            return boxSize;
        }
    }


    public class VvcConfigurationBox : FullBox
    {
        public override string FourCC { get { return "vvcC"; } }

        protected VvcDecoderConfigurationRecord VvcConfig;
        public VvcDecoderConfigurationRecord _VvcConfig { get { return VvcConfig; } set { VvcConfig = value; } }

        public VvcConfigurationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.VvcConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.VvcConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(VvcConfig); // VvcConfig
            return boxSize;
        }
    }


    public class VvcNALUConfigBox : FullBox
    {
        public override string FourCC { get { return "vvnC"; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected byte LengthSizeMinusOne;
        public byte _LengthSizeMinusOne { get { return LengthSizeMinusOne; } set { LengthSizeMinusOne = value; } }

        public VvcNALUConfigBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.reserved);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.LengthSizeMinusOne);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBits(stream, 6, this.reserved);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.LengthSizeMinusOne);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 6; // reserved
            boxSize += 2; // LengthSizeMinusOne
            return boxSize;
        }
    }


    public class DefaultHevcExtractorConstructorBox : FullBox
    {
        public override string FourCC { get { return "dhec"; } }

        protected uint num_entries;
        public uint NumEntries { get { return num_entries; } set { num_entries = value; } }

        protected byte constructor_type;
        public byte ConstructorType { get { return constructor_type; } set { constructor_type = value; } }

        protected byte flags;
        public byte Flags { get { return flags; } set { flags = value; } }

        protected SampleConstructor SampleConstructor;
        public SampleConstructor _SampleConstructor { get { return SampleConstructor; } set { SampleConstructor = value; } }

        protected InlineConstructor InlineConstructor;
        public InlineConstructor _InlineConstructor { get { return InlineConstructor; } set { InlineConstructor = value; } }

        protected SampleConstructorFromTrackGroup SampleConstructorFromTrackGroup;
        public SampleConstructorFromTrackGroup _SampleConstructorFromTrackGroup { get { return SampleConstructorFromTrackGroup; } set { SampleConstructorFromTrackGroup = value; } }

        protected NALUStartInlineConstructor NALUStartInlineConstructor;
        public NALUStartInlineConstructor _NALUStartInlineConstructor { get { return NALUStartInlineConstructor; } set { NALUStartInlineConstructor = value; } }

        public DefaultHevcExtractorConstructorBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entries);

            for (int i = 1; i <= num_entries; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.constructor_type);
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.flags);

                if (constructor_type == 0)
                {
                    boxSize += IsoReaderWriter.ReadBox(stream, out this.SampleConstructor);
                }

                else if (constructor_type == 2)
                {
                    boxSize += IsoReaderWriter.ReadBox(stream, out this.InlineConstructor);
                }

                else if (constructor_type == 3)
                {
                    boxSize += IsoReaderWriter.ReadBox(stream, out this.SampleConstructorFromTrackGroup);
                }

                else if (constructor_type == 6)
                {
                    boxSize += IsoReaderWriter.ReadBox(stream, out this.NALUStartInlineConstructor);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entries);

            for (int i = 1; i <= num_entries; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.constructor_type);
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.flags);

                if (constructor_type == 0)
                {
                    boxSize += IsoReaderWriter.WriteBox(stream, this.SampleConstructor);
                }

                else if (constructor_type == 2)
                {
                    boxSize += IsoReaderWriter.WriteBox(stream, this.InlineConstructor);
                }

                else if (constructor_type == 3)
                {
                    boxSize += IsoReaderWriter.WriteBox(stream, this.SampleConstructorFromTrackGroup);
                }

                else if (constructor_type == 6)
                {
                    boxSize += IsoReaderWriter.WriteBox(stream, this.NALUStartInlineConstructor);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // num_entries

            for (int i = 1; i <= num_entries; i++)
            {
                boxSize += 8; // constructor_type
                boxSize += 8; // flags

                if (constructor_type == 0)
                {
                    boxSize += IsoReaderWriter.CalculateSize(SampleConstructor); // SampleConstructor
                }

                else if (constructor_type == 2)
                {
                    boxSize += IsoReaderWriter.CalculateSize(InlineConstructor); // InlineConstructor
                }

                else if (constructor_type == 3)
                {
                    boxSize += IsoReaderWriter.CalculateSize(SampleConstructorFromTrackGroup); // SampleConstructorFromTrackGroup
                }

                else if (constructor_type == 6)
                {
                    boxSize += IsoReaderWriter.CalculateSize(NALUStartInlineConstructor); // NALUStartInlineConstructor
                }
            }
            return boxSize;
        }
    }


    public class SVCMetadataSampleConfigBox : FullBox
    {
        public override string FourCC { get { return "svmC"; } }

        protected byte sample_statement_type;
        public byte SampleStatementType { get { return sample_statement_type; } set { sample_statement_type = value; } }

        protected byte default_statement_type;
        public byte DefaultStatementType { get { return default_statement_type; } set { default_statement_type = value; } }

        protected byte default_statement_length;
        public byte DefaultStatementLength { get { return default_statement_length; } set { default_statement_length = value; } }

        protected byte entry_count;
        public byte EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected byte statement_type;  //  from the user extension ranges
        public byte StatementType { get { return statement_type; } set { statement_type = value; } }

        protected string statement_namespace;
        public string StatementNamespace { get { return statement_namespace; } set { statement_namespace = value; } }

        public SVCMetadataSampleConfigBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.sample_statement_type);
            /*  normally group, or seq  */
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.default_statement_type);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.default_statement_length);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.statement_type); // from the user extension ranges
                boxSize += IsoReaderWriter.ReadString(stream, out this.statement_namespace);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            boxSize += IsoReaderWriter.WriteUInt8(stream, this.sample_statement_type);
            /*  normally group, or seq  */
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.default_statement_type);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.default_statement_length);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.statement_type); // from the user extension ranges
                boxSize += IsoReaderWriter.WriteString(stream, this.statement_namespace);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            boxSize += 8; // sample_statement_type
            /*  normally group, or seq  */
            boxSize += 8; // default_statement_type
            boxSize += 8; // default_statement_length
            boxSize += 8; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += 8; // statement_type
                boxSize += (ulong)statement_namespace.Length * 8; // statement_namespace
            }
            return boxSize;
        }
    }


    public class EVCSliceComponentTrackConfigurationBox : Box
    {
        public override string FourCC { get { return "evsC"; } }

        protected EVCSliceComponentTrackConfigurationRecord config;
        public EVCSliceComponentTrackConfigurationRecord Config { get { return config; } set { config = value; } }

        public EVCSliceComponentTrackConfigurationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.config);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.config);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(config); // config
            return boxSize;
        }
    }


    public class WebVTTConfigurationBox : Box
    {
        public override string FourCC { get { return "vttC"; } }

        protected string config;
        public string Config { get { return config; } set { config = value; } }

        public WebVTTConfigurationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadString(stream, out this.config);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteString(stream, this.config);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)config.Length * 8; // config
            return boxSize;
        }
    }


    public class WebVTTSourceLabelBox : Box
    {
        public override string FourCC { get { return "vlab"; } }

        protected string source_label;
        public string SourceLabel { get { return source_label; } set { source_label = value; } }

        public WebVTTSourceLabelBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadString(stream, out this.source_label);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteString(stream, this.source_label);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)source_label.Length * 8; // source_label
            return boxSize;
        }
    }


    public class WVTTSampleEntry : PlainTextSampleEntry
    {
        public override string FourCC { get { return "wvtt"; } }

        protected WebVTTConfigurationBox config;
        public WebVTTConfigurationBox Config { get { return config; } set { config = value; } }

        protected WebVTTSourceLabelBox label;  //  recommended
        public WebVTTSourceLabelBox Label { get { return label; } set { label = value; } }

        protected MPEG4BitRateBox MPEG4BitRateBox;  //  optional
        public MPEG4BitRateBox _MPEG4BitRateBox { get { return MPEG4BitRateBox; } set { MPEG4BitRateBox = value; } }

        public WVTTSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.label); // recommended
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.MPEG4BitRateBox); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            boxSize += IsoReaderWriter.WriteBox(stream, this.label); // recommended
            if (this.MPEG4BitRateBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.MPEG4BitRateBox); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            boxSize += IsoReaderWriter.CalculateSize(label); // label
            if (this.MPEG4BitRateBox != null) boxSize += IsoReaderWriter.CalculateSize(MPEG4BitRateBox); // MPEG4BitRateBox
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class AuxiliaryTypeInfoBox : FullBox
    {
        public override string FourCC { get { return "auxi"; } }

        protected string aux_track_type;
        public string AuxTrackType { get { return aux_track_type; } set { aux_track_type = value; } }

        public AuxiliaryTypeInfoBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadString(stream, out this.aux_track_type);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteString(stream, this.aux_track_type);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)aux_track_type.Length * 8; // aux_track_type
            return boxSize;
        }
    }


    public class CodingConstraintsBox : FullBox
    {
        public override string FourCC { get { return "ccst"; } }

        protected bool all_ref_pics_intra;
        public bool AllRefPicsIntra { get { return all_ref_pics_intra; } set { all_ref_pics_intra = value; } }

        protected bool intra_pred_used;
        public bool IntraPredUsed { get { return intra_pred_used; } set { intra_pred_used = value; } }

        protected byte max_ref_per_pic;
        public byte MaxRefPerPic { get { return max_ref_per_pic; } set { max_ref_per_pic = value; } }

        protected uint reserved;
        public uint Reserved { get { return reserved; } set { reserved = value; } }

        public CodingConstraintsBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.all_ref_pics_intra);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.intra_pred_used);
            boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.max_ref_per_pic);
            boxSize += IsoReaderWriter.ReadBits(stream, 26, out this.reserved);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBit(stream, this.all_ref_pics_intra);
            boxSize += IsoReaderWriter.WriteBit(stream, this.intra_pred_used);
            boxSize += IsoReaderWriter.WriteBits(stream, 4, this.max_ref_per_pic);
            boxSize += IsoReaderWriter.WriteBits(stream, 26, this.reserved);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // all_ref_pics_intra
            boxSize += 1; // intra_pred_used
            boxSize += 4; // max_ref_per_pic
            boxSize += 26; // reserved
            return boxSize;
        }
    }


    public class MD5IntegrityBox : FullBox
    {
        public override string FourCC { get { return "md5i"; } }

        protected byte[] input_MD5;
        public byte[] InputMD5 { get { return input_MD5; } set { input_MD5 = value; } }

        protected uint input_4cc;
        public uint Input4cc { get { return input_4cc; } set { input_4cc = value; } }

        protected uint grouping_type;
        public uint GroupingType { get { return grouping_type; } set { grouping_type = value; } }

        protected uint grouping_type_parameter;
        public uint GroupingTypeParameter { get { return grouping_type_parameter; } set { grouping_type_parameter = value; } }

        protected uint num_entries;
        public uint NumEntries { get { return num_entries; } set { num_entries = value; } }

        protected uint[] group_description_index;
        public uint[] GroupDescriptionIndex { get { return group_description_index; } set { group_description_index = value; } }

        public MD5IntegrityBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBytes(stream, 16, out this.input_MD5);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.input_4cc);

            if (input_4cc == IsoReaderWriter.FromFourCC("sgpd"))
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.grouping_type);

                if ((flags & 1) == 1)
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.grouping_type_parameter);
                }
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entries);

                for (int i = 0; i < num_entries; i++)
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_description_index[i]);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBytes(stream, 16, this.input_MD5);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.input_4cc);

            if (input_4cc == IsoReaderWriter.FromFourCC("sgpd"))
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.grouping_type);

                if ((flags & 1) == 1)
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.grouping_type_parameter);
                }
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entries);

                for (int i = 0; i < num_entries; i++)
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_description_index[i]);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16 * 8; // input_MD5
            boxSize += 32; // input_4cc

            if (input_4cc == IsoReaderWriter.FromFourCC("sgpd"))
            {
                boxSize += 32; // grouping_type

                if ((flags & 1) == 1)
                {
                    boxSize += 32; // grouping_type_parameter
                }
                boxSize += 32; // num_entries

                for (int i = 0; i < num_entries; i++)
                {
                    boxSize += 32; // group_description_index
                }
            }
            return boxSize;
        }
    }


    public class AudioSampleEntry : SampleEntry
    {
        public override string FourCC { get { return "enca"; } }

        protected uint[] reserved = [];
        public uint[] Reserved { get { return reserved; } set { reserved = value; } }

        protected ushort channelcount;
        public ushort Channelcount { get { return channelcount; } set { channelcount = value; } }

        protected ushort samplesize = 16;
        public ushort Samplesize { get { return samplesize; } set { samplesize = value; } }

        protected ushort pre_defined = 0;
        public ushort PreDefined { get { return pre_defined; } set { pre_defined = value; } }

        protected ushort reserved0 = 0;
        public ushort Reserved0 { get { return reserved0; } set { reserved0 = value; } }

        protected uint samplerate = 0; // = {if track_is_audio 0x0100 else 0}; //  optional boxes follow
        public uint Samplerate { get { return samplerate; } set { samplerate = value; } }

        protected Box Box;  //  further boxes as needed
        public Box _Box { get { return Box; } set { Box = value; } }

        protected ChannelLayout ChannelLayout;
        public ChannelLayout _ChannelLayout { get { return ChannelLayout; } set { ChannelLayout = value; } }

        protected DownMixInstructions[] DownMixInstructions;
        public DownMixInstructions[] _DownMixInstructions { get { return DownMixInstructions; } set { DownMixInstructions = value; } }

        protected DRCCoefficientsBasic[] DRCCoefficientsBasic;
        public DRCCoefficientsBasic[] _DRCCoefficientsBasic { get { return DRCCoefficientsBasic; } set { DRCCoefficientsBasic = value; } }

        protected DRCInstructionsBasic[] DRCInstructionsBasic;
        public DRCInstructionsBasic[] _DRCInstructionsBasic { get { return DRCInstructionsBasic; } set { DRCInstructionsBasic = value; } }

        protected DRCCoefficientsUniDRC[] DRCCoefficientsUniDRC;
        public DRCCoefficientsUniDRC[] _DRCCoefficientsUniDRC { get { return DRCCoefficientsUniDRC; } set { DRCCoefficientsUniDRC = value; } }

        protected DRCInstructionsUniDRC[] DRCInstructionsUniDRC;  //  we permit only one DRC Extension box:
        public DRCInstructionsUniDRC[] _DRCInstructionsUniDRC { get { return DRCInstructionsUniDRC; } set { DRCInstructionsUniDRC = value; } }

        protected UniDrcConfigExtension UniDrcConfigExtension;  //  optional boxes follow
        public UniDrcConfigExtension _UniDrcConfigExtension { get { return UniDrcConfigExtension; } set { UniDrcConfigExtension = value; } }

        protected SamplingRateBox SamplingRateBox;
        public SamplingRateBox _SamplingRateBox { get { return SamplingRateBox; } set { SamplingRateBox = value; } }

        protected ChannelLayout ChannelLayout0;
        public ChannelLayout _ChannelLayout0 { get { return ChannelLayout0; } set { ChannelLayout0 = value; } }

        public AudioSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, 2, out this.reserved);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.channelcount);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.samplesize);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.pre_defined);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reserved0);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.samplerate); // optional boxes follow
            boxSize += IsoReaderWriter.ReadBox(stream, out this.Box); // further boxes as needed
            boxSize += IsoReaderWriter.ReadBox(stream, out this.ChannelLayout);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DownMixInstructions);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCCoefficientsBasic);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCInstructionsBasic);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCCoefficientsUniDRC);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCInstructionsUniDRC); // we permit only one DRC Extension box:
            boxSize += IsoReaderWriter.ReadBox(stream, out this.UniDrcConfigExtension); // optional boxes follow
            boxSize += IsoReaderWriter.ReadBox(stream, out this.SamplingRateBox);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.ChannelLayout0);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, 2, this.reserved);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.channelcount);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.samplesize);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.pre_defined);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reserved0);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.samplerate); // optional boxes follow
            boxSize += IsoReaderWriter.WriteBox(stream, this.Box); // further boxes as needed
            boxSize += IsoReaderWriter.WriteBox(stream, this.ChannelLayout);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DownMixInstructions);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCCoefficientsBasic);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCInstructionsBasic);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCCoefficientsUniDRC);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCInstructionsUniDRC); // we permit only one DRC Extension box:
            boxSize += IsoReaderWriter.WriteBox(stream, this.UniDrcConfigExtension); // optional boxes follow
            boxSize += IsoReaderWriter.WriteBox(stream, this.SamplingRateBox);
            boxSize += IsoReaderWriter.WriteBox(stream, this.ChannelLayout0);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 2 * 32; // reserved
            boxSize += 16; // channelcount
            boxSize += 16; // samplesize
            boxSize += 16; // pre_defined
            boxSize += 16; // reserved0
            boxSize += 32; // samplerate
            boxSize += IsoReaderWriter.CalculateSize(Box); // Box
            boxSize += IsoReaderWriter.CalculateSize(ChannelLayout); // ChannelLayout
            boxSize += IsoReaderWriter.CalculateClassSize(DownMixInstructions); // DownMixInstructions
            boxSize += IsoReaderWriter.CalculateClassSize(DRCCoefficientsBasic); // DRCCoefficientsBasic
            boxSize += IsoReaderWriter.CalculateClassSize(DRCInstructionsBasic); // DRCInstructionsBasic
            boxSize += IsoReaderWriter.CalculateClassSize(DRCCoefficientsUniDRC); // DRCCoefficientsUniDRC
            boxSize += IsoReaderWriter.CalculateClassSize(DRCInstructionsUniDRC); // DRCInstructionsUniDRC
            boxSize += IsoReaderWriter.CalculateSize(UniDrcConfigExtension); // UniDrcConfigExtension
            boxSize += IsoReaderWriter.CalculateSize(SamplingRateBox); // SamplingRateBox
            boxSize += IsoReaderWriter.CalculateSize(ChannelLayout0); // ChannelLayout0
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class AudioSampleEntryV1 : SampleEntry
    {
        public override string FourCC { get { return "enca"; } }

        protected ushort entry_version;  //  shall be 1, 
        public ushort EntryVersion { get { return entry_version; } set { entry_version = value; } }

        protected ushort[] reserved = [];
        public ushort[] Reserved { get { return reserved; } set { reserved = value; } }

        protected ushort channelcount;  //  shall be correct
        public ushort Channelcount { get { return channelcount; } set { channelcount = value; } }

        protected ushort samplesize = 16;
        public ushort Samplesize { get { return samplesize; } set { samplesize = value; } }

        protected ushort pre_defined = 0;
        public ushort PreDefined { get { return pre_defined; } set { pre_defined = value; } }

        protected ushort reserved0 = 0;
        public ushort Reserved0 { get { return reserved0; } set { reserved0 = value; } }

        protected uint samplerate = 1 << 16;  //  optional boxes follow
        public uint Samplerate { get { return samplerate; } set { samplerate = value; } }

        protected SamplingRateBox SamplingRateBox;
        public SamplingRateBox _SamplingRateBox { get { return SamplingRateBox; } set { SamplingRateBox = value; } }

        protected Box Box;  //  further boxes as needed
        public Box _Box { get { return Box; } set { Box = value; } }

        protected ChannelLayout ChannelLayout;
        public ChannelLayout _ChannelLayout { get { return ChannelLayout; } set { ChannelLayout = value; } }

        protected DownMixInstructions[] DownMixInstructions;
        public DownMixInstructions[] _DownMixInstructions { get { return DownMixInstructions; } set { DownMixInstructions = value; } }

        protected DRCCoefficientsBasic[] DRCCoefficientsBasic;
        public DRCCoefficientsBasic[] _DRCCoefficientsBasic { get { return DRCCoefficientsBasic; } set { DRCCoefficientsBasic = value; } }

        protected DRCInstructionsBasic[] DRCInstructionsBasic;
        public DRCInstructionsBasic[] _DRCInstructionsBasic { get { return DRCInstructionsBasic; } set { DRCInstructionsBasic = value; } }

        protected DRCCoefficientsUniDRC[] DRCCoefficientsUniDRC;
        public DRCCoefficientsUniDRC[] _DRCCoefficientsUniDRC { get { return DRCCoefficientsUniDRC; } set { DRCCoefficientsUniDRC = value; } }

        protected DRCInstructionsUniDRC[] DRCInstructionsUniDRC;  //  we permit only one DRC Extension box:
        public DRCInstructionsUniDRC[] _DRCInstructionsUniDRC { get { return DRCInstructionsUniDRC; } set { DRCInstructionsUniDRC = value; } }

        protected UniDrcConfigExtension UniDrcConfigExtension;  //  optional boxes follow
        public UniDrcConfigExtension _UniDrcConfigExtension { get { return UniDrcConfigExtension; } set { UniDrcConfigExtension = value; } }

        protected ChannelLayout ChannelLayout0;
        public ChannelLayout _ChannelLayout0 { get { return ChannelLayout0; } set { ChannelLayout0 = value; } }

        public AudioSampleEntryV1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.entry_version); // shall be 1, 
            /*  and shall be in an stsd with version ==1 */
            boxSize += IsoReaderWriter.ReadUInt16Array(stream, 3, out this.reserved);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.channelcount); // shall be correct
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.samplesize);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.pre_defined);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reserved0);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.samplerate); // optional boxes follow
            boxSize += IsoReaderWriter.ReadBox(stream, out this.SamplingRateBox);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.Box); // further boxes as needed
            boxSize += IsoReaderWriter.ReadBox(stream, out this.ChannelLayout);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DownMixInstructions);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCCoefficientsBasic);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCInstructionsBasic);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCCoefficientsUniDRC);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCInstructionsUniDRC); // we permit only one DRC Extension box:
            boxSize += IsoReaderWriter.ReadBox(stream, out this.UniDrcConfigExtension); // optional boxes follow
            boxSize += IsoReaderWriter.ReadBox(stream, out this.ChannelLayout0);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.entry_version); // shall be 1, 
            /*  and shall be in an stsd with version ==1 */
            boxSize += IsoReaderWriter.WriteUInt16Array(stream, 3, this.reserved);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.channelcount); // shall be correct
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.samplesize);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.pre_defined);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reserved0);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.samplerate); // optional boxes follow
            boxSize += IsoReaderWriter.WriteBox(stream, this.SamplingRateBox);
            boxSize += IsoReaderWriter.WriteBox(stream, this.Box); // further boxes as needed
            boxSize += IsoReaderWriter.WriteBox(stream, this.ChannelLayout);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DownMixInstructions);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCCoefficientsBasic);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCInstructionsBasic);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCCoefficientsUniDRC);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCInstructionsUniDRC); // we permit only one DRC Extension box:
            boxSize += IsoReaderWriter.WriteBox(stream, this.UniDrcConfigExtension); // optional boxes follow
            boxSize += IsoReaderWriter.WriteBox(stream, this.ChannelLayout0);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // entry_version
            /*  and shall be in an stsd with version ==1 */
            boxSize += 3 * 16; // reserved
            boxSize += 16; // channelcount
            boxSize += 16; // samplesize
            boxSize += 16; // pre_defined
            boxSize += 16; // reserved0
            boxSize += 32; // samplerate
            boxSize += IsoReaderWriter.CalculateSize(SamplingRateBox); // SamplingRateBox
            boxSize += IsoReaderWriter.CalculateSize(Box); // Box
            boxSize += IsoReaderWriter.CalculateSize(ChannelLayout); // ChannelLayout
            boxSize += IsoReaderWriter.CalculateClassSize(DownMixInstructions); // DownMixInstructions
            boxSize += IsoReaderWriter.CalculateClassSize(DRCCoefficientsBasic); // DRCCoefficientsBasic
            boxSize += IsoReaderWriter.CalculateClassSize(DRCInstructionsBasic); // DRCInstructionsBasic
            boxSize += IsoReaderWriter.CalculateClassSize(DRCCoefficientsUniDRC); // DRCCoefficientsUniDRC
            boxSize += IsoReaderWriter.CalculateClassSize(DRCInstructionsUniDRC); // DRCInstructionsUniDRC
            boxSize += IsoReaderWriter.CalculateSize(UniDrcConfigExtension); // UniDrcConfigExtension
            boxSize += IsoReaderWriter.CalculateSize(ChannelLayout0); // ChannelLayout0
            return boxSize;
        }
    }


    public class AudioSampleEntryV11 : SampleEntry
    {
        public override string FourCC { get { return "enca"; } }

        protected ushort entry_version;  //  shall be 1, 
        public ushort EntryVersion { get { return entry_version; } set { entry_version = value; } }

        protected ushort[] reserved = [];
        public ushort[] Reserved { get { return reserved; } set { reserved = value; } }

        protected ushort channelcount;  //  shall be correct
        public ushort Channelcount { get { return channelcount; } set { channelcount = value; } }

        protected ushort samplesize = 16;
        public ushort Samplesize { get { return samplesize; } set { samplesize = value; } }

        protected ushort pre_defined = 0;
        public ushort PreDefined { get { return pre_defined; } set { pre_defined = value; } }

        protected ushort reserved0 = 0;
        public ushort Reserved0 { get { return reserved0; } set { reserved0 = value; } }

        protected uint samplerate = 1 << 16;  //  optional boxes follow
        public uint Samplerate { get { return samplerate; } set { samplerate = value; } }

        protected SamplingRateBox SamplingRateBox;
        public SamplingRateBox _SamplingRateBox { get { return SamplingRateBox; } set { SamplingRateBox = value; } }

        protected Box Box;  //  further boxes as needed
        public Box _Box { get { return Box; } set { Box = value; } }

        protected ChannelLayout ChannelLayout;
        public ChannelLayout _ChannelLayout { get { return ChannelLayout; } set { ChannelLayout = value; } }

        protected DownMixInstructions[] DownMixInstructions;
        public DownMixInstructions[] _DownMixInstructions { get { return DownMixInstructions; } set { DownMixInstructions = value; } }

        protected DRCCoefficientsBasic[] DRCCoefficientsBasic;
        public DRCCoefficientsBasic[] _DRCCoefficientsBasic { get { return DRCCoefficientsBasic; } set { DRCCoefficientsBasic = value; } }

        protected DRCInstructionsBasic[] DRCInstructionsBasic;
        public DRCInstructionsBasic[] _DRCInstructionsBasic { get { return DRCInstructionsBasic; } set { DRCInstructionsBasic = value; } }

        protected DRCCoefficientsUniDRC[] DRCCoefficientsUniDRC;
        public DRCCoefficientsUniDRC[] _DRCCoefficientsUniDRC { get { return DRCCoefficientsUniDRC; } set { DRCCoefficientsUniDRC = value; } }

        protected DRCInstructionsUniDRC[] DRCInstructionsUniDRC;  //  we permit only one DRC Extension box:
        public DRCInstructionsUniDRC[] _DRCInstructionsUniDRC { get { return DRCInstructionsUniDRC; } set { DRCInstructionsUniDRC = value; } }

        protected UniDrcConfigExtension UniDrcConfigExtension;  //  optional boxes follow
        public UniDrcConfigExtension _UniDrcConfigExtension { get { return UniDrcConfigExtension; } set { UniDrcConfigExtension = value; } }

        protected ChannelLayout ChannelLayout0;
        public ChannelLayout _ChannelLayout0 { get { return ChannelLayout0; } set { ChannelLayout0 = value; } }

        public AudioSampleEntryV11()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.entry_version); // shall be 1, 
            /*  and shall be in an stsd with version ==1 */
            boxSize += IsoReaderWriter.ReadUInt16Array(stream, 3, out this.reserved);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.channelcount); // shall be correct
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.samplesize);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.pre_defined);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reserved0);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.samplerate); // optional boxes follow
            boxSize += IsoReaderWriter.ReadBox(stream, out this.SamplingRateBox);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.Box); // further boxes as needed
            boxSize += IsoReaderWriter.ReadBox(stream, out this.ChannelLayout);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DownMixInstructions);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCCoefficientsBasic);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCInstructionsBasic);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCCoefficientsUniDRC);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCInstructionsUniDRC); // we permit only one DRC Extension box:
            boxSize += IsoReaderWriter.ReadBox(stream, out this.UniDrcConfigExtension); // optional boxes follow
            boxSize += IsoReaderWriter.ReadBox(stream, out this.ChannelLayout0);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.entry_version); // shall be 1, 
            /*  and shall be in an stsd with version ==1 */
            boxSize += IsoReaderWriter.WriteUInt16Array(stream, 3, this.reserved);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.channelcount); // shall be correct
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.samplesize);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.pre_defined);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reserved0);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.samplerate); // optional boxes follow
            boxSize += IsoReaderWriter.WriteBox(stream, this.SamplingRateBox);
            boxSize += IsoReaderWriter.WriteBox(stream, this.Box); // further boxes as needed
            boxSize += IsoReaderWriter.WriteBox(stream, this.ChannelLayout);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DownMixInstructions);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCCoefficientsBasic);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCInstructionsBasic);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCCoefficientsUniDRC);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCInstructionsUniDRC); // we permit only one DRC Extension box:
            boxSize += IsoReaderWriter.WriteBox(stream, this.UniDrcConfigExtension); // optional boxes follow
            boxSize += IsoReaderWriter.WriteBox(stream, this.ChannelLayout0);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // entry_version
            /*  and shall be in an stsd with version ==1 */
            boxSize += 3 * 16; // reserved
            boxSize += 16; // channelcount
            boxSize += 16; // samplesize
            boxSize += 16; // pre_defined
            boxSize += 16; // reserved0
            boxSize += 32; // samplerate
            boxSize += IsoReaderWriter.CalculateSize(SamplingRateBox); // SamplingRateBox
            boxSize += IsoReaderWriter.CalculateSize(Box); // Box
            boxSize += IsoReaderWriter.CalculateSize(ChannelLayout); // ChannelLayout
            boxSize += IsoReaderWriter.CalculateClassSize(DownMixInstructions); // DownMixInstructions
            boxSize += IsoReaderWriter.CalculateClassSize(DRCCoefficientsBasic); // DRCCoefficientsBasic
            boxSize += IsoReaderWriter.CalculateClassSize(DRCInstructionsBasic); // DRCInstructionsBasic
            boxSize += IsoReaderWriter.CalculateClassSize(DRCCoefficientsUniDRC); // DRCCoefficientsUniDRC
            boxSize += IsoReaderWriter.CalculateClassSize(DRCInstructionsUniDRC); // DRCInstructionsUniDRC
            boxSize += IsoReaderWriter.CalculateSize(UniDrcConfigExtension); // UniDrcConfigExtension
            boxSize += IsoReaderWriter.CalculateSize(ChannelLayout0); // ChannelLayout0
            return boxSize;
        }
    }


    public class FontSampleEntry : SampleEntry
    {
        public override string FourCC { get { return "encf"; } }

        public FontSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            /* other boxes from derived specifications */
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            /* other boxes from derived specifications */
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            /* other boxes from derived specifications */
            return boxSize;
        }
    }


    public class MetaDataSampleEntry : SampleEntry
    {
        public override string FourCC { get { return "encm"; } }

        public MetaDataSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class SampleEntry : Box
    {
        public override string FourCC { get { return "encv"; } }

        public SampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            /*  ProtectionSchemeInfoBox { */
            /*  OriginalFormatBox;	// data_format is 'resv' */
            /*  SchemeTypeBox; */
            /*  SchemeInformationBox; */
            /*  } */
            /*  tRestrictedSchemeInfoBox { */
            /*  OriginalFormatBox; // data_format indicates a codec, e.g. 'avc1' */
            /*  SchemeTypeBox; */
            /*  SchemeInformationBox; */
            /*  } */
            /*  Boxes specific to the untransformed sample entry type */
            /*  For 'avc1', these would include AVCConfigurationBox */
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            /*  ProtectionSchemeInfoBox { */
            /*  OriginalFormatBox;	// data_format is 'resv' */
            /*  SchemeTypeBox; */
            /*  SchemeInformationBox; */
            /*  } */
            /*  tRestrictedSchemeInfoBox { */
            /*  OriginalFormatBox; // data_format indicates a codec, e.g. 'avc1' */
            /*  SchemeTypeBox; */
            /*  SchemeInformationBox; */
            /*  } */
            /*  Boxes specific to the untransformed sample entry type */
            /*  For 'avc1', these would include AVCConfigurationBox */
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            /*  ProtectionSchemeInfoBox { */
            /*  OriginalFormatBox;	// data_format is 'resv' */
            /*  SchemeTypeBox; */
            /*  SchemeInformationBox; */
            /*  } */
            /*  tRestrictedSchemeInfoBox { */
            /*  OriginalFormatBox; // data_format indicates a codec, e.g. 'avc1' */
            /*  SchemeTypeBox; */
            /*  SchemeInformationBox; */
            /*  } */
            /*  Boxes specific to the untransformed sample entry type */
            /*  For 'avc1', these would include AVCConfigurationBox */
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class XMLMetaDataSampleEntry : MetaDataSampleEntry
    {
        public override string FourCC { get { return "metx"; } }

        protected string content_encoding;  //  optional
        public string ContentEncoding { get { return content_encoding; } set { content_encoding = value; } }

        protected string ns;
        public string Ns { get { return ns; } set { ns = value; } }

        protected string schema_location;  //  optional
        public string SchemaLocation { get { return schema_location; } set { schema_location = value; } }

        public XMLMetaDataSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadString(stream, out this.content_encoding); // optional
            boxSize += IsoReaderWriter.ReadString(stream, out this.ns);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadString(stream, out this.schema_location); // optional
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.content_encoding != null) boxSize += IsoReaderWriter.WriteString(stream, this.content_encoding); // optional
            boxSize += IsoReaderWriter.WriteString(stream, this.ns);
            if (this.schema_location != null) boxSize += IsoReaderWriter.WriteString(stream, this.schema_location); // optional
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.content_encoding != null) boxSize += (ulong)content_encoding.Length * 8; // content_encoding
            boxSize += (ulong)ns.Length * 8; // ns
            if (this.schema_location != null) boxSize += (ulong)schema_location.Length * 8; // schema_location
            return boxSize;
        }
    }


    public class TextMetaDataSampleEntry : MetaDataSampleEntry
    {
        public override string FourCC { get { return "mett"; } }

        protected string content_encoding;  //  optional
        public string ContentEncoding { get { return content_encoding; } set { content_encoding = value; } }

        protected string mime_format;
        public string MimeFormat { get { return mime_format; } set { mime_format = value; } }

        protected TextConfigBox TextConfigBox;  //  optional
        public TextConfigBox _TextConfigBox { get { return TextConfigBox; } set { TextConfigBox = value; } }

        public TextMetaDataSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadString(stream, out this.content_encoding); // optional
            boxSize += IsoReaderWriter.ReadString(stream, out this.mime_format);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.TextConfigBox); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.content_encoding != null) boxSize += IsoReaderWriter.WriteString(stream, this.content_encoding); // optional
            boxSize += IsoReaderWriter.WriteString(stream, this.mime_format);
            if (this.TextConfigBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.TextConfigBox); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.content_encoding != null) boxSize += (ulong)content_encoding.Length * 8; // content_encoding
            boxSize += (ulong)mime_format.Length * 8; // mime_format
            if (this.TextConfigBox != null) boxSize += IsoReaderWriter.CalculateSize(TextConfigBox); // TextConfigBox
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class URIMetaSampleEntry : MetaDataSampleEntry
    {
        public override string FourCC { get { return "urim"; } }

        protected URIBox the_label;
        public URIBox TheLabel { get { return the_label; } set { the_label = value; } }

        protected URIInitBox init;  //  optional
        public URIInitBox Init { get { return init; } set { init = value; } }

        public URIMetaSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.the_label);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.init); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.the_label);
            if (this.init != null) boxSize += IsoReaderWriter.WriteBox(stream, this.init); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(the_label); // the_label
            if (this.init != null) boxSize += IsoReaderWriter.CalculateSize(init); // init
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class BoxedMetadataSampleEntry : MetadataSampleEntry
    {
        public override string FourCC { get { return "mebx"; } }

        protected MetadataKeyTableBox MetadataKeyTableBox;  //  mandatory
        public MetadataKeyTableBox _MetadataKeyTableBox { get { return MetadataKeyTableBox; } set { MetadataKeyTableBox = value; } }

        protected BitRateBox BitRateBox;  //  optional
        public BitRateBox _BitRateBox { get { return BitRateBox; } set { BitRateBox = value; } }

        public BoxedMetadataSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.MetadataKeyTableBox); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.BitRateBox); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.MetadataKeyTableBox); // mandatory
            if (this.BitRateBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.BitRateBox); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(MetadataKeyTableBox); // MetadataKeyTableBox
            if (this.BitRateBox != null) boxSize += IsoReaderWriter.CalculateSize(BitRateBox); // BitRateBox
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class FDHintSampleEntry : HintSampleEntry
    {
        public override string FourCC { get { return "fdp "; } }

        protected ushort hinttrackversion = 1;
        public ushort Hinttrackversion { get { return hinttrackversion; } set { hinttrackversion = value; } }

        protected ushort highestcompatibleversion = 1;
        public ushort Highestcompatibleversion { get { return highestcompatibleversion; } set { highestcompatibleversion = value; } }

        protected ushort partition_entry_ID;
        public ushort PartitionEntryID { get { return partition_entry_ID; } set { partition_entry_ID = value; } }

        protected ushort FEC_overhead;
        public ushort FECOverhead { get { return FEC_overhead; } set { FEC_overhead = value; } }

        public FDHintSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.hinttrackversion);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.highestcompatibleversion);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.partition_entry_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.FEC_overhead);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.hinttrackversion);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.highestcompatibleversion);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.partition_entry_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.FEC_overhead);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // hinttrackversion
            boxSize += 16; // highestcompatibleversion
            boxSize += 16; // partition_entry_ID
            boxSize += 16; // FEC_overhead
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class IncompleteAVCSampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "icpv"; } }

        protected CompleteTrackInfoBox CompleteTrackInfoBox;
        public CompleteTrackInfoBox _CompleteTrackInfoBox { get { return CompleteTrackInfoBox; } set { CompleteTrackInfoBox = value; } }

        protected AVCConfigurationBox config;
        public AVCConfigurationBox Config { get { return config; } set { config = value; } }

        public IncompleteAVCSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.CompleteTrackInfoBox);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.CompleteTrackInfoBox);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(CompleteTrackInfoBox); // CompleteTrackInfoBox
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class ProtectedMPEG2TransportStreamSampleEntry : MPEG2TSSampleEntry
    {
        public override string FourCC { get { return "pm2t"; } }

        protected ProtectionSchemeInfoBox SchemeInformation;
        public ProtectionSchemeInfoBox _SchemeInformation { get { return SchemeInformation; } set { SchemeInformation = value; } }

        public ProtectedMPEG2TransportStreamSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.SchemeInformation);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.SchemeInformation);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(SchemeInformation); // SchemeInformation
            return boxSize;
        }
    }


    public class ProtectedRtpReceptionHintSampleEntry : RtpReceptionHintSampleEntry
    {
        public override string FourCC { get { return "prtp"; } }

        protected ProtectionSchemeInfoBox SchemeInformation;
        public ProtectionSchemeInfoBox _SchemeInformation { get { return SchemeInformation; } set { SchemeInformation = value; } }

        public ProtectedRtpReceptionHintSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.SchemeInformation);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.SchemeInformation);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(SchemeInformation); // SchemeInformation
            return boxSize;
        }
    }


    public class MPEG2TSReceptionSampleEntry : MPEG2TSSampleEntry
    {
        public override string FourCC { get { return "rm2t"; } }

        public MPEG2TSReceptionSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class ReceivedRtpHintSampleEntry : HintSampleEntry
    {
        public override string FourCC { get { return "rrtp"; } }

        protected ushort hinttrackversion = 1;
        public ushort Hinttrackversion { get { return hinttrackversion; } set { hinttrackversion = value; } }

        protected ushort highestcompatibleversion = 1;
        public ushort Highestcompatibleversion { get { return highestcompatibleversion; } set { highestcompatibleversion = value; } }

        protected uint maxpacketsize;
        public uint Maxpacketsize { get { return maxpacketsize; } set { maxpacketsize = value; } }

        public ReceivedRtpHintSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.hinttrackversion);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.highestcompatibleversion);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.maxpacketsize);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.hinttrackversion);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.highestcompatibleversion);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.maxpacketsize);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // hinttrackversion
            boxSize += 16; // highestcompatibleversion
            boxSize += 32; // maxpacketsize
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class ReceivedSrtpHintSampleEntry : HintSampleEntry
    {
        public override string FourCC { get { return "rsrp"; } }

        protected ushort hinttrackversion = 1;
        public ushort Hinttrackversion { get { return hinttrackversion; } set { hinttrackversion = value; } }

        protected ushort highestcompatibleversion = 1;
        public ushort Highestcompatibleversion { get { return highestcompatibleversion; } set { highestcompatibleversion = value; } }

        protected uint maxpacketsize;
        public uint Maxpacketsize { get { return maxpacketsize; } set { maxpacketsize = value; } }

        public ReceivedSrtpHintSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.hinttrackversion);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.highestcompatibleversion);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.maxpacketsize);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.hinttrackversion);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.highestcompatibleversion);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.maxpacketsize);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // hinttrackversion
            boxSize += 16; // highestcompatibleversion
            boxSize += 32; // maxpacketsize
            return boxSize;
        }
    }


    public class HintSampleEntry : SampleEntry
    {
        public override string FourCC { get { return "rtcp"; } }

        public HintSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class moviehintinformation1 : Box
    {
        public override string FourCC { get { return "rtp "; } }

        public moviehintinformation1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class rtpmoviehintinformation1 : Box
    {
        public override string FourCC { get { return "rtp "; } }

        protected uint descriptionformat = IsoReaderWriter.FromFourCC("sdp ");
        public uint Descriptionformat { get { return descriptionformat; } set { descriptionformat = value; } }

        protected sbyte[] sdptext;
        public sbyte[] Sdptext { get { return sdptext; } set { sdptext = value; } }

        public rtpmoviehintinformation1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.descriptionformat);
            boxSize += IsoReaderWriter.ReadInt8Array(stream, out this.sdptext);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.descriptionformat);
            boxSize += IsoReaderWriter.WriteInt8Array(stream, this.sdptext);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // descriptionformat
            boxSize += (ulong)sdptext.Length * 8; // sdptext
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class TextSubtitleSampleEntry1 : SubtitleSampleEntry
    {
        public override string FourCC { get { return "sbtt"; } }

        protected string content_encoding;  //  optional
        public string ContentEncoding { get { return content_encoding; } set { content_encoding = value; } }

        protected string mime_format;
        public string MimeFormat { get { return mime_format; } set { mime_format = value; } }

        protected TextConfigBox TextConfigBox;  //  optional
        public TextConfigBox _TextConfigBox { get { return TextConfigBox; } set { TextConfigBox = value; } }

        public TextSubtitleSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadString(stream, out this.content_encoding); // optional
            boxSize += IsoReaderWriter.ReadString(stream, out this.mime_format);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.TextConfigBox); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.content_encoding != null) boxSize += IsoReaderWriter.WriteString(stream, this.content_encoding); // optional
            boxSize += IsoReaderWriter.WriteString(stream, this.mime_format);
            if (this.TextConfigBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.TextConfigBox); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.content_encoding != null) boxSize += (ulong)content_encoding.Length * 8; // content_encoding
            boxSize += (ulong)mime_format.Length * 8; // mime_format
            if (this.TextConfigBox != null) boxSize += IsoReaderWriter.CalculateSize(TextConfigBox); // TextConfigBox
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class MPEG2TSServerSampleEntry : MPEG2TSSampleEntry
    {
        public override string FourCC { get { return "sm2t"; } }

        public MPEG2TSServerSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class SrtpHintSampleEntry : HintSampleEntry
    {
        public override string FourCC { get { return "srtp"; } }

        protected ushort hinttrackversion = 1;
        public ushort Hinttrackversion { get { return hinttrackversion; } set { hinttrackversion = value; } }

        protected ushort highestcompatibleversion = 1;
        public ushort Highestcompatibleversion { get { return highestcompatibleversion; } set { highestcompatibleversion = value; } }

        protected uint maxpacketsize;
        public uint Maxpacketsize { get { return maxpacketsize; } set { maxpacketsize = value; } }

        public SrtpHintSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.hinttrackversion);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.highestcompatibleversion);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.maxpacketsize);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.hinttrackversion);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.highestcompatibleversion);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.maxpacketsize);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // hinttrackversion
            boxSize += 16; // highestcompatibleversion
            boxSize += 32; // maxpacketsize
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class XMLSubtitleSampleEntry1 : SubtitleSampleEntry
    {
        public override string FourCC { get { return "stpp"; } }

        protected string ns;
        public string Ns { get { return ns; } set { ns = value; } }

        protected string schema_location;  //  optional
        public string SchemaLocation { get { return schema_location; } set { schema_location = value; } }

        protected string auxiliary_mime_types;  //  optional, required if auxiliary resources are present
        public string AuxiliaryMimeTypes { get { return auxiliary_mime_types; } set { auxiliary_mime_types = value; } }

        public XMLSubtitleSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadString(stream, out this.ns);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadString(stream, out this.schema_location); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadString(stream, out this.auxiliary_mime_types); // optional, required if auxiliary resources are present
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteString(stream, this.ns);
            if (this.schema_location != null) boxSize += IsoReaderWriter.WriteString(stream, this.schema_location); // optional
            if (this.auxiliary_mime_types != null) boxSize += IsoReaderWriter.WriteString(stream, this.auxiliary_mime_types); // optional, required if auxiliary resources are present
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)ns.Length * 8; // ns
            if (this.schema_location != null) boxSize += (ulong)schema_location.Length * 8; // schema_location
            if (this.auxiliary_mime_types != null) boxSize += (ulong)auxiliary_mime_types.Length * 8; // auxiliary_mime_types
            return boxSize;
        }
    }


    public class SimpleTextSampleEntry : PlainTextSampleEntry
    {
        public override string FourCC { get { return "stxt"; } }

        protected string content_encoding;  //  optional
        public string ContentEncoding { get { return content_encoding; } set { content_encoding = value; } }

        protected string mime_format;
        public string MimeFormat { get { return mime_format; } set { mime_format = value; } }

        protected TextConfigBox TextConfigBox;  //  optional
        public TextConfigBox _TextConfigBox { get { return TextConfigBox; } set { TextConfigBox = value; } }

        public SimpleTextSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadString(stream, out this.content_encoding); // optional
            boxSize += IsoReaderWriter.ReadString(stream, out this.mime_format);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.TextConfigBox); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.content_encoding != null) boxSize += IsoReaderWriter.WriteString(stream, this.content_encoding); // optional
            boxSize += IsoReaderWriter.WriteString(stream, this.mime_format);
            if (this.TextConfigBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.TextConfigBox); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.content_encoding != null) boxSize += (ulong)content_encoding.Length * 8; // content_encoding
            boxSize += (ulong)mime_format.Length * 8; // mime_format
            if (this.TextConfigBox != null) boxSize += IsoReaderWriter.CalculateSize(TextConfigBox); // TextConfigBox
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class HapticSampleEntry : SampleEntry
    {
        public override string FourCC { get { return "encp"; } }

        protected Box[] otherboxes;
        public Box[] Otherboxes { get { return otherboxes; } set { otherboxes = value; } }

        public HapticSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.otherboxes);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.otherboxes);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(otherboxes); // otherboxes
            return boxSize;
        }
    }


    public class VolumetricVisualSampleEntry : SampleEntry
    {
        public override string FourCC { get { return "enc3"; } }

        protected byte[] compressorname;  //  other boxes from derived specifications
        public byte[] Compressorname { get { return compressorname; } set { compressorname = value; } }

        public VolumetricVisualSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBytes(stream, 32, out this.compressorname); // other boxes from derived specifications
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBytes(stream, 32, this.compressorname); // other boxes from derived specifications
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32 * 8; // compressorname
            return boxSize;
        }
    }


    public class VisualSampleEntry : SampleEntry
    {
        public override string FourCC { get { return "resv"; } }

        protected ushort pre_defined = 0;
        public ushort PreDefined { get { return pre_defined; } set { pre_defined = value; } }

        protected ushort reserved = 0;
        public ushort Reserved { get { return reserved; } set { reserved = value; } }

        protected uint[] pre_defined0 = [];
        public uint[] PreDefined0 { get { return pre_defined0; } set { pre_defined0 = value; } }

        protected ushort width;
        public ushort Width { get { return width; } set { width = value; } }

        protected ushort height;
        public ushort Height { get { return height; } set { height = value; } }

        protected uint horizresolution = 0x00480000;  //  72 dpi
        public uint Horizresolution { get { return horizresolution; } set { horizresolution = value; } }

        protected uint vertresolution = 0x00480000;  //  72 dpi
        public uint Vertresolution { get { return vertresolution; } set { vertresolution = value; } }

        protected uint reserved0 = 0;
        public uint Reserved0 { get { return reserved0; } set { reserved0 = value; } }

        protected ushort frame_count = 1;
        public ushort FrameCount { get { return frame_count; } set { frame_count = value; } }

        protected byte[] compressorname;
        public byte[] Compressorname { get { return compressorname; } set { compressorname = value; } }

        protected ushort depth = 0x0018;
        public ushort Depth { get { return depth; } set { depth = value; } }

        protected short pre_defined1 = -1;  //  other boxes from derived specifications
        public short PreDefined1 { get { return pre_defined1; } set { pre_defined1 = value; } }

        protected CleanApertureBox clap;  //  optional
        public CleanApertureBox Clap { get { return clap; } set { clap = value; } }

        protected PixelAspectRatioBox pasp;  //  optional
        public PixelAspectRatioBox Pasp { get { return pasp; } set { pasp = value; } }

        public VisualSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.pre_defined);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reserved);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, 3, out this.pre_defined0);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.width);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.height);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.horizresolution); // 72 dpi
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.vertresolution); // 72 dpi
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.reserved0);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.frame_count);
            boxSize += IsoReaderWriter.ReadBytes(stream, 32, out this.compressorname);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.depth);
            boxSize += IsoReaderWriter.ReadInt16(stream, out this.pre_defined1); // other boxes from derived specifications
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.clap); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.pasp); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.pre_defined);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reserved);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, 3, this.pre_defined0);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.width);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.height);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.horizresolution); // 72 dpi
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.vertresolution); // 72 dpi
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.reserved0);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.frame_count);
            boxSize += IsoReaderWriter.WriteBytes(stream, 32, this.compressorname);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.depth);
            boxSize += IsoReaderWriter.WriteInt16(stream, this.pre_defined1); // other boxes from derived specifications
            if (this.clap != null) boxSize += IsoReaderWriter.WriteBox(stream, this.clap); // optional
            if (this.pasp != null) boxSize += IsoReaderWriter.WriteBox(stream, this.pasp); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // pre_defined
            boxSize += 16; // reserved
            boxSize += 3 * 32; // pre_defined0
            boxSize += 16; // width
            boxSize += 16; // height
            boxSize += 32; // horizresolution
            boxSize += 32; // vertresolution
            boxSize += 32; // reserved0
            boxSize += 16; // frame_count
            boxSize += 32 * 8; // compressorname
            boxSize += 16; // depth
            boxSize += 16; // pre_defined1
            if (this.clap != null) boxSize += IsoReaderWriter.CalculateSize(clap); // clap
            if (this.pasp != null) boxSize += IsoReaderWriter.CalculateSize(pasp); // pasp
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class AudioSampleEntry1 : SampleEntry
    {
        public override string FourCC { get { return "resa"; } }

        protected uint[] reserved = [];
        public uint[] Reserved { get { return reserved; } set { reserved = value; } }

        protected ushort channelcount;
        public ushort Channelcount { get { return channelcount; } set { channelcount = value; } }

        protected ushort samplesize = 16;
        public ushort Samplesize { get { return samplesize; } set { samplesize = value; } }

        protected ushort pre_defined = 0;
        public ushort PreDefined { get { return pre_defined; } set { pre_defined = value; } }

        protected ushort reserved0 = 0;
        public ushort Reserved0 { get { return reserved0; } set { reserved0 = value; } }

        protected uint samplerate = 0; // = {if track_is_audio 0x0100 else 0}; //  optional boxes follow
        public uint Samplerate { get { return samplerate; } set { samplerate = value; } }

        protected Box Box;  //  further boxes as needed
        public Box _Box { get { return Box; } set { Box = value; } }

        protected ChannelLayout ChannelLayout;
        public ChannelLayout _ChannelLayout { get { return ChannelLayout; } set { ChannelLayout = value; } }

        protected DownMixInstructions[] DownMixInstructions;
        public DownMixInstructions[] _DownMixInstructions { get { return DownMixInstructions; } set { DownMixInstructions = value; } }

        protected DRCCoefficientsBasic[] DRCCoefficientsBasic;
        public DRCCoefficientsBasic[] _DRCCoefficientsBasic { get { return DRCCoefficientsBasic; } set { DRCCoefficientsBasic = value; } }

        protected DRCInstructionsBasic[] DRCInstructionsBasic;
        public DRCInstructionsBasic[] _DRCInstructionsBasic { get { return DRCInstructionsBasic; } set { DRCInstructionsBasic = value; } }

        protected DRCCoefficientsUniDRC[] DRCCoefficientsUniDRC;
        public DRCCoefficientsUniDRC[] _DRCCoefficientsUniDRC { get { return DRCCoefficientsUniDRC; } set { DRCCoefficientsUniDRC = value; } }

        protected DRCInstructionsUniDRC[] DRCInstructionsUniDRC;  //  we permit only one DRC Extension box:
        public DRCInstructionsUniDRC[] _DRCInstructionsUniDRC { get { return DRCInstructionsUniDRC; } set { DRCInstructionsUniDRC = value; } }

        protected UniDrcConfigExtension UniDrcConfigExtension;  //  optional boxes follow
        public UniDrcConfigExtension _UniDrcConfigExtension { get { return UniDrcConfigExtension; } set { UniDrcConfigExtension = value; } }

        protected SamplingRateBox SamplingRateBox;
        public SamplingRateBox _SamplingRateBox { get { return SamplingRateBox; } set { SamplingRateBox = value; } }

        protected ChannelLayout ChannelLayout0;
        public ChannelLayout _ChannelLayout0 { get { return ChannelLayout0; } set { ChannelLayout0 = value; } }

        public AudioSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, 2, out this.reserved);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.channelcount);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.samplesize);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.pre_defined);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reserved0);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.samplerate); // optional boxes follow
            boxSize += IsoReaderWriter.ReadBox(stream, out this.Box); // further boxes as needed
            boxSize += IsoReaderWriter.ReadBox(stream, out this.ChannelLayout);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DownMixInstructions);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCCoefficientsBasic);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCInstructionsBasic);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCCoefficientsUniDRC);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCInstructionsUniDRC); // we permit only one DRC Extension box:
            boxSize += IsoReaderWriter.ReadBox(stream, out this.UniDrcConfigExtension); // optional boxes follow
            boxSize += IsoReaderWriter.ReadBox(stream, out this.SamplingRateBox);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.ChannelLayout0);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, 2, this.reserved);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.channelcount);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.samplesize);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.pre_defined);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reserved0);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.samplerate); // optional boxes follow
            boxSize += IsoReaderWriter.WriteBox(stream, this.Box); // further boxes as needed
            boxSize += IsoReaderWriter.WriteBox(stream, this.ChannelLayout);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DownMixInstructions);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCCoefficientsBasic);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCInstructionsBasic);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCCoefficientsUniDRC);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCInstructionsUniDRC); // we permit only one DRC Extension box:
            boxSize += IsoReaderWriter.WriteBox(stream, this.UniDrcConfigExtension); // optional boxes follow
            boxSize += IsoReaderWriter.WriteBox(stream, this.SamplingRateBox);
            boxSize += IsoReaderWriter.WriteBox(stream, this.ChannelLayout0);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 2 * 32; // reserved
            boxSize += 16; // channelcount
            boxSize += 16; // samplesize
            boxSize += 16; // pre_defined
            boxSize += 16; // reserved0
            boxSize += 32; // samplerate
            boxSize += IsoReaderWriter.CalculateSize(Box); // Box
            boxSize += IsoReaderWriter.CalculateSize(ChannelLayout); // ChannelLayout
            boxSize += IsoReaderWriter.CalculateClassSize(DownMixInstructions); // DownMixInstructions
            boxSize += IsoReaderWriter.CalculateClassSize(DRCCoefficientsBasic); // DRCCoefficientsBasic
            boxSize += IsoReaderWriter.CalculateClassSize(DRCInstructionsBasic); // DRCInstructionsBasic
            boxSize += IsoReaderWriter.CalculateClassSize(DRCCoefficientsUniDRC); // DRCCoefficientsUniDRC
            boxSize += IsoReaderWriter.CalculateClassSize(DRCInstructionsUniDRC); // DRCInstructionsUniDRC
            boxSize += IsoReaderWriter.CalculateSize(UniDrcConfigExtension); // UniDrcConfigExtension
            boxSize += IsoReaderWriter.CalculateSize(SamplingRateBox); // SamplingRateBox
            boxSize += IsoReaderWriter.CalculateSize(ChannelLayout0); // ChannelLayout0
            return boxSize;
        }
    }


    public class AudioSampleEntryV12 : SampleEntry
    {
        public override string FourCC { get { return "resa"; } }

        protected ushort entry_version;  //  shall be 1, 
        public ushort EntryVersion { get { return entry_version; } set { entry_version = value; } }

        protected ushort[] reserved = [];
        public ushort[] Reserved { get { return reserved; } set { reserved = value; } }

        protected ushort channelcount;  //  shall be correct
        public ushort Channelcount { get { return channelcount; } set { channelcount = value; } }

        protected ushort samplesize = 16;
        public ushort Samplesize { get { return samplesize; } set { samplesize = value; } }

        protected ushort pre_defined = 0;
        public ushort PreDefined { get { return pre_defined; } set { pre_defined = value; } }

        protected ushort reserved0 = 0;
        public ushort Reserved0 { get { return reserved0; } set { reserved0 = value; } }

        protected uint samplerate = 1 << 16;  //  optional boxes follow
        public uint Samplerate { get { return samplerate; } set { samplerate = value; } }

        protected SamplingRateBox SamplingRateBox;
        public SamplingRateBox _SamplingRateBox { get { return SamplingRateBox; } set { SamplingRateBox = value; } }

        protected Box Box;  //  further boxes as needed
        public Box _Box { get { return Box; } set { Box = value; } }

        protected ChannelLayout ChannelLayout;
        public ChannelLayout _ChannelLayout { get { return ChannelLayout; } set { ChannelLayout = value; } }

        protected DownMixInstructions[] DownMixInstructions;
        public DownMixInstructions[] _DownMixInstructions { get { return DownMixInstructions; } set { DownMixInstructions = value; } }

        protected DRCCoefficientsBasic[] DRCCoefficientsBasic;
        public DRCCoefficientsBasic[] _DRCCoefficientsBasic { get { return DRCCoefficientsBasic; } set { DRCCoefficientsBasic = value; } }

        protected DRCInstructionsBasic[] DRCInstructionsBasic;
        public DRCInstructionsBasic[] _DRCInstructionsBasic { get { return DRCInstructionsBasic; } set { DRCInstructionsBasic = value; } }

        protected DRCCoefficientsUniDRC[] DRCCoefficientsUniDRC;
        public DRCCoefficientsUniDRC[] _DRCCoefficientsUniDRC { get { return DRCCoefficientsUniDRC; } set { DRCCoefficientsUniDRC = value; } }

        protected DRCInstructionsUniDRC[] DRCInstructionsUniDRC;  //  we permit only one DRC Extension box:
        public DRCInstructionsUniDRC[] _DRCInstructionsUniDRC { get { return DRCInstructionsUniDRC; } set { DRCInstructionsUniDRC = value; } }

        protected UniDrcConfigExtension UniDrcConfigExtension;  //  optional boxes follow
        public UniDrcConfigExtension _UniDrcConfigExtension { get { return UniDrcConfigExtension; } set { UniDrcConfigExtension = value; } }

        protected ChannelLayout ChannelLayout0;
        public ChannelLayout _ChannelLayout0 { get { return ChannelLayout0; } set { ChannelLayout0 = value; } }

        public AudioSampleEntryV12()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.entry_version); // shall be 1, 
            /*  and shall be in an stsd with version ==1 */
            boxSize += IsoReaderWriter.ReadUInt16Array(stream, 3, out this.reserved);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.channelcount); // shall be correct
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.samplesize);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.pre_defined);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reserved0);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.samplerate); // optional boxes follow
            boxSize += IsoReaderWriter.ReadBox(stream, out this.SamplingRateBox);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.Box); // further boxes as needed
            boxSize += IsoReaderWriter.ReadBox(stream, out this.ChannelLayout);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DownMixInstructions);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCCoefficientsBasic);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCInstructionsBasic);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCCoefficientsUniDRC);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.DRCInstructionsUniDRC); // we permit only one DRC Extension box:
            boxSize += IsoReaderWriter.ReadBox(stream, out this.UniDrcConfigExtension); // optional boxes follow
            boxSize += IsoReaderWriter.ReadBox(stream, out this.ChannelLayout0);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.entry_version); // shall be 1, 
            /*  and shall be in an stsd with version ==1 */
            boxSize += IsoReaderWriter.WriteUInt16Array(stream, 3, this.reserved);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.channelcount); // shall be correct
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.samplesize);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.pre_defined);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reserved0);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.samplerate); // optional boxes follow
            boxSize += IsoReaderWriter.WriteBox(stream, this.SamplingRateBox);
            boxSize += IsoReaderWriter.WriteBox(stream, this.Box); // further boxes as needed
            boxSize += IsoReaderWriter.WriteBox(stream, this.ChannelLayout);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DownMixInstructions);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCCoefficientsBasic);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCInstructionsBasic);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCCoefficientsUniDRC);
            boxSize += IsoReaderWriter.WriteClass(stream, this.DRCInstructionsUniDRC); // we permit only one DRC Extension box:
            boxSize += IsoReaderWriter.WriteBox(stream, this.UniDrcConfigExtension); // optional boxes follow
            boxSize += IsoReaderWriter.WriteBox(stream, this.ChannelLayout0);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // entry_version
            /*  and shall be in an stsd with version ==1 */
            boxSize += 3 * 16; // reserved
            boxSize += 16; // channelcount
            boxSize += 16; // samplesize
            boxSize += 16; // pre_defined
            boxSize += 16; // reserved0
            boxSize += 32; // samplerate
            boxSize += IsoReaderWriter.CalculateSize(SamplingRateBox); // SamplingRateBox
            boxSize += IsoReaderWriter.CalculateSize(Box); // Box
            boxSize += IsoReaderWriter.CalculateSize(ChannelLayout); // ChannelLayout
            boxSize += IsoReaderWriter.CalculateClassSize(DownMixInstructions); // DownMixInstructions
            boxSize += IsoReaderWriter.CalculateClassSize(DRCCoefficientsBasic); // DRCCoefficientsBasic
            boxSize += IsoReaderWriter.CalculateClassSize(DRCInstructionsBasic); // DRCInstructionsBasic
            boxSize += IsoReaderWriter.CalculateClassSize(DRCCoefficientsUniDRC); // DRCCoefficientsUniDRC
            boxSize += IsoReaderWriter.CalculateClassSize(DRCInstructionsUniDRC); // DRCInstructionsUniDRC
            boxSize += IsoReaderWriter.CalculateSize(UniDrcConfigExtension); // UniDrcConfigExtension
            boxSize += IsoReaderWriter.CalculateSize(ChannelLayout0); // ChannelLayout0
            return boxSize;
        }
    }


    public class MetaDataSampleEntry1 : SampleEntry
    {
        public override string FourCC { get { return "resm"; } }

        public MetaDataSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class FontSampleEntry1 : SampleEntry
    {
        public override string FourCC { get { return "resf"; } }

        public FontSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            /* other boxes from derived specifications */
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            /* other boxes from derived specifications */
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            /* other boxes from derived specifications */
            return boxSize;
        }
    }


    public class HapticSampleEntry1 : SampleEntry
    {
        public override string FourCC { get { return "resp"; } }

        protected Box[] otherboxes;
        public Box[] Otherboxes { get { return otherboxes; } set { otherboxes = value; } }

        public HapticSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.otherboxes);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.otherboxes);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(otherboxes); // otherboxes
            return boxSize;
        }
    }


    public class VolumetricVisualSampleEntry1 : SampleEntry
    {
        public override string FourCC { get { return "res3"; } }

        protected byte[] compressorname;  //  other boxes from derived specifications
        public byte[] Compressorname { get { return compressorname; } set { compressorname = value; } }

        public VolumetricVisualSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBytes(stream, 32, out this.compressorname); // other boxes from derived specifications
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBytes(stream, 32, this.compressorname); // other boxes from derived specifications
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32 * 8; // compressorname
            return boxSize;
        }
    }


    public class RtpHintSampleEntry : HintSampleEntry
    {
        public override string FourCC { get { return "rtp "; } }

        protected ushort hinttrackversion = 1;
        public ushort Hinttrackversion { get { return hinttrackversion; } set { hinttrackversion = value; } }

        protected ushort highestcompatibleversion = 1;
        public ushort Highestcompatibleversion { get { return highestcompatibleversion; } set { highestcompatibleversion = value; } }

        protected uint maxpacketsize;
        public uint Maxpacketsize { get { return maxpacketsize; } set { maxpacketsize = value; } }

        public RtpHintSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.hinttrackversion);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.highestcompatibleversion);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.maxpacketsize);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.hinttrackversion);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.highestcompatibleversion);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.maxpacketsize);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // hinttrackversion
            boxSize += 16; // highestcompatibleversion
            boxSize += 32; // maxpacketsize
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class EntityToGroupBox : FullBox
    {
        public override string FourCC { get { return "altr"; } }

        protected uint group_id;
        public uint GroupId { get { return group_id; } set { group_id = value; } }

        protected uint num_entities_in_group;
        public uint NumEntitiesInGroup { get { return num_entities_in_group; } set { num_entities_in_group = value; } }

        protected uint entity_id;  //  the remaining data may be specified for a particular grouping_type
        public uint EntityId { get { return entity_id; } set { entity_id = value; } }

        public EntityToGroupBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_id);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_id);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // group_id
            boxSize += 32; // num_entities_in_group

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // entity_id
            }
            return boxSize;
        }
    }


    public class BrandProperty : GeneralTypeBox
    {
        public override string FourCC { get { return "brnd"; } }

        public BrandProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBox : Box
    {
        public override string FourCC { get { return "fdel"; } }

        protected ushort from_item_ID;
        public ushort FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected ushort to_item_ID;
        public ushort ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 16; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBoxLarge : Box
    {
        public override string FourCC { get { return "fdel"; } }

        protected uint from_item_ID;
        public uint FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected uint to_item_ID;
        public uint ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBoxLarge()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 32; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBox1 : Box
    {
        public override string FourCC { get { return "iloc"; } }

        protected ushort from_item_ID;
        public ushort FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected ushort to_item_ID;
        public ushort ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 16; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBoxLarge1 : Box
    {
        public override string FourCC { get { return "iloc"; } }

        protected uint from_item_ID;
        public uint FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected uint to_item_ID;
        public uint ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBoxLarge1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 32; // to_item_ID
            }
            return boxSize;
        }
    }


    public class AlternativeStartupEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "alst"; } }

        protected ushort roll_count;
        public ushort RollCount { get { return roll_count; } set { roll_count = value; } }

        protected ushort first_output_sample;
        public ushort FirstOutputSample { get { return first_output_sample; } set { first_output_sample = value; } }

        protected uint[] sample_offset;
        public uint[] SampleOffset { get { return sample_offset; } set { sample_offset = value; } }

        protected ushort[] num_output_samples;
        public ushort[] NumOutputSamples { get { return num_output_samples; } set { num_output_samples = value; } }

        protected ushort[] num_total_samples;
        public ushort[] NumTotalSamples { get { return num_total_samples; } set { num_total_samples = value; } }

        public AlternativeStartupEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.roll_count);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.first_output_sample);

            for (int i = 1; i <= roll_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_offset[i]);
            }
            int j = 1;

            while (true)
            {
                /*  optional, until the end of the structure */
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.num_output_samples[j]);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.num_total_samples[j]);
                j++;
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.roll_count);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.first_output_sample);

            for (int i = 1; i <= roll_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_offset[i]);
            }
            int j = 1;

            while (true)
            {
                /*  optional, until the end of the structure */
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.num_output_samples[j]);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.num_total_samples[j]);
                j++;
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // roll_count
            boxSize += 16; // first_output_sample

            for (int i = 1; i <= roll_count; i++)
            {
                boxSize += 32; // sample_offset
            }
            int j = 1;

            while (true)
            {
                /*  optional, until the end of the structure */
                boxSize += 16; // num_output_samples
                boxSize += 16; // num_total_samples
                j++;
            }
            return boxSize;
        }
    }


    public class VisualDRAPEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "drap"; } }

        protected byte DRAP_type;
        public byte DRAPType { get { return DRAP_type; } set { DRAP_type = value; } }

        protected uint reserved = 0;
        public uint Reserved { get { return reserved; } set { reserved = value; } }

        public VisualDRAPEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.DRAP_type);
            boxSize += IsoReaderWriter.ReadBits(stream, 29, out this.reserved);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBits(stream, 3, this.DRAP_type);
            boxSize += IsoReaderWriter.WriteBits(stream, 29, this.reserved);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 3; // DRAP_type
            boxSize += 29; // reserved
            return boxSize;
        }
    }


    public class AudioPreRollEntry : AudioSampleGroupEntry
    {
        public override string FourCC { get { return "prol"; } }

        protected short roll_distance;
        public short RollDistance { get { return roll_distance; } set { roll_distance = value; } }

        public AudioPreRollEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt16(stream, out this.roll_distance);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt16(stream, this.roll_distance);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // roll_distance
            return boxSize;
        }
    }


    public class VisualRandomAccessEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "rap "; } }

        protected bool num_leading_samples_known;
        public bool NumLeadingSamplesKnown { get { return num_leading_samples_known; } set { num_leading_samples_known = value; } }

        protected byte num_leading_samples;
        public byte NumLeadingSamples { get { return num_leading_samples; } set { num_leading_samples = value; } }

        public VisualRandomAccessEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.num_leading_samples_known);
            boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.num_leading_samples);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBit(stream, this.num_leading_samples_known);
            boxSize += IsoReaderWriter.WriteBits(stream, 7, this.num_leading_samples);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // num_leading_samples_known
            boxSize += 7; // num_leading_samples
            return boxSize;
        }
    }


    public class RateShareEntry : SampleGroupDescriptionEntry
    {
        public override string FourCC { get { return "rash"; } }

        protected ushort operation_point_count;
        public ushort OperationPointCount { get { return operation_point_count; } set { operation_point_count = value; } }

        protected ushort target_rate_share;
        public ushort TargetRateShare { get { return target_rate_share; } set { target_rate_share = value; } }

        protected uint available_bitrate;
        public uint AvailableBitrate { get { return available_bitrate; } set { available_bitrate = value; } }

        protected ushort target_rate_share0;
        public ushort TargetRateShare0 { get { return target_rate_share0; } set { target_rate_share0 = value; } }

        protected uint maximum_bitrate;
        public uint MaximumBitrate { get { return maximum_bitrate; } set { maximum_bitrate = value; } }

        protected uint minimum_bitrate;
        public uint MinimumBitrate { get { return minimum_bitrate; } set { minimum_bitrate = value; } }

        protected byte discard_priority;
        public byte DiscardPriority { get { return discard_priority; } set { discard_priority = value; } }

        public RateShareEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.operation_point_count);

            if (operation_point_count == 1)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.target_rate_share);
            }

            else
            {

                for (int i = 0; i < operation_point_count; i++)
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.available_bitrate);
                    boxSize += IsoReaderWriter.ReadUInt16(stream, out this.target_rate_share0);
                }
            }
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.maximum_bitrate);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.minimum_bitrate);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.discard_priority);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.operation_point_count);

            if (operation_point_count == 1)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.target_rate_share);
            }

            else
            {

                for (int i = 0; i < operation_point_count; i++)
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.available_bitrate);
                    boxSize += IsoReaderWriter.WriteUInt16(stream, this.target_rate_share0);
                }
            }
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.maximum_bitrate);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.minimum_bitrate);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.discard_priority);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // operation_point_count

            if (operation_point_count == 1)
            {
                boxSize += 16; // target_rate_share
            }

            else
            {

                for (int i = 0; i < operation_point_count; i++)
                {
                    boxSize += 32; // available_bitrate
                    boxSize += 16; // target_rate_share0
                }
            }
            boxSize += 32; // maximum_bitrate
            boxSize += 32; // minimum_bitrate
            boxSize += 8; // discard_priority
            return boxSize;
        }
    }


    public class AudioRollRecoveryEntry : AudioSampleGroupEntry
    {
        public override string FourCC { get { return "roll"; } }

        protected short roll_distance;
        public short RollDistance { get { return roll_distance; } set { roll_distance = value; } }

        public AudioRollRecoveryEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt16(stream, out this.roll_distance);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt16(stream, this.roll_distance);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // roll_distance
            return boxSize;
        }
    }


    public class SAPEntry : SampleGroupDescriptionEntry
    {
        public override string FourCC { get { return "sap "; } }

        protected bool dependent_flag;
        public bool DependentFlag { get { return dependent_flag; } set { dependent_flag = value; } }

        protected byte reserved;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected byte SAP_type;
        public byte SAPType { get { return SAP_type; } set { SAP_type = value; } }

        public SAPEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.dependent_flag);
            boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.reserved);
            boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.SAP_type);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBit(stream, this.dependent_flag);
            boxSize += IsoReaderWriter.WriteBits(stream, 3, this.reserved);
            boxSize += IsoReaderWriter.WriteBits(stream, 4, this.SAP_type);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // dependent_flag
            boxSize += 3; // reserved
            boxSize += 4; // SAP_type
            return boxSize;
        }
    }


    public class SampleToMetadataItemEntry : SampleGroupDescriptionEntry
    {
        public override string FourCC { get { return "stmi"; } }

        protected uint meta_box_handler_type;
        public uint MetaBoxHandlerType { get { return meta_box_handler_type; } set { meta_box_handler_type = value; } }

        protected uint num_items;
        public uint NumItems { get { return num_items; } set { num_items = value; } }

        protected uint[] item_id;
        public uint[] ItemId { get { return item_id; } set { item_id = value; } }

        public SampleToMetadataItemEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.meta_box_handler_type);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_items);

            for (int i = 0; i < num_items; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.item_id[i]);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.meta_box_handler_type);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_items);

            for (int i = 0; i < num_items; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.item_id[i]);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // meta_box_handler_type
            boxSize += 32; // num_items

            for (int i = 0; i < num_items; i++)
            {
                boxSize += 32; // item_id
            }
            return boxSize;
        }
    }


    public class TemporalLevelEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "tele"; } }

        protected bool level_independently_decodable;
        public bool LevelIndependentlyDecodable { get { return level_independently_decodable; } set { level_independently_decodable = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        public TemporalLevelEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.level_independently_decodable);
            boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.reserved);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBit(stream, this.level_independently_decodable);
            boxSize += IsoReaderWriter.WriteBits(stream, 7, this.reserved);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // level_independently_decodable
            boxSize += 7; // reserved
            return boxSize;
        }
    }


    public class PixelAspectRatioEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "pasr"; } }

        protected uint hSpacing;
        public uint HSpacing { get { return hSpacing; } set { hSpacing = value; } }

        protected uint vSpacing;
        public uint VSpacing { get { return vSpacing; } set { vSpacing = value; } }

        public PixelAspectRatioEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.hSpacing);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.vSpacing);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.hSpacing);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.vSpacing);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // hSpacing
            boxSize += 32; // vSpacing
            return boxSize;
        }
    }


    public class CleanApertureEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "casg"; } }

        protected uint cleanApertureWidthN;
        public uint CleanApertureWidthN { get { return cleanApertureWidthN; } set { cleanApertureWidthN = value; } }

        protected uint cleanApertureWidthD;
        public uint CleanApertureWidthD { get { return cleanApertureWidthD; } set { cleanApertureWidthD = value; } }

        protected uint cleanApertureHeightN;
        public uint CleanApertureHeightN { get { return cleanApertureHeightN; } set { cleanApertureHeightN = value; } }

        protected uint cleanApertureHeightD;
        public uint CleanApertureHeightD { get { return cleanApertureHeightD; } set { cleanApertureHeightD = value; } }

        protected uint horizOffN;
        public uint HorizOffN { get { return horizOffN; } set { horizOffN = value; } }

        protected uint horizOffD;
        public uint HorizOffD { get { return horizOffD; } set { horizOffD = value; } }

        protected uint vertOffN;
        public uint VertOffN { get { return vertOffN; } set { vertOffN = value; } }

        protected uint vertOffD;
        public uint VertOffD { get { return vertOffD; } set { vertOffD = value; } }

        public CleanApertureEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.cleanApertureWidthN);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.cleanApertureWidthD);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.cleanApertureHeightN);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.cleanApertureHeightD);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.horizOffN);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.horizOffD);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.vertOffN);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.vertOffD);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.cleanApertureWidthN);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.cleanApertureWidthD);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.cleanApertureHeightN);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.cleanApertureHeightD);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.horizOffN);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.horizOffD);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.vertOffN);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.vertOffD);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // cleanApertureWidthN
            boxSize += 32; // cleanApertureWidthD
            boxSize += 32; // cleanApertureHeightN
            boxSize += 32; // cleanApertureHeightD
            boxSize += 32; // horizOffN
            boxSize += 32; // horizOffD
            boxSize += 32; // vertOffN
            boxSize += 32; // vertOffD
            return boxSize;
        }
    }


    public class TrackGroupTypeBox : FullBox
    {
        public override string FourCC { get { return "msrc"; } }

        protected uint track_group_id;  //  the remaining data may be specified 
        public uint TrackGroupId { get { return track_group_id; } set { track_group_id = value; } }

        public TrackGroupTypeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.track_group_id); // the remaining data may be specified 
            /*   for a particular track_group_type */
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.track_group_id); // the remaining data may be specified 
            /*   for a particular track_group_type */
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_group_id
            /*   for a particular track_group_type */
            return boxSize;
        }
    }


    public class StereoVideoGroupBox : TrackGroupTypeBox
    {
        public override string FourCC { get { return "ster"; } }

        protected bool left_view_flag;
        public bool LeftViewFlag { get { return left_view_flag; } set { left_view_flag = value; } }

        protected uint reserved;
        public uint Reserved { get { return reserved; } set { reserved = value; } }

        public StereoVideoGroupBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.left_view_flag);
            boxSize += IsoReaderWriter.ReadBits(stream, 31, out this.reserved);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBit(stream, this.left_view_flag);
            boxSize += IsoReaderWriter.WriteBits(stream, 31, this.reserved);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // left_view_flag
            boxSize += 31; // reserved
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox : Box
    {
        public override string FourCC { get { return "auxl"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox1 : Box
    {
        public override string FourCC { get { return "font"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox2 : Box
    {
        public override string FourCC { get { return "hind"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox2()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox3 : Box
    {
        public override string FourCC { get { return "hint"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox3()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox4 : Box
    {
        public override string FourCC { get { return "subt"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox4()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox5 : Box
    {
        public override string FourCC { get { return "thmb"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox5()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox6 : Box
    {
        public override string FourCC { get { return "vdep"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox6()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox7 : Box
    {
        public override string FourCC { get { return "vplx"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox7()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox8 : Box
    {
        public override string FourCC { get { return "cdsc"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox8()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox9 : Box
    {
        public override string FourCC { get { return "adda"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox9()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox10 : Box
    {
        public override string FourCC { get { return "adrc"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox10()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class HEVCSampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "hvc1"; } }

        protected HEVCConfigurationBox config;
        public HEVCConfigurationBox Config { get { return config; } set { config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        public HEVCSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class HEVCLHVCSampleEntry : HEVCSampleEntry
    {
        public override string FourCC { get { return "hvc1"; } }

        protected LHEVCConfigurationBox lhvcconfig;
        public LHEVCConfigurationBox Lhvcconfig { get { return lhvcconfig; } set { lhvcconfig = value; } }

        public HEVCLHVCSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.lhvcconfig);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.lhvcconfig);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(lhvcconfig); // lhvcconfig
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class HEVCSampleEntry1 : VisualSampleEntry
    {
        public override string FourCC { get { return "hvc2"; } }

        protected HEVCConfigurationBox config;
        public HEVCConfigurationBox Config { get { return config; } set { config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        public HEVCSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class HEVCLHVCSampleEntry1 : HEVCSampleEntry
    {
        public override string FourCC { get { return "hvc2"; } }

        protected LHEVCConfigurationBox lhvcconfig;
        public LHEVCConfigurationBox Lhvcconfig { get { return lhvcconfig; } set { lhvcconfig = value; } }

        public HEVCLHVCSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.lhvcconfig);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.lhvcconfig);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(lhvcconfig); // lhvcconfig
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class HEVCSampleEntry2 : VisualSampleEntry
    {
        public override string FourCC { get { return "hvc3"; } }

        protected HEVCConfigurationBox config;
        public HEVCConfigurationBox Config { get { return config; } set { config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        public HEVCSampleEntry2()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class HEVCLHVCSampleEntry2 : HEVCSampleEntry
    {
        public override string FourCC { get { return "hvc3"; } }

        protected LHEVCConfigurationBox lhvcconfig;
        public LHEVCConfigurationBox Lhvcconfig { get { return lhvcconfig; } set { lhvcconfig = value; } }

        public HEVCLHVCSampleEntry2()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.lhvcconfig);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.lhvcconfig);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(lhvcconfig); // lhvcconfig
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class LHEVCSampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "lhv1"; } }

        protected LHEVCConfigurationBox lhvcconfig;
        public LHEVCConfigurationBox Lhvcconfig { get { return lhvcconfig; } set { lhvcconfig = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        public LHEVCSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.lhvcconfig);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.lhvcconfig);
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(lhvcconfig); // lhvcconfig
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class LHEVCSampleEntry1 : VisualSampleEntry
    {
        public override string FourCC { get { return "lhe1"; } }

        protected LHEVCConfigurationBox lhvcconfig;
        public LHEVCConfigurationBox Lhvcconfig { get { return lhvcconfig; } set { lhvcconfig = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        public LHEVCSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.lhvcconfig);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.lhvcconfig);
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(lhvcconfig); // lhvcconfig
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class HEVCSampleEntry3 : VisualSampleEntry
    {
        public override string FourCC { get { return "hev1"; } }

        protected HEVCConfigurationBox config;
        public HEVCConfigurationBox Config { get { return config; } set { config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        public HEVCSampleEntry3()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class HEVCLHVCSampleEntry3 : HEVCSampleEntry
    {
        public override string FourCC { get { return "hev1"; } }

        protected LHEVCConfigurationBox lhvcconfig;
        public LHEVCConfigurationBox Lhvcconfig { get { return lhvcconfig; } set { lhvcconfig = value; } }

        public HEVCLHVCSampleEntry3()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.lhvcconfig);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.lhvcconfig);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(lhvcconfig); // lhvcconfig
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class HEVCSampleEntry4 : VisualSampleEntry
    {
        public override string FourCC { get { return "hev2"; } }

        protected HEVCConfigurationBox config;
        public HEVCConfigurationBox Config { get { return config; } set { config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        public HEVCSampleEntry4()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class HEVCLHVCSampleEntry4 : HEVCSampleEntry
    {
        public override string FourCC { get { return "hev2"; } }

        protected LHEVCConfigurationBox lhvcconfig;
        public LHEVCConfigurationBox Lhvcconfig { get { return lhvcconfig; } set { lhvcconfig = value; } }

        public HEVCLHVCSampleEntry4()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.lhvcconfig);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.lhvcconfig);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(lhvcconfig); // lhvcconfig
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class HEVCSampleEntry5 : VisualSampleEntry
    {
        public override string FourCC { get { return "hev3"; } }

        protected HEVCConfigurationBox config;
        public HEVCConfigurationBox Config { get { return config; } set { config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        public HEVCSampleEntry5()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class HEVCLHVCSampleEntry5 : HEVCSampleEntry
    {
        public override string FourCC { get { return "hev3"; } }

        protected LHEVCConfigurationBox lhvcconfig;
        public LHEVCConfigurationBox Lhvcconfig { get { return lhvcconfig; } set { lhvcconfig = value; } }

        public HEVCLHVCSampleEntry5()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.lhvcconfig);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.lhvcconfig);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(lhvcconfig); // lhvcconfig
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class AVCParameterSampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "avcp"; } }

        protected AVCConfigurationBox config;
        public AVCConfigurationBox Config { get { return config; } set { config = value; } }

        public AVCParameterSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class AVCSampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "avc1"; } }

        protected AVCConfigurationBox config;
        public AVCConfigurationBox Config { get { return config; } set { config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        public AVCSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class AVCSampleEntry1 : VisualSampleEntry
    {
        public override string FourCC { get { return "avc3"; } }

        protected AVCConfigurationBox config;
        public AVCConfigurationBox Config { get { return config; } set { config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        public AVCSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class AVCMVCSampleEntry : AVCSampleEntry
    {
        public override string FourCC { get { return "avc1"; } }

        protected ViewScalabilityInformationSEIBox scalability;  //  optional
        public ViewScalabilityInformationSEIBox Scalability { get { return scalability; } set { scalability = value; } }

        protected ViewIdentifierBox view_identifiers;  //  optional
        public ViewIdentifierBox ViewIdentifiers { get { return view_identifiers; } set { view_identifiers = value; } }

        protected MVCConfigurationBox mvcconfig;  //  optional
        public MVCConfigurationBox Mvcconfig { get { return mvcconfig; } set { mvcconfig = value; } }

        protected MVCViewPriorityAssignmentBox view_priority_method;  //  optional
        public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return view_priority_method; } set { view_priority_method = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return intrinsic_camera_params; } set { intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return extrinsic_camera_params; } set { extrinsic_camera_params = value; } }

        protected MVCDConfigurationBox mvcdconfig;  //  optional
        public MVCDConfigurationBox Mvcdconfig { get { return mvcdconfig; } set { mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return mvdscalinfosei; } set { mvdscalinfosei = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return a3dconfig; } set { a3dconfig = value; } }

        public AVCMVCSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.scalability); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.view_identifiers); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcconfig); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.view_priority_method); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcdconfig); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvdscalinfosei); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.a3dconfig); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.scalability != null) boxSize += IsoReaderWriter.WriteBox(stream, this.scalability); // optional
            if (this.view_identifiers != null) boxSize += IsoReaderWriter.WriteBox(stream, this.view_identifiers); // optional
            if (this.mvcconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvcconfig); // optional
            if (this.view_priority_method != null) boxSize += IsoReaderWriter.WriteBox(stream, this.view_priority_method); // optional
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.extrinsic_camera_params); // optional
            if (this.mvcdconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvcdconfig); // optional
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvdscalinfosei); // optional
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.a3dconfig); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.scalability != null) boxSize += IsoReaderWriter.CalculateSize(scalability); // scalability
            if (this.view_identifiers != null) boxSize += IsoReaderWriter.CalculateSize(view_identifiers); // view_identifiers
            if (this.mvcconfig != null) boxSize += IsoReaderWriter.CalculateSize(mvcconfig); // mvcconfig
            if (this.view_priority_method != null) boxSize += IsoReaderWriter.CalculateSize(view_priority_method); // view_priority_method
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.mvcdconfig != null) boxSize += IsoReaderWriter.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.CalculateSize(a3dconfig); // a3dconfig
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class AVCMVCSampleEntry1 : AVCSampleEntry
    {
        public override string FourCC { get { return "avc3"; } }

        protected ViewScalabilityInformationSEIBox scalability;  //  optional
        public ViewScalabilityInformationSEIBox Scalability { get { return scalability; } set { scalability = value; } }

        protected ViewIdentifierBox view_identifiers;  //  optional
        public ViewIdentifierBox ViewIdentifiers { get { return view_identifiers; } set { view_identifiers = value; } }

        protected MVCConfigurationBox mvcconfig;  //  optional
        public MVCConfigurationBox Mvcconfig { get { return mvcconfig; } set { mvcconfig = value; } }

        protected MVCViewPriorityAssignmentBox view_priority_method;  //  optional
        public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return view_priority_method; } set { view_priority_method = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return intrinsic_camera_params; } set { intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return extrinsic_camera_params; } set { extrinsic_camera_params = value; } }

        protected MVCDConfigurationBox mvcdconfig;  //  optional
        public MVCDConfigurationBox Mvcdconfig { get { return mvcdconfig; } set { mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return mvdscalinfosei; } set { mvdscalinfosei = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return a3dconfig; } set { a3dconfig = value; } }

        public AVCMVCSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.scalability); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.view_identifiers); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcconfig); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.view_priority_method); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcdconfig); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvdscalinfosei); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.a3dconfig); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.scalability != null) boxSize += IsoReaderWriter.WriteBox(stream, this.scalability); // optional
            if (this.view_identifiers != null) boxSize += IsoReaderWriter.WriteBox(stream, this.view_identifiers); // optional
            if (this.mvcconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvcconfig); // optional
            if (this.view_priority_method != null) boxSize += IsoReaderWriter.WriteBox(stream, this.view_priority_method); // optional
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.extrinsic_camera_params); // optional
            if (this.mvcdconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvcdconfig); // optional
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvdscalinfosei); // optional
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.a3dconfig); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.scalability != null) boxSize += IsoReaderWriter.CalculateSize(scalability); // scalability
            if (this.view_identifiers != null) boxSize += IsoReaderWriter.CalculateSize(view_identifiers); // view_identifiers
            if (this.mvcconfig != null) boxSize += IsoReaderWriter.CalculateSize(mvcconfig); // mvcconfig
            if (this.view_priority_method != null) boxSize += IsoReaderWriter.CalculateSize(view_priority_method); // view_priority_method
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.mvcdconfig != null) boxSize += IsoReaderWriter.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.CalculateSize(a3dconfig); // a3dconfig
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class AVC2SampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "avc2"; } }

        protected AVCConfigurationBox config;
        public AVCConfigurationBox Config { get { return config; } set { config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        public AVC2SampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class AVC2SampleEntry1 : VisualSampleEntry
    {
        public override string FourCC { get { return "avc4"; } }

        protected AVCConfigurationBox config;
        public AVCConfigurationBox Config { get { return config; } set { config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        public AVC2SampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class AVC2MVCSampleEntry : AVC2SampleEntry
    {
        public override string FourCC { get { return "avc2"; } }

        protected ViewScalabilityInformationSEIBox scalability;  //  optional
        public ViewScalabilityInformationSEIBox Scalability { get { return scalability; } set { scalability = value; } }

        protected ViewIdentifierBox view_identifiers;  //  optional
        public ViewIdentifierBox ViewIdentifiers { get { return view_identifiers; } set { view_identifiers = value; } }

        protected MVCConfigurationBox mvcconfig;  //  optional
        public MVCConfigurationBox Mvcconfig { get { return mvcconfig; } set { mvcconfig = value; } }

        protected MVCViewPriorityAssignmentBox view_priority_method;  //  optional
        public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return view_priority_method; } set { view_priority_method = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return intrinsic_camera_params; } set { intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return extrinsic_camera_params; } set { extrinsic_camera_params = value; } }

        protected MVCDConfigurationBox mvcdconfig;  //  optional
        public MVCDConfigurationBox Mvcdconfig { get { return mvcdconfig; } set { mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return mvdscalinfosei; } set { mvdscalinfosei = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return a3dconfig; } set { a3dconfig = value; } }

        public AVC2MVCSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.scalability); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.view_identifiers); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcconfig); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.view_priority_method); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcdconfig); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvdscalinfosei); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.a3dconfig); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.scalability != null) boxSize += IsoReaderWriter.WriteBox(stream, this.scalability); // optional
            if (this.view_identifiers != null) boxSize += IsoReaderWriter.WriteBox(stream, this.view_identifiers); // optional
            if (this.mvcconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvcconfig); // optional
            if (this.view_priority_method != null) boxSize += IsoReaderWriter.WriteBox(stream, this.view_priority_method); // optional
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.extrinsic_camera_params); // optional
            if (this.mvcdconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvcdconfig); // optional
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvdscalinfosei); // optional
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.a3dconfig); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.scalability != null) boxSize += IsoReaderWriter.CalculateSize(scalability); // scalability
            if (this.view_identifiers != null) boxSize += IsoReaderWriter.CalculateSize(view_identifiers); // view_identifiers
            if (this.mvcconfig != null) boxSize += IsoReaderWriter.CalculateSize(mvcconfig); // mvcconfig
            if (this.view_priority_method != null) boxSize += IsoReaderWriter.CalculateSize(view_priority_method); // view_priority_method
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.mvcdconfig != null) boxSize += IsoReaderWriter.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.CalculateSize(a3dconfig); // a3dconfig
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class AVC2MVCSampleEntry1 : AVC2SampleEntry
    {
        public override string FourCC { get { return "avc4"; } }

        protected ViewScalabilityInformationSEIBox scalability;  //  optional
        public ViewScalabilityInformationSEIBox Scalability { get { return scalability; } set { scalability = value; } }

        protected ViewIdentifierBox view_identifiers;  //  optional
        public ViewIdentifierBox ViewIdentifiers { get { return view_identifiers; } set { view_identifiers = value; } }

        protected MVCConfigurationBox mvcconfig;  //  optional
        public MVCConfigurationBox Mvcconfig { get { return mvcconfig; } set { mvcconfig = value; } }

        protected MVCViewPriorityAssignmentBox view_priority_method;  //  optional
        public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return view_priority_method; } set { view_priority_method = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return intrinsic_camera_params; } set { intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return extrinsic_camera_params; } set { extrinsic_camera_params = value; } }

        protected MVCDConfigurationBox mvcdconfig;  //  optional
        public MVCDConfigurationBox Mvcdconfig { get { return mvcdconfig; } set { mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return mvdscalinfosei; } set { mvdscalinfosei = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return a3dconfig; } set { a3dconfig = value; } }

        public AVC2MVCSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.scalability); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.view_identifiers); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcconfig); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.view_priority_method); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcdconfig); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvdscalinfosei); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.a3dconfig); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.scalability != null) boxSize += IsoReaderWriter.WriteBox(stream, this.scalability); // optional
            if (this.view_identifiers != null) boxSize += IsoReaderWriter.WriteBox(stream, this.view_identifiers); // optional
            if (this.mvcconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvcconfig); // optional
            if (this.view_priority_method != null) boxSize += IsoReaderWriter.WriteBox(stream, this.view_priority_method); // optional
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.extrinsic_camera_params); // optional
            if (this.mvcdconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvcdconfig); // optional
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvdscalinfosei); // optional
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.a3dconfig); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.scalability != null) boxSize += IsoReaderWriter.CalculateSize(scalability); // scalability
            if (this.view_identifiers != null) boxSize += IsoReaderWriter.CalculateSize(view_identifiers); // view_identifiers
            if (this.mvcconfig != null) boxSize += IsoReaderWriter.CalculateSize(mvcconfig); // mvcconfig
            if (this.view_priority_method != null) boxSize += IsoReaderWriter.CalculateSize(view_priority_method); // view_priority_method
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.mvcdconfig != null) boxSize += IsoReaderWriter.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.CalculateSize(a3dconfig); // a3dconfig
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class MVCSampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "mvc1"; } }

        protected MVCConfigurationBox mvcconfig;  //  mandatory
        public MVCConfigurationBox Mvcconfig { get { return mvcconfig; } set { mvcconfig = value; } }

        protected ViewScalabilityInformationSEIBox scalability;  //  optional
        public ViewScalabilityInformationSEIBox Scalability { get { return scalability; } set { scalability = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return view_identifiers; } set { view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        protected MVCViewPriorityAssignmentBox view_priority_method;  //  optional
        public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return view_priority_method; } set { view_priority_method = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return intrinsic_camera_params; } set { intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return extrinsic_camera_params; } set { extrinsic_camera_params = value; } }

        protected MVCDConfigurationBox mvcdconfig;  //  optional
        public MVCDConfigurationBox Mvcdconfig { get { return mvcdconfig; } set { mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return mvdscalinfosei; } set { mvdscalinfosei = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return a3dconfig; } set { a3dconfig = value; } }

        public MVCSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcconfig); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.scalability); // optional
            boxSize += IsoReaderWriter.ReadBox(stream, out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.view_priority_method); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcdconfig); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvdscalinfosei); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.a3dconfig); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.mvcconfig); // mandatory
            if (this.scalability != null) boxSize += IsoReaderWriter.WriteBox(stream, this.scalability); // optional
            boxSize += IsoReaderWriter.WriteBox(stream, this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            if (this.view_priority_method != null) boxSize += IsoReaderWriter.WriteBox(stream, this.view_priority_method); // optional
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.extrinsic_camera_params); // optional
            if (this.mvcdconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvcdconfig); // optional
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvdscalinfosei); // optional
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.a3dconfig); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(mvcconfig); // mvcconfig
            if (this.scalability != null) boxSize += IsoReaderWriter.CalculateSize(scalability); // scalability
            boxSize += IsoReaderWriter.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            if (this.view_priority_method != null) boxSize += IsoReaderWriter.CalculateSize(view_priority_method); // view_priority_method
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.mvcdconfig != null) boxSize += IsoReaderWriter.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.CalculateSize(a3dconfig); // a3dconfig
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class MVCSampleEntry1 : VisualSampleEntry
    {
        public override string FourCC { get { return "mvc2"; } }

        protected MVCConfigurationBox mvcconfig;  //  mandatory
        public MVCConfigurationBox Mvcconfig { get { return mvcconfig; } set { mvcconfig = value; } }

        protected ViewScalabilityInformationSEIBox scalability;  //  optional
        public ViewScalabilityInformationSEIBox Scalability { get { return scalability; } set { scalability = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return view_identifiers; } set { view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        protected MVCViewPriorityAssignmentBox view_priority_method;  //  optional
        public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return view_priority_method; } set { view_priority_method = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return intrinsic_camera_params; } set { intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return extrinsic_camera_params; } set { extrinsic_camera_params = value; } }

        protected MVCDConfigurationBox mvcdconfig;  //  optional
        public MVCDConfigurationBox Mvcdconfig { get { return mvcdconfig; } set { mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return mvdscalinfosei; } set { mvdscalinfosei = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return a3dconfig; } set { a3dconfig = value; } }

        public MVCSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcconfig); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.scalability); // optional
            boxSize += IsoReaderWriter.ReadBox(stream, out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.view_priority_method); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcdconfig); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvdscalinfosei); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.a3dconfig); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.mvcconfig); // mandatory
            if (this.scalability != null) boxSize += IsoReaderWriter.WriteBox(stream, this.scalability); // optional
            boxSize += IsoReaderWriter.WriteBox(stream, this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            if (this.view_priority_method != null) boxSize += IsoReaderWriter.WriteBox(stream, this.view_priority_method); // optional
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.extrinsic_camera_params); // optional
            if (this.mvcdconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvcdconfig); // optional
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvdscalinfosei); // optional
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.a3dconfig); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(mvcconfig); // mvcconfig
            if (this.scalability != null) boxSize += IsoReaderWriter.CalculateSize(scalability); // scalability
            boxSize += IsoReaderWriter.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            if (this.view_priority_method != null) boxSize += IsoReaderWriter.CalculateSize(view_priority_method); // view_priority_method
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.mvcdconfig != null) boxSize += IsoReaderWriter.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.CalculateSize(a3dconfig); // a3dconfig
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class MVCSampleEntry2 : VisualSampleEntry
    {
        public override string FourCC { get { return "mvc3"; } }

        protected MVCConfigurationBox mvcconfig;  //  mandatory
        public MVCConfigurationBox Mvcconfig { get { return mvcconfig; } set { mvcconfig = value; } }

        protected ViewScalabilityInformationSEIBox scalability;  //  optional
        public ViewScalabilityInformationSEIBox Scalability { get { return scalability; } set { scalability = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return view_identifiers; } set { view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        protected MVCViewPriorityAssignmentBox view_priority_method;  //  optional
        public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return view_priority_method; } set { view_priority_method = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return intrinsic_camera_params; } set { intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return extrinsic_camera_params; } set { extrinsic_camera_params = value; } }

        protected MVCDConfigurationBox mvcdconfig;  //  optional
        public MVCDConfigurationBox Mvcdconfig { get { return mvcdconfig; } set { mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return mvdscalinfosei; } set { mvdscalinfosei = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return a3dconfig; } set { a3dconfig = value; } }

        public MVCSampleEntry2()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcconfig); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.scalability); // optional
            boxSize += IsoReaderWriter.ReadBox(stream, out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.view_priority_method); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcdconfig); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvdscalinfosei); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.a3dconfig); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.mvcconfig); // mandatory
            if (this.scalability != null) boxSize += IsoReaderWriter.WriteBox(stream, this.scalability); // optional
            boxSize += IsoReaderWriter.WriteBox(stream, this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            if (this.view_priority_method != null) boxSize += IsoReaderWriter.WriteBox(stream, this.view_priority_method); // optional
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.extrinsic_camera_params); // optional
            if (this.mvcdconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvcdconfig); // optional
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvdscalinfosei); // optional
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.a3dconfig); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(mvcconfig); // mvcconfig
            if (this.scalability != null) boxSize += IsoReaderWriter.CalculateSize(scalability); // scalability
            boxSize += IsoReaderWriter.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            if (this.view_priority_method != null) boxSize += IsoReaderWriter.CalculateSize(view_priority_method); // view_priority_method
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.mvcdconfig != null) boxSize += IsoReaderWriter.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.CalculateSize(a3dconfig); // a3dconfig
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class MVCSampleEntry3 : VisualSampleEntry
    {
        public override string FourCC { get { return "mvc4"; } }

        protected MVCConfigurationBox mvcconfig;  //  mandatory
        public MVCConfigurationBox Mvcconfig { get { return mvcconfig; } set { mvcconfig = value; } }

        protected ViewScalabilityInformationSEIBox scalability;  //  optional
        public ViewScalabilityInformationSEIBox Scalability { get { return scalability; } set { scalability = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return view_identifiers; } set { view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        protected MVCViewPriorityAssignmentBox view_priority_method;  //  optional
        public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return view_priority_method; } set { view_priority_method = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return intrinsic_camera_params; } set { intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return extrinsic_camera_params; } set { extrinsic_camera_params = value; } }

        protected MVCDConfigurationBox mvcdconfig;  //  optional
        public MVCDConfigurationBox Mvcdconfig { get { return mvcdconfig; } set { mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return mvdscalinfosei; } set { mvdscalinfosei = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return a3dconfig; } set { a3dconfig = value; } }

        public MVCSampleEntry3()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcconfig); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.scalability); // optional
            boxSize += IsoReaderWriter.ReadBox(stream, out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.view_priority_method); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcdconfig); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvdscalinfosei); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.a3dconfig); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.mvcconfig); // mandatory
            if (this.scalability != null) boxSize += IsoReaderWriter.WriteBox(stream, this.scalability); // optional
            boxSize += IsoReaderWriter.WriteBox(stream, this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            if (this.view_priority_method != null) boxSize += IsoReaderWriter.WriteBox(stream, this.view_priority_method); // optional
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.extrinsic_camera_params); // optional
            if (this.mvcdconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvcdconfig); // optional
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvdscalinfosei); // optional
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.a3dconfig); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(mvcconfig); // mvcconfig
            if (this.scalability != null) boxSize += IsoReaderWriter.CalculateSize(scalability); // scalability
            boxSize += IsoReaderWriter.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            if (this.view_priority_method != null) boxSize += IsoReaderWriter.CalculateSize(view_priority_method); // view_priority_method
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.mvcdconfig != null) boxSize += IsoReaderWriter.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.CalculateSize(a3dconfig); // a3dconfig
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class MVCDSampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "mvd1"; } }

        protected MVCDConfigurationBox mvcdconfig;  //  mandatory
        public MVCDConfigurationBox Mvcdconfig { get { return mvcdconfig; } set { mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return mvdscalinfosei; } set { mvdscalinfosei = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return view_identifiers; } set { view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return intrinsic_camera_params; } set { intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return extrinsic_camera_params; } set { extrinsic_camera_params = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return a3dconfig; } set { a3dconfig = value; } }

        public MVCDSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcdconfig); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvdscalinfosei); // optional
            boxSize += IsoReaderWriter.ReadBox(stream, out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.a3dconfig); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.mvcdconfig); // mandatory
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvdscalinfosei); // optional
            boxSize += IsoReaderWriter.WriteBox(stream, this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.extrinsic_camera_params); // optional
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.a3dconfig); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            boxSize += IsoReaderWriter.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.CalculateSize(a3dconfig); // a3dconfig
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class MVCDSampleEntry1 : VisualSampleEntry
    {
        public override string FourCC { get { return "mvd2"; } }

        protected MVCDConfigurationBox mvcdconfig;  //  mandatory
        public MVCDConfigurationBox Mvcdconfig { get { return mvcdconfig; } set { mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return mvdscalinfosei; } set { mvdscalinfosei = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return view_identifiers; } set { view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return intrinsic_camera_params; } set { intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return extrinsic_camera_params; } set { extrinsic_camera_params = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return a3dconfig; } set { a3dconfig = value; } }

        public MVCDSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcdconfig); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvdscalinfosei); // optional
            boxSize += IsoReaderWriter.ReadBox(stream, out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.a3dconfig); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.mvcdconfig); // mandatory
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvdscalinfosei); // optional
            boxSize += IsoReaderWriter.WriteBox(stream, this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.extrinsic_camera_params); // optional
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.a3dconfig); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            boxSize += IsoReaderWriter.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.CalculateSize(a3dconfig); // a3dconfig
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class MVCDSampleEntry2 : VisualSampleEntry
    {
        public override string FourCC { get { return "mvd3"; } }

        protected MVCDConfigurationBox mvcdconfig;  //  mandatory
        public MVCDConfigurationBox Mvcdconfig { get { return mvcdconfig; } set { mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return mvdscalinfosei; } set { mvdscalinfosei = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return view_identifiers; } set { view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return intrinsic_camera_params; } set { intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return extrinsic_camera_params; } set { extrinsic_camera_params = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return a3dconfig; } set { a3dconfig = value; } }

        public MVCDSampleEntry2()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcdconfig); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvdscalinfosei); // optional
            boxSize += IsoReaderWriter.ReadBox(stream, out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.a3dconfig); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.mvcdconfig); // mandatory
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvdscalinfosei); // optional
            boxSize += IsoReaderWriter.WriteBox(stream, this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.extrinsic_camera_params); // optional
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.a3dconfig); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            boxSize += IsoReaderWriter.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.CalculateSize(a3dconfig); // a3dconfig
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class MVCDSampleEntry3 : VisualSampleEntry
    {
        public override string FourCC { get { return "mvd4"; } }

        protected MVCDConfigurationBox mvcdconfig;  //  mandatory
        public MVCDConfigurationBox Mvcdconfig { get { return mvcdconfig; } set { mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return mvdscalinfosei; } set { mvdscalinfosei = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return view_identifiers; } set { view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return intrinsic_camera_params; } set { intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return extrinsic_camera_params; } set { extrinsic_camera_params = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return a3dconfig; } set { a3dconfig = value; } }

        public MVCDSampleEntry3()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.mvcdconfig); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvdscalinfosei); // optional
            boxSize += IsoReaderWriter.ReadBox(stream, out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.a3dconfig); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.mvcdconfig); // mandatory
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvdscalinfosei); // optional
            boxSize += IsoReaderWriter.WriteBox(stream, this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.extrinsic_camera_params); // optional
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.a3dconfig); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            boxSize += IsoReaderWriter.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.a3dconfig != null) boxSize += IsoReaderWriter.CalculateSize(a3dconfig); // a3dconfig
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class A3DSampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "a3d1"; } }

        protected A3DConfigurationBox a3dconfig;  //  mandatory
        public A3DConfigurationBox A3dconfig { get { return a3dconfig; } set { a3dconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return mvdscalinfosei; } set { mvdscalinfosei = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return view_identifiers; } set { view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return intrinsic_camera_params; } set { intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return extrinsic_camera_params; } set { extrinsic_camera_params = value; } }

        public A3DSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.a3dconfig); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvdscalinfosei); // optional
            boxSize += IsoReaderWriter.ReadBox(stream, out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.extrinsic_camera_params); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.a3dconfig); // mandatory
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvdscalinfosei); // optional
            boxSize += IsoReaderWriter.WriteBox(stream, this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.extrinsic_camera_params); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(a3dconfig); // a3dconfig
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            boxSize += IsoReaderWriter.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class A3DSampleEntry1 : VisualSampleEntry
    {
        public override string FourCC { get { return "a3d2"; } }

        protected A3DConfigurationBox a3dconfig;  //  mandatory
        public A3DConfigurationBox A3dconfig { get { return a3dconfig; } set { a3dconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return mvdscalinfosei; } set { mvdscalinfosei = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return view_identifiers; } set { view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return intrinsic_camera_params; } set { intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return extrinsic_camera_params; } set { extrinsic_camera_params = value; } }

        public A3DSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.a3dconfig); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvdscalinfosei); // optional
            boxSize += IsoReaderWriter.ReadBox(stream, out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.extrinsic_camera_params); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.a3dconfig); // mandatory
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvdscalinfosei); // optional
            boxSize += IsoReaderWriter.WriteBox(stream, this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.extrinsic_camera_params); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(a3dconfig); // a3dconfig
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            boxSize += IsoReaderWriter.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class A3DSampleEntry2 : VisualSampleEntry
    {
        public override string FourCC { get { return "a3d3"; } }

        protected A3DConfigurationBox a3dconfig;  //  mandatory
        public A3DConfigurationBox A3dconfig { get { return a3dconfig; } set { a3dconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return mvdscalinfosei; } set { mvdscalinfosei = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return view_identifiers; } set { view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return intrinsic_camera_params; } set { intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return extrinsic_camera_params; } set { extrinsic_camera_params = value; } }

        public A3DSampleEntry2()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.a3dconfig); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvdscalinfosei); // optional
            boxSize += IsoReaderWriter.ReadBox(stream, out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.extrinsic_camera_params); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.a3dconfig); // mandatory
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvdscalinfosei); // optional
            boxSize += IsoReaderWriter.WriteBox(stream, this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.extrinsic_camera_params); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(a3dconfig); // a3dconfig
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            boxSize += IsoReaderWriter.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class A3DSampleEntry3 : VisualSampleEntry
    {
        public override string FourCC { get { return "a3d4"; } }

        protected A3DConfigurationBox a3dconfig;  //  mandatory
        public A3DConfigurationBox A3dconfig { get { return a3dconfig; } set { a3dconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return mvdscalinfosei; } set { mvdscalinfosei = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return view_identifiers; } set { view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return intrinsic_camera_params; } set { intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return extrinsic_camera_params; } set { extrinsic_camera_params = value; } }

        public A3DSampleEntry3()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.a3dconfig); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.mvdscalinfosei); // optional
            boxSize += IsoReaderWriter.ReadBox(stream, out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.extrinsic_camera_params); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.a3dconfig); // mandatory
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.WriteBox(stream, this.mvdscalinfosei); // optional
            boxSize += IsoReaderWriter.WriteBox(stream, this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.WriteBox(stream, this.extrinsic_camera_params); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(a3dconfig); // a3dconfig
            if (this.mvdscalinfosei != null) boxSize += IsoReaderWriter.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            boxSize += IsoReaderWriter.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            if (this.intrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoReaderWriter.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class AVCSVCSampleEntry : AVCSampleEntry
    {
        public override string FourCC { get { return "avc1"; } }

        protected SVCConfigurationBox svcconfig;  //  optional
        public SVCConfigurationBox Svcconfig { get { return svcconfig; } set { svcconfig = value; } }

        protected ScalabilityInformationSEIBox scalability;  //  optional
        public ScalabilityInformationSEIBox Scalability { get { return scalability; } set { scalability = value; } }

        protected SVCPriorityAssignmentBox method;  //  optional
        public SVCPriorityAssignmentBox Method { get { return method; } set { method = value; } }

        public AVCSVCSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.svcconfig); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.scalability); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.method); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.svcconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.svcconfig); // optional
            if (this.scalability != null) boxSize += IsoReaderWriter.WriteBox(stream, this.scalability); // optional
            if (this.method != null) boxSize += IsoReaderWriter.WriteBox(stream, this.method); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.svcconfig != null) boxSize += IsoReaderWriter.CalculateSize(svcconfig); // svcconfig
            if (this.scalability != null) boxSize += IsoReaderWriter.CalculateSize(scalability); // scalability
            if (this.method != null) boxSize += IsoReaderWriter.CalculateSize(method); // method
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class AVCSVCSampleEntry1 : AVCSampleEntry
    {
        public override string FourCC { get { return "avc3"; } }

        protected SVCConfigurationBox svcconfig;  //  optional
        public SVCConfigurationBox Svcconfig { get { return svcconfig; } set { svcconfig = value; } }

        protected ScalabilityInformationSEIBox scalability;  //  optional
        public ScalabilityInformationSEIBox Scalability { get { return scalability; } set { scalability = value; } }

        protected SVCPriorityAssignmentBox method;  //  optional
        public SVCPriorityAssignmentBox Method { get { return method; } set { method = value; } }

        public AVCSVCSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.svcconfig); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.scalability); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.method); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.svcconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.svcconfig); // optional
            if (this.scalability != null) boxSize += IsoReaderWriter.WriteBox(stream, this.scalability); // optional
            if (this.method != null) boxSize += IsoReaderWriter.WriteBox(stream, this.method); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.svcconfig != null) boxSize += IsoReaderWriter.CalculateSize(svcconfig); // svcconfig
            if (this.scalability != null) boxSize += IsoReaderWriter.CalculateSize(scalability); // scalability
            if (this.method != null) boxSize += IsoReaderWriter.CalculateSize(method); // method
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class AVC2SVCSampleEntry : AVC2SampleEntry
    {
        public override string FourCC { get { return "avc2"; } }

        protected SVCConfigurationBox svcconfig;  //  optional
        public SVCConfigurationBox Svcconfig { get { return svcconfig; } set { svcconfig = value; } }

        protected ScalabilityInformationSEIBox scalability;  //  optional
        public ScalabilityInformationSEIBox Scalability { get { return scalability; } set { scalability = value; } }

        protected SVCPriorityAssignmentBox method;  //  optional
        public SVCPriorityAssignmentBox Method { get { return method; } set { method = value; } }

        public AVC2SVCSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.svcconfig); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.scalability); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.method); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.svcconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.svcconfig); // optional
            if (this.scalability != null) boxSize += IsoReaderWriter.WriteBox(stream, this.scalability); // optional
            if (this.method != null) boxSize += IsoReaderWriter.WriteBox(stream, this.method); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.svcconfig != null) boxSize += IsoReaderWriter.CalculateSize(svcconfig); // svcconfig
            if (this.scalability != null) boxSize += IsoReaderWriter.CalculateSize(scalability); // scalability
            if (this.method != null) boxSize += IsoReaderWriter.CalculateSize(method); // method
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class AVC2SVCSampleEntry1 : AVC2SampleEntry
    {
        public override string FourCC { get { return "avc4"; } }

        protected SVCConfigurationBox svcconfig;  //  optional
        public SVCConfigurationBox Svcconfig { get { return svcconfig; } set { svcconfig = value; } }

        protected ScalabilityInformationSEIBox scalability;  //  optional
        public ScalabilityInformationSEIBox Scalability { get { return scalability; } set { scalability = value; } }

        protected SVCPriorityAssignmentBox method;  //  optional
        public SVCPriorityAssignmentBox Method { get { return method; } set { method = value; } }

        public AVC2SVCSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.svcconfig); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.scalability); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.method); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.svcconfig != null) boxSize += IsoReaderWriter.WriteBox(stream, this.svcconfig); // optional
            if (this.scalability != null) boxSize += IsoReaderWriter.WriteBox(stream, this.scalability); // optional
            if (this.method != null) boxSize += IsoReaderWriter.WriteBox(stream, this.method); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.svcconfig != null) boxSize += IsoReaderWriter.CalculateSize(svcconfig); // svcconfig
            if (this.scalability != null) boxSize += IsoReaderWriter.CalculateSize(scalability); // scalability
            if (this.method != null) boxSize += IsoReaderWriter.CalculateSize(method); // method
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class SVCSampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "svc1"; } }

        protected SVCConfigurationBox svcconfig;
        public SVCConfigurationBox Svcconfig { get { return svcconfig; } set { svcconfig = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        protected ScalabilityInformationSEIBox scalability;  //  optional
        public ScalabilityInformationSEIBox Scalability { get { return scalability; } set { scalability = value; } }

        protected SVCPriorityAssignmentBox method;  //  optional
        public SVCPriorityAssignmentBox Method { get { return method; } set { method = value; } }

        public SVCSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.svcconfig);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.scalability); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.method); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.svcconfig);
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            if (this.scalability != null) boxSize += IsoReaderWriter.WriteBox(stream, this.scalability); // optional
            if (this.method != null) boxSize += IsoReaderWriter.WriteBox(stream, this.method); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(svcconfig); // svcconfig
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            if (this.scalability != null) boxSize += IsoReaderWriter.CalculateSize(scalability); // scalability
            if (this.method != null) boxSize += IsoReaderWriter.CalculateSize(method); // method
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class SVCSampleEntry1 : VisualSampleEntry
    {
        public override string FourCC { get { return "svc2"; } }

        protected SVCConfigurationBox svcconfig;
        public SVCConfigurationBox Svcconfig { get { return svcconfig; } set { svcconfig = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        protected ScalabilityInformationSEIBox scalability;  //  optional
        public ScalabilityInformationSEIBox Scalability { get { return scalability; } set { scalability = value; } }

        protected SVCPriorityAssignmentBox method;  //  optional
        public SVCPriorityAssignmentBox Method { get { return method; } set { method = value; } }

        public SVCSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.svcconfig);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.scalability); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.method); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.svcconfig);
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            if (this.scalability != null) boxSize += IsoReaderWriter.WriteBox(stream, this.scalability); // optional
            if (this.method != null) boxSize += IsoReaderWriter.WriteBox(stream, this.method); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(svcconfig); // svcconfig
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            if (this.scalability != null) boxSize += IsoReaderWriter.CalculateSize(scalability); // scalability
            if (this.method != null) boxSize += IsoReaderWriter.CalculateSize(method); // method
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class HEVCTileSampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "hvt1"; } }

        protected HEVCTileConfigurationBox config;  //  optional
        public HEVCTileConfigurationBox Config { get { return config; } set { config = value; } }

        public HEVCTileSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.config); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.config != null) boxSize += IsoReaderWriter.WriteBox(stream, this.config); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.config != null) boxSize += IsoReaderWriter.CalculateSize(config); // config
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class LHEVCTileSampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "lht1"; } }

        public LHEVCTileSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class HEVCTileSSHInfoSampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "hvt3"; } }

        protected HEVCTileConfigurationBox config;  //  optional 
        public HEVCTileConfigurationBox Config { get { return config; } set { config = value; } }

        public HEVCTileSSHInfoSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.config); // optional 
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.config != null) boxSize += IsoReaderWriter.WriteBox(stream, this.config); // optional 
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.config != null) boxSize += IsoReaderWriter.CalculateSize(config); // config
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class HEVCSliceSegmentDataSampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "hvt2"; } }

        protected HEVCTileConfigurationBox config;  //  optional
        public HEVCTileConfigurationBox Config { get { return config; } set { config = value; } }

        public HEVCSliceSegmentDataSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.config); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.config != null) boxSize += IsoReaderWriter.WriteBox(stream, this.config); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.config != null) boxSize += IsoReaderWriter.CalculateSize(config); // config
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class VvcSampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "vvc1"; } }

        protected VvcConfigurationBox config;
        public VvcConfigurationBox Config { get { return config; } set { config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        public VvcSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class VvcSampleEntry1 : VisualSampleEntry
    {
        public override string FourCC { get { return "vvi1"; } }

        protected VvcConfigurationBox config;
        public VvcConfigurationBox Config { get { return config; } set { config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        public VvcSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class VvcSubpicSampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "vvs1"; } }

        protected VvcNALUConfigBox config;
        public VvcNALUConfigBox Config { get { return config; } set { config = value; } }

        public VvcSubpicSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class VvcNonVCLSampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "vvcN"; } }

        protected VvcNALUConfigBox config;
        public VvcNALUConfigBox Config { get { return config; } set { config = value; } }

        public VvcNonVCLSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class EVCSampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "evc1"; } }

        protected EVCConfigurationBox config;
        public EVCConfigurationBox Config { get { return config; } set { config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return descr; } set { descr = value; } }

        public EVCSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.descr); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            if (this.descr != null) boxSize += IsoReaderWriter.WriteBox(stream, this.descr); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoReaderWriter.CalculateSize(descr); // descr
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class SVCMetadataSampleEntry : MetadataSampleEntry
    {
        public override string FourCC { get { return "svcM"; } }

        protected SVCMetadataSampleConfigBox config;
        public SVCMetadataSampleConfigBox Config { get { return config; } set { config = value; } }

        protected SVCPriorityAssignmentBox methods;  //  optional
        public SVCPriorityAssignmentBox Methods { get { return methods; } set { methods = value; } }

        protected SVCPriorityLayerInfoBox priorities;  //  optional
        public SVCPriorityLayerInfoBox Priorities { get { return priorities; } set { priorities = value; } }

        public SVCMetadataSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.methods); // optional
            if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.priorities); // optional
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            if (this.methods != null) boxSize += IsoReaderWriter.WriteBox(stream, this.methods); // optional
            if (this.priorities != null) boxSize += IsoReaderWriter.WriteBox(stream, this.priorities); // optional
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            if (this.methods != null) boxSize += IsoReaderWriter.CalculateSize(methods); // methods
            if (this.priorities != null) boxSize += IsoReaderWriter.CalculateSize(priorities); // priorities
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class EVCSliceComponentTrackSampleEntry : VisualSampleEntry
    {
        public override string FourCC { get { return "evs1"; } }

        protected EVCSliceComponentTrackConfigurationBox config;
        public EVCSliceComponentTrackConfigurationBox Config { get { return config; } set { config = value; } }

        public EVCSliceComponentTrackSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class EVCSliceComponentTrackSampleEntry1 : VisualSampleEntry
    {
        public override string FourCC { get { return "evs2"; } }

        protected EVCSliceComponentTrackConfigurationBox config;
        public EVCSliceComponentTrackConfigurationBox Config { get { return config; } set { config = value; } }

        public EVCSliceComponentTrackSampleEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.config);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.config);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(config); // config
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class SubpicCommonGroupBox : EntityToGroupBox
    {
        public override string FourCC { get { return "acgl"; } }

        protected bool level_is_present_flag;
        public bool LevelIsPresentFlag { get { return level_is_present_flag; } set { level_is_present_flag = value; } }

        protected bool level_is_static_flag;
        public bool LevelIsStaticFlag { get { return level_is_static_flag; } set { level_is_static_flag = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected byte level_idc;
        public byte LevelIdc { get { return level_idc; } set { level_idc = value; } }

        protected uint level_info_entity_idx;
        public uint LevelInfoEntityIdx { get { return level_info_entity_idx; } set { level_info_entity_idx = value; } }

        protected ushort num_active_tracks;
        public ushort NumActiveTracks { get { return num_active_tracks; } set { num_active_tracks = value; } }

        public SubpicCommonGroupBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.level_is_present_flag);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.level_is_static_flag);
            boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.reserved);

            if (level_is_present_flag)
            {
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.level_idc);
            }

            if (level_is_static_flag == false)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.level_info_entity_idx);
            }
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.num_active_tracks);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBit(stream, this.level_is_present_flag);
            boxSize += IsoReaderWriter.WriteBit(stream, this.level_is_static_flag);
            boxSize += IsoReaderWriter.WriteBits(stream, 6, this.reserved);

            if (level_is_present_flag)
            {
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.level_idc);
            }

            if (level_is_static_flag == false)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.level_info_entity_idx);
            }
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.num_active_tracks);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // level_is_present_flag
            boxSize += 1; // level_is_static_flag
            boxSize += 6; // reserved

            if (level_is_present_flag)
            {
                boxSize += 8; // level_idc
            }

            if (level_is_static_flag == false)
            {
                boxSize += 32; // level_info_entity_idx
            }
            boxSize += 16; // num_active_tracks
            return boxSize;
        }
    }


    public class SubpicMultipleGroupsBox : EntityToGroupBox
    {
        public override string FourCC { get { return "amgl"; } }

        protected bool level_is_present_flag;
        public bool LevelIsPresentFlag { get { return level_is_present_flag; } set { level_is_present_flag = value; } }

        protected bool level_is_static_flag;
        public bool LevelIsStaticFlag { get { return level_is_static_flag; } set { level_is_static_flag = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected byte level_idc;
        public byte LevelIdc { get { return level_idc; } set { level_idc = value; } }

        protected uint level_info_entity_idx;
        public uint LevelInfoEntityIdx { get { return level_info_entity_idx; } set { level_info_entity_idx = value; } }

        protected ushort num_subgroup_ids;
        public ushort NumSubgroupIds { get { return num_subgroup_ids; } set { num_subgroup_ids = value; } }

        protected uint[] track_subgroup_id;
        public uint[] TrackSubgroupId { get { return track_subgroup_id; } set { track_subgroup_id = value; } }

        protected ushort[] num_active_tracks;
        public ushort[] NumActiveTracks { get { return num_active_tracks; } set { num_active_tracks = value; } }

        public SubpicMultipleGroupsBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.level_is_present_flag);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.level_is_static_flag);
            boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.reserved);

            if (level_is_present_flag)
            {
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.level_idc);
            }

            if (level_is_static_flag == false)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.level_info_entity_idx);
            }
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.num_subgroup_ids);
            ulong subgroupIdLen = (ulong)((num_subgroup_ids >= (1 << 8)) ? 16 : 8);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.track_subgroup_id[i]);
            }

            for (int i = 0; i < num_subgroup_ids; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.num_active_tracks[i]);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBit(stream, this.level_is_present_flag);
            boxSize += IsoReaderWriter.WriteBit(stream, this.level_is_static_flag);
            boxSize += IsoReaderWriter.WriteBits(stream, 7, this.reserved);

            if (level_is_present_flag)
            {
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.level_idc);
            }

            if (level_is_static_flag == false)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.level_info_entity_idx);
            }
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.num_subgroup_ids);
            ulong subgroupIdLen = (ulong)((num_subgroup_ids >= (1 << 8)) ? 16 : 8);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.track_subgroup_id[i]);
            }

            for (int i = 0; i < num_subgroup_ids; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.num_active_tracks[i]);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // level_is_present_flag
            boxSize += 1; // level_is_static_flag
            boxSize += 7; // reserved

            if (level_is_present_flag)
            {
                boxSize += 8; // level_idc
            }

            if (level_is_static_flag == false)
            {
                boxSize += 32; // level_info_entity_idx
            }
            boxSize += 16; // num_subgroup_ids
            ulong subgroupIdLen = (ulong)((num_subgroup_ids >= (1 << 8)) ? 16 : 8);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // track_subgroup_id
            }

            for (int i = 0; i < num_subgroup_ids; i++)
            {
                boxSize += 16; // num_active_tracks
            }
            return boxSize;
        }
    }


    public class OperatingPointGroupBox : EntityToGroupBox
    {
        public override string FourCC { get { return "opeg"; } }

        protected byte num_profile_tier_level_minus1;
        public byte NumProfileTierLevelMinus1 { get { return num_profile_tier_level_minus1; } set { num_profile_tier_level_minus1 = value; } }

        protected VvcPTLRecord[] opeg_ptl;
        public VvcPTLRecord[] OpegPtl { get { return opeg_ptl; } set { opeg_ptl = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected bool incomplete_operating_points_flag;
        public bool IncompleteOperatingPointsFlag { get { return incomplete_operating_points_flag; } set { incomplete_operating_points_flag = value; } }

        protected ushort num_olss;
        public ushort NumOlss { get { return num_olss; } set { num_olss = value; } }

        protected byte[] ptl_idx;
        public byte[] PtlIdx { get { return ptl_idx; } set { ptl_idx = value; } }

        protected ushort[] ols_idx;
        public ushort[] OlsIdx { get { return ols_idx; } set { ols_idx = value; } }

        protected byte[] layer_count;
        public byte[] LayerCount { get { return layer_count; } set { layer_count = value; } }

        protected bool reserved0 = false;
        public bool Reserved0 { get { return reserved0; } set { reserved0 = value; } }

        protected bool[] layer_info_present_flag;
        public bool[] LayerInfoPresentFlag { get { return layer_info_present_flag; } set { layer_info_present_flag = value; } }

        protected byte[][] layer_id;
        public byte[][] LayerId { get { return layer_id; } set { layer_id = value; } }

        protected byte[][] is_output_layer;
        public byte[][] IsOutputLayer { get { return is_output_layer; } set { is_output_layer = value; } }

        protected bool reserved00 = false;
        public bool Reserved00 { get { return reserved00; } set { reserved00 = value; } }

        protected byte reserved1 = 0;
        public byte Reserved1 { get { return reserved1; } set { reserved1 = value; } }

        protected ushort num_operating_points;
        public ushort NumOperatingPoints { get { return num_operating_points; } set { num_operating_points = value; } }

        protected ushort ols_loop_entry_idx;
        public ushort OlsLoopEntryIdx { get { return ols_loop_entry_idx; } set { ols_loop_entry_idx = value; } }

        protected byte max_temporal_id;
        public byte MaxTemporalId { get { return max_temporal_id; } set { max_temporal_id = value; } }

        protected bool frame_rate_info_flag;
        public bool FrameRateInfoFlag { get { return frame_rate_info_flag; } set { frame_rate_info_flag = value; } }

        protected bool bit_rate_info_flag;
        public bool BitRateInfoFlag { get { return bit_rate_info_flag; } set { bit_rate_info_flag = value; } }

        protected byte op_availability_idc;
        public byte OpAvailabilityIdc { get { return op_availability_idc; } set { op_availability_idc = value; } }

        protected byte reserved2 = 0;
        public byte Reserved2 { get { return reserved2; } set { reserved2 = value; } }

        protected byte reserved01 = 0;
        public byte Reserved01 { get { return reserved01; } set { reserved01 = value; } }

        protected byte chroma_format_idc;
        public byte ChromaFormatIdc { get { return chroma_format_idc; } set { chroma_format_idc = value; } }

        protected byte bit_depth_minus8;
        public byte BitDepthMinus8 { get { return bit_depth_minus8; } set { bit_depth_minus8 = value; } }

        protected ushort max_picture_width;
        public ushort MaxPictureWidth { get { return max_picture_width; } set { max_picture_width = value; } }

        protected ushort max_picture_height;
        public ushort MaxPictureHeight { get { return max_picture_height; } set { max_picture_height = value; } }

        protected ushort avg_frame_rate;
        public ushort AvgFrameRate { get { return avg_frame_rate; } set { avg_frame_rate = value; } }

        protected byte reserved10 = 0;
        public byte Reserved10 { get { return reserved10; } set { reserved10 = value; } }

        protected byte constant_frame_rate;
        public byte ConstantFrameRate { get { return constant_frame_rate; } set { constant_frame_rate = value; } }

        protected uint max_bit_rate;
        public uint MaxBitRate { get { return max_bit_rate; } set { max_bit_rate = value; } }

        protected uint avg_bit_rate;
        public uint AvgBitRate { get { return avg_bit_rate; } set { avg_bit_rate = value; } }

        protected byte entity_count;
        public byte EntityCount { get { return entity_count; } set { entity_count = value; } }

        protected byte entity_idx;
        public byte EntityIdx { get { return entity_idx; } set { entity_idx = value; } }

        public OperatingPointGroupBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.num_profile_tier_level_minus1);

            for (int i = 0; i <= num_profile_tier_level_minus1; i++)
            {
                boxSize += IsoReaderWriter.ReadClass(stream, out this.opeg_ptl[i]);
            }
            boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.reserved);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.incomplete_operating_points_flag);
            boxSize += IsoReaderWriter.ReadBits(stream, 9, out this.num_olss);

            for (int i = 0; i < num_olss; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.ptl_idx[i]);
                boxSize += IsoReaderWriter.ReadBits(stream, 9, out this.ols_idx[i]);
                boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.layer_count[i]);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.reserved0);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.layer_info_present_flag[i]);

                if (layer_info_present_flag[i])
                {

                    for (int j = 0; j < layer_count[i]; j++)
                    {
                        boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.layer_id[i][j]);
                        boxSize += IsoReaderWriter.ReadBits(stream, 1, out this.is_output_layer[i][j]);
                        boxSize += IsoReaderWriter.ReadBit(stream, out this.reserved00);
                    }
                }
            }
            boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.reserved1);
            boxSize += IsoReaderWriter.ReadBits(stream, 12, out this.num_operating_points);

            for (int i = 0; i < num_operating_points; i++)
            {
                boxSize += IsoReaderWriter.ReadBits(stream, 9, out this.ols_loop_entry_idx);
                boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.max_temporal_id);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.frame_rate_info_flag);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.bit_rate_info_flag);

                if (incomplete_operating_points_flag)
                {
                    boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.op_availability_idc);
                }

                else
                {
                    boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.reserved2);
                }
                boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.reserved01);
                boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.chroma_format_idc);
                boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.bit_depth_minus8);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.max_picture_width);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.max_picture_height);

                if (frame_rate_info_flag)
                {
                    boxSize += IsoReaderWriter.ReadUInt16(stream, out this.avg_frame_rate);
                    boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.reserved10);
                    boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.constant_frame_rate);
                }

                if (bit_rate_info_flag)
                {
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.max_bit_rate);
                    boxSize += IsoReaderWriter.ReadUInt32(stream, out this.avg_bit_rate);
                }
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.entity_count);

                for (int j = 0; j < entity_count; j++)
                {
                    boxSize += IsoReaderWriter.ReadUInt8(stream, out this.entity_idx);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.num_profile_tier_level_minus1);

            for (int i = 0; i <= num_profile_tier_level_minus1; i++)
            {
                boxSize += IsoReaderWriter.WriteClass(stream, this.opeg_ptl[i]);
            }
            boxSize += IsoReaderWriter.WriteBits(stream, 6, this.reserved);
            boxSize += IsoReaderWriter.WriteBit(stream, this.incomplete_operating_points_flag);
            boxSize += IsoReaderWriter.WriteBits(stream, 9, this.num_olss);

            for (int i = 0; i < num_olss; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.ptl_idx[i]);
                boxSize += IsoReaderWriter.WriteBits(stream, 9, this.ols_idx[i]);
                boxSize += IsoReaderWriter.WriteBits(stream, 6, this.layer_count[i]);
                boxSize += IsoReaderWriter.WriteBit(stream, this.reserved0);
                boxSize += IsoReaderWriter.WriteBit(stream, this.layer_info_present_flag[i]);

                if (layer_info_present_flag[i])
                {

                    for (int j = 0; j < layer_count[i]; j++)
                    {
                        boxSize += IsoReaderWriter.WriteBits(stream, 6, this.layer_id[i][j]);
                        boxSize += IsoReaderWriter.WriteBits(stream, 1, this.is_output_layer[i][j]);
                        boxSize += IsoReaderWriter.WriteBit(stream, this.reserved00);
                    }
                }
            }
            boxSize += IsoReaderWriter.WriteBits(stream, 4, this.reserved1);
            boxSize += IsoReaderWriter.WriteBits(stream, 12, this.num_operating_points);

            for (int i = 0; i < num_operating_points; i++)
            {
                boxSize += IsoReaderWriter.WriteBits(stream, 9, this.ols_loop_entry_idx);
                boxSize += IsoReaderWriter.WriteBits(stream, 3, this.max_temporal_id);
                boxSize += IsoReaderWriter.WriteBit(stream, this.frame_rate_info_flag);
                boxSize += IsoReaderWriter.WriteBit(stream, this.bit_rate_info_flag);

                if (incomplete_operating_points_flag)
                {
                    boxSize += IsoReaderWriter.WriteBits(stream, 2, this.op_availability_idc);
                }

                else
                {
                    boxSize += IsoReaderWriter.WriteBits(stream, 2, this.reserved2);
                }
                boxSize += IsoReaderWriter.WriteBits(stream, 3, this.reserved01);
                boxSize += IsoReaderWriter.WriteBits(stream, 2, this.chroma_format_idc);
                boxSize += IsoReaderWriter.WriteBits(stream, 3, this.bit_depth_minus8);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.max_picture_width);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.max_picture_height);

                if (frame_rate_info_flag)
                {
                    boxSize += IsoReaderWriter.WriteUInt16(stream, this.avg_frame_rate);
                    boxSize += IsoReaderWriter.WriteBits(stream, 6, this.reserved10);
                    boxSize += IsoReaderWriter.WriteBits(stream, 2, this.constant_frame_rate);
                }

                if (bit_rate_info_flag)
                {
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.max_bit_rate);
                    boxSize += IsoReaderWriter.WriteUInt32(stream, this.avg_bit_rate);
                }
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.entity_count);

                for (int j = 0; j < entity_count; j++)
                {
                    boxSize += IsoReaderWriter.WriteUInt8(stream, this.entity_idx);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // num_profile_tier_level_minus1

            for (int i = 0; i <= num_profile_tier_level_minus1; i++)
            {
                boxSize += IsoReaderWriter.CalculateClassSize(opeg_ptl); // opeg_ptl
            }
            boxSize += 6; // reserved
            boxSize += 1; // incomplete_operating_points_flag
            boxSize += 9; // num_olss

            for (int i = 0; i < num_olss; i++)
            {
                boxSize += 8; // ptl_idx
                boxSize += 9; // ols_idx
                boxSize += 6; // layer_count
                boxSize += 1; // reserved0
                boxSize += 1; // layer_info_present_flag

                if (layer_info_present_flag[i])
                {

                    for (int j = 0; j < layer_count[i]; j++)
                    {
                        boxSize += 6; // layer_id
                        boxSize += 1; // is_output_layer
                        boxSize += 1; // reserved00
                    }
                }
            }
            boxSize += 4; // reserved1
            boxSize += 12; // num_operating_points

            for (int i = 0; i < num_operating_points; i++)
            {
                boxSize += 9; // ols_loop_entry_idx
                boxSize += 3; // max_temporal_id
                boxSize += 1; // frame_rate_info_flag
                boxSize += 1; // bit_rate_info_flag

                if (incomplete_operating_points_flag)
                {
                    boxSize += 2; // op_availability_idc
                }

                else
                {
                    boxSize += 2; // reserved2
                }
                boxSize += 3; // reserved01
                boxSize += 2; // chroma_format_idc
                boxSize += 3; // bit_depth_minus8
                boxSize += 16; // max_picture_width
                boxSize += 16; // max_picture_height

                if (frame_rate_info_flag)
                {
                    boxSize += 16; // avg_frame_rate
                    boxSize += 6; // reserved10
                    boxSize += 2; // constant_frame_rate
                }

                if (bit_rate_info_flag)
                {
                    boxSize += 32; // max_bit_rate
                    boxSize += 32; // avg_bit_rate
                }
                boxSize += 8; // entity_count

                for (int j = 0; j < entity_count; j++)
                {
                    boxSize += 8; // entity_idx
                }
            }
            return boxSize;
        }
    }


    public class SwitchableTracks : EntityToGroupBox
    {
        public override string FourCC { get { return "swtk"; } }

        protected ushort[] track_switch_hierarchy_id;
        public ushort[] TrackSwitchHierarchyId { get { return track_switch_hierarchy_id; } set { track_switch_hierarchy_id = value; } }

        public SwitchableTracks()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.track_switch_hierarchy_id[i]);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.track_switch_hierarchy_id[i]);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 16; // track_switch_hierarchy_id
            }
            return boxSize;
        }
    }


    public class EntityToGroupBox1 : FullBox
    {
        public override string FourCC { get { return "vvcb"; } }

        protected uint group_id;
        public uint GroupId { get { return group_id; } set { group_id = value; } }

        protected uint num_entities_in_group;
        public uint NumEntitiesInGroup { get { return num_entities_in_group; } set { num_entities_in_group = value; } }

        protected uint entity_id;  //  the remaining data may be specified for a particular grouping_type
        public uint EntityId { get { return entity_id; } set { entity_id = value; } }

        public EntityToGroupBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_id);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_id);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // group_id
            boxSize += 32; // num_entities_in_group

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // entity_id
            }
            return boxSize;
        }
    }


    public class AUDSampleEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "aud "; } }

        protected uint audNalUnit;
        public uint AudNalUnit { get { return audNalUnit; } set { audNalUnit = value; } }

        public AUDSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBits(stream, 24, out this.audNalUnit);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBits(stream, 24, this.audNalUnit);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 24; // audNalUnit
            return boxSize;
        }
    }


    public class AVCLayerEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "avll"; } }

        protected byte layerNumber;
        public byte LayerNumber { get { return layerNumber; } set { layerNumber = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected bool accurateStatisticsFlag;
        public bool AccurateStatisticsFlag { get { return accurateStatisticsFlag; } set { accurateStatisticsFlag = value; } }

        protected ushort avgBitRate;
        public ushort AvgBitRate { get { return avgBitRate; } set { avgBitRate = value; } }

        protected ushort avgFrameRate;
        public ushort AvgFrameRate { get { return avgFrameRate; } set { avgFrameRate = value; } }

        public AVCLayerEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.layerNumber);
            boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.reserved);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.accurateStatisticsFlag);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.avgBitRate);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.avgFrameRate);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.layerNumber);
            boxSize += IsoReaderWriter.WriteBits(stream, 7, this.reserved);
            boxSize += IsoReaderWriter.WriteBit(stream, this.accurateStatisticsFlag);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.avgBitRate);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.avgFrameRate);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // layerNumber
            boxSize += 7; // reserved
            boxSize += 1; // accurateStatisticsFlag
            boxSize += 16; // avgBitRate
            boxSize += 16; // avgFrameRate
            return boxSize;
        }
    }


    public class AVCSubSequenceEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "avss"; } }

        protected ushort subSequenceIdentifer;
        public ushort SubSequenceIdentifer { get { return subSequenceIdentifer; } set { subSequenceIdentifer = value; } }

        protected byte layerNumber;
        public byte LayerNumber { get { return layerNumber; } set { layerNumber = value; } }

        protected bool durationFlag;
        public bool DurationFlag { get { return durationFlag; } set { durationFlag = value; } }

        protected bool avgRateFlag;
        public bool AvgRateFlag { get { return avgRateFlag; } set { avgRateFlag = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected uint duration;
        public uint Duration { get { return duration; } set { duration = value; } }

        protected byte reserved0 = 0;
        public byte Reserved0 { get { return reserved0; } set { reserved0 = value; } }

        protected bool accurateStatisticsFlag;
        public bool AccurateStatisticsFlag { get { return accurateStatisticsFlag; } set { accurateStatisticsFlag = value; } }

        protected ushort avgBitRate;
        public ushort AvgBitRate { get { return avgBitRate; } set { avgBitRate = value; } }

        protected ushort avgFrameRate;
        public ushort AvgFrameRate { get { return avgFrameRate; } set { avgFrameRate = value; } }

        protected byte numReferences;
        public byte NumReferences { get { return numReferences; } set { numReferences = value; } }

        protected DependencyInfo[] dependency;
        public DependencyInfo[] Dependency { get { return dependency; } set { dependency = value; } }

        public AVCSubSequenceEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.subSequenceIdentifer);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.layerNumber);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.durationFlag);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.avgRateFlag);
            boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.reserved);

            if (durationFlag)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.duration);
            }

            if (avgRateFlag)
            {
                boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.reserved0);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.accurateStatisticsFlag);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.avgBitRate);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.avgFrameRate);
            }
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.numReferences);
            boxSize += IsoReaderWriter.ReadClass(stream, numReferences, out this.dependency);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.subSequenceIdentifer);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.layerNumber);
            boxSize += IsoReaderWriter.WriteBit(stream, this.durationFlag);
            boxSize += IsoReaderWriter.WriteBit(stream, this.avgRateFlag);
            boxSize += IsoReaderWriter.WriteBits(stream, 6, this.reserved);

            if (durationFlag)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.duration);
            }

            if (avgRateFlag)
            {
                boxSize += IsoReaderWriter.WriteBits(stream, 7, this.reserved0);
                boxSize += IsoReaderWriter.WriteBit(stream, this.accurateStatisticsFlag);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.avgBitRate);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.avgFrameRate);
            }
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.numReferences);
            boxSize += IsoReaderWriter.WriteClass(stream, numReferences, this.dependency);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // subSequenceIdentifer
            boxSize += 8; // layerNumber
            boxSize += 1; // durationFlag
            boxSize += 1; // avgRateFlag
            boxSize += 6; // reserved

            if (durationFlag)
            {
                boxSize += 32; // duration
            }

            if (avgRateFlag)
            {
                boxSize += 7; // reserved0
                boxSize += 1; // accurateStatisticsFlag
                boxSize += 16; // avgBitRate
                boxSize += 16; // avgFrameRate
            }
            boxSize += 8; // numReferences
            boxSize += IsoReaderWriter.CalculateClassSize(dependency); // dependency
            return boxSize;
        }
    }


    public class DecodingCapabilityInformation : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "dcfi"; } }

        protected ushort dci_nal_unit_length;
        public ushort DciNalUnitLength { get { return dci_nal_unit_length; } set { dci_nal_unit_length = value; } }

        protected byte[] dci_nal_unit;
        public byte[] DciNalUnit { get { return dci_nal_unit; } set { dci_nal_unit = value; } }

        public DecodingCapabilityInformation()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.dci_nal_unit_length);
            boxSize += IsoReaderWriter.ReadBytes(stream, dci_nal_unit_length, out this.dci_nal_unit);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.dci_nal_unit_length);
            boxSize += IsoReaderWriter.WriteBytes(stream, dci_nal_unit_length, this.dci_nal_unit);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // dci_nal_unit_length
            boxSize += (ulong)dci_nal_unit_length * 8; // dci_nal_unit
            return boxSize;
        }
    }


    public class DecodeRetimingEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "dtrt"; } }

        protected byte tierCount;
        public byte TierCount { get { return tierCount; } set { tierCount = value; } }

        protected ushort tierID;
        public ushort TierID { get { return tierID; } set { tierID = value; } }

        protected short delta;
        public short Delta { get { return delta; } set { delta = value; } }

        public DecodeRetimingEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.tierCount);

            for (int i = 1; i <= tierCount; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.tierID);
                boxSize += IsoReaderWriter.ReadInt16(stream, out this.delta);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.tierCount);

            for (int i = 1; i <= tierCount; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.tierID);
                boxSize += IsoReaderWriter.WriteInt16(stream, this.delta);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // tierCount

            for (int i = 1; i <= tierCount; i++)
            {
                boxSize += 16; // tierID
                boxSize += 16; // delta
            }
            return boxSize;
        }
    }


    public class EndOfBitstreamSampleEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "eob "; } }

        protected ushort eobNalUnit;
        public ushort EobNalUnit { get { return eobNalUnit; } set { eobNalUnit = value; } }

        public EndOfBitstreamSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.eobNalUnit);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.eobNalUnit);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // eobNalUnit
            return boxSize;
        }
    }


    public class EndOfSequenceSampleEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "eos "; } }

        protected byte num_eos_nal_unit_minus1;
        public byte NumEosNalUnitMinus1 { get { return num_eos_nal_unit_minus1; } set { num_eos_nal_unit_minus1 = value; } }

        protected ushort[] eosNalUnit;
        public ushort[] EosNalUnit { get { return eosNalUnit; } set { eosNalUnit = value; } }

        public EndOfSequenceSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.num_eos_nal_unit_minus1);

            for (int i = 0; i <= num_eos_nal_unit_minus1; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.eosNalUnit[i]);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.num_eos_nal_unit_minus1);

            for (int i = 0; i <= num_eos_nal_unit_minus1; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.eosNalUnit[i]);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // num_eos_nal_unit_minus1

            for (int i = 0; i <= num_eos_nal_unit_minus1; i++)
            {
                boxSize += 16; // eosNalUnit
            }
            return boxSize;
        }
    }


    public class LhvcExternalBaseLayerInfo : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "lbli"; } }

        protected bool reserved = true;
        public bool Reserved { get { return reserved; } set { reserved = value; } }

        protected bool bl_irap_pic_flag;
        public bool BlIrapPicFlag { get { return bl_irap_pic_flag; } set { bl_irap_pic_flag = value; } }

        protected byte bl_irap_nal_unit_type;
        public byte BlIrapNalUnitType { get { return bl_irap_nal_unit_type; } set { bl_irap_nal_unit_type = value; } }

        protected sbyte sample_offset;
        public sbyte SampleOffset { get { return sample_offset; } set { sample_offset = value; } }

        public LhvcExternalBaseLayerInfo()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.reserved);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.bl_irap_pic_flag);
            boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.bl_irap_nal_unit_type);
            boxSize += IsoReaderWriter.ReadInt8(stream, out this.sample_offset);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBit(stream, this.reserved);
            boxSize += IsoReaderWriter.WriteBit(stream, this.bl_irap_pic_flag);
            boxSize += IsoReaderWriter.WriteBits(stream, 6, this.bl_irap_nal_unit_type);
            boxSize += IsoReaderWriter.WriteInt8(stream, this.sample_offset);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // reserved
            boxSize += 1; // bl_irap_pic_flag
            boxSize += 6; // bl_irap_nal_unit_type
            boxSize += 8; // sample_offset
            return boxSize;
        }
    }


    public class LayerInfoGroupEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "linf"; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected byte num_layers_in_track;
        public byte NumLayersInTrack { get { return num_layers_in_track; } set { num_layers_in_track = value; } }

        protected byte reserved0 = 0;
        public byte Reserved0 { get { return reserved0; } set { reserved0 = value; } }

        protected bool irap_gdr_pics_in_layer_only_flag;
        public bool IrapGdrPicsInLayerOnlyFlag { get { return irap_gdr_pics_in_layer_only_flag; } set { irap_gdr_pics_in_layer_only_flag = value; } }

        protected bool completeness_flag;
        public bool CompletenessFlag { get { return completeness_flag; } set { completeness_flag = value; } }

        protected byte layer_id;
        public byte LayerId { get { return layer_id; } set { layer_id = value; } }

        protected byte min_TemporalId;
        public byte MinTemporalId { get { return min_TemporalId; } set { min_TemporalId = value; } }

        protected byte max_TemporalId;
        public byte MaxTemporalId { get { return max_TemporalId; } set { max_TemporalId = value; } }

        protected bool reserved00 = false;
        public bool Reserved00 { get { return reserved00; } set { reserved00 = value; } }

        protected byte sub_layer_presence_flags;
        public byte SubLayerPresenceFlags { get { return sub_layer_presence_flags; } set { sub_layer_presence_flags = value; } }

        public LayerInfoGroupEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.reserved);
            boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.num_layers_in_track);

            for (int i = 0; i < num_layers_in_track; i++)
            {
                boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.reserved0);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.irap_gdr_pics_in_layer_only_flag);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.completeness_flag);
                boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.layer_id);
                boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.min_TemporalId);
                boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.max_TemporalId);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.reserved00);
                boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.sub_layer_presence_flags);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.reserved);
            boxSize += IsoReaderWriter.WriteBits(stream, 6, this.num_layers_in_track);

            for (int i = 0; i < num_layers_in_track; i++)
            {
                boxSize += IsoReaderWriter.WriteBits(stream, 2, this.reserved0);
                boxSize += IsoReaderWriter.WriteBit(stream, this.irap_gdr_pics_in_layer_only_flag);
                boxSize += IsoReaderWriter.WriteBit(stream, this.completeness_flag);
                boxSize += IsoReaderWriter.WriteBits(stream, 6, this.layer_id);
                boxSize += IsoReaderWriter.WriteBits(stream, 3, this.min_TemporalId);
                boxSize += IsoReaderWriter.WriteBits(stream, 3, this.max_TemporalId);
                boxSize += IsoReaderWriter.WriteBit(stream, this.reserved00);
                boxSize += IsoReaderWriter.WriteBits(stream, 7, this.sub_layer_presence_flags);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 2; // reserved
            boxSize += 6; // num_layers_in_track

            for (int i = 0; i < num_layers_in_track; i++)
            {
                boxSize += 2; // reserved0
                boxSize += 1; // irap_gdr_pics_in_layer_only_flag
                boxSize += 1; // completeness_flag
                boxSize += 6; // layer_id
                boxSize += 3; // min_TemporalId
                boxSize += 3; // max_TemporalId
                boxSize += 1; // reserved00
                boxSize += 7; // sub_layer_presence_flags
            }
            return boxSize;
        }
    }


    public class VvcMixedNALUnitTypePicEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "minp"; } }

        protected ushort num_mix_nalu_pic_idx;
        public ushort NumMixNaluPicIdx { get { return num_mix_nalu_pic_idx; } set { num_mix_nalu_pic_idx = value; } }

        protected ushort[] mix_subp_track_idx1;
        public ushort[] MixSubpTrackIdx1 { get { return mix_subp_track_idx1; } set { mix_subp_track_idx1 = value; } }

        protected ushort[] mix_subp_track_idx2;
        public ushort[] MixSubpTrackIdx2 { get { return mix_subp_track_idx2; } set { mix_subp_track_idx2 = value; } }

        protected ushort pps_mix_nalu_types_in_pic_bit_pos;
        public ushort PpsMixNaluTypesInPicBitPos { get { return pps_mix_nalu_types_in_pic_bit_pos; } set { pps_mix_nalu_types_in_pic_bit_pos = value; } }

        protected byte pps_id;
        public byte PpsId { get { return pps_id; } set { pps_id = value; } }

        public VvcMixedNALUnitTypePicEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.num_mix_nalu_pic_idx);

            for (int i = 0; i < num_mix_nalu_pic_idx; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.mix_subp_track_idx1[i]);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.mix_subp_track_idx2[i]);
            }
            boxSize += IsoReaderWriter.ReadBits(stream, 10, out this.pps_mix_nalu_types_in_pic_bit_pos);
            boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.pps_id);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.num_mix_nalu_pic_idx);

            for (int i = 0; i < num_mix_nalu_pic_idx; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.mix_subp_track_idx1[i]);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.mix_subp_track_idx2[i]);
            }
            boxSize += IsoReaderWriter.WriteBits(stream, 10, this.pps_mix_nalu_types_in_pic_bit_pos);
            boxSize += IsoReaderWriter.WriteBits(stream, 6, this.pps_id);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // num_mix_nalu_pic_idx

            for (int i = 0; i < num_mix_nalu_pic_idx; i++)
            {
                boxSize += 16; // mix_subp_track_idx1
                boxSize += 16; // mix_subp_track_idx2
            }
            boxSize += 10; // pps_mix_nalu_types_in_pic_bit_pos
            boxSize += 6; // pps_id
            return boxSize;
        }
    }


    public class MultiviewGroupEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "mvif"; } }

        protected byte groupID;
        public byte GroupID { get { return groupID; } set { groupID = value; } }

        protected byte primary_groupID;
        public byte PrimaryGroupID { get { return primary_groupID; } set { primary_groupID = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected bool is_tl_switching_point;
        public bool IsTlSwitchingPoint { get { return is_tl_switching_point; } set { is_tl_switching_point = value; } }

        protected byte reserved0 = 0;
        public byte Reserved0 { get { return reserved0; } set { reserved0 = value; } }

        protected byte tl_switching_distance;
        public byte TlSwitchingDistance { get { return tl_switching_distance; } set { tl_switching_distance = value; } }

        protected ViewIdentifierBox ViewIdentifierBox;  //  Mandatory
        public ViewIdentifierBox _ViewIdentifierBox { get { return ViewIdentifierBox; } set { ViewIdentifierBox = value; } }

        protected TierInfoBox TierInfoBox;  //  Mandatory
        public TierInfoBox _TierInfoBox { get { return TierInfoBox; } set { TierInfoBox = value; } }

        protected TierDependencyBox TierDependencyBox;  //  Mandatory
        public TierDependencyBox _TierDependencyBox { get { return TierDependencyBox; } set { TierDependencyBox = value; } }

        protected PriorityRangeBox PriorityRangeBox;  //  Mandatory
        public PriorityRangeBox _PriorityRangeBox { get { return PriorityRangeBox; } set { PriorityRangeBox = value; } }

        protected TierBitRateBox TierBitRateBox;  //  optional
        public TierBitRateBox _TierBitRateBox { get { return TierBitRateBox; } set { TierBitRateBox = value; } }

        protected BufferingBox BufferingBox;  //  optional
        public BufferingBox _BufferingBox { get { return BufferingBox; } set { BufferingBox = value; } }

        protected InitialParameterSetBox InitialParameterSetBox;  //  optional
        public InitialParameterSetBox _InitialParameterSetBox { get { return InitialParameterSetBox; } set { InitialParameterSetBox = value; } }

        protected ProtectionSchemeInfoBox ProtectionSchemeInfoBox;  //  optional
        public ProtectionSchemeInfoBox _ProtectionSchemeInfoBox { get { return ProtectionSchemeInfoBox; } set { ProtectionSchemeInfoBox = value; } }

        protected ViewPriorityBox ViewPriorityBox;  //  optional
        public ViewPriorityBox _ViewPriorityBox { get { return ViewPriorityBox; } set { ViewPriorityBox = value; } }

        public MultiviewGroupEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.groupID);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.primary_groupID);
            boxSize += IsoReaderWriter.ReadBits(stream, 4, out this.reserved);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.is_tl_switching_point);
            boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.reserved0);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.tl_switching_distance);

            if (groupID == primary_groupID)
            {
                boxSize += IsoReaderWriter.ReadBox(stream, out this.ViewIdentifierBox); // Mandatory
                boxSize += IsoReaderWriter.ReadBox(stream, out this.TierInfoBox); // Mandatory
                boxSize += IsoReaderWriter.ReadBox(stream, out this.TierDependencyBox); // Mandatory
                boxSize += IsoReaderWriter.ReadBox(stream, out this.PriorityRangeBox); // Mandatory
                /* Optional Boxes or fields may follow when defined later */
                if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.TierBitRateBox); // optional
                if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.BufferingBox); // optional
                if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.InitialParameterSetBox); // optional
                if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.ProtectionSchemeInfoBox); // optional
                if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.ViewPriorityBox); // optional
            }
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.groupID);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.primary_groupID);
            boxSize += IsoReaderWriter.WriteBits(stream, 4, this.reserved);
            boxSize += IsoReaderWriter.WriteBit(stream, this.is_tl_switching_point);
            boxSize += IsoReaderWriter.WriteBits(stream, 3, this.reserved0);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.tl_switching_distance);

            if (groupID == primary_groupID)
            {
                boxSize += IsoReaderWriter.WriteBox(stream, this.ViewIdentifierBox); // Mandatory
                boxSize += IsoReaderWriter.WriteBox(stream, this.TierInfoBox); // Mandatory
                boxSize += IsoReaderWriter.WriteBox(stream, this.TierDependencyBox); // Mandatory
                boxSize += IsoReaderWriter.WriteBox(stream, this.PriorityRangeBox); // Mandatory
                /* Optional Boxes or fields may follow when defined later */
                if (this.TierBitRateBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.TierBitRateBox); // optional
                if (this.BufferingBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.BufferingBox); // optional
                if (this.InitialParameterSetBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.InitialParameterSetBox); // optional
                if (this.ProtectionSchemeInfoBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.ProtectionSchemeInfoBox); // optional
                if (this.ViewPriorityBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.ViewPriorityBox); // optional
            }
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // groupID
            boxSize += 8; // primary_groupID
            boxSize += 4; // reserved
            boxSize += 1; // is_tl_switching_point
            boxSize += 3; // reserved0
            boxSize += 8; // tl_switching_distance

            if (groupID == primary_groupID)
            {
                boxSize += IsoReaderWriter.CalculateSize(ViewIdentifierBox); // ViewIdentifierBox
                boxSize += IsoReaderWriter.CalculateSize(TierInfoBox); // TierInfoBox
                boxSize += IsoReaderWriter.CalculateSize(TierDependencyBox); // TierDependencyBox
                boxSize += IsoReaderWriter.CalculateSize(PriorityRangeBox); // PriorityRangeBox
                /* Optional Boxes or fields may follow when defined later */
                if (this.TierBitRateBox != null) boxSize += IsoReaderWriter.CalculateSize(TierBitRateBox); // TierBitRateBox
                if (this.BufferingBox != null) boxSize += IsoReaderWriter.CalculateSize(BufferingBox); // BufferingBox
                if (this.InitialParameterSetBox != null) boxSize += IsoReaderWriter.CalculateSize(InitialParameterSetBox); // InitialParameterSetBox
                if (this.ProtectionSchemeInfoBox != null) boxSize += IsoReaderWriter.CalculateSize(ProtectionSchemeInfoBox); // ProtectionSchemeInfoBox
                if (this.ViewPriorityBox != null) boxSize += IsoReaderWriter.CalculateSize(ViewPriorityBox); // ViewPriorityBox
            }
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class NALUMapEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "nalm"; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected bool large_size;
        public bool LargeSize { get { return large_size; } set { large_size = value; } }

        protected bool rle;
        public bool Rle { get { return rle; } set { rle = value; } }

        protected ushort entry_count;
        public ushort EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected byte entry_count0;
        public byte EntryCount0 { get { return entry_count0; } set { entry_count0 = value; } }

        protected ushort NALU_start_number;
        public ushort NALUStartNumber { get { return NALU_start_number; } set { NALU_start_number = value; } }

        protected byte NALU_start_number0;
        public byte NALUStartNumber0 { get { return NALU_start_number0; } set { NALU_start_number0 = value; } }

        protected ushort groupID;
        public ushort GroupID { get { return groupID; } set { groupID = value; } }

        public NALUMapEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.reserved);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.large_size);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.rle);

            if (large_size)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.entry_count);
            }

            else
            {
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.entry_count0);
            }

            for (int i = 1; i <= entry_count; i++)
            {

                if (rle)
                {

                    if (large_size)
                    {
                        boxSize += IsoReaderWriter.ReadUInt16(stream, out this.NALU_start_number);
                    }

                    else
                    {
                        boxSize += IsoReaderWriter.ReadUInt8(stream, out this.NALU_start_number0);
                    }
                }
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.groupID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBits(stream, 6, this.reserved);
            boxSize += IsoReaderWriter.WriteBit(stream, this.large_size);
            boxSize += IsoReaderWriter.WriteBit(stream, this.rle);

            if (large_size)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.entry_count);
            }

            else
            {
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.entry_count0);
            }

            for (int i = 1; i <= entry_count; i++)
            {

                if (rle)
                {

                    if (large_size)
                    {
                        boxSize += IsoReaderWriter.WriteUInt16(stream, this.NALU_start_number);
                    }

                    else
                    {
                        boxSize += IsoReaderWriter.WriteUInt8(stream, this.NALU_start_number0);
                    }
                }
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.groupID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 6; // reserved
            boxSize += 1; // large_size
            boxSize += 1; // rle

            if (large_size)
            {
                boxSize += 16; // entry_count
            }

            else
            {
                boxSize += 8; // entry_count0
            }

            for (int i = 1; i <= entry_count; i++)
            {

                if (rle)
                {

                    if (large_size)
                    {
                        boxSize += 16; // NALU_start_number
                    }

                    else
                    {
                        boxSize += 8; // NALU_start_number0
                    }
                }
                boxSize += 16; // groupID
            }
            return boxSize;
        }
    }


    public class OperatingPointsInformation : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "oinf"; } }

        protected OperatingPointsRecord oinf;
        public OperatingPointsRecord Oinf { get { return oinf; } set { oinf = value; } }

        public OperatingPointsInformation()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.oinf);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.oinf);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(oinf); // oinf
            return boxSize;
        }
    }


    public class OperatingPointDecodeTimeHint : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "opth"; } }

        protected int delta_time;
        public int DeltaTime { get { return delta_time; } set { delta_time = value; } }

        public OperatingPointDecodeTimeHint()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt32(stream, out this.delta_time);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt32(stream, this.delta_time);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // delta_time
            return boxSize;
        }
    }


    public class ParameterSetNALUEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "pase"; } }

        protected ushort ps_nalu_length;
        public ushort PsNaluLength { get { return ps_nalu_length; } set { ps_nalu_length = value; } }

        protected byte[] ps_nal_unit;
        public byte[] PsNalUnit { get { return ps_nal_unit; } set { ps_nal_unit = value; } }

        public ParameterSetNALUEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.ps_nalu_length);
            boxSize += IsoReaderWriter.ReadBytes(stream, ps_nalu_length, out this.ps_nal_unit);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.ps_nalu_length);
            boxSize += IsoReaderWriter.WriteBytes(stream, ps_nalu_length, this.ps_nal_unit);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // ps_nalu_length
            boxSize += (ulong)ps_nalu_length * 8; // ps_nal_unit
            return boxSize;
        }
    }


    public class PSSampleGroupEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "pss1"; } }

        protected bool sps_present;
        public bool SpsPresent { get { return sps_present; } set { sps_present = value; } }

        protected bool pps_present;
        public bool PpsPresent { get { return pps_present; } set { pps_present = value; } }

        protected bool aps_present;
        public bool ApsPresent { get { return aps_present; } set { aps_present = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        public PSSampleGroupEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.sps_present);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.pps_present);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.aps_present);
            boxSize += IsoReaderWriter.ReadBits(stream, 5, out this.reserved);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBit(stream, this.sps_present);
            boxSize += IsoReaderWriter.WriteBit(stream, this.pps_present);
            boxSize += IsoReaderWriter.WriteBit(stream, this.aps_present);
            boxSize += IsoReaderWriter.WriteBits(stream, 5, this.reserved);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // sps_present
            boxSize += 1; // pps_present
            boxSize += 1; // aps_present
            boxSize += 5; // reserved
            return boxSize;
        }
    }


    public class VvcRectRegionOrderEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "rror"; } }

        protected bool subpic_id_info_flag;
        public bool SubpicIdInfoFlag { get { return subpic_id_info_flag; } set { subpic_id_info_flag = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected ushort num_alternate_region_set;
        public ushort NumAlternateRegionSet { get { return num_alternate_region_set; } set { num_alternate_region_set = value; } }

        protected ushort[] num_regions_in_set;
        public ushort[] NumRegionsInSet { get { return num_regions_in_set; } set { num_regions_in_set = value; } }

        protected ushort[] alternate_region_set_id;
        public ushort[] AlternateRegionSetId { get { return alternate_region_set_id; } set { alternate_region_set_id = value; } }

        protected ushort[][] groupID;
        public ushort[][] GroupID { get { return groupID; } set { groupID = value; } }

        protected ushort num_regions_minus1;
        public ushort NumRegionsMinus1 { get { return num_regions_minus1; } set { num_regions_minus1 = value; } }

        protected ushort[] region_id;
        public ushort[] RegionId { get { return region_id; } set { region_id = value; } }

        protected VVCSubpicIDRewritingInfomationStruct subpic_id_rewriting_info;
        public VVCSubpicIDRewritingInfomationStruct SubpicIdRewritingInfo { get { return subpic_id_rewriting_info; } set { subpic_id_rewriting_info = value; } }

        public VvcRectRegionOrderEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.subpic_id_info_flag);
            boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.reserved);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.num_alternate_region_set);

            for (int i = 0; i < num_alternate_region_set; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.num_regions_in_set[i]);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.alternate_region_set_id[i]);

                for (int j = 0; j < num_regions_in_set[i]; j++)
                {
                    boxSize += IsoReaderWriter.ReadUInt16(stream, out this.groupID[i][j]);
                }
            }
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.num_regions_minus1);

            for (int i = 0; i < num_regions_minus1; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.region_id[i]);
            }

            if (subpic_id_info_flag)
            {
                boxSize += IsoReaderWriter.ReadClass(stream, out this.subpic_id_rewriting_info);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBit(stream, this.subpic_id_info_flag);
            boxSize += IsoReaderWriter.WriteBits(stream, 7, this.reserved);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.num_alternate_region_set);

            for (int i = 0; i < num_alternate_region_set; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.num_regions_in_set[i]);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.alternate_region_set_id[i]);

                for (int j = 0; j < num_regions_in_set[i]; j++)
                {
                    boxSize += IsoReaderWriter.WriteUInt16(stream, this.groupID[i][j]);
                }
            }
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.num_regions_minus1);

            for (int i = 0; i < num_regions_minus1; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.region_id[i]);
            }

            if (subpic_id_info_flag)
            {
                boxSize += IsoReaderWriter.WriteClass(stream, this.subpic_id_rewriting_info);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // subpic_id_info_flag
            boxSize += 7; // reserved
            boxSize += 16; // num_alternate_region_set

            for (int i = 0; i < num_alternate_region_set; i++)
            {
                boxSize += 16; // num_regions_in_set
                boxSize += 16; // alternate_region_set_id

                for (int j = 0; j < num_regions_in_set[i]; j++)
                {
                    boxSize += 16; // groupID
                }
            }
            boxSize += 16; // num_regions_minus1

            for (int i = 0; i < num_regions_minus1; i++)
            {
                boxSize += 16; // region_id
            }

            if (subpic_id_info_flag)
            {
                boxSize += IsoReaderWriter.CalculateClassSize(subpic_id_rewriting_info); // subpic_id_rewriting_info
            }
            return boxSize;
        }
    }


    public class ScalableGroupEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "scif"; } }

        protected byte groupID;
        public byte GroupID { get { return groupID; } set { groupID = value; } }

        protected byte primary_groupID;
        public byte PrimaryGroupID { get { return primary_groupID; } set { primary_groupID = value; } }

        protected bool is_tier_IDR;
        public bool IsTierIDR { get { return is_tier_IDR; } set { is_tier_IDR = value; } }

        protected bool noInterLayerPredFlag;
        public bool NoInterLayerPredFlag { get { return noInterLayerPredFlag; } set { noInterLayerPredFlag = value; } }

        protected bool useRefBasePicFlag;
        public bool UseRefBasePicFlag { get { return useRefBasePicFlag; } set { useRefBasePicFlag = value; } }

        protected bool storeBaseRepFlag;
        public bool StoreBaseRepFlag { get { return storeBaseRepFlag; } set { storeBaseRepFlag = value; } }

        protected bool is_tl_switching_point;
        public bool IsTlSwitchingPoint { get { return is_tl_switching_point; } set { is_tl_switching_point = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected byte tl_switching_distance;
        public byte TlSwitchingDistance { get { return tl_switching_distance; } set { tl_switching_distance = value; } }

        protected TierInfoBox TierInfoBox;  //  Mandatory
        public TierInfoBox _TierInfoBox { get { return TierInfoBox; } set { TierInfoBox = value; } }

        protected SVCDependencyRangeBox SVCDependencyRangeBox;  //  Mandatory
        public SVCDependencyRangeBox _SVCDependencyRangeBox { get { return SVCDependencyRangeBox; } set { SVCDependencyRangeBox = value; } }

        protected PriorityRangeBox PriorityRangeBox;  //  Mandatory
        public PriorityRangeBox _PriorityRangeBox { get { return PriorityRangeBox; } set { PriorityRangeBox = value; } }

        protected TierBitRateBox TierBitRateBox;  //  optional
        public TierBitRateBox _TierBitRateBox { get { return TierBitRateBox; } set { TierBitRateBox = value; } }

        protected RectRegionBox RectRegionBox;  //  optional
        public RectRegionBox _RectRegionBox { get { return RectRegionBox; } set { RectRegionBox = value; } }

        protected BufferingBox BufferingBox;  //  optional
        public BufferingBox _BufferingBox { get { return BufferingBox; } set { BufferingBox = value; } }

        protected TierDependencyBox TierDependencyBox;  //  optional
        public TierDependencyBox _TierDependencyBox { get { return TierDependencyBox; } set { TierDependencyBox = value; } }

        protected InitialParameterSetBox InitialParameterSetBox;  //  optional
        public InitialParameterSetBox _InitialParameterSetBox { get { return InitialParameterSetBox; } set { InitialParameterSetBox = value; } }

        protected IroiInfoBox IroiInfoBox;  //  optional
        public IroiInfoBox _IroiInfoBox { get { return IroiInfoBox; } set { IroiInfoBox = value; } }

        protected ProtectionSchemeInfoBox ProtectionSchemeInfoBox;  //  optional
        public ProtectionSchemeInfoBox _ProtectionSchemeInfoBox { get { return ProtectionSchemeInfoBox; } set { ProtectionSchemeInfoBox = value; } }

        protected TranscodingInfoBox TranscodingInfoBox;  //  optional
        public TranscodingInfoBox _TranscodingInfoBox { get { return TranscodingInfoBox; } set { TranscodingInfoBox = value; } }

        public ScalableGroupEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.groupID);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.primary_groupID);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.is_tier_IDR);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.noInterLayerPredFlag);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.useRefBasePicFlag);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.storeBaseRepFlag);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.is_tl_switching_point);
            boxSize += IsoReaderWriter.ReadBits(stream, 3, out this.reserved);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.tl_switching_distance);

            if (groupID == primary_groupID)
            {
                boxSize += IsoReaderWriter.ReadBox(stream, out this.TierInfoBox); // Mandatory
                boxSize += IsoReaderWriter.ReadBox(stream, out this.SVCDependencyRangeBox); // Mandatory
                boxSize += IsoReaderWriter.ReadBox(stream, out this.PriorityRangeBox); // Mandatory
                /* Optional Boxes or fields may follow when defined later */
                if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.TierBitRateBox); // optional
                if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.RectRegionBox); // optional
                if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.BufferingBox); // optional
                if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.TierDependencyBox); // optional
                if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.InitialParameterSetBox); // optional
                if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.IroiInfoBox); // optional
                if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.ProtectionSchemeInfoBox); // optional
                if (boxSize < size) boxSize += IsoReaderWriter.ReadBox(stream, out this.TranscodingInfoBox); // optional
            }
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.groupID);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.primary_groupID);
            boxSize += IsoReaderWriter.WriteBit(stream, this.is_tier_IDR);
            boxSize += IsoReaderWriter.WriteBit(stream, this.noInterLayerPredFlag);
            boxSize += IsoReaderWriter.WriteBit(stream, this.useRefBasePicFlag);
            boxSize += IsoReaderWriter.WriteBit(stream, this.storeBaseRepFlag);
            boxSize += IsoReaderWriter.WriteBit(stream, this.is_tl_switching_point);
            boxSize += IsoReaderWriter.WriteBits(stream, 3, this.reserved);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.tl_switching_distance);

            if (groupID == primary_groupID)
            {
                boxSize += IsoReaderWriter.WriteBox(stream, this.TierInfoBox); // Mandatory
                boxSize += IsoReaderWriter.WriteBox(stream, this.SVCDependencyRangeBox); // Mandatory
                boxSize += IsoReaderWriter.WriteBox(stream, this.PriorityRangeBox); // Mandatory
                /* Optional Boxes or fields may follow when defined later */
                if (this.TierBitRateBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.TierBitRateBox); // optional
                if (this.RectRegionBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.RectRegionBox); // optional
                if (this.BufferingBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.BufferingBox); // optional
                if (this.TierDependencyBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.TierDependencyBox); // optional
                if (this.InitialParameterSetBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.InitialParameterSetBox); // optional
                if (this.IroiInfoBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.IroiInfoBox); // optional
                if (this.ProtectionSchemeInfoBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.ProtectionSchemeInfoBox); // optional
                if (this.TranscodingInfoBox != null) boxSize += IsoReaderWriter.WriteBox(stream, this.TranscodingInfoBox); // optional
            }
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // groupID
            boxSize += 8; // primary_groupID
            boxSize += 1; // is_tier_IDR
            boxSize += 1; // noInterLayerPredFlag
            boxSize += 1; // useRefBasePicFlag
            boxSize += 1; // storeBaseRepFlag
            boxSize += 1; // is_tl_switching_point
            boxSize += 3; // reserved
            boxSize += 8; // tl_switching_distance

            if (groupID == primary_groupID)
            {
                boxSize += IsoReaderWriter.CalculateSize(TierInfoBox); // TierInfoBox
                boxSize += IsoReaderWriter.CalculateSize(SVCDependencyRangeBox); // SVCDependencyRangeBox
                boxSize += IsoReaderWriter.CalculateSize(PriorityRangeBox); // PriorityRangeBox
                /* Optional Boxes or fields may follow when defined later */
                if (this.TierBitRateBox != null) boxSize += IsoReaderWriter.CalculateSize(TierBitRateBox); // TierBitRateBox
                if (this.RectRegionBox != null) boxSize += IsoReaderWriter.CalculateSize(RectRegionBox); // RectRegionBox
                if (this.BufferingBox != null) boxSize += IsoReaderWriter.CalculateSize(BufferingBox); // BufferingBox
                if (this.TierDependencyBox != null) boxSize += IsoReaderWriter.CalculateSize(TierDependencyBox); // TierDependencyBox
                if (this.InitialParameterSetBox != null) boxSize += IsoReaderWriter.CalculateSize(InitialParameterSetBox); // InitialParameterSetBox
                if (this.IroiInfoBox != null) boxSize += IsoReaderWriter.CalculateSize(IroiInfoBox); // IroiInfoBox
                if (this.ProtectionSchemeInfoBox != null) boxSize += IsoReaderWriter.CalculateSize(ProtectionSchemeInfoBox); // ProtectionSchemeInfoBox
                if (this.TranscodingInfoBox != null) boxSize += IsoReaderWriter.CalculateSize(TranscodingInfoBox); // TranscodingInfoBox
            }
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class ScalableNALUMapEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "scnm"; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected byte NALU_count;
        public byte NALUCount { get { return NALU_count; } set { NALU_count = value; } }

        protected byte groupID;
        public byte GroupID { get { return groupID; } set { groupID = value; } }

        public ScalableNALUMapEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.reserved);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.NALU_count);

            for (int i = 1; i <= NALU_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.groupID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.reserved);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.NALU_count);

            for (int i = 1; i <= NALU_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.groupID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // reserved
            boxSize += 8; // NALU_count

            for (int i = 1; i <= NALU_count; i++)
            {
                boxSize += 8; // groupID
            }
            return boxSize;
        }
    }


    public class VvcSubpicIDEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "spid"; } }

        protected bool rect_region_flag;
        public bool RectRegionFlag { get { return rect_region_flag; } set { rect_region_flag = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected bool continuous_id_flag;
        public bool ContinuousIdFlag { get { return continuous_id_flag; } set { continuous_id_flag = value; } }

        protected ushort num_subpics_minus1;
        public ushort NumSubpicsMinus1 { get { return num_subpics_minus1; } set { num_subpics_minus1 = value; } }

        protected ushort[] subpic_id;
        public ushort[] SubpicId { get { return subpic_id; } set { subpic_id = value; } }

        protected ushort[] groupID;
        public ushort[] GroupID { get { return groupID; } set { groupID = value; } }

        public VvcSubpicIDEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.rect_region_flag);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.reserved);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.continuous_id_flag);
            boxSize += IsoReaderWriter.ReadBits(stream, 12, out this.num_subpics_minus1);

            for (int i = 0; i <= num_subpics_minus1; i++)
            {

                if ((continuous_id_flag && i == 0) || !continuous_id_flag)
                {
                    boxSize += IsoReaderWriter.ReadUInt16(stream, out this.subpic_id[i]);
                }

                if (rect_region_flag)
                {
                    boxSize += IsoReaderWriter.ReadUInt16(stream, out this.groupID[i]);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBit(stream, this.rect_region_flag);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.reserved);
            boxSize += IsoReaderWriter.WriteBit(stream, this.continuous_id_flag);
            boxSize += IsoReaderWriter.WriteBits(stream, 12, this.num_subpics_minus1);

            for (int i = 0; i <= num_subpics_minus1; i++)
            {

                if ((continuous_id_flag && i == 0) || !continuous_id_flag)
                {
                    boxSize += IsoReaderWriter.WriteUInt16(stream, this.subpic_id[i]);
                }

                if (rect_region_flag)
                {
                    boxSize += IsoReaderWriter.WriteUInt16(stream, this.groupID[i]);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // rect_region_flag
            boxSize += 2; // reserved
            boxSize += 1; // continuous_id_flag
            boxSize += 12; // num_subpics_minus1

            for (int i = 0; i <= num_subpics_minus1; i++)
            {

                if ((continuous_id_flag && i == 0) || !continuous_id_flag)
                {
                    boxSize += 16; // subpic_id
                }

                if (rect_region_flag)
                {
                    boxSize += 16; // groupID
                }
            }
            return boxSize;
        }
    }


    public class SubpicLevelInfoEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "spli"; } }

        protected byte level_idc;
        public byte LevelIdc { get { return level_idc; } set { level_idc = value; } }

        public SubpicLevelInfoEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.level_idc);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.level_idc);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // level_idc
            return boxSize;
        }
    }


    public class VvcSubpicOrderEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "spor"; } }

        protected bool subpic_id_info_flag;
        public bool SubpicIdInfoFlag { get { return subpic_id_info_flag; } set { subpic_id_info_flag = value; } }

        protected ushort num_subpic_ref_idx;
        public ushort NumSubpicRefIdx { get { return num_subpic_ref_idx; } set { num_subpic_ref_idx = value; } }

        protected ushort[] subp_track_ref_idx;
        public ushort[] SubpTrackRefIdx { get { return subp_track_ref_idx; } set { subp_track_ref_idx = value; } }

        protected VVCSubpicIDRewritingInfomationStruct subpic_id_rewriting_info;
        public VVCSubpicIDRewritingInfomationStruct SubpicIdRewritingInfo { get { return subpic_id_rewriting_info; } set { subpic_id_rewriting_info = value; } }

        public VvcSubpicOrderEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.subpic_id_info_flag);
            boxSize += IsoReaderWriter.ReadBits(stream, 15, out this.num_subpic_ref_idx);

            for (int i = 0; i < num_subpic_ref_idx; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.subp_track_ref_idx[i]);
            }

            if (subpic_id_info_flag)
            {
                boxSize += IsoReaderWriter.ReadClass(stream, out this.subpic_id_rewriting_info);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBit(stream, this.subpic_id_info_flag);
            boxSize += IsoReaderWriter.WriteBits(stream, 15, this.num_subpic_ref_idx);

            for (int i = 0; i < num_subpic_ref_idx; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.subp_track_ref_idx[i]);
            }

            if (subpic_id_info_flag)
            {
                boxSize += IsoReaderWriter.WriteClass(stream, this.subpic_id_rewriting_info);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // subpic_id_info_flag
            boxSize += 15; // num_subpic_ref_idx

            for (int i = 0; i < num_subpic_ref_idx; i++)
            {
                boxSize += 16; // subp_track_ref_idx
            }

            if (subpic_id_info_flag)
            {
                boxSize += IsoReaderWriter.CalculateClassSize(subpic_id_rewriting_info); // subpic_id_rewriting_info
            }
            return boxSize;
        }
    }


    public class StepwiseTemporalLayerEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "stsa"; } }

        public StepwiseTemporalLayerEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class VvcSubpicLayoutMapEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "sulm"; } }

        protected uint groupID_info_4cc;
        public uint GroupIDInfo4cc { get { return groupID_info_4cc; } set { groupID_info_4cc = value; } }

        protected ushort entry_count_minus1;
        public ushort EntryCountMinus1 { get { return entry_count_minus1; } set { entry_count_minus1 = value; } }

        protected ushort groupID;
        public ushort GroupID { get { return groupID; } set { groupID = value; } }

        public VvcSubpicLayoutMapEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.groupID_info_4cc);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.entry_count_minus1);

            for (int i = 0; i <= entry_count_minus1; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.groupID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.groupID_info_4cc);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.entry_count_minus1);

            for (int i = 0; i <= entry_count_minus1; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.groupID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // groupID_info_4cc
            boxSize += 16; // entry_count_minus1

            for (int i = 0; i <= entry_count_minus1; i++)
            {
                boxSize += 16; // groupID
            }
            return boxSize;
        }
    }


    public class SyncSampleEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "sync"; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected byte NAL_unit_type;
        public byte NALUnitType { get { return NAL_unit_type; } set { NAL_unit_type = value; } }

        public SyncSampleEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.reserved);
            boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.NAL_unit_type);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.reserved);
            boxSize += IsoReaderWriter.WriteBits(stream, 6, this.NAL_unit_type);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 2; // reserved
            boxSize += 6; // NAL_unit_type
            return boxSize;
        }
    }


    public class RectangularRegionGroupEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "trif"; } }

        protected ushort groupID;
        public ushort GroupID { get { return groupID; } set { groupID = value; } }

        protected bool rect_region_flag;
        public bool RectRegionFlag { get { return rect_region_flag; } set { rect_region_flag = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected byte independent_idc;
        public byte IndependentIdc { get { return independent_idc; } set { independent_idc = value; } }

        protected bool full_picture;
        public bool FullPicture { get { return full_picture; } set { full_picture = value; } }

        protected bool filtering_disabled;
        public bool FilteringDisabled { get { return filtering_disabled; } set { filtering_disabled = value; } }

        protected bool has_dependency_list;
        public bool HasDependencyList { get { return has_dependency_list; } set { has_dependency_list = value; } }

        protected byte reserved0 = 0;
        public byte Reserved0 { get { return reserved0; } set { reserved0 = value; } }

        protected ushort horizontal_offset;
        public ushort HorizontalOffset { get { return horizontal_offset; } set { horizontal_offset = value; } }

        protected ushort vertical_offset;
        public ushort VerticalOffset { get { return vertical_offset; } set { vertical_offset = value; } }

        protected ushort region_width;
        public ushort RegionWidth { get { return region_width; } set { region_width = value; } }

        protected ushort region_height;
        public ushort RegionHeight { get { return region_height; } set { region_height = value; } }

        protected ushort dependency_rect_region_count;
        public ushort DependencyRectRegionCount { get { return dependency_rect_region_count; } set { dependency_rect_region_count = value; } }

        protected ushort dependencyRectRegionGroupID;
        public ushort DependencyRectRegionGroupID { get { return dependencyRectRegionGroupID; } set { dependencyRectRegionGroupID = value; } }

        public RectangularRegionGroupEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.groupID);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.rect_region_flag);

            if (!rect_region_flag)
            {
                boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.reserved);
            }

            else
            {
                boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.independent_idc);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.full_picture);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.filtering_disabled);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.has_dependency_list);
                boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.reserved0);

                if (!full_picture)
                {
                    boxSize += IsoReaderWriter.ReadUInt16(stream, out this.horizontal_offset);
                    boxSize += IsoReaderWriter.ReadUInt16(stream, out this.vertical_offset);
                }
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.region_width);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.region_height);

                if (has_dependency_list)
                {
                    boxSize += IsoReaderWriter.ReadUInt16(stream, out this.dependency_rect_region_count);

                    for (int i = 1; i <= dependency_rect_region_count; i++)
                    {
                        boxSize += IsoReaderWriter.ReadUInt16(stream, out this.dependencyRectRegionGroupID);
                    }
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.groupID);
            boxSize += IsoReaderWriter.WriteBit(stream, this.rect_region_flag);

            if (!rect_region_flag)
            {
                boxSize += IsoReaderWriter.WriteBits(stream, 7, this.reserved);
            }

            else
            {
                boxSize += IsoReaderWriter.WriteBits(stream, 2, this.independent_idc);
                boxSize += IsoReaderWriter.WriteBit(stream, this.full_picture);
                boxSize += IsoReaderWriter.WriteBit(stream, this.filtering_disabled);
                boxSize += IsoReaderWriter.WriteBit(stream, this.has_dependency_list);
                boxSize += IsoReaderWriter.WriteBits(stream, 2, this.reserved0);

                if (!full_picture)
                {
                    boxSize += IsoReaderWriter.WriteUInt16(stream, this.horizontal_offset);
                    boxSize += IsoReaderWriter.WriteUInt16(stream, this.vertical_offset);
                }
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.region_width);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.region_height);

                if (has_dependency_list)
                {
                    boxSize += IsoReaderWriter.WriteUInt16(stream, this.dependency_rect_region_count);

                    for (int i = 1; i <= dependency_rect_region_count; i++)
                    {
                        boxSize += IsoReaderWriter.WriteUInt16(stream, this.dependencyRectRegionGroupID);
                    }
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // groupID
            boxSize += 1; // rect_region_flag

            if (!rect_region_flag)
            {
                boxSize += 7; // reserved
            }

            else
            {
                boxSize += 2; // independent_idc
                boxSize += 1; // full_picture
                boxSize += 1; // filtering_disabled
                boxSize += 1; // has_dependency_list
                boxSize += 2; // reserved0

                if (!full_picture)
                {
                    boxSize += 16; // horizontal_offset
                    boxSize += 16; // vertical_offset
                }
                boxSize += 16; // region_width
                boxSize += 16; // region_height

                if (has_dependency_list)
                {
                    boxSize += 16; // dependency_rect_region_count

                    for (int i = 1; i <= dependency_rect_region_count; i++)
                    {
                        boxSize += 16; // dependencyRectRegionGroupID
                    }
                }
            }
            return boxSize;
        }
    }


    public class TemporalSubLayerEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "tsas"; } }

        public TemporalSubLayerEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    public class TemporalLayerEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "tscl"; } }

        protected byte temporalLayerId;
        public byte TemporalLayerId { get { return temporalLayerId; } set { temporalLayerId = value; } }

        protected byte tlprofile_space;
        public byte TlprofileSpace { get { return tlprofile_space; } set { tlprofile_space = value; } }

        protected bool tltier_flag;
        public bool TltierFlag { get { return tltier_flag; } set { tltier_flag = value; } }

        protected byte tlprofile_idc;
        public byte TlprofileIdc { get { return tlprofile_idc; } set { tlprofile_idc = value; } }

        protected uint tlprofile_compatibility_flags;
        public uint TlprofileCompatibilityFlags { get { return tlprofile_compatibility_flags; } set { tlprofile_compatibility_flags = value; } }

        protected ulong tlconstraint_indicator_flags;
        public ulong TlconstraintIndicatorFlags { get { return tlconstraint_indicator_flags; } set { tlconstraint_indicator_flags = value; } }

        protected byte tllevel_idc;
        public byte TllevelIdc { get { return tllevel_idc; } set { tllevel_idc = value; } }

        protected ushort tlMaxBitRate;
        public ushort TlMaxBitRate { get { return tlMaxBitRate; } set { tlMaxBitRate = value; } }

        protected ushort tlAvgBitRate;
        public ushort TlAvgBitRate { get { return tlAvgBitRate; } set { tlAvgBitRate = value; } }

        protected byte tlConstantFrameRate;
        public byte TlConstantFrameRate { get { return tlConstantFrameRate; } set { tlConstantFrameRate = value; } }

        protected ushort tlAvgFrameRate;
        public ushort TlAvgFrameRate { get { return tlAvgFrameRate; } set { tlAvgFrameRate = value; } }

        public TemporalLayerEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.temporalLayerId);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.tlprofile_space);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.tltier_flag);
            boxSize += IsoReaderWriter.ReadBits(stream, 5, out this.tlprofile_idc);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.tlprofile_compatibility_flags);
            boxSize += IsoReaderWriter.ReadUInt48(stream, out this.tlconstraint_indicator_flags);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.tllevel_idc);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.tlMaxBitRate);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.tlAvgBitRate);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.tlConstantFrameRate);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.tlAvgFrameRate);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.temporalLayerId);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.tlprofile_space);
            boxSize += IsoReaderWriter.WriteBit(stream, this.tltier_flag);
            boxSize += IsoReaderWriter.WriteBits(stream, 5, this.tlprofile_idc);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.tlprofile_compatibility_flags);
            boxSize += IsoReaderWriter.WriteUInt48(stream, this.tlconstraint_indicator_flags);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.tllevel_idc);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.tlMaxBitRate);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.tlAvgBitRate);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.tlConstantFrameRate);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.tlAvgFrameRate);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // temporalLayerId
            boxSize += 2; // tlprofile_space
            boxSize += 1; // tltier_flag
            boxSize += 5; // tlprofile_idc
            boxSize += 32; // tlprofile_compatibility_flags
            boxSize += 48; // tlconstraint_indicator_flags
            boxSize += 8; // tllevel_idc
            boxSize += 16; // tlMaxBitRate
            boxSize += 16; // tlAvgBitRate
            boxSize += 8; // tlConstantFrameRate
            boxSize += 16; // tlAvgFrameRate
            return boxSize;
        }
    }


    public class ViewPriorityEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "vipr"; } }

        protected ViewPriorityBox ViewPriorityBox;
        public ViewPriorityBox _ViewPriorityBox { get { return ViewPriorityBox; } set { ViewPriorityBox = value; } }

        public ViewPriorityEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBox(stream, out this.ViewPriorityBox);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBox(stream, this.ViewPriorityBox);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateSize(ViewPriorityBox); // ViewPriorityBox
            return boxSize;
        }
    }


    public class VvcOperatingPointsInformation : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "vopi"; } }

        protected VvcOperatingPointsRecord oinf;
        public VvcOperatingPointsRecord Oinf { get { return oinf; } set { oinf = value; } }

        public VvcOperatingPointsInformation()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.oinf);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.oinf);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(oinf); // oinf
            return boxSize;
        }
    }


    public class TrackGroupTypeBox1 : FullBox
    {
        public override string FourCC { get { return "alte"; } }

        protected uint track_group_id;  //  the remaining data may be specified 
        public uint TrackGroupId { get { return track_group_id; } set { track_group_id = value; } }

        public TrackGroupTypeBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.track_group_id); // the remaining data may be specified 
            /*   for a particular track_group_type */
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.track_group_id); // the remaining data may be specified 
            /*   for a particular track_group_type */
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_group_id
            /*   for a particular track_group_type */
            return boxSize;
        }
    }


    public class TrackGroupTypeBox2 : FullBox
    {
        public override string FourCC { get { return "cstg"; } }

        protected uint track_group_id;  //  the remaining data may be specified 
        public uint TrackGroupId { get { return track_group_id; } set { track_group_id = value; } }

        public TrackGroupTypeBox2()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.track_group_id); // the remaining data may be specified 
            /*   for a particular track_group_type */
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.track_group_id); // the remaining data may be specified 
            /*   for a particular track_group_type */
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_group_id
            /*   for a particular track_group_type */
            return boxSize;
        }
    }


    public class TrackGroupTypeBox3 : FullBox
    {
        public override string FourCC { get { return "snut"; } }

        protected uint track_group_id;  //  the remaining data may be specified 
        public uint TrackGroupId { get { return track_group_id; } set { track_group_id = value; } }

        public TrackGroupTypeBox3()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.track_group_id); // the remaining data may be specified 
            /*   for a particular track_group_type */
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.track_group_id); // the remaining data may be specified 
            /*   for a particular track_group_type */
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_group_id
            /*   for a particular track_group_type */
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox11 : Box
    {
        public override string FourCC { get { return "avcp"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox11()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox12 : Box
    {
        public override string FourCC { get { return "deps"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox12()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox13 : Box
    {
        public override string FourCC { get { return "evcr"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox13()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox14 : Box
    {
        public override string FourCC { get { return "mixn"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox14()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox15 : Box
    {
        public override string FourCC { get { return "oref"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox15()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox16 : Box
    {
        public override string FourCC { get { return "recr"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox16()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox17 : Box
    {
        public override string FourCC { get { return "sabt"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox17()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox18 : Box
    {
        public override string FourCC { get { return "sbas"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox18()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox19 : Box
    {
        public override string FourCC { get { return "scal"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox19()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox20 : Box
    {
        public override string FourCC { get { return "subp"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox20()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox21 : Box
    {
        public override string FourCC { get { return "swfr"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox21()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox22 : Box
    {
        public override string FourCC { get { return "swto"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox22()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox23 : Box
    {
        public override string FourCC { get { return "tbas"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox23()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox24 : Box
    {
        public override string FourCC { get { return "vref"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox24()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox25 : Box
    {
        public override string FourCC { get { return "vreg"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox25()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    public class TrackReferenceTypeBox26 : Box
    {
        public override string FourCC { get { return "vvcN"; } }

        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return track_IDs; } set { track_IDs = value; } }

        public TrackReferenceTypeBox26()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32Array(stream, out this.track_IDs);
            boxSize += IsoReaderWriter.ReadBoxChildren(stream, boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32Array(stream, this.track_IDs);
            boxSize += IsoReaderWriter.WriteBoxChildren(stream, this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            boxSize += IsoReaderWriter.CalculateSize(children);
            return boxSize;
        }
    }


    public class EntityToGroupBox2 : FullBox
    {
        public override string FourCC { get { return "eqiv"; } }

        protected uint group_id;
        public uint GroupId { get { return group_id; } set { group_id = value; } }

        protected uint num_entities_in_group;
        public uint NumEntitiesInGroup { get { return num_entities_in_group; } set { num_entities_in_group = value; } }

        protected uint entity_id;  //  the remaining data may be specified for a particular grouping_type
        public uint EntityId { get { return entity_id; } set { entity_id = value; } }

        public EntityToGroupBox2()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_id);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_id);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // group_id
            boxSize += 32; // num_entities_in_group

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // entity_id
            }
            return boxSize;
        }
    }


    public class EntityToGroupBox3 : FullBox
    {
        public override string FourCC { get { return "ster"; } }

        protected uint group_id;
        public uint GroupId { get { return group_id; } set { group_id = value; } }

        protected uint num_entities_in_group;
        public uint NumEntitiesInGroup { get { return num_entities_in_group; } set { num_entities_in_group = value; } }

        protected uint entity_id;  //  the remaining data may be specified for a particular grouping_type
        public uint EntityId { get { return entity_id; } set { entity_id = value; } }

        public EntityToGroupBox3()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_id);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_id);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // group_id
            boxSize += 32; // num_entities_in_group

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // entity_id
            }
            return boxSize;
        }
    }


    public class EntityToGroupBox4 : FullBox
    {
        public override string FourCC { get { return "aebr"; } }

        protected uint group_id;
        public uint GroupId { get { return group_id; } set { group_id = value; } }

        protected uint num_entities_in_group;
        public uint NumEntitiesInGroup { get { return num_entities_in_group; } set { num_entities_in_group = value; } }

        protected uint entity_id;  //  the remaining data may be specified for a particular grouping_type
        public uint EntityId { get { return entity_id; } set { entity_id = value; } }

        public EntityToGroupBox4()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_id);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_id);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // group_id
            boxSize += 32; // num_entities_in_group

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // entity_id
            }
            return boxSize;
        }
    }


    public class EntityToGroupBox5 : FullBox
    {
        public override string FourCC { get { return "afbr"; } }

        protected uint group_id;
        public uint GroupId { get { return group_id; } set { group_id = value; } }

        protected uint num_entities_in_group;
        public uint NumEntitiesInGroup { get { return num_entities_in_group; } set { num_entities_in_group = value; } }

        protected uint entity_id;  //  the remaining data may be specified for a particular grouping_type
        public uint EntityId { get { return entity_id; } set { entity_id = value; } }

        public EntityToGroupBox5()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_id);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_id);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // group_id
            boxSize += 32; // num_entities_in_group

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // entity_id
            }
            return boxSize;
        }
    }


    public class EntityToGroupBox6 : FullBox
    {
        public override string FourCC { get { return "albc"; } }

        protected uint group_id;
        public uint GroupId { get { return group_id; } set { group_id = value; } }

        protected uint num_entities_in_group;
        public uint NumEntitiesInGroup { get { return num_entities_in_group; } set { num_entities_in_group = value; } }

        protected uint entity_id;  //  the remaining data may be specified for a particular grouping_type
        public uint EntityId { get { return entity_id; } set { entity_id = value; } }

        public EntityToGroupBox6()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_id);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_id);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // group_id
            boxSize += 32; // num_entities_in_group

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // entity_id
            }
            return boxSize;
        }
    }


    public class EntityToGroupBox7 : FullBox
    {
        public override string FourCC { get { return "brst"; } }

        protected uint group_id;
        public uint GroupId { get { return group_id; } set { group_id = value; } }

        protected uint num_entities_in_group;
        public uint NumEntitiesInGroup { get { return num_entities_in_group; } set { num_entities_in_group = value; } }

        protected uint entity_id;  //  the remaining data may be specified for a particular grouping_type
        public uint EntityId { get { return entity_id; } set { entity_id = value; } }

        public EntityToGroupBox7()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_id);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_id);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // group_id
            boxSize += 32; // num_entities_in_group

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // entity_id
            }
            return boxSize;
        }
    }


    public class EntityToGroupBox8 : FullBox
    {
        public override string FourCC { get { return "iaug"; } }

        protected uint group_id;
        public uint GroupId { get { return group_id; } set { group_id = value; } }

        protected uint num_entities_in_group;
        public uint NumEntitiesInGroup { get { return num_entities_in_group; } set { num_entities_in_group = value; } }

        protected uint entity_id;  //  the remaining data may be specified for a particular grouping_type
        public uint EntityId { get { return entity_id; } set { entity_id = value; } }

        public EntityToGroupBox8()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_id);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_id);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // group_id
            boxSize += 32; // num_entities_in_group

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // entity_id
            }
            return boxSize;
        }
    }


    public class EntityToGroupBox9 : FullBox
    {
        public override string FourCC { get { return "tsyn"; } }

        protected uint group_id;
        public uint GroupId { get { return group_id; } set { group_id = value; } }

        protected uint num_entities_in_group;
        public uint NumEntitiesInGroup { get { return num_entities_in_group; } set { num_entities_in_group = value; } }

        protected uint entity_id;  //  the remaining data may be specified for a particular grouping_type
        public uint EntityId { get { return entity_id; } set { entity_id = value; } }

        public EntityToGroupBox9()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_id);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_id);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // group_id
            boxSize += 32; // num_entities_in_group

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // entity_id
            }
            return boxSize;
        }
    }


    public class EntityToGroupBox10 : FullBox
    {
        public override string FourCC { get { return "dobr"; } }

        protected uint group_id;
        public uint GroupId { get { return group_id; } set { group_id = value; } }

        protected uint num_entities_in_group;
        public uint NumEntitiesInGroup { get { return num_entities_in_group; } set { num_entities_in_group = value; } }

        protected uint entity_id;  //  the remaining data may be specified for a particular grouping_type
        public uint EntityId { get { return entity_id; } set { entity_id = value; } }

        public EntityToGroupBox10()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_id);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_id);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // group_id
            boxSize += 32; // num_entities_in_group

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // entity_id
            }
            return boxSize;
        }
    }


    public class EntityToGroupBox11 : FullBox
    {
        public override string FourCC { get { return "favc"; } }

        protected uint group_id;
        public uint GroupId { get { return group_id; } set { group_id = value; } }

        protected uint num_entities_in_group;
        public uint NumEntitiesInGroup { get { return num_entities_in_group; } set { num_entities_in_group = value; } }

        protected uint entity_id;  //  the remaining data may be specified for a particular grouping_type
        public uint EntityId { get { return entity_id; } set { entity_id = value; } }

        public EntityToGroupBox11()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_id);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_id);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // group_id
            boxSize += 32; // num_entities_in_group

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // entity_id
            }
            return boxSize;
        }
    }


    public class EntityToGroupBox12 : FullBox
    {
        public override string FourCC { get { return "fobr"; } }

        protected uint group_id;
        public uint GroupId { get { return group_id; } set { group_id = value; } }

        protected uint num_entities_in_group;
        public uint NumEntitiesInGroup { get { return num_entities_in_group; } set { num_entities_in_group = value; } }

        protected uint entity_id;  //  the remaining data may be specified for a particular grouping_type
        public uint EntityId { get { return entity_id; } set { entity_id = value; } }

        public EntityToGroupBox12()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_id);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_id);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // group_id
            boxSize += 32; // num_entities_in_group

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // entity_id
            }
            return boxSize;
        }
    }


    public class EntityToGroupBox13 : FullBox
    {
        public override string FourCC { get { return "pano"; } }

        protected uint group_id;
        public uint GroupId { get { return group_id; } set { group_id = value; } }

        protected uint num_entities_in_group;
        public uint NumEntitiesInGroup { get { return num_entities_in_group; } set { num_entities_in_group = value; } }

        protected uint entity_id;  //  the remaining data may be specified for a particular grouping_type
        public uint EntityId { get { return entity_id; } set { entity_id = value; } }

        public EntityToGroupBox13()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_id);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_id);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // group_id
            boxSize += 32; // num_entities_in_group

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // entity_id
            }
            return boxSize;
        }
    }


    public class EntityToGroupBox14 : FullBox
    {
        public override string FourCC { get { return "wbbr"; } }

        protected uint group_id;
        public uint GroupId { get { return group_id; } set { group_id = value; } }

        protected uint num_entities_in_group;
        public uint NumEntitiesInGroup { get { return num_entities_in_group; } set { num_entities_in_group = value; } }

        protected uint entity_id;  //  the remaining data may be specified for a particular grouping_type
        public uint EntityId { get { return entity_id; } set { entity_id = value; } }

        public EntityToGroupBox14()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.group_id);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.group_id);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // group_id
            boxSize += 32; // num_entities_in_group

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // entity_id
            }
            return boxSize;
        }
    }


    public class AuxiliaryTypeProperty : ItemFullProperty
    {
        public override string FourCC { get { return "auxC"; } }

        protected string aux_type;
        public string AuxType { get { return aux_type; } set { aux_type = value; } }

        protected byte[] aux_subtype;  //  until the end of the box, the semantics depend on the aux_type value
        public byte[] AuxSubtype { get { return aux_subtype; } set { aux_subtype = value; } }

        public AuxiliaryTypeProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadString(stream, out this.aux_type);
            boxSize += IsoReaderWriter.ReadUInt8Array(stream, out this.aux_subtype); // until the end of the box, the semantics depend on the aux_type value
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteString(stream, this.aux_type);
            boxSize += IsoReaderWriter.WriteUInt8Array(stream, this.aux_subtype); // until the end of the box, the semantics depend on the aux_type value
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)aux_type.Length * 8; // aux_type
            boxSize += (ulong)aux_subtype.Length * 8; // aux_subtype
            return boxSize;
        }
    }


    public class AVCConfigurationBox1 : Box
    {
        public override string FourCC { get { return "avcC"; } }

        protected AVCDecoderConfigurationRecord AVCConfig;
        public AVCDecoderConfigurationRecord _AVCConfig { get { return AVCConfig; } set { AVCConfig = value; } }

        public AVCConfigurationBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.AVCConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.AVCConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(AVCConfig); // AVCConfig
            return boxSize;
        }
    }


    public class CleanApertureBox1 : Box
    {
        public override string FourCC { get { return "clap"; } }

        protected uint cleanApertureWidthN;
        public uint CleanApertureWidthN { get { return cleanApertureWidthN; } set { cleanApertureWidthN = value; } }

        protected uint cleanApertureWidthD;
        public uint CleanApertureWidthD { get { return cleanApertureWidthD; } set { cleanApertureWidthD = value; } }

        protected uint cleanApertureHeightN;
        public uint CleanApertureHeightN { get { return cleanApertureHeightN; } set { cleanApertureHeightN = value; } }

        protected uint cleanApertureHeightD;
        public uint CleanApertureHeightD { get { return cleanApertureHeightD; } set { cleanApertureHeightD = value; } }

        protected uint horizOffN;
        public uint HorizOffN { get { return horizOffN; } set { horizOffN = value; } }

        protected uint horizOffD;
        public uint HorizOffD { get { return horizOffD; } set { horizOffD = value; } }

        protected uint vertOffN;
        public uint VertOffN { get { return vertOffN; } set { vertOffN = value; } }

        protected uint vertOffD;
        public uint VertOffD { get { return vertOffD; } set { vertOffD = value; } }

        public CleanApertureBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.cleanApertureWidthN);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.cleanApertureWidthD);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.cleanApertureHeightN);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.cleanApertureHeightD);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.horizOffN);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.horizOffD);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.vertOffN);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.vertOffD);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.cleanApertureWidthN);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.cleanApertureWidthD);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.cleanApertureHeightN);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.cleanApertureHeightD);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.horizOffN);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.horizOffD);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.vertOffN);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.vertOffD);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // cleanApertureWidthN
            boxSize += 32; // cleanApertureWidthD
            boxSize += 32; // cleanApertureHeightN
            boxSize += 32; // cleanApertureHeightD
            boxSize += 32; // horizOffN
            boxSize += 32; // horizOffD
            boxSize += 32; // vertOffN
            boxSize += 32; // vertOffD
            return boxSize;
        }
    }


    public class ColourInformationBox1 : Box
    {
        public override string FourCC { get { return "colr"; } }

        protected uint colour_type;
        public uint ColourType { get { return colour_type; } set { colour_type = value; } }

        protected ushort colour_primaries;
        public ushort ColourPrimaries { get { return colour_primaries; } set { colour_primaries = value; } }

        protected ushort transfer_characteristics;
        public ushort TransferCharacteristics { get { return transfer_characteristics; } set { transfer_characteristics = value; } }

        protected ushort matrix_coefficients;
        public ushort MatrixCoefficients { get { return matrix_coefficients; } set { matrix_coefficients = value; } }

        protected bool full_range_flag;
        public bool FullRangeFlag { get { return full_range_flag; } set { full_range_flag = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected ICC_profile ICC_profile;  //  restricted ICC profile
        public ICC_profile ICCProfile { get { return ICC_profile; } set { ICC_profile = value; } }

        protected ICC_profile ICC_profile0;  //  unrestricted ICC profile
        public ICC_profile ICCProfile0 { get { return ICC_profile0; } set { ICC_profile0 = value; } }

        public ColourInformationBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.colour_type);

            if (colour_type == IsoReaderWriter.FromFourCC("nclx"))
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.colour_primaries);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.transfer_characteristics);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.matrix_coefficients);
                boxSize += IsoReaderWriter.ReadBit(stream, out this.full_range_flag);
                boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.reserved);
            }

            else if (colour_type == IsoReaderWriter.FromFourCC("rICC"))
            {
                boxSize += IsoReaderWriter.ReadClass(stream, out this.ICC_profile); // restricted ICC profile
            }

            else if (colour_type == IsoReaderWriter.FromFourCC("prof"))
            {
                boxSize += IsoReaderWriter.ReadClass(stream, out this.ICC_profile0); // unrestricted ICC profile
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.colour_type);

            if (colour_type == IsoReaderWriter.FromFourCC("nclx"))
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.colour_primaries);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.transfer_characteristics);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.matrix_coefficients);
                boxSize += IsoReaderWriter.WriteBit(stream, this.full_range_flag);
                boxSize += IsoReaderWriter.WriteBits(stream, 7, this.reserved);
            }

            else if (colour_type == IsoReaderWriter.FromFourCC("rICC"))
            {
                boxSize += IsoReaderWriter.WriteClass(stream, this.ICC_profile); // restricted ICC profile
            }

            else if (colour_type == IsoReaderWriter.FromFourCC("prof"))
            {
                boxSize += IsoReaderWriter.WriteClass(stream, this.ICC_profile0); // unrestricted ICC profile
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // colour_type

            if (colour_type == IsoReaderWriter.FromFourCC("nclx"))
            {
                boxSize += 16; // colour_primaries
                boxSize += 16; // transfer_characteristics
                boxSize += 16; // matrix_coefficients
                boxSize += 1; // full_range_flag
                boxSize += 7; // reserved
            }

            else if (colour_type == IsoReaderWriter.FromFourCC("rICC"))
            {
                boxSize += IsoReaderWriter.CalculateClassSize(ICC_profile); // ICC_profile
            }

            else if (colour_type == IsoReaderWriter.FromFourCC("prof"))
            {
                boxSize += IsoReaderWriter.CalculateClassSize(ICC_profile0); // ICC_profile0
            }
            return boxSize;
        }
    }


    public class HEVCConfigurationBox1 : Box
    {
        public override string FourCC { get { return "hvcC"; } }

        protected HEVCDecoderConfigurationRecord HEVCConfig;
        public HEVCDecoderConfigurationRecord _HEVCConfig { get { return HEVCConfig; } set { HEVCConfig = value; } }

        public HEVCConfigurationBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.HEVCConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.HEVCConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(HEVCConfig); // HEVCConfig
            return boxSize;
        }
    }


    public class ImageMirror : ItemProperty
    {
        public override string FourCC { get { return "imir"; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected bool axis;
        public bool Axis { get { return axis; } set { axis = value; } }

        public ImageMirror()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.reserved);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.axis);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBits(stream, 7, this.reserved);
            boxSize += IsoReaderWriter.WriteBit(stream, this.axis);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 7; // reserved
            boxSize += 1; // axis
            return boxSize;
        }
    }


    public class ImageRotation : ItemProperty
    {
        public override string FourCC { get { return "irot"; } }

        protected byte reserved = 0;
        public byte Reserved { get { return reserved; } set { reserved = value; } }

        protected byte angle;
        public byte Angle { get { return angle; } set { angle = value; } }

        public ImageRotation()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBits(stream, 6, out this.reserved);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.angle);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBits(stream, 6, this.reserved);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.angle);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 6; // reserved
            boxSize += 2; // angle
            return boxSize;
        }
    }


    public class ImageSpatialExtentsProperty : ItemFullProperty
    {
        public override string FourCC { get { return "ispe"; } }

        protected uint image_width;
        public uint ImageWidth { get { return image_width; } set { image_width = value; } }

        protected uint image_height;
        public uint ImageHeight { get { return image_height; } set { image_height = value; } }

        public ImageSpatialExtentsProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.image_width);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.image_height);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.image_width);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.image_height);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // image_width
            boxSize += 32; // image_height
            return boxSize;
        }
    }


    public class JPEGConfigurationBox : Box
    {
        public override string FourCC { get { return "jpgC"; } }

        protected byte[] JPEGprefix;
        public byte[] _JPEGprefix { get { return JPEGprefix; } set { JPEGprefix = value; } }

        public JPEGConfigurationBox()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8Array(stream, out this.JPEGprefix);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8Array(stream, this.JPEGprefix);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)JPEGprefix.Length * 8; // JPEGprefix
            return boxSize;
        }
    }


    public class LHEVCConfigurationBox1 : Box
    {
        public override string FourCC { get { return "lhvC"; } }

        protected LHEVCDecoderConfigurationRecord LHEVCConfig;
        public LHEVCDecoderConfigurationRecord _LHEVCConfig { get { return LHEVCConfig; } set { LHEVCConfig = value; } }

        public LHEVCConfigurationBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.LHEVCConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.LHEVCConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(LHEVCConfig); // LHEVCConfig
            return boxSize;
        }
    }


    public class LayerSelectorProperty : ItemProperty
    {
        public override string FourCC { get { return "lsel"; } }

        protected ushort layer_id;
        public ushort LayerId { get { return layer_id; } set { layer_id = value; } }

        public LayerSelectorProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.layer_id);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.layer_id);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // layer_id
            return boxSize;
        }
    }


    public class OperatingPointsInformationProperty : ItemFullProperty
    {
        public override string FourCC { get { return "oinf"; } }

        protected OperatingPointsRecord op_info;  //  specified in ISO/IEC 14496-15
        public OperatingPointsRecord OpInfo { get { return op_info; } set { op_info = value; } }

        public OperatingPointsInformationProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.op_info); // specified in ISO/IEC 14496-15
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.op_info); // specified in ISO/IEC 14496-15
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(op_info); // op_info
            return boxSize;
        }
    }


    public class PixelAspectRatioBox1 : Box
    {
        public override string FourCC { get { return "pasp"; } }

        protected uint hSpacing;
        public uint HSpacing { get { return hSpacing; } set { hSpacing = value; } }

        protected uint vSpacing;
        public uint VSpacing { get { return vSpacing; } set { vSpacing = value; } }

        public PixelAspectRatioBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.hSpacing);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.vSpacing);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.hSpacing);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.vSpacing);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // hSpacing
            boxSize += 32; // vSpacing
            return boxSize;
        }
    }


    public class PixelInformationProperty : ItemFullProperty
    {
        public override string FourCC { get { return "pixi"; } }

        protected byte num_channels;
        public byte NumChannels { get { return num_channels; } set { num_channels = value; } }

        protected byte bits_per_channel;
        public byte BitsPerChannel { get { return bits_per_channel; } set { bits_per_channel = value; } }

        public PixelInformationProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.num_channels);

            for (int i = 0; i < num_channels; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt8(stream, out this.bits_per_channel);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.num_channels);

            for (int i = 0; i < num_channels; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt8(stream, this.bits_per_channel);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // num_channels

            for (int i = 0; i < num_channels; i++)
            {
                boxSize += 8; // bits_per_channel
            }
            return boxSize;
        }
    }


    public class RelativeLocationProperty : ItemFullProperty
    {
        public override string FourCC { get { return "rloc"; } }

        protected uint horizontal_offset;
        public uint HorizontalOffset { get { return horizontal_offset; } set { horizontal_offset = value; } }

        protected uint vertical_offset;
        public uint VerticalOffset { get { return vertical_offset; } set { vertical_offset = value; } }

        public RelativeLocationProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.horizontal_offset);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.vertical_offset);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.horizontal_offset);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.vertical_offset);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // horizontal_offset
            boxSize += 32; // vertical_offset
            return boxSize;
        }
    }


    public class SubSampleInformationBox1 : FullBox
    {
        public override string FourCC { get { return "subs"; } }

        protected uint entry_count;
        public uint EntryCount { get { return entry_count; } set { entry_count = value; } }

        protected uint sample_delta;
        public uint SampleDelta { get { return sample_delta; } set { sample_delta = value; } }

        protected ushort subsample_count;
        public ushort SubsampleCount { get { return subsample_count; } set { subsample_count = value; } }

        protected uint subsample_size;
        public uint SubsampleSize { get { return subsample_size; } set { subsample_size = value; } }

        protected ushort subsample_size0;
        public ushort SubsampleSize0 { get { return subsample_size0; } set { subsample_size0 = value; } }

        protected byte subsample_priority;
        public byte SubsamplePriority { get { return subsample_priority; } set { subsample_priority = value; } }

        protected byte discardable;
        public byte Discardable { get { return discardable; } set { discardable = value; } }

        protected uint codec_specific_parameters;
        public uint CodecSpecificParameters { get { return codec_specific_parameters; } set { codec_specific_parameters = value; } }

        public SubSampleInformationBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.entry_count);


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_delta);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.subsample_count);

                if (subsample_count > 0)
                {

                    for (int j = 0; j < subsample_count; j++)
                    {

                        if (version == 1)
                        {
                            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.subsample_size);
                        }

                        else
                        {
                            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.subsample_size0);
                        }
                        boxSize += IsoReaderWriter.ReadUInt8(stream, out this.subsample_priority);
                        boxSize += IsoReaderWriter.ReadUInt8(stream, out this.discardable);
                        boxSize += IsoReaderWriter.ReadUInt32(stream, out this.codec_specific_parameters);
                    }
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.entry_count);


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_delta);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.subsample_count);

                if (subsample_count > 0)
                {

                    for (int j = 0; j < subsample_count; j++)
                    {

                        if (version == 1)
                        {
                            boxSize += IsoReaderWriter.WriteUInt32(stream, this.subsample_size);
                        }

                        else
                        {
                            boxSize += IsoReaderWriter.WriteUInt16(stream, this.subsample_size0);
                        }
                        boxSize += IsoReaderWriter.WriteUInt8(stream, this.subsample_priority);
                        boxSize += IsoReaderWriter.WriteUInt8(stream, this.discardable);
                        boxSize += IsoReaderWriter.WriteUInt32(stream, this.codec_specific_parameters);
                    }
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += 32; // sample_delta
                boxSize += 16; // subsample_count

                if (subsample_count > 0)
                {

                    for (int j = 0; j < subsample_count; j++)
                    {

                        if (version == 1)
                        {
                            boxSize += 32; // subsample_size
                        }

                        else
                        {
                            boxSize += 16; // subsample_size0
                        }
                        boxSize += 8; // subsample_priority
                        boxSize += 8; // discardable
                        boxSize += 32; // codec_specific_parameters
                    }
                }
            }
            return boxSize;
        }
    }


    public class TargetOlsProperty : ItemFullProperty
    {
        public override string FourCC { get { return "tols"; } }

        protected ushort target_ols_idx;
        public ushort TargetOlsIdx { get { return target_ols_idx; } set { target_ols_idx = value; } }

        public TargetOlsProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.target_ols_idx);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.target_ols_idx);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // target_ols_idx
            return boxSize;
        }
    }


    public class AutoExposureBracketingEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "aebr"; } }

        protected sbyte exposure_step;
        public sbyte ExposureStep { get { return exposure_step; } set { exposure_step = value; } }

        protected sbyte exposure_numerator;
        public sbyte ExposureNumerator { get { return exposure_numerator; } set { exposure_numerator = value; } }

        public AutoExposureBracketingEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt8(stream, out this.exposure_step);
            boxSize += IsoReaderWriter.ReadInt8(stream, out this.exposure_numerator);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt8(stream, this.exposure_step);
            boxSize += IsoReaderWriter.WriteInt8(stream, this.exposure_numerator);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // exposure_step
            boxSize += 8; // exposure_numerator
            return boxSize;
        }
    }


    public class FlashExposureBracketingEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "afbr"; } }

        protected sbyte flash_exposure_numerator;
        public sbyte FlashExposureNumerator { get { return flash_exposure_numerator; } set { flash_exposure_numerator = value; } }

        protected sbyte flash_exposure_denominator;
        public sbyte FlashExposureDenominator { get { return flash_exposure_denominator; } set { flash_exposure_denominator = value; } }

        public FlashExposureBracketingEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt8(stream, out this.flash_exposure_numerator);
            boxSize += IsoReaderWriter.ReadInt8(stream, out this.flash_exposure_denominator);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt8(stream, this.flash_exposure_numerator);
            boxSize += IsoReaderWriter.WriteInt8(stream, this.flash_exposure_denominator);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // flash_exposure_numerator
            boxSize += 8; // flash_exposure_denominator
            return boxSize;
        }
    }


    public class AccessibilityTextProperty : ItemFullProperty
    {
        public override string FourCC { get { return "altt"; } }

        protected string alt_text;
        public string AltText { get { return alt_text; } set { alt_text = value; } }

        protected string alt_lang;
        public string AltLang { get { return alt_lang; } set { alt_lang = value; } }

        public AccessibilityTextProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadString(stream, out this.alt_text);
            boxSize += IsoReaderWriter.ReadString(stream, out this.alt_lang);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteString(stream, this.alt_text);
            boxSize += IsoReaderWriter.WriteString(stream, this.alt_lang);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)alt_text.Length * 8; // alt_text
            boxSize += (ulong)alt_lang.Length * 8; // alt_lang
            return boxSize;
        }
    }


    public class CreationTimeProperty : ItemFullProperty
    {
        public override string FourCC { get { return "crtt"; } }

        protected ulong creation_time;
        public ulong CreationTime { get { return creation_time; } set { creation_time = value; } }

        public CreationTimeProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.creation_time);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.creation_time);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // creation_time
            return boxSize;
        }
    }


    public class DepthOfFieldBracketingEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "dobr"; } }

        protected sbyte f_stop_numerator;
        public sbyte FStopNumerator { get { return f_stop_numerator; } set { f_stop_numerator = value; } }

        protected sbyte f_stop_denominator;
        public sbyte FStopDenominator { get { return f_stop_denominator; } set { f_stop_denominator = value; } }

        public DepthOfFieldBracketingEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt8(stream, out this.f_stop_numerator);
            boxSize += IsoReaderWriter.ReadInt8(stream, out this.f_stop_denominator);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt8(stream, this.f_stop_numerator);
            boxSize += IsoReaderWriter.WriteInt8(stream, this.f_stop_denominator);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // f_stop_numerator
            boxSize += 8; // f_stop_denominator
            return boxSize;
        }
    }


    public class FocusBracketingEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "fobr"; } }

        protected ushort focus_distance_numerator;
        public ushort FocusDistanceNumerator { get { return focus_distance_numerator; } set { focus_distance_numerator = value; } }

        protected ushort focus_distance_denominator;
        public ushort FocusDistanceDenominator { get { return focus_distance_denominator; } set { focus_distance_denominator = value; } }

        public FocusBracketingEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.focus_distance_numerator);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.focus_distance_denominator);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.focus_distance_numerator);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.focus_distance_denominator);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // focus_distance_numerator
            boxSize += 16; // focus_distance_denominator
            return boxSize;
        }
    }


    public class ImageScaling : ItemFullProperty
    {
        public override string FourCC { get { return "iscl"; } }

        protected ushort target_width_numerator;
        public ushort TargetWidthNumerator { get { return target_width_numerator; } set { target_width_numerator = value; } }

        protected ushort target_width_denominator;
        public ushort TargetWidthDenominator { get { return target_width_denominator; } set { target_width_denominator = value; } }

        protected ushort target_height_numerator;
        public ushort TargetHeightNumerator { get { return target_height_numerator; } set { target_height_numerator = value; } }

        protected ushort target_height_denominator;
        public ushort TargetHeightDenominator { get { return target_height_denominator; } set { target_height_denominator = value; } }

        public ImageScaling()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.target_width_numerator);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.target_width_denominator);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.target_height_numerator);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.target_height_denominator);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.target_width_numerator);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.target_width_denominator);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.target_height_numerator);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.target_height_denominator);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // target_width_numerator
            boxSize += 16; // target_width_denominator
            boxSize += 16; // target_height_numerator
            boxSize += 16; // target_height_denominator
            return boxSize;
        }
    }


    public class ModificationTimeProperty : ItemFullProperty
    {
        public override string FourCC { get { return "mdft"; } }

        protected ulong modification_time;
        public ulong ModificationTime { get { return modification_time; } set { modification_time = value; } }

        public ModificationTimeProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt64(stream, out this.modification_time);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt64(stream, this.modification_time);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // modification_time
            return boxSize;
        }
    }


    public class PanoramaEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "pano"; } }

        protected ushort frame_number;
        public ushort FrameNumber { get { return frame_number; } set { frame_number = value; } }

        public PanoramaEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.frame_number);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.frame_number);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // frame_number
            return boxSize;
        }
    }


    public class RequiredReferenceTypesProperty : ItemFullProperty
    {
        public override string FourCC { get { return "rref"; } }

        protected byte reference_type_count;
        public byte ReferenceTypeCount { get { return reference_type_count; } set { reference_type_count = value; } }

        protected uint[] reference_type;
        public uint[] ReferenceType { get { return reference_type; } set { reference_type = value; } }

        public RequiredReferenceTypesProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.reference_type_count);

            for (int i = 0; i < reference_type_count; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.reference_type[i]);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.reference_type_count);

            for (int i = 0; i < reference_type_count; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.reference_type[i]);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // reference_type_count

            for (int i = 0; i < reference_type_count; i++)
            {
                boxSize += 32; // reference_type
            }
            return boxSize;
        }
    }


    public class UserDescriptionProperty : ItemFullProperty
    {
        public override string FourCC { get { return "udes"; } }

        protected string lang;
        public string Lang { get { return lang; } set { lang = value; } }

        protected string name;
        public string Name { get { return name; } set { name = value; } }

        protected string description;
        public string Description { get { return description; } set { description = value; } }

        protected string tags;
        public string Tags { get { return tags; } set { tags = value; } }

        public UserDescriptionProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadString(stream, out this.lang);
            boxSize += IsoReaderWriter.ReadString(stream, out this.name);
            boxSize += IsoReaderWriter.ReadString(stream, out this.description);
            boxSize += IsoReaderWriter.ReadString(stream, out this.tags);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteString(stream, this.lang);
            boxSize += IsoReaderWriter.WriteString(stream, this.name);
            boxSize += IsoReaderWriter.WriteString(stream, this.description);
            boxSize += IsoReaderWriter.WriteString(stream, this.tags);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)lang.Length * 8; // lang
            boxSize += (ulong)name.Length * 8; // name
            boxSize += (ulong)description.Length * 8; // description
            boxSize += (ulong)tags.Length * 8; // tags
            return boxSize;
        }
    }


    public class WhiteBalanceBracketingEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "wbbr"; } }

        protected ushort blue_amber;
        public ushort BlueAmber { get { return blue_amber; } set { blue_amber = value; } }

        protected sbyte green_magenta;
        public sbyte GreenMagenta { get { return green_magenta; } set { green_magenta = value; } }

        public WhiteBalanceBracketingEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.blue_amber);
            boxSize += IsoReaderWriter.ReadInt8(stream, out this.green_magenta);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.blue_amber);
            boxSize += IsoReaderWriter.WriteInt8(stream, this.green_magenta);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // blue_amber
            boxSize += 8; // green_magenta
            return boxSize;
        }
    }


    public class ContentColourVolumeBox1 : Box
    {
        public override string FourCC { get { return "cclv"; } }

        protected bool reserved1 = false;  //  ccv_cancel_flag
        public bool Reserved1 { get { return reserved1; } set { reserved1 = value; } }

        protected bool reserved2 = false;  //  ccv_persistence_flag
        public bool Reserved2 { get { return reserved2; } set { reserved2 = value; } }

        protected bool ccv_primaries_present_flag;
        public bool CcvPrimariesPresentFlag { get { return ccv_primaries_present_flag; } set { ccv_primaries_present_flag = value; } }

        protected bool ccv_min_luminance_value_present_flag;
        public bool CcvMinLuminanceValuePresentFlag { get { return ccv_min_luminance_value_present_flag; } set { ccv_min_luminance_value_present_flag = value; } }

        protected bool ccv_max_luminance_value_present_flag;
        public bool CcvMaxLuminanceValuePresentFlag { get { return ccv_max_luminance_value_present_flag; } set { ccv_max_luminance_value_present_flag = value; } }

        protected bool ccv_avg_luminance_value_present_flag;
        public bool CcvAvgLuminanceValuePresentFlag { get { return ccv_avg_luminance_value_present_flag; } set { ccv_avg_luminance_value_present_flag = value; } }

        protected byte ccv_reserved_zero_2bits = 0;
        public byte CcvReservedZero2bits { get { return ccv_reserved_zero_2bits; } set { ccv_reserved_zero_2bits = value; } }

        protected int[] ccv_primaries_x;
        public int[] CcvPrimariesX { get { return ccv_primaries_x; } set { ccv_primaries_x = value; } }

        protected int[] ccv_primaries_y;
        public int[] CcvPrimariesY { get { return ccv_primaries_y; } set { ccv_primaries_y = value; } }

        protected uint ccv_min_luminance_value;
        public uint CcvMinLuminanceValue { get { return ccv_min_luminance_value; } set { ccv_min_luminance_value = value; } }

        protected uint ccv_max_luminance_value;
        public uint CcvMaxLuminanceValue { get { return ccv_max_luminance_value; } set { ccv_max_luminance_value = value; } }

        protected uint ccv_avg_luminance_value;
        public uint CcvAvgLuminanceValue { get { return ccv_avg_luminance_value; } set { ccv_avg_luminance_value = value; } }

        public ContentColourVolumeBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.reserved1); // ccv_cancel_flag
            boxSize += IsoReaderWriter.ReadBit(stream, out this.reserved2); // ccv_persistence_flag
            boxSize += IsoReaderWriter.ReadBit(stream, out this.ccv_primaries_present_flag);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.ccv_min_luminance_value_present_flag);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.ccv_max_luminance_value_present_flag);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.ccv_avg_luminance_value_present_flag);
            boxSize += IsoReaderWriter.ReadBits(stream, 2, out this.ccv_reserved_zero_2bits);

            if (ccv_primaries_present_flag)
            {

                for (int c = 0; c < 3; c++)
                {
                    boxSize += IsoReaderWriter.ReadInt32(stream, out this.ccv_primaries_x[c]);
                    boxSize += IsoReaderWriter.ReadInt32(stream, out this.ccv_primaries_y[c]);
                }
            }

            if (ccv_min_luminance_value_present_flag)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.ccv_min_luminance_value);
            }

            if (ccv_max_luminance_value_present_flag)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.ccv_max_luminance_value);
            }

            if (ccv_avg_luminance_value_present_flag)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.ccv_avg_luminance_value);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBit(stream, this.reserved1); // ccv_cancel_flag
            boxSize += IsoReaderWriter.WriteBit(stream, this.reserved2); // ccv_persistence_flag
            boxSize += IsoReaderWriter.WriteBit(stream, this.ccv_primaries_present_flag);
            boxSize += IsoReaderWriter.WriteBit(stream, this.ccv_min_luminance_value_present_flag);
            boxSize += IsoReaderWriter.WriteBit(stream, this.ccv_max_luminance_value_present_flag);
            boxSize += IsoReaderWriter.WriteBit(stream, this.ccv_avg_luminance_value_present_flag);
            boxSize += IsoReaderWriter.WriteBits(stream, 2, this.ccv_reserved_zero_2bits);

            if (ccv_primaries_present_flag)
            {

                for (int c = 0; c < 3; c++)
                {
                    boxSize += IsoReaderWriter.WriteInt32(stream, this.ccv_primaries_x[c]);
                    boxSize += IsoReaderWriter.WriteInt32(stream, this.ccv_primaries_y[c]);
                }
            }

            if (ccv_min_luminance_value_present_flag)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.ccv_min_luminance_value);
            }

            if (ccv_max_luminance_value_present_flag)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.ccv_max_luminance_value);
            }

            if (ccv_avg_luminance_value_present_flag)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.ccv_avg_luminance_value);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // reserved1
            boxSize += 1; // reserved2
            boxSize += 1; // ccv_primaries_present_flag
            boxSize += 1; // ccv_min_luminance_value_present_flag
            boxSize += 1; // ccv_max_luminance_value_present_flag
            boxSize += 1; // ccv_avg_luminance_value_present_flag
            boxSize += 2; // ccv_reserved_zero_2bits

            if (ccv_primaries_present_flag)
            {

                for (int c = 0; c < 3; c++)
                {
                    boxSize += 32; // ccv_primaries_x
                    boxSize += 32; // ccv_primaries_y
                }
            }

            if (ccv_min_luminance_value_present_flag)
            {
                boxSize += 32; // ccv_min_luminance_value
            }

            if (ccv_max_luminance_value_present_flag)
            {
                boxSize += 32; // ccv_max_luminance_value
            }

            if (ccv_avg_luminance_value_present_flag)
            {
                boxSize += 32; // ccv_avg_luminance_value
            }
            return boxSize;
        }
    }


    public class MasteringDisplayColourVolumeBox1 : Box
    {
        public override string FourCC { get { return "mdcv"; } }

        protected ushort display_primaries_x;
        public ushort DisplayPrimariesX { get { return display_primaries_x; } set { display_primaries_x = value; } }

        protected ushort display_primaries_y;
        public ushort DisplayPrimariesY { get { return display_primaries_y; } set { display_primaries_y = value; } }

        protected ushort white_point_x;
        public ushort WhitePointX { get { return white_point_x; } set { white_point_x = value; } }

        protected ushort white_point_y;
        public ushort WhitePointY { get { return white_point_y; } set { white_point_y = value; } }

        protected uint max_display_mastering_luminance;
        public uint MaxDisplayMasteringLuminance { get { return max_display_mastering_luminance; } set { max_display_mastering_luminance = value; } }

        protected uint min_display_mastering_luminance;
        public uint MinDisplayMasteringLuminance { get { return min_display_mastering_luminance; } set { min_display_mastering_luminance = value; } }

        public MasteringDisplayColourVolumeBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            for (int c = 0; c < 3; c++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.display_primaries_x);
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.display_primaries_y);
            }
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.white_point_x);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.white_point_y);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.max_display_mastering_luminance);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.min_display_mastering_luminance);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            for (int c = 0; c < 3; c++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.display_primaries_x);
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.display_primaries_y);
            }
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.white_point_x);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.white_point_y);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.max_display_mastering_luminance);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.min_display_mastering_luminance);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            for (int c = 0; c < 3; c++)
            {
                boxSize += 16; // display_primaries_x
                boxSize += 16; // display_primaries_y
            }
            boxSize += 16; // white_point_x
            boxSize += 16; // white_point_y
            boxSize += 32; // max_display_mastering_luminance
            boxSize += 32; // min_display_mastering_luminance
            return boxSize;
        }
    }


    public class ContentLightLevelBox1 : Box
    {
        public override string FourCC { get { return "clli"; } }

        protected ushort max_content_light_level;
        public ushort MaxContentLightLevel { get { return max_content_light_level; } set { max_content_light_level = value; } }

        protected ushort max_pic_average_light_level;
        public ushort MaxPicAverageLightLevel { get { return max_pic_average_light_level; } set { max_pic_average_light_level = value; } }

        public ContentLightLevelBox1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.max_content_light_level);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.max_pic_average_light_level);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.max_content_light_level);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.max_pic_average_light_level);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // max_content_light_level
            boxSize += 16; // max_pic_average_light_level
            return boxSize;
        }
    }


    public class WipeTransitionEffectProperty : ItemFullProperty
    {
        public override string FourCC { get { return "wipe"; } }

        protected byte transition_direction;
        public byte TransitionDirection { get { return transition_direction; } set { transition_direction = value; } }

        public WipeTransitionEffectProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.transition_direction);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.transition_direction);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // transition_direction
            return boxSize;
        }
    }


    public class ZoomTransitionEffectProperty : ItemFullProperty
    {
        public override string FourCC { get { return "zoom"; } }

        protected bool transition_direction;
        public bool TransitionDirection { get { return transition_direction; } set { transition_direction = value; } }

        protected byte transition_shape;
        public byte TransitionShape { get { return transition_shape; } set { transition_shape = value; } }

        public ZoomTransitionEffectProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadBit(stream, out this.transition_direction);
            boxSize += IsoReaderWriter.ReadBits(stream, 7, out this.transition_shape);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteBit(stream, this.transition_direction);
            boxSize += IsoReaderWriter.WriteBits(stream, 7, this.transition_shape);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // transition_direction
            boxSize += 7; // transition_shape
            return boxSize;
        }
    }


    public class FadeTransitionEffectProperty : ItemFullProperty
    {
        public override string FourCC { get { return "fade"; } }

        protected byte transition_direction;
        public byte TransitionDirection { get { return transition_direction; } set { transition_direction = value; } }

        public FadeTransitionEffectProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.transition_direction);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.transition_direction);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // transition_direction
            return boxSize;
        }
    }


    public class SplitTransitionEffectProperty : ItemFullProperty
    {
        public override string FourCC { get { return "splt"; } }

        protected byte transition_direction;
        public byte TransitionDirection { get { return transition_direction; } set { transition_direction = value; } }

        public SplitTransitionEffectProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.transition_direction);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.transition_direction);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // transition_direction
            return boxSize;
        }
    }


    public class SuggestedTransitionPeriodProperty : ItemFullProperty
    {
        public override string FourCC { get { return "stpe"; } }

        protected byte transition_period;
        public byte TransitionPeriod { get { return transition_period; } set { transition_period = value; } }

        public SuggestedTransitionPeriodProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.transition_period);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.transition_period);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // transition_period
            return boxSize;
        }
    }


    public class SuggestedTimeDisplayDurationProperty : ItemFullProperty
    {
        public override string FourCC { get { return "ssld"; } }

        protected ushort duration;
        public ushort Duration { get { return duration; } set { duration = value; } }

        public SuggestedTimeDisplayDurationProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.duration);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.duration);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // duration
            return boxSize;
        }
    }


    public class MaskConfigurationProperty : ItemFullProperty
    {
        public override string FourCC { get { return "mskC"; } }

        protected byte bits_per_pixel;
        public byte BitsPerPixel { get { return bits_per_pixel; } set { bits_per_pixel = value; } }

        public MaskConfigurationProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.bits_per_pixel);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.bits_per_pixel);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // bits_per_pixel
            return boxSize;
        }
    }


    public class VvcSubpicIDProperty : ItemFullProperty
    {
        public override string FourCC { get { return "spid"; } }

        protected VvcSubpicIDEntry sid_info;  //  specified in ISO/IEC 14496-15
        public VvcSubpicIDEntry SidInfo { get { return sid_info; } set { sid_info = value; } }

        public VvcSubpicIDProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.sid_info); // specified in ISO/IEC 14496-15
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.sid_info); // specified in ISO/IEC 14496-15
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(sid_info); // sid_info
            return boxSize;
        }
    }


    public class VvcSubpicOrderProperty : ItemFullProperty
    {
        public override string FourCC { get { return "spor"; } }

        protected VvcSubpicOrderEntry sor_info;  //  specified in ISO/IEC 14496-15
        public VvcSubpicOrderEntry SorInfo { get { return sor_info; } set { sor_info = value; } }

        public VvcSubpicOrderProperty()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadClass(stream, out this.sor_info); // specified in ISO/IEC 14496-15
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteClass(stream, this.sor_info); // specified in ISO/IEC 14496-15
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoReaderWriter.CalculateClassSize(sor_info); // sor_info
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBox2 : Box
    {
        public override string FourCC { get { return "auxl"; } }

        protected ushort from_item_ID;
        public ushort FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected ushort to_item_ID;
        public ushort ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBox2()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 16; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBoxLarge2 : Box
    {
        public override string FourCC { get { return "auxl"; } }

        protected uint from_item_ID;
        public uint FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected uint to_item_ID;
        public uint ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBoxLarge2()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 32; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBox3 : Box
    {
        public override string FourCC { get { return "base"; } }

        protected ushort from_item_ID;
        public ushort FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected ushort to_item_ID;
        public ushort ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBox3()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 16; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBoxLarge3 : Box
    {
        public override string FourCC { get { return "base"; } }

        protected uint from_item_ID;
        public uint FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected uint to_item_ID;
        public uint ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBoxLarge3()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 32; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBox4 : Box
    {
        public override string FourCC { get { return "dimg"; } }

        protected ushort from_item_ID;
        public ushort FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected ushort to_item_ID;
        public ushort ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBox4()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 16; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBoxLarge4 : Box
    {
        public override string FourCC { get { return "dimg"; } }

        protected uint from_item_ID;
        public uint FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected uint to_item_ID;
        public uint ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBoxLarge4()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 32; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBox5 : Box
    {
        public override string FourCC { get { return "dpnd"; } }

        protected ushort from_item_ID;
        public ushort FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected ushort to_item_ID;
        public ushort ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBox5()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 16; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBoxLarge5 : Box
    {
        public override string FourCC { get { return "dpnd"; } }

        protected uint from_item_ID;
        public uint FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected uint to_item_ID;
        public uint ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBoxLarge5()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 32; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBox6 : Box
    {
        public override string FourCC { get { return "exbl"; } }

        protected ushort from_item_ID;
        public ushort FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected ushort to_item_ID;
        public ushort ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBox6()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 16; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBoxLarge6 : Box
    {
        public override string FourCC { get { return "exbl"; } }

        protected uint from_item_ID;
        public uint FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected uint to_item_ID;
        public uint ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBoxLarge6()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 32; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBox7 : Box
    {
        public override string FourCC { get { return "grid"; } }

        protected ushort from_item_ID;
        public ushort FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected ushort to_item_ID;
        public ushort ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBox7()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 16; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBoxLarge7 : Box
    {
        public override string FourCC { get { return "grid"; } }

        protected uint from_item_ID;
        public uint FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected uint to_item_ID;
        public uint ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBoxLarge7()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 32; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBox8 : Box
    {
        public override string FourCC { get { return "thmb"; } }

        protected ushort from_item_ID;
        public ushort FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected ushort to_item_ID;
        public ushort ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBox8()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 16; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBoxLarge8 : Box
    {
        public override string FourCC { get { return "thmb"; } }

        protected uint from_item_ID;
        public uint FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected uint to_item_ID;
        public uint ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBoxLarge8()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 32; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBox9 : Box
    {
        public override string FourCC { get { return "pred"; } }

        protected ushort from_item_ID;
        public ushort FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected ushort to_item_ID;
        public ushort ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBox9()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 16; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBoxLarge9 : Box
    {
        public override string FourCC { get { return "pred"; } }

        protected uint from_item_ID;
        public uint FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected uint to_item_ID;
        public uint ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBoxLarge9()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 32; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBox10 : Box
    {
        public override string FourCC { get { return "tbas"; } }

        protected ushort from_item_ID;
        public ushort FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected ushort to_item_ID;
        public ushort ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBox10()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt16(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt16(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 16; // to_item_ID
            }
            return boxSize;
        }
    }


    public class SingleItemTypeReferenceBoxLarge10 : Box
    {
        public override string FourCC { get { return "tbas"; } }

        protected uint from_item_ID;
        public uint FromItemID { get { return from_item_ID; } set { from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return reference_count; } set { reference_count = value; } }

        protected uint to_item_ID;
        public uint ToItemID { get { return to_item_ID; } set { to_item_ID = value; } }

        public SingleItemTypeReferenceBoxLarge10()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.from_item_ID);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.from_item_ID);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 32; // to_item_ID
            }
            return boxSize;
        }
    }


    public class VisualEquivalenceEntry : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "eqiv"; } }

        protected short time_offset;
        public short TimeOffset { get { return time_offset; } set { time_offset = value; } }

        protected ushort timescale_multiplier;
        public ushort TimescaleMultiplier { get { return timescale_multiplier; } set { timescale_multiplier = value; } }

        public VisualEquivalenceEntry()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt16(stream, out this.time_offset);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.timescale_multiplier);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt16(stream, this.time_offset);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.timescale_multiplier);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // time_offset
            boxSize += 16; // timescale_multiplier
            return boxSize;
        }
    }


    public class DirectReferenceSamplesList : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "refs"; } }

        protected uint sample_id;
        public uint SampleId { get { return sample_id; } set { sample_id = value; } }

        protected byte num_direct_reference_samples;
        public byte NumDirectReferenceSamples { get { return num_direct_reference_samples; } set { num_direct_reference_samples = value; } }

        protected uint direct_reference_sample_id;
        public uint DirectReferenceSampleId { get { return direct_reference_sample_id; } set { direct_reference_sample_id = value; } }

        public DirectReferenceSamplesList()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt32(stream, out this.sample_id);
            boxSize += IsoReaderWriter.ReadUInt8(stream, out this.num_direct_reference_samples);

            for (int i = 0; i < num_direct_reference_samples; i++)
            {
                boxSize += IsoReaderWriter.ReadUInt32(stream, out this.direct_reference_sample_id);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt32(stream, this.sample_id);
            boxSize += IsoReaderWriter.WriteUInt8(stream, this.num_direct_reference_samples);

            for (int i = 0; i < num_direct_reference_samples; i++)
            {
                boxSize += IsoReaderWriter.WriteUInt32(stream, this.direct_reference_sample_id);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // sample_id
            boxSize += 8; // num_direct_reference_samples

            for (int i = 0; i < num_direct_reference_samples; i++)
            {
                boxSize += 32; // direct_reference_sample_id
            }
            return boxSize;
        }
    }


    public class AutoExposureBracketingEntry1 : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "aebr"; } }

        protected sbyte exposure_step;
        public sbyte ExposureStep { get { return exposure_step; } set { exposure_step = value; } }

        protected sbyte exposure_numerator;
        public sbyte ExposureNumerator { get { return exposure_numerator; } set { exposure_numerator = value; } }

        public AutoExposureBracketingEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt8(stream, out this.exposure_step);
            boxSize += IsoReaderWriter.ReadInt8(stream, out this.exposure_numerator);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt8(stream, this.exposure_step);
            boxSize += IsoReaderWriter.WriteInt8(stream, this.exposure_numerator);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // exposure_step
            boxSize += 8; // exposure_numerator
            return boxSize;
        }
    }


    public class FlashExposureBracketingEntry1 : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "afbr"; } }

        protected sbyte flash_exposure_numerator;
        public sbyte FlashExposureNumerator { get { return flash_exposure_numerator; } set { flash_exposure_numerator = value; } }

        protected sbyte flash_exposure_denominator;
        public sbyte FlashExposureDenominator { get { return flash_exposure_denominator; } set { flash_exposure_denominator = value; } }

        public FlashExposureBracketingEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt8(stream, out this.flash_exposure_numerator);
            boxSize += IsoReaderWriter.ReadInt8(stream, out this.flash_exposure_denominator);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt8(stream, this.flash_exposure_numerator);
            boxSize += IsoReaderWriter.WriteInt8(stream, this.flash_exposure_denominator);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // flash_exposure_numerator
            boxSize += 8; // flash_exposure_denominator
            return boxSize;
        }
    }


    public class DepthOfFieldBracketingEntry1 : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "dobr"; } }

        protected sbyte f_stop_numerator;
        public sbyte FStopNumerator { get { return f_stop_numerator; } set { f_stop_numerator = value; } }

        protected sbyte f_stop_denominator;
        public sbyte FStopDenominator { get { return f_stop_denominator; } set { f_stop_denominator = value; } }

        public DepthOfFieldBracketingEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadInt8(stream, out this.f_stop_numerator);
            boxSize += IsoReaderWriter.ReadInt8(stream, out this.f_stop_denominator);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteInt8(stream, this.f_stop_numerator);
            boxSize += IsoReaderWriter.WriteInt8(stream, this.f_stop_denominator);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // f_stop_numerator
            boxSize += 8; // f_stop_denominator
            return boxSize;
        }
    }


    public class FocusBracketingEntry1 : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "fobr"; } }

        protected ushort focus_distance_numerator;
        public ushort FocusDistanceNumerator { get { return focus_distance_numerator; } set { focus_distance_numerator = value; } }

        protected ushort focus_distance_denominator;
        public ushort FocusDistanceDenominator { get { return focus_distance_denominator; } set { focus_distance_denominator = value; } }

        public FocusBracketingEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.focus_distance_numerator);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.focus_distance_denominator);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.focus_distance_numerator);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.focus_distance_denominator);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // focus_distance_numerator
            boxSize += 16; // focus_distance_denominator
            return boxSize;
        }
    }


    public class PanoramaEntry1 : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "pano"; } }

        protected ushort frame_number;
        public ushort FrameNumber { get { return frame_number; } set { frame_number = value; } }

        public PanoramaEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.frame_number);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.frame_number);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // frame_number
            return boxSize;
        }
    }


    public class WhiteBalanceBracketingEntry1 : VisualSampleGroupEntry
    {
        public override string FourCC { get { return "wbbr"; } }

        protected ushort blue_amber;
        public ushort BlueAmber { get { return blue_amber; } set { blue_amber = value; } }

        protected sbyte green_magenta;
        public sbyte GreenMagenta { get { return green_magenta; } set { green_magenta = value; } }

        public WhiteBalanceBracketingEntry1()
        { }

        public async override Task<ulong> ReadAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += IsoReaderWriter.ReadUInt16(stream, out this.blue_amber);
            boxSize += IsoReaderWriter.ReadInt8(stream, out this.green_magenta);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(Stream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += IsoReaderWriter.WriteUInt16(stream, this.blue_amber);
            boxSize += IsoReaderWriter.WriteInt8(stream, this.green_magenta);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // blue_amber
            boxSize += 8; // green_magenta
            return boxSize;
        }
    }



}
