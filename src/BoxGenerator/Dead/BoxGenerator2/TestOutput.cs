using System;
using System.Threading.Tasks;

namespace BoxGenerator2
{
    public class BoxFactory
    {
        public static Box CreateBox(string fourCC)
        {
            switch (fourCC)
            {
                case "3dpr": return new MVDDepthResolutionBox();
                case "3sib": return new MVDScalabilityInformationSEIBox();
                case "a1lx": return new AV1LayeredImageIndexingProperty();
                case "a1op": return new OperatingPointSelectorProperty();
                case "a3d1": return new A3DSampleEntry();
                case "a3d2": return new A3DSampleEntry_a3d2(); // TODO: fix duplicate
                case "a3d3": return new A3DSampleEntry_a3d3(); // TODO: fix duplicate
                case "a3d4": return new A3DSampleEntry_a3d4(); // TODO: fix duplicate
                case "a3dC": return new A3DConfigurationBox();
                case "acgl": return new SubpicCommonGroupBox();
                case "aebr": return new AutoExposureBracketingEntry();
                case "afbr": return new FlashExposureBracketingEntry();
                case "alou": return new AlbumLoudnessInfo();
                case "alst": return new AlternativeStartupEntry();
                case "alte": return new TrackGroupTypeBox_alte(); // TODO: fix duplicate
                case "altt": return new AccessibilityTextProperty();
                case "amgl": return new SubpicMultipleGroupsBox();
                case "amve": return new AmbientViewingEnvironmentBox();
                case "assp": return new AlternativeStartupSequencePropertiesBox();
                case "aud ": return new AUDSampleEntry();
                case "auxC": return new AuxiliaryTypeProperty();
                case "auxi": return new AuxiliaryTypeInfoBox();
                case "av01": return new AV1SampleEntry();
                case "av1C": return new AV1CodecConfigurationBox();
                case "av1f": return new AV1ForwardKeyFrameSampleGroupEntry();
                case "av1M": return new AV1MetadataSampleGroupEntry();
                case "av1s": return new AV1SwitchFrameSampleGroupEntry();
                case "avc1": throw new NotSupportedException("'avc1' is ambiguous in between AVCMVCSampleEntry and AVCSVCSampleEntry");
                case "avc2": throw new NotSupportedException("'avc2' is ambiguous in between AVC2MVCSampleEntry and AVC2SVCSampleEntry");
                case "avc3": throw new NotSupportedException("'avc3' is ambiguous in between AVCMVCSampleEntry_avc3 and AVCSVCSampleEntry_avc3");
                case "avc4": throw new NotSupportedException("'avc4' is ambiguous in between AVC2MVCSampleEntry_avc4 and AVC2SVCSampleEntry_avc4");
                case "avcC": return new AVCConfigurationBox();
                case "avcp": return new AVCParameterSampleEntry();
                case "avll": return new AVCLayerEntry();
                case "avss": return new AVCSubSequenceEntry();
                case "brnd": return new BrandProperty();
                case "btrt": return new BitRateBox();
                case "buff": return new BufferingBox();
                case "bxml": return new BinaryXMLBox();
                case "casg": return new CleanApertureEntry();
                case "cclv": return new ContentColourVolumeBox();
                case "ccst": return new CodingConstraintsBox();
                case "chnl": return new ChannelLayout();
                case "cinf": return new CompleteTrackInfoBox();
                case "clap": return new CleanApertureBox();
                case "clli": return new ContentLightLevelBox();
                case "co64": return new ChunkLargeOffsetBox();
                case "colr": return new ColourInformationBox();
                case "cprt": return new CopyrightBox();
                case "crtt": return new CreationTimeProperty();
                case "csch": return new CompatibleSchemeTypeBox();
                case "csgp": return new CompactSampleToGroupBox();
                case "cslg": return new CompositionToDecodeBox();
                case "cstg": return new TrackGroupTypeBox_cstg(); // TODO: fix duplicate
                case "ctts": return new CompositionOffsetBox();
                case "dcfi": return new DecodingCapabilityInformation();
                case "dhec": return new DefaultHevcExtractorConstructorBox();
                case "dimm": return new hintimmediateBytesSent();
                case "dinf": return new DataInformationBox();
                case "dmax": return new hintlongestpacket();
                case "dmed": return new hintmediaBytesSent();
                case "dmix": return new DownMixInstructions();
                case "dobr": return new DepthOfFieldBracketingEntry();
                case "dOps": return new OpusSpecificBox();
                case "drap": return new VisualDRAPEntry();
                case "dref": return new DataReferenceBox();
                case "drep": return new hintrepeatedBytesSent();
                case "dtrt": return new DecodeRetimingEntry();
                case "ecam": return new ExtrinsicCameraParametersBox();
                case "edts": return new EditBox();
                case "elng": return new ExtendedLanguageBox();
                case "elst": return new EditListBox();
                case "encv": return new GenericSampleEntry();
                case "eob ": return new EndOfBitstreamSampleEntry();
                case "eos ": return new EndOfSequenceSampleEntry();
                case "eqiv": return new VisualEquivalenceEntry();
                case "etyp": return new ExtendedTypeBox();
                case "evc1": return new EVCSampleEntry();
                case "evcC": return new EVCConfigurationBox();
                case "evs1": return new EVCSliceComponentTrackSampleEntry();
                case "evs2": return new EVCSliceComponentTrackSampleEntry_evs2(); // TODO: fix duplicate
                case "evsC": return new EVCSliceComponentTrackConfigurationBox();
                case "exte": return new MetaDataExtensionsBox();
                case "fade": return new FadeTransitionEffectProperty();
                case "fdp ": return new FDHintSampleEntry();
                case "fecr": return new FECReservoirBox();
                case "fiin": return new FDItemInformationBox();
                case "fire": return new FileReservoirBox();
                case "fobr": return new FocusBracketingEntry();
                case "fpar": return new FilePartitionBox();
                case "free": return new FreeSpaceBox();
                case "frma": return new OriginalFormatBox();
                case "ftyp": return new FileTypeBox();
                case "gitn": return new GroupIdToNameBox();
                case "grpl": return new GroupsListBox();
                case "hdlr": return new HandlerBox();
                case "hev1": return new HEVCSampleEntry_hev1(); // TODO: fix duplicate
                case "hev2": return new HEVCSampleEntry_hev2(); // TODO: fix duplicate
                case "hev3": return new HEVCSampleEntry_hev3(); // TODO: fix duplicate
                case "hinf": return new hintstatisticsbox();
                case "hmhd": return new HintMediaHeaderBox();
                case "hnti": throw new NotSupportedException("'hnti' is ambiguous in between trackhintinformation and moviehintinformation");
                case "hvc1": return new HEVCSampleEntry();
                case "hvc2": return new HEVCSampleEntry_hvc2(); // TODO: fix duplicate
                case "hvc3": return new HEVCSampleEntry_hvc3(); // TODO: fix duplicate
                case "hvcC": return new HEVCConfigurationBox();
                case "hvt1": return new HEVCTileSampleEntry();
                case "hvt2": return new HEVCSliceSegmentDataSampleEntry();
                case "hvt3": return new HEVCTileSSHInfoSampleEntry();
                case "hvtC": return new HEVCTileConfigurationBox();
                case "icam": return new IntrinsicCameraParametersBox();
                case "icpv": return new IncompleteAVCSampleEntry();
                case "idat": return new ItemDataBox();
                case "iinf": return new ItemInfoBox();
                case "iloc": return new ItemLocationBox();
                case "imda": return new IdentifiedMediaDataBox();
                case "imdt": return new DataEntryImdaBox();
                case "imir": return new ImageMirror();
                case "infe": return new ItemInfoEntry();
                case "ipco": return new ItemPropertyContainerBox();
                case "ipma": return new ItemPropertyAssociationBox();
                case "ipro": return new ItemProtectionBox();
                case "iprp": return new ItemPropertiesBox();
                case "iref": return new ItemReferenceBox();
                case "iroi": return new IroiInfoBox();
                case "irot": return new ImageRotation();
                case "iscl": return new ImageScaling();
                case "ispe": return new ImageSpatialExtentsProperty();
                case "jpgC": return new JPEGConfigurationBox();
                case "keyd": return new MetaDataKeyDeclarationBox();
                case "keyi": return new MetaDataInlineKeysPresentBox();
                case "keys": return new MetaDataKeyTableBox();
                case "kind": return new KindBox();
                case "lbli": return new LhvcExternalBaseLayerInfo();
                case "ldep": return new TierDependencyBox();
                case "leva": return new LevelAssignmentBox();
                case "lhe1": return new LHEVCSampleEntry_lhe1(); // TODO: fix duplicate
                case "lht1": return new LHEVCTileSampleEntry();
                case "lhv1": return new LHEVCSampleEntry();
                case "lhvC": return new LHEVCConfigurationBox();
                case "linf": return new LayerInfoGroupEntry();
                case "loca": return new MetaDataLocaleBox();
                case "lsel": return new LayerSelectorProperty();
                case "ludt": return new LoudnessBox();
                case "m4ds": return new MPEG4ExtensionDescriptorsBox();
                case "maxr": return new hintmaxrate();
                case "md5i": return new MD5IntegrityBox();
                case "mdat": return new MediaDataBox();
                case "mdcv": return new MasteringDisplayColourVolumeBox();
                case "mdft": return new ModificationTimeProperty();
                case "mdhd": return new MediaHeaderBox();
                case "mdia": return new MediaBox();
                case "mebx": return new BoxedMetaDataSampleEntry();
                case "mehd": return new MovieExtendsHeaderBox();
                case "meta": return new MetaBox();
                case "mett": return new TextMetaDataSampleEntry();
                case "metx": return new XMLMetaDataSampleEntry();
                case "mfhd": return new MovieFragmentHeaderBox();
                case "mfra": return new MovieFragmentRandomAccessBox();
                case "mfro": return new MovieFragmentRandomAccessOffsetBox();
                case "minf": return new MediaInformationBox();
                case "minp": return new VvcMixedNALUnitTypePicEntry();
                case "moof": return new CompressedMovieFragmentBox();
                case "moov": return new CompressedMovieBox();
                case "mskC": return new MaskConfigurationProperty();
                case "msrc": return new TrackGroupTypeBox();
                case "mstv": return new MVCSubTrackViewBox();
                case "mvc1": return new MVCSampleEntry();
                case "mvc2": return new MVCSampleEntry_mvc2(); // TODO: fix duplicate
                case "mvc3": return new MVCSampleEntry_mvc3(); // TODO: fix duplicate
                case "mvc4": return new MVCSampleEntry_mvc4(); // TODO: fix duplicate
                case "mvcC": return new MVCConfigurationBox();
                case "mvcg": return new MultiviewGroupBox();
                case "mvci": return new MultiviewInformationBox();
                case "mvcP": return new MVCViewPriorityAssignmentBox();
                case "mvd1": return new MVCDSampleEntry();
                case "mvd2": return new MVCDSampleEntry_mvd2(); // TODO: fix duplicate
                case "mvd3": return new MVCDSampleEntry_mvd3(); // TODO: fix duplicate
                case "mvd4": return new MVCDSampleEntry_mvd4(); // TODO: fix duplicate
                case "mvdC": return new MVCDConfigurationBox();
                case "mvex": return new MovieExtendsBox();
                case "mvhd": return new MovieHeaderBox();
                case "mvif": return new MultiviewGroupEntry();
                case "mvra": return new MultiviewRelationAttributeBox();
                case "nalm": return new NALUMapEntry();
                case "nmhd": return new NullMediaHeaderBox();
                case "npck": return new hintPacketsSentNpck();
                case "nump": return new hintPacketsSentNump();
                case "oinf": throw new NotSupportedException("'oinf' is ambiguous in between OperatingPointsInformation and OperatingPointsInformationProperty");
                case "opeg": return new OperatingPointGroupBox();
                case "opth": return new OperatingPointDecodeTimeHint();
                case "Opus": return new OpusSampleEntry();
                case "otyp": return new OriginalFileTypeBox();
                case "padb": return new PaddingBitsBox();
                case "paen": return new PartitionEntry();
                case "pano": return new PanoramaEntry();
                case "pase": return new ParameterSetNALUEntry();
                case "pasp": return new PixelAspectRatioBox();
                case "pasr": return new PixelAspectRatioEntry();
                case "payt": return new hintpayloadID();
                case "pdin": return new ProgressiveDownloadInfoBox();
                case "pitm": return new PrimaryItemBox();
                case "pixi": return new PixelInformationProperty();
                case "pm2t": return new ProtectedMPEG2TransportStreamSampleEntry();
                case "pmax": return new hintlargestpacket();
                case "prft": return new ProducerReferenceTimeBox();
                case "prol": return new AudioPreRollEntry();
                case "prtp": return new ProtectedRtpReceptionHintSampleEntry();
                case "pss1": return new PSSampleGroupEntry();
                case "qlif": return new SVCPriorityLayerInfoBox();
                case "rap ": return new VisualRandomAccessEntry();
                case "rash": return new RateShareEntry();
                case "refs": return new DirectReferenceSamplesList();
                case "resv": return new VisualSampleEntry();
                case "rinf": return new RestrictedSchemeInfoBox();
                case "rloc": return new RelativeLocationProperty();
                case "rm2t": return new MPEG2TSReceptionSampleEntry();
                case "roll": return new AudioRollRecoveryEntry();
                case "rref": return new RequiredReferenceTypesProperty();
                case "rrgn": return new RectRegionBox();
                case "rror": return new VvcRectRegionOrderEntry();
                case "rrtp": return new ReceivedRtpHintSampleEntry();
                case "rsrp": return new ReceivedSrtpHintSampleEntry();
                case "rssr": return new ReceivedSsrcBox();
                case "rtp ": throw new NotSupportedException("'rtp ' is ambiguous in between rtpmoviehintinformation and RtpHintSampleEntry");
                case "saio": return new SampleAuxiliaryInformationOffsetsBox();
                case "saiz": return new SampleAuxiliaryInformationSizesBox();
                case "sap ": return new SAPEntry();
                case "sbgp": return new SampleToGroupBox();
                case "sbtt": return new TextSubtitleSampleEntry();
                case "schi": return new SchemeInformationBox();
                case "schm": return new SchemeTypeBox();
                case "scif": return new ScalableGroupEntry();
                case "scnm": return new ScalableNALUMapEntry();
                case "scrb": return new ScrambleSchemeInfoBox();
                case "sdep": return new SampleDependencyBox();
                case "sdp ": return new rtptracksdphintinformation();
                case "sdtp": return new SampleDependencyTypeBox();
                case "segr": return new FDSessionGroupBox();
                case "seib": return new ScalabilityInformationSEIBox();
                case "seii": return new SeiInformationBox();
                case "setu": return new MetaDataSetupBox();
                case "sgpd": return new SampleGroupDescriptionBox();
                case "sidx": return new CompressedSegmentIndexBox();
                case "sinf": return new ProtectionSchemeInfoBox();
                case "skip": return new FreeSpaceBox_skip(); // TODO: fix duplicate
                case "sm2t": return new MPEG2TSServerSampleEntry();
                case "smhd": return new SoundMediaHeaderBox();
                case "snim": return new DataEntrySeqNumImdaBox();
                case "snro": return new sequenceoffset();
                case "snut": return new TrackGroupTypeBox_snut(); // TODO: fix duplicate
                case "spid": throw new NotSupportedException("'spid' is ambiguous in between VvcSubpicIDEntry and VvcSubpicIDProperty");
                case "spli": return new SubpicLevelInfoEntry();
                case "splt": return new SplitTransitionEffectProperty();
                case "spor": throw new NotSupportedException("'spor' is ambiguous in between VvcSubpicOrderEntry and VvcSubpicOrderProperty");
                case "srat": return new SamplingRateBox();
                case "srpp": return new SRTPProcessBox();
                case "srtp": return new SrtpHintSampleEntry();
                case "ssix": return new CompressedSubsegmentIndexBox();
                case "ssld": return new SuggestedTimeDisplayDurationProperty();
                case "sstl": return new SVCSubTrackLayerBox();
                case "stbl": return new SampleTableBox();
                case "stco": return new ChunkOffsetBox();
                case "stdp": return new DegradationPriorityBox();
                case "ster": return new StereoVideoGroupBox();
                case "sthd": return new SubtitleMediaHeaderBox();
                case "stmg": return new MVCSubTrackMultiviewGroupBox();
                case "stmi": return new SampleToMetadataItemEntry();
                case "stpe": return new SuggestedTransitionPeriodProperty();
                case "stpp": return new XMLSubtitleSampleEntry();
                case "strd": return new SubTrackDefinitionBox();
                case "stri": return new SubTrackInformationBox();
                case "strk": return new SubTrackBox();
                case "stsa": return new StepwiseTemporalLayerEntry();
                case "stsc": return new SampleToChunkBox();
                case "stsd": return new SampleDescriptionBox();
                case "stsg": return new SubTrackSampleGroupBox();
                case "stsh": return new ShadowSyncSampleBox();
                case "stss": return new SyncSampleBox();
                case "stsz": return new SampleSizeBox();
                case "stti": return new SubTrackTierBox();
                case "stts": return new TimeToSampleBox();
                case "stvi": return new StereoVideoBox();
                case "stxt": return new SimpleTextSampleEntry();
                case "styp": return new SegmentTypeBox();
                case "stz2": return new CompactSampleSizeBox();
                case "subs": return new SubSampleInformationBox();
                case "sulm": return new VvcSubpicLayoutMapEntry();
                case "svc1": return new SVCSampleEntry();
                case "svc2": return new SVCSampleEntry_svc2(); // TODO: fix duplicate
                case "svcC": return new SVCConfigurationBox();
                case "svcM": return new SVCMetaDataSampleEntry();
                case "svcP": return new SVCPriorityAssignmentBox();
                case "svdr": return new SVCDependencyRangeBox();
                case "svip": return new InitialParameterSetBox();
                case "svmC": return new SVCMetadataSampleConfigBox();
                case "svpr": return new PriorityRangeBox();
                case "swtc": return new MultiviewGroupRelationBox();
                case "swtk": return new SwitchableTracks();
                case "sync": return new SyncSampleEntry();
                case "tele": return new TemporalLevelEntry();
                case "tfdt": return new TrackFragmentBaseMediaDecodeTimeBox();
                case "tfhd": return new TrackFragmentHeaderBox();
                case "tfra": return new TrackFragmentRandomAccessBox();
                case "tibr": return new TierBitRateBox();
                case "tims": return new timescaleentry();
                case "tiri": return new TierInfoBox();
                case "tkhd": return new TrackHeaderBox();
                case "tlou": return new TrackLoudnessInfo();
                case "tmax": return new hintmaxrelativetime();
                case "tmin": return new hintminrelativetime();
                case "tols": return new TargetOlsProperty();
                case "totl": return new hintBytesSentTotl();
                case "tpay": return new hintBytesSentTpay();
                case "tpyl": return new hintBytesSentTpyl();
                case "traf": return new TrackFragmentBox();
                case "trak": return new TrackBox();
                case "tran": return new TranscodingInfoBox();
                case "tref": return new TrackReferenceBox();
                case "trep": return new TrackExtensionPropertiesBox();
                case "trex": return new TrackExtendsBox();
                case "trgr": return new TrackGroupBox();
                case "trif": return new RectangularRegionGroupEntry();
                case "trpy": return new hintBytesSentTrpy();
                case "trun": return new TrackRunBox();
                case "tsas": return new TemporalSubLayerEntry();
                case "tscl": return new TemporalLayerEntry();
                case "tsel": return new TrackSelectionBox();
                case "tsro": return new timeoffset();
                case "tssy": return new timestampsynchrony();
                case "tstb": return new TileSubTrackGroupBox();
                case "ttyp": return new TrackTypeBox();
                case "txtC": return new TextConfigBox();
                case "tyco": return new TypeCombinationBox();
                case "udes": return new UserDescriptionProperty();
                case "udta": return new UserDataBox();
                case "uri ": return new URIBox();
                case "uriI": return new URIInitBox();
                case "urim": return new URIMetaSampleEntry();
                case "url ": return new DataEntryUrlBox();
                case "urn ": return new DataEntryUrnBox();
                case "vipr": throw new NotSupportedException("'vipr' is ambiguous in between ViewPriorityBox and ViewPriorityEntry");
                case "vlab": return new WebVTTSourceLabelBox();
                case "vmhd": return new VideoMediaHeaderBox();
                case "vopi": return new VvcOperatingPointsInformation();
                case "vsib": return new ViewScalabilityInformationSEIBox();
                case "vttC": return new WebVTTConfigurationBox();
                case "vvc1": return new VvcSampleEntry();
                case "vvcb": return new EntityToGroupBox_vvcb(); // TODO: fix duplicate
                case "vvcC": return new VvcConfigurationBox();
                case "vvcN": return new VvcNonVCLSampleEntry();
                case "vvi1": return new VvcSampleEntry_vvi1(); // TODO: fix duplicate
                case "vvnC": return new VvcNALUConfigBox();
                case "vvs1": return new VvcSubpicSampleEntry();
                case "vwdi": return new MultiviewSceneInfoBox();
                case "vwid": return new ViewIdentifierBox();
                case "wbbr": return new WhiteBalanceBracketingEntry();
                case "wipe": return new WipeTransitionEffectProperty();
                case "wvtt": return new WVTTSampleEntry();
                case "xml ": return new XMLBox();
                case "zoom": return new ZoomTransitionEffectProperty();
            }

            throw new NotImplementedException(fourCC);
        }
    }

    /*
    aligned(8) class FullBox(unsigned int(32) boxtype, unsigned int(8) v, bit(24) f)
    extends Box(boxtype) { 
    unsigned int(8) version = v;
    bit(24) flags = f;
     }
    */
    public class FullBox : Box
    {


        protected byte version; // = v
        public byte Version { get { return this.version; } set { this.version = value; } }

        protected uint flags; // = f
        public uint Flags { get { return this.flags; } set { this.flags = value; } }

        public FullBox(string boxtype, byte v = 0, uint f = 0) : base(boxtype)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.version);
            boxSize += stream.ReadBits(24, out this.flags);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.version);
            boxSize += stream.WriteBits(24, this.flags);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // version
            boxSize += 24; // flags
            return boxSize;
        }
    }


    /*
    // Sequence Entry  
    abstract class SampleGroupDescriptionEntry (unsigned int(32) grouping_type) extends Box(grouping_type) 
    { 
    } 


    */
    public abstract class SampleGroupDescriptionEntry : Box
    {


        public SampleGroupDescriptionEntry(string grouping_type) : base(grouping_type)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    abstract class VisualSampleGroupEntry (unsigned int(32) grouping_type) extends 
    SampleGroupDescriptionEntry (grouping_type) 
    { 
    } 


    */
    public abstract class VisualSampleGroupEntry : SampleGroupDescriptionEntry
    {


        public VisualSampleGroupEntry(string grouping_type) : base(grouping_type)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    abstract class AudioSampleGroupEntry (unsigned int(32) grouping_type) extends 
    SampleGroupDescriptionEntry (grouping_type) 
    { 
    } 


    */
    public abstract class AudioSampleGroupEntry : SampleGroupDescriptionEntry
    {


        public AudioSampleGroupEntry(string grouping_type) : base(grouping_type)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    abstract class HintSampleGroupEntry (unsigned int(32) grouping_type) extends 
    SampleGroupDescriptionEntry (grouping_type) 
    { 
    } 


    */
    public abstract class HintSampleGroupEntry : SampleGroupDescriptionEntry
    {


        public HintSampleGroupEntry(string grouping_type) : base(grouping_type)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    abstract class SubtitleSampleGroupEntry (unsigned int(32) grouping_type) extends 
    SampleGroupDescriptionEntry (grouping_type) 
    { 
    } 


    */
    public abstract class SubtitleSampleGroupEntry : SampleGroupDescriptionEntry
    {


        public SubtitleSampleGroupEntry(string grouping_type) : base(grouping_type)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    abstract class TextSampleGroupEntry (unsigned int(32) grouping_type) extends 
    SampleGroupDescriptionEntry (grouping_type) 
    { 
    }
    */
    public abstract class TextSampleGroupEntry : SampleGroupDescriptionEntry
    {


        public TextSampleGroupEntry(string grouping_type) : base(grouping_type)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    class SubtitleSampleEntry(codingname) extends SampleEntry (codingname) { 
    } 


    */
    public abstract class SubtitleSampleEntry : SampleEntry
    {


        public SubtitleSampleEntry(string codingname = "") : base(codingname)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    class XMLSubtitleSampleEntry() extends SubtitleSampleEntry ('stpp') { 
     string namespace; 
     string schema_location;  // optional 
     string auxiliary_mime_types; // optional, required if auxiliary resources are present 
     BitRateBox (); 
    } 


    */
    public class XMLSubtitleSampleEntry : SubtitleSampleEntry
    {
        public const string FourCC = "stpp";

        protected string ns;
        public string Ns { get { return this.ns; } set { this.ns = value; } }

        protected string schema_location;  //  optional 
        public string SchemaLocation { get { return this.schema_location; } set { this.schema_location = value; } }

        protected string auxiliary_mime_types;  //  optional, required if auxiliary resources are present 
        public string AuxiliaryMimeTypes { get { return this.auxiliary_mime_types; } set { this.auxiliary_mime_types = value; } }

        protected BitRateBox BitRateBox;
        public BitRateBox _BitRateBox { get { return this.BitRateBox; } set { this.BitRateBox = value; } }

        public XMLSubtitleSampleEntry() : base("stpp")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadString(out this.ns);
            if (boxSize < size) boxSize += stream.ReadString(out this.schema_location); // optional 
            if (boxSize < size) boxSize += stream.ReadString(out this.auxiliary_mime_types); // optional, required if auxiliary resources are present 
            boxSize += stream.ReadBox(out this.BitRateBox);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteString(this.ns);
            if (this.schema_location != null) boxSize += stream.WriteString(this.schema_location); // optional 
            if (this.auxiliary_mime_types != null) boxSize += stream.WriteString(this.auxiliary_mime_types); // optional, required if auxiliary resources are present 
            boxSize += stream.WriteBox(this.BitRateBox);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)ns.Length * 8; // ns
            if (this.schema_location != null) boxSize += (ulong)schema_location.Length * 8; // schema_location
            if (this.auxiliary_mime_types != null) boxSize += (ulong)auxiliary_mime_types.Length * 8; // auxiliary_mime_types
            boxSize += IsoStream.CalculateSize(BitRateBox); // BitRateBox
            return boxSize;
        }
    }


    /*
    class TextSubtitleSampleEntry() extends SubtitleSampleEntry ('sbtt') { 
     string content_encoding; // optional 
     string mime_format; 
     BitRateBox (); // optional 
     TextConfigBox (); // optional 
    }
    */
    public class TextSubtitleSampleEntry : SubtitleSampleEntry
    {
        public const string FourCC = "sbtt";

        protected string content_encoding;  //  optional 
        public string ContentEncoding { get { return this.content_encoding; } set { this.content_encoding = value; } }

        protected string mime_format;
        public string MimeFormat { get { return this.mime_format; } set { this.mime_format = value; } }

        protected BitRateBox BitRateBox;  //  optional 
        public BitRateBox _BitRateBox { get { return this.BitRateBox; } set { this.BitRateBox = value; } }

        protected TextConfigBox TextConfigBox;  //  optional 
        public TextConfigBox _TextConfigBox { get { return this.TextConfigBox; } set { this.TextConfigBox = value; } }

        public TextSubtitleSampleEntry() : base("sbtt")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += stream.ReadString(out this.content_encoding); // optional 
            boxSize += stream.ReadString(out this.mime_format);
            if (boxSize < size) boxSize += stream.ReadBox(out this.BitRateBox); // optional 
            if (boxSize < size) boxSize += stream.ReadBox(out this.TextConfigBox); // optional 
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.content_encoding != null) boxSize += stream.WriteString(this.content_encoding); // optional 
            boxSize += stream.WriteString(this.mime_format);
            if (this.BitRateBox != null) boxSize += stream.WriteBox(this.BitRateBox); // optional 
            if (this.TextConfigBox != null) boxSize += stream.WriteBox(this.TextConfigBox); // optional 
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.content_encoding != null) boxSize += (ulong)content_encoding.Length * 8; // content_encoding
            boxSize += (ulong)mime_format.Length * 8; // mime_format
            if (this.BitRateBox != null) boxSize += IsoStream.CalculateSize(BitRateBox); // BitRateBox
            if (this.TextConfigBox != null) boxSize += IsoStream.CalculateSize(TextConfigBox); // TextConfigBox
            return boxSize;
        }
    }


    /*
    aligned(8) class LoudnessBaseBox extends FullBox(loudnessType) { 
    unsigned int(3) reserved = 0; 
    unsigned int(7) downmix_ID;  // matching downmix 
    unsigned int(6) DRC_set_ID;  // to match a DRC box 
    signed int(12)  bs_sample_peak_level; 
    signed int(12)  bs_true_peak_level; 
    unsigned int(4) measurement_system_for_TP; 
    unsigned int(4) reliability_for_TP; 
    unsigned int(8) measurement_count; 
    int i; 
    for (i = 1 ; i <= measurement_count; i++){ 
      unsigned int(8) method_definition; 
      unsigned int(8) method_value; 
      unsigned int(4) measurement_system; 
      unsigned int(4) reliability; 
     } 
    } 

    */
    public class LoudnessBaseBox : FullBox
    {


        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte downmix_ID;  //  matching downmix 
        public byte DownmixID { get { return this.downmix_ID; } set { this.downmix_ID = value; } }

        protected byte DRC_set_ID;  //  to match a DRC box 
        public byte DRCSetID { get { return this.DRC_set_ID; } set { this.DRC_set_ID = value; } }

        protected short bs_sample_peak_level;
        public short BsSamplePeakLevel { get { return this.bs_sample_peak_level; } set { this.bs_sample_peak_level = value; } }

        protected short bs_true_peak_level;
        public short BsTruePeakLevel { get { return this.bs_true_peak_level; } set { this.bs_true_peak_level = value; } }

        protected byte measurement_system_for_TP;
        public byte MeasurementSystemForTP { get { return this.measurement_system_for_TP; } set { this.measurement_system_for_TP = value; } }

        protected byte reliability_for_TP;
        public byte ReliabilityForTP { get { return this.reliability_for_TP; } set { this.reliability_for_TP = value; } }

        protected byte measurement_count;
        public byte MeasurementCount { get { return this.measurement_count; } set { this.measurement_count = value; } }

        protected byte method_definition;
        public byte MethodDefinition { get { return this.method_definition; } set { this.method_definition = value; } }

        protected byte method_value;
        public byte MethodValue { get { return this.method_value; } set { this.method_value = value; } }

        protected byte measurement_system;
        public byte MeasurementSystem { get { return this.measurement_system; } set { this.measurement_system = value; } }

        protected byte reliability;
        public byte Reliability { get { return this.reliability; } set { this.reliability = value; } }

        public LoudnessBaseBox(string loudnessType) : base(loudnessType)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(3, out this.reserved);
            boxSize += stream.ReadBits(7, out this.downmix_ID); // matching downmix 
            boxSize += stream.ReadBits(6, out this.DRC_set_ID); // to match a DRC box 
            boxSize += stream.ReadBits(12, out this.bs_sample_peak_level);
            boxSize += stream.ReadBits(12, out this.bs_true_peak_level);
            boxSize += stream.ReadBits(4, out this.measurement_system_for_TP);
            boxSize += stream.ReadBits(4, out this.reliability_for_TP);
            boxSize += stream.ReadUInt8(out this.measurement_count);


            for (int i = 1; i <= measurement_count; i++)
            {
                boxSize += stream.ReadUInt8(out this.method_definition);
                boxSize += stream.ReadUInt8(out this.method_value);
                boxSize += stream.ReadBits(4, out this.measurement_system);
                boxSize += stream.ReadBits(4, out this.reliability);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(3, this.reserved);
            boxSize += stream.WriteBits(7, this.downmix_ID); // matching downmix 
            boxSize += stream.WriteBits(6, this.DRC_set_ID); // to match a DRC box 
            boxSize += stream.WriteBits(12, this.bs_sample_peak_level);
            boxSize += stream.WriteBits(12, this.bs_true_peak_level);
            boxSize += stream.WriteBits(4, this.measurement_system_for_TP);
            boxSize += stream.WriteBits(4, this.reliability_for_TP);
            boxSize += stream.WriteUInt8(this.measurement_count);


            for (int i = 1; i <= measurement_count; i++)
            {
                boxSize += stream.WriteUInt8(this.method_definition);
                boxSize += stream.WriteUInt8(this.method_value);
                boxSize += stream.WriteBits(4, this.measurement_system);
                boxSize += stream.WriteBits(4, this.reliability);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 3; // reserved
            boxSize += 7; // downmix_ID
            boxSize += 6; // DRC_set_ID
            boxSize += 12; // bs_sample_peak_level
            boxSize += 12; // bs_true_peak_level
            boxSize += 4; // measurement_system_for_TP
            boxSize += 4; // reliability_for_TP
            boxSize += 8; // measurement_count


            for (int i = 1; i <= measurement_count; i++)
            {
                boxSize += 8; // method_definition
                boxSize += 8; // method_value
                boxSize += 4; // measurement_system
                boxSize += 4; // reliability
            }
            return boxSize;
        }
    }


    /*
    class MPEG2TSSampleEntry(name) extends HintSampleEntry(name) { 
     uint(16) hinttrackversion = 1; 
     uint(16) highestcompatibleversion = 1; 
     uint(8) precedingbyteslen; 
     uint(8) trailingbyteslen; 
     uint(1) precomputed_only_flag; 
     uint(7) reserved; 
     Box  additionaldata[]; 
    } 
    */
    public class MPEG2TSSampleEntry : HintSampleEntry
    {


        protected ushort hinttrackversion = 1;
        public ushort Hinttrackversion { get { return this.hinttrackversion; } set { this.hinttrackversion = value; } }

        protected ushort highestcompatibleversion = 1;
        public ushort Highestcompatibleversion { get { return this.highestcompatibleversion; } set { this.highestcompatibleversion = value; } }

        protected byte precedingbyteslen;
        public byte Precedingbyteslen { get { return this.precedingbyteslen; } set { this.precedingbyteslen = value; } }

        protected byte trailingbyteslen;
        public byte Trailingbyteslen { get { return this.trailingbyteslen; } set { this.trailingbyteslen = value; } }

        protected byte precomputed_only_flag;
        public byte PrecomputedOnlyFlag { get { return this.precomputed_only_flag; } set { this.precomputed_only_flag = value; } }

        protected byte reserved;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected Box[] additionaldata;
        public Box[] Additionaldata { get { return this.additionaldata; } set { this.additionaldata = value; } }

        public MPEG2TSSampleEntry(string name) : base(name)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.hinttrackversion);
            boxSize += stream.ReadUInt16(out this.highestcompatibleversion);
            boxSize += stream.ReadUInt8(out this.precedingbyteslen);
            boxSize += stream.ReadUInt8(out this.trailingbyteslen);
            boxSize += stream.ReadBits(1, out this.precomputed_only_flag);
            boxSize += stream.ReadBits(7, out this.reserved);
            boxSize += stream.ReadBox(out this.additionaldata);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.hinttrackversion);
            boxSize += stream.WriteUInt16(this.highestcompatibleversion);
            boxSize += stream.WriteUInt8(this.precedingbyteslen);
            boxSize += stream.WriteUInt8(this.trailingbyteslen);
            boxSize += stream.WriteBits(1, this.precomputed_only_flag);
            boxSize += stream.WriteBits(7, this.reserved);
            boxSize += stream.WriteBox(this.additionaldata);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // hinttrackversion
            boxSize += 16; // highestcompatibleversion
            boxSize += 8; // precedingbyteslen
            boxSize += 8; // trailingbyteslen
            boxSize += 1; // precomputed_only_flag
            boxSize += 7; // reserved
            boxSize += IsoStream.CalculateSize(additionaldata); // additionaldata
            return boxSize;
        }
    }


    /*
    aligned(8) class ItemInfoExtension(unsigned int(32) extension_type)
    { 
    } 

    */
    public class ItemInfoExtension
    {


        public ItemInfoExtension(string extension_type) : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            return boxSize;
        }
    }


    /*
    class PlainTextSampleEntry(codingname) extends SampleEntry (codingname) { 
    } 

    */
    public class PlainTextSampleEntry : SampleEntry
    {


        public PlainTextSampleEntry(string codingname = "") : base(codingname)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    class SimpleTextSampleEntry(codingname) extends PlainTextSampleEntry ('stxt') { 
     string content_encoding; // optional 
     string mime_format; 
     BitRateBox (); 
        // optional 
     TextConfigBox (); 

       // optional 
    } 
    */
    public class SimpleTextSampleEntry : PlainTextSampleEntry
    {
        public const string FourCC = "stxt";

        protected string content_encoding;  //  optional 
        public string ContentEncoding { get { return this.content_encoding; } set { this.content_encoding = value; } }

        protected string mime_format;
        public string MimeFormat { get { return this.mime_format; } set { this.mime_format = value; } }

        protected BitRateBox BitRateBox;  //  optional 
        public BitRateBox _BitRateBox { get { return this.BitRateBox; } set { this.BitRateBox = value; } }

        protected TextConfigBox TextConfigBox;  //  optional 
        public TextConfigBox _TextConfigBox { get { return this.TextConfigBox; } set { this.TextConfigBox = value; } }

        public SimpleTextSampleEntry(string codingname = "") : base("stxt")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += stream.ReadString(out this.content_encoding); // optional 
            boxSize += stream.ReadString(out this.mime_format);
            if (boxSize < size) boxSize += stream.ReadBox(out this.BitRateBox); // optional 
            if (boxSize < size) boxSize += stream.ReadBox(out this.TextConfigBox); // optional 
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.content_encoding != null) boxSize += stream.WriteString(this.content_encoding); // optional 
            boxSize += stream.WriteString(this.mime_format);
            if (this.BitRateBox != null) boxSize += stream.WriteBox(this.BitRateBox); // optional 
            if (this.TextConfigBox != null) boxSize += stream.WriteBox(this.TextConfigBox); // optional 
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.content_encoding != null) boxSize += (ulong)content_encoding.Length * 8; // content_encoding
            boxSize += (ulong)mime_format.Length * 8; // mime_format
            if (this.BitRateBox != null) boxSize += IsoStream.CalculateSize(BitRateBox); // BitRateBox
            if (this.TextConfigBox != null) boxSize += IsoStream.CalculateSize(TextConfigBox); // TextConfigBox
            return boxSize;
        }
    }


    /*
    aligned(8) class ItemProperty(property_type) extends Box(property_type){}

    */
    public class ItemProperty : Box
    {


        public ItemProperty(string property_type) : base(property_type)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class ItemFullProperty(property_type, version, flags) extends FullBox(property_type, version, flags){}
    */
    public class ItemFullProperty : FullBox
    {


        public ItemFullProperty(string property_type, byte version, uint flags) : base(property_type, version, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class GeneralTypeBox(code) extends Box(code) {
          unsigned int(32)    major_brand;
          unsigned int(32)    minor_version;
          unsigned int(32)    compatible_brands[];    // to end of the box
        }
    */
    public class GeneralTypeBox : Box
    {


        protected uint major_brand;
        public uint MajorBrand { get { return this.major_brand; } set { this.major_brand = value; } }

        protected uint minor_version;
        public uint MinorVersion { get { return this.minor_version; } set { this.minor_version = value; } }

        protected uint[] compatible_brands;  //  to end of the box
        public uint[] CompatibleBrands { get { return this.compatible_brands; } set { this.compatible_brands = value; } }

        public GeneralTypeBox(string code) : base(code)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.major_brand);
            boxSize += stream.ReadUInt32(out this.minor_version);
            boxSize += stream.ReadUInt32Array(out this.compatible_brands); // to end of the box
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.major_brand);
            boxSize += stream.WriteUInt32(this.minor_version);
            boxSize += stream.WriteUInt32Array(this.compatible_brands); // to end of the box
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // major_brand
            boxSize += 32; // minor_version
            boxSize += 32; // compatible_brands
            return boxSize;
        }
    }


    /*
    aligned(8) class MetaDataKeyBox extends	Box(local_key_id) {
     MetaDataKeyDeclarationBox();
     MetaDataDatatypeBox();	  // optional
     MetaDataLocaleBox();	  // optional
     MetaDataSetupBox();	  // optional
     MetaDataExtensionsBox();  // optional
    }

    */
    public class MetaDataKeyBox : Box
    {


        protected MetaDataKeyDeclarationBox MetaDataKeyDeclarationBox;
        public MetaDataKeyDeclarationBox _MetaDataKeyDeclarationBox { get { return this.MetaDataKeyDeclarationBox; } set { this.MetaDataKeyDeclarationBox = value; } }

        protected MetaDataDatatypeBox MetaDataDatatypeBox;  //  optional
        public MetaDataDatatypeBox _MetaDataDatatypeBox { get { return this.MetaDataDatatypeBox; } set { this.MetaDataDatatypeBox = value; } }

        protected MetaDataLocaleBox MetaDataLocaleBox;  //  optional
        public MetaDataLocaleBox _MetaDataLocaleBox { get { return this.MetaDataLocaleBox; } set { this.MetaDataLocaleBox = value; } }

        protected MetaDataSetupBox MetaDataSetupBox;  //  optional
        public MetaDataSetupBox _MetaDataSetupBox { get { return this.MetaDataSetupBox; } set { this.MetaDataSetupBox = value; } }

        protected MetaDataExtensionsBox MetaDataExtensionsBox;  //  optional
        public MetaDataExtensionsBox _MetaDataExtensionsBox { get { return this.MetaDataExtensionsBox; } set { this.MetaDataExtensionsBox = value; } }

        public MetaDataKeyBox(string local_key_id) : base(local_key_id)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.MetaDataKeyDeclarationBox);
            if (boxSize < size) boxSize += stream.ReadBox(out this.MetaDataDatatypeBox); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.MetaDataLocaleBox); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.MetaDataSetupBox); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.MetaDataExtensionsBox); // optional
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.MetaDataKeyDeclarationBox);
            if (this.MetaDataDatatypeBox != null) boxSize += stream.WriteBox(this.MetaDataDatatypeBox); // optional
            if (this.MetaDataLocaleBox != null) boxSize += stream.WriteBox(this.MetaDataLocaleBox); // optional
            if (this.MetaDataSetupBox != null) boxSize += stream.WriteBox(this.MetaDataSetupBox); // optional
            if (this.MetaDataExtensionsBox != null) boxSize += stream.WriteBox(this.MetaDataExtensionsBox); // optional
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(MetaDataKeyDeclarationBox); // MetaDataKeyDeclarationBox
            if (this.MetaDataDatatypeBox != null) boxSize += IsoStream.CalculateSize(MetaDataDatatypeBox); // MetaDataDatatypeBox
            if (this.MetaDataLocaleBox != null) boxSize += IsoStream.CalculateSize(MetaDataLocaleBox); // MetaDataLocaleBox
            if (this.MetaDataSetupBox != null) boxSize += IsoStream.CalculateSize(MetaDataSetupBox); // MetaDataSetupBox
            if (this.MetaDataExtensionsBox != null) boxSize += IsoStream.CalculateSize(MetaDataExtensionsBox); // MetaDataExtensionsBox
            return boxSize;
        }
    }


    /*
    aligned(8) class MetaDataKeyDeclarationBox extends Box('keyd') {
     unsigned int(32) key_namespace;
     unsigned int(8) key_value[];
    }


    */
    public class MetaDataKeyDeclarationBox : Box
    {
        public const string FourCC = "keyd";

        protected uint key_namespace;
        public uint KeyNamespace { get { return this.key_namespace; } set { this.key_namespace = value; } }

        protected byte[] key_value;
        public byte[] KeyValue { get { return this.key_value; } set { this.key_value = value; } }

        public MetaDataKeyDeclarationBox() : base("keyd")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.key_namespace);
            boxSize += stream.ReadUInt8Array(out this.key_value);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.key_namespace);
            boxSize += stream.WriteUInt8Array(this.key_value);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // key_namespace
            boxSize += (ulong)key_value.Length * 8; // key_value
            return boxSize;
        }
    }


    /*
    aligned(8) class MetaDataLocaleBox extends Box('loca') {
     string locale_string;
    }


    */
    public class MetaDataLocaleBox : Box
    {
        public const string FourCC = "loca";

        protected string locale_string;
        public string LocaleString { get { return this.locale_string; } set { this.locale_string = value; } }

        public MetaDataLocaleBox() : base("loca")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadString(out this.locale_string);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteString(this.locale_string);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)locale_string.Length * 8; // locale_string
            return boxSize;
        }
    }


    /*
    aligned(8) class MetaDataSetupBox extends Box('setu') { // 'init' instead?
    }


    */
    public class MetaDataSetupBox : Box
    {
        public const string FourCC = "setu";

        public MetaDataSetupBox() : base("setu")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            /*  'init' instead? */
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            /*  'init' instead? */
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            /*  'init' instead? */
            return boxSize;
        }
    }


    /*
    aligned(8) class MetaDataExtensionsBox extends Box('exte') {
     Box extensions[];
    }


    */
    public class MetaDataExtensionsBox : Box
    {
        public const string FourCC = "exte";

        protected Box[] extensions;
        public Box[] Extensions { get { return this.extensions; } set { this.extensions = value; } }

        public MetaDataExtensionsBox() : base("exte")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.extensions);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.extensions);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(extensions); // extensions
            return boxSize;
        }
    }


    /*
    aligned(8) class MetaDataInlineKeysPresentBox extends Box('keyi') {
    unsigned int(8) inlineKeyValueBoxesPresent;
    }


    */
    public class MetaDataInlineKeysPresentBox : Box
    {
        public const string FourCC = "keyi";

        protected byte inlineKeyValueBoxesPresent;
        public byte InlineKeyValueBoxesPresent { get { return this.inlineKeyValueBoxesPresent; } set { this.inlineKeyValueBoxesPresent = value; } }

        public MetaDataInlineKeysPresentBox() : base("keyi")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.inlineKeyValueBoxesPresent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.inlineKeyValueBoxesPresent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // inlineKeyValueBoxesPresent
            return boxSize;
        }
    }


    /*
    aligned(8) class MetaDataAccessUnit {
    Box boxes[];
    }


    */
    public class MetaDataAccessUnit
    {


        protected Box[] boxes;
        public Box[] Boxes { get { return this.boxes; } set { this.boxes = value; } }

        public MetaDataAccessUnit() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadBox(out this.boxes);
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteBox(this.boxes);
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += IsoStream.CalculateSize(boxes); // boxes
            return boxSize;
        }
    }


    /*
    aligned(8) class MetaDataAUBox extends Box(local_key_id) {
    }


    */
    public class MetaDataAUBox : Box
    {


        public MetaDataAUBox(string local_key_id) : base(local_key_id)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) abstract class SampleEntry (unsigned int(32) format) extends Box(format){ 
    const unsigned int(8)[6] reserved = 0; 
    unsigned int(16) data_reference_index; 
    }


    */
    public class SampleEntry : Box
    {


        protected byte[] reserved = [];
        public byte[] Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected ushort data_reference_index;
        public ushort DataReferenceIndex { get { return this.data_reference_index; } set { this.data_reference_index = value; } }

        public SampleEntry(string format) : base(format)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8Array(6, out this.reserved);
            boxSize += stream.ReadUInt16(out this.data_reference_index);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8Array(6, this.reserved);
            boxSize += stream.WriteUInt16(this.data_reference_index);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 6 * 8; // reserved
            boxSize += 16; // data_reference_index
            return boxSize;
        }
    }


    /*
    class HintSampleEntry() extends SampleEntry (protocol) { 
    unsigned int(8) data []; 
    } 

    */
    public class HintSampleEntry : SampleEntry
    {


        protected byte[] data;
        public byte[] Data { get { return this.data; } set { this.data = value; } }

        public HintSampleEntry(string protocol) : base(protocol)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8Array(out this.data);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8Array(this.data);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)data.Length * 8; // data
            return boxSize;
        }
    }


    /*
    class ViewPriorityBox extends Box ('vipr') { 
    for (i=0; ; i++) {  
    // To end of box 
      unsigned int(6) reserved = 0; 
      unsigned int(10) view_id; 
      unsigned int(32) content_priority_id; 
     } 
    } 

    */
    public class ViewPriorityBox : Box
    {
        public const string FourCC = "vipr";

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected ushort view_id;
        public ushort ViewId { get { return this.view_id; } set { this.view_id = value; } }

        protected uint content_priority_id;
        public uint ContentPriorityId { get { return this.content_priority_id; } set { this.content_priority_id = value; } }

        public ViewPriorityBox() : base("vipr")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            for (int i = 0; ; i++)
            {
                /*  To end of box  */
                boxSize += stream.ReadBits(6, out this.reserved);
                boxSize += stream.ReadBits(10, out this.view_id);
                boxSize += stream.ReadUInt32(out this.content_priority_id);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            for (int i = 0; ; i++)
            {
                /*  To end of box  */
                boxSize += stream.WriteBits(6, this.reserved);
                boxSize += stream.WriteBits(10, this.view_id);
                boxSize += stream.WriteUInt32(this.content_priority_id);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            for (int i = 0; ; i++)
            {
                /*  To end of box  */
                boxSize += 6; // reserved
                boxSize += 10; // view_id
                boxSize += 32; // content_priority_id
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class DependencyInfo  
    { 
    unsigned int(8)   subSeqDirectionFlag; 
    unsigned int(8)   layerNumber; 
    unsigned int(16)  subSequenceIdentifier; 
    } 

    */
    public class DependencyInfo
    {


        protected byte subSeqDirectionFlag;
        public byte SubSeqDirectionFlag { get { return this.subSeqDirectionFlag; } set { this.subSeqDirectionFlag = value; } }

        protected byte layerNumber;
        public byte LayerNumber { get { return this.layerNumber; } set { this.layerNumber = value; } }

        protected ushort subSequenceIdentifier;
        public ushort SubSequenceIdentifier { get { return this.subSequenceIdentifier; } set { this.subSequenceIdentifier = value; } }

        public DependencyInfo() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUInt8(out this.subSeqDirectionFlag);
            boxSize += stream.ReadUInt8(out this.layerNumber);
            boxSize += stream.ReadUInt16(out this.subSequenceIdentifier);
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUInt8(this.subSeqDirectionFlag);
            boxSize += stream.WriteUInt8(this.layerNumber);
            boxSize += stream.WriteUInt16(this.subSequenceIdentifier);
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 8; // subSeqDirectionFlag
            boxSize += 8; // layerNumber
            boxSize += 16; // subSequenceIdentifier
            return boxSize;
        }
    }


    /*
    class AVCSubSequenceEntry () extends VisualSampleGroupEntry ('avss') 
    { 
      unsigned int(16) subSequenceIdentifer; 
      unsigned int(8)  layerNumber;  
      unsigned int(1)  durationFlag; 
      unsigned int(1)  avgRateFlag; 
      unsigned int(6)  reserved = 0;  
      if (durationFlag) 
       unsigned int(32) duration; 
      if (avgRateFlag) 
      {
       unsigned int(8)  accurateStatisticsFlag; 
       unsigned int(16) avgBitRate; 
       unsigned int(16) avgFrameRate; 
      }
      unsigned int(8) numReferences; 
      DependencyInfo dependency[numReferences]; 
     } 

    */
    public class AVCSubSequenceEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "avss";

        protected ushort subSequenceIdentifer;
        public ushort SubSequenceIdentifer { get { return this.subSequenceIdentifer; } set { this.subSequenceIdentifer = value; } }

        protected byte layerNumber;
        public byte LayerNumber { get { return this.layerNumber; } set { this.layerNumber = value; } }

        protected bool durationFlag;
        public bool DurationFlag { get { return this.durationFlag; } set { this.durationFlag = value; } }

        protected bool avgRateFlag;
        public bool AvgRateFlag { get { return this.avgRateFlag; } set { this.avgRateFlag = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected uint duration;
        public uint Duration { get { return this.duration; } set { this.duration = value; } }

        protected byte accurateStatisticsFlag;
        public byte AccurateStatisticsFlag { get { return this.accurateStatisticsFlag; } set { this.accurateStatisticsFlag = value; } }

        protected ushort avgBitRate;
        public ushort AvgBitRate { get { return this.avgBitRate; } set { this.avgBitRate = value; } }

        protected ushort avgFrameRate;
        public ushort AvgFrameRate { get { return this.avgFrameRate; } set { this.avgFrameRate = value; } }

        protected byte numReferences;
        public byte NumReferences { get { return this.numReferences; } set { this.numReferences = value; } }

        protected DependencyInfo[] dependency;
        public DependencyInfo[] Dependency { get { return this.dependency; } set { this.dependency = value; } }

        public AVCSubSequenceEntry() : base("avss")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.subSequenceIdentifer);
            boxSize += stream.ReadUInt8(out this.layerNumber);
            boxSize += stream.ReadBit(out this.durationFlag);
            boxSize += stream.ReadBit(out this.avgRateFlag);
            boxSize += stream.ReadBits(6, out this.reserved);

            if (durationFlag)
            {
                boxSize += stream.ReadUInt32(out this.duration);
            }

            if (avgRateFlag)
            {
                boxSize += stream.ReadUInt8(out this.accurateStatisticsFlag);
                boxSize += stream.ReadUInt16(out this.avgBitRate);
                boxSize += stream.ReadUInt16(out this.avgFrameRate);
            }
            boxSize += stream.ReadUInt8(out this.numReferences);
            boxSize += stream.ReadClass(numReferences, out this.dependency);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.subSequenceIdentifer);
            boxSize += stream.WriteUInt8(this.layerNumber);
            boxSize += stream.WriteBit(this.durationFlag);
            boxSize += stream.WriteBit(this.avgRateFlag);
            boxSize += stream.WriteBits(6, this.reserved);

            if (durationFlag)
            {
                boxSize += stream.WriteUInt32(this.duration);
            }

            if (avgRateFlag)
            {
                boxSize += stream.WriteUInt8(this.accurateStatisticsFlag);
                boxSize += stream.WriteUInt16(this.avgBitRate);
                boxSize += stream.WriteUInt16(this.avgFrameRate);
            }
            boxSize += stream.WriteUInt8(this.numReferences);
            boxSize += stream.WriteClass(numReferences, this.dependency);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // subSequenceIdentifer
            boxSize += 8; // layerNumber
            boxSize += 1; // durationFlag
            boxSize += 1; // avgRateFlag
            boxSize += 6; // reserved

            if (durationFlag)
            {
                boxSize += 32; // duration
            }

            if (avgRateFlag)
            {
                boxSize += 8; // accurateStatisticsFlag
                boxSize += 16; // avgBitRate
                boxSize += 16; // avgFrameRate
            }
            boxSize += 8; // numReferences
            boxSize += IsoStream.CalculateClassSize(dependency); // dependency
            return boxSize;
        }
    }


    /*
    class IntrinsicCameraParametersBox extends FullBox ('icam', version=0, flags) { 
     unsigned int(6)  
     reserved=0;  
     unsigned int(10)  ref_view_id; 
     unsigned int(32) prec_focal_length; 
     unsigned int(32) prec_principal_point; 
     unsigned int(32) prec_skew_factor; 
     unsigned int(8) exponent_focal_length_x; 
     signed   int(64) mantissa_focal_length_x; 
     unsigned int(8) exponent_focal_length_y; 
     signed   int(64) mantissa_focal_length_y;  
     unsigned int(8) exponent_principal_point_x; 
     signed   int(64) mantissa_principal_point_x; 
     unsigned int(8) exponent_principal_point_y; 
     signed   int(64) mantissa_principal_point_y; 
     unsigned int(8) exponent_skew_factor; 
     signed   int(64) mantissa_skew_factor; 
    } 
    */
    public class IntrinsicCameraParametersBox : FullBox
    {
        public const string FourCC = "icam";

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected ushort ref_view_id;
        public ushort RefViewId { get { return this.ref_view_id; } set { this.ref_view_id = value; } }

        protected uint prec_focal_length;
        public uint PrecFocalLength { get { return this.prec_focal_length; } set { this.prec_focal_length = value; } }

        protected uint prec_principal_point;
        public uint PrecPrincipalPoint { get { return this.prec_principal_point; } set { this.prec_principal_point = value; } }

        protected uint prec_skew_factor;
        public uint PrecSkewFactor { get { return this.prec_skew_factor; } set { this.prec_skew_factor = value; } }

        protected byte exponent_focal_length_x;
        public byte ExponentFocalLengthx { get { return this.exponent_focal_length_x; } set { this.exponent_focal_length_x = value; } }

        protected long mantissa_focal_length_x;
        public long MantissaFocalLengthx { get { return this.mantissa_focal_length_x; } set { this.mantissa_focal_length_x = value; } }

        protected byte exponent_focal_length_y;
        public byte ExponentFocalLengthy { get { return this.exponent_focal_length_y; } set { this.exponent_focal_length_y = value; } }

        protected long mantissa_focal_length_y;
        public long MantissaFocalLengthy { get { return this.mantissa_focal_length_y; } set { this.mantissa_focal_length_y = value; } }

        protected byte exponent_principal_point_x;
        public byte ExponentPrincipalPointx { get { return this.exponent_principal_point_x; } set { this.exponent_principal_point_x = value; } }

        protected long mantissa_principal_point_x;
        public long MantissaPrincipalPointx { get { return this.mantissa_principal_point_x; } set { this.mantissa_principal_point_x = value; } }

        protected byte exponent_principal_point_y;
        public byte ExponentPrincipalPointy { get { return this.exponent_principal_point_y; } set { this.exponent_principal_point_y = value; } }

        protected long mantissa_principal_point_y;
        public long MantissaPrincipalPointy { get { return this.mantissa_principal_point_y; } set { this.mantissa_principal_point_y = value; } }

        protected byte exponent_skew_factor;
        public byte ExponentSkewFactor { get { return this.exponent_skew_factor; } set { this.exponent_skew_factor = value; } }

        protected long mantissa_skew_factor;
        public long MantissaSkewFactor { get { return this.mantissa_skew_factor; } set { this.mantissa_skew_factor = value; } }

        public IntrinsicCameraParametersBox(uint flags = 0) : base("icam", 0, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(6, out this.reserved);
            boxSize += stream.ReadBits(10, out this.ref_view_id);
            boxSize += stream.ReadUInt32(out this.prec_focal_length);
            boxSize += stream.ReadUInt32(out this.prec_principal_point);
            boxSize += stream.ReadUInt32(out this.prec_skew_factor);
            boxSize += stream.ReadUInt8(out this.exponent_focal_length_x);
            boxSize += stream.ReadInt64(out this.mantissa_focal_length_x);
            boxSize += stream.ReadUInt8(out this.exponent_focal_length_y);
            boxSize += stream.ReadInt64(out this.mantissa_focal_length_y);
            boxSize += stream.ReadUInt8(out this.exponent_principal_point_x);
            boxSize += stream.ReadInt64(out this.mantissa_principal_point_x);
            boxSize += stream.ReadUInt8(out this.exponent_principal_point_y);
            boxSize += stream.ReadInt64(out this.mantissa_principal_point_y);
            boxSize += stream.ReadUInt8(out this.exponent_skew_factor);
            boxSize += stream.ReadInt64(out this.mantissa_skew_factor);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(6, this.reserved);
            boxSize += stream.WriteBits(10, this.ref_view_id);
            boxSize += stream.WriteUInt32(this.prec_focal_length);
            boxSize += stream.WriteUInt32(this.prec_principal_point);
            boxSize += stream.WriteUInt32(this.prec_skew_factor);
            boxSize += stream.WriteUInt8(this.exponent_focal_length_x);
            boxSize += stream.WriteInt64(this.mantissa_focal_length_x);
            boxSize += stream.WriteUInt8(this.exponent_focal_length_y);
            boxSize += stream.WriteInt64(this.mantissa_focal_length_y);
            boxSize += stream.WriteUInt8(this.exponent_principal_point_x);
            boxSize += stream.WriteInt64(this.mantissa_principal_point_x);
            boxSize += stream.WriteUInt8(this.exponent_principal_point_y);
            boxSize += stream.WriteInt64(this.mantissa_principal_point_y);
            boxSize += stream.WriteUInt8(this.exponent_skew_factor);
            boxSize += stream.WriteInt64(this.mantissa_skew_factor);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 6; // reserved
            boxSize += 10; // ref_view_id
            boxSize += 32; // prec_focal_length
            boxSize += 32; // prec_principal_point
            boxSize += 32; // prec_skew_factor
            boxSize += 8; // exponent_focal_length_x
            boxSize += 64; // mantissa_focal_length_x
            boxSize += 8; // exponent_focal_length_y
            boxSize += 64; // mantissa_focal_length_y
            boxSize += 8; // exponent_principal_point_x
            boxSize += 64; // mantissa_principal_point_x
            boxSize += 8; // exponent_principal_point_y
            boxSize += 64; // mantissa_principal_point_y
            boxSize += 8; // exponent_skew_factor
            boxSize += 64; // mantissa_skew_factor
            return boxSize;
        }
    }


    /*
    class ExtrinsicCameraParametersBox extends FullBox ('ecam', version=0, flags) { 
     unsigned int(6)  reserved=0; 
     unsigned int(10)  ref_view_id; 
     unsigned int(8) prec_rotation_param; 
     unsigned int(8) prec_translation_param; 
     for (j=1; j<=3; j++) { /* row *//*   
      for (k=1; k<=3; k++) { /* column *//* 
       unsigned int(8) exponent_r[j][k]; 
       signed   int(64) mantissa_r [j][k]; 
      } 
      unsigned int(8) exponent_t[j]; 
      signed   int(64) mantissa_t[j]; 
     } 
    }
    */
    public class ExtrinsicCameraParametersBox : FullBox
    {
        public const string FourCC = "ecam";

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected ushort ref_view_id;
        public ushort RefViewId { get { return this.ref_view_id; } set { this.ref_view_id = value; } }

        protected byte prec_rotation_param;
        public byte PrecRotationParam { get { return this.prec_rotation_param; } set { this.prec_rotation_param = value; } }

        protected byte prec_translation_param;
        public byte PrecTranslationParam { get { return this.prec_translation_param; } set { this.prec_translation_param = value; } }

        protected byte[][] exponent_r;
        public byte[][] Exponentr { get { return this.exponent_r; } set { this.exponent_r = value; } }

        protected long[][] mantissa_r;
        public long[][] Mantissar { get { return this.mantissa_r; } set { this.mantissa_r = value; } }

        protected byte[] exponent_t;
        public byte[] Exponentt { get { return this.exponent_t; } set { this.exponent_t = value; } }

        protected long[] mantissa_t;
        public long[] Mantissat { get { return this.mantissa_t; } set { this.mantissa_t = value; } }

        public ExtrinsicCameraParametersBox(uint flags = 0) : base("ecam", 0, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(6, out this.reserved);
            boxSize += stream.ReadBits(10, out this.ref_view_id);
            boxSize += stream.ReadUInt8(out this.prec_rotation_param);
            boxSize += stream.ReadUInt8(out this.prec_translation_param);

            for (int j = 1; j <= 3; j++)
            {
                /*  row  */

                for (int k = 1; k <= 3; k++)
                {
                    /*  column  */
                    boxSize += stream.ReadUInt8(out this.exponent_r[j][k]);
                    boxSize += stream.ReadInt64(out this.mantissa_r[j][k]);
                }
                boxSize += stream.ReadUInt8(out this.exponent_t[j]);
                boxSize += stream.ReadInt64(out this.mantissa_t[j]);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(6, this.reserved);
            boxSize += stream.WriteBits(10, this.ref_view_id);
            boxSize += stream.WriteUInt8(this.prec_rotation_param);
            boxSize += stream.WriteUInt8(this.prec_translation_param);

            for (int j = 1; j <= 3; j++)
            {
                /*  row  */

                for (int k = 1; k <= 3; k++)
                {
                    /*  column  */
                    boxSize += stream.WriteUInt8(this.exponent_r[j][k]);
                    boxSize += stream.WriteInt64(this.mantissa_r[j][k]);
                }
                boxSize += stream.WriteUInt8(this.exponent_t[j]);
                boxSize += stream.WriteInt64(this.mantissa_t[j]);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 6; // reserved
            boxSize += 10; // ref_view_id
            boxSize += 8; // prec_rotation_param
            boxSize += 8; // prec_translation_param

            for (int j = 1; j <= 3; j++)
            {
                /*  row  */

                for (int k = 1; k <= 3; k++)
                {
                    /*  column  */
                    boxSize += 8; // exponent_r
                    boxSize += 64; // mantissa_r
                }
                boxSize += 8; // exponent_t
                boxSize += 64; // mantissa_t
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class AVCDecoderConfigurationRecord { 
     unsigned int(8) configurationVersion = 1; 
     unsigned int(8) AVCProfileIndication; 
     unsigned int(8) profile_compatibility; 
     unsigned int(8) AVCLevelIndication;  
     bit(6) reserved = '111111'b; 
     unsigned int(2) lengthSizeMinusOne;  
     bit(3) reserved = '111'b; 
     unsigned int(5) numOfSequenceParameterSets; 
     for (i=0; i< numOfSequenceParameterSets;  i++) { 
      unsigned int(16) sequenceParameterSetLength ; 
      bit(8*sequenceParameterSetLength) sequenceParameterSetNALUnit; 
     } 
     unsigned int(8) numOfPictureParameterSets; 
     for (i=0; i< numOfPictureParameterSets;  i++) { 
      unsigned int(16) pictureParameterSetLength; 
      bit(8*pictureParameterSetLength) pictureParameterSetNALUnit; 
     } 
     if( AVCProfileIndication  ==  100  ||  AVCProfileIndication  ==  110  || 
        AVCProfileIndication  ==  122  ||  AVCProfileIndication  ==  144 ) 
     { 
      bit(6) reserved = '111111'b; 
      unsigned int(2) chroma_format; 
      bit(5) reserved = '11111'b; 
      unsigned int(3) bit_depth_luma_minus8; 
      bit(5) reserved = '11111'b; 
      unsigned int(3) bit_depth_chroma_minus8; 
      unsigned int(8) numOfSequenceParameterSetExt; 
      for (i=0; i< numOfSequenceParameterSetExt; i++) { 
       unsigned int(16) sequenceParameterSetExtLength; 
       bit(8*sequenceParameterSetExtLength) sequenceParameterSetExtNALUnit; 
      }
     } 
    }
    */
    public class AVCDecoderConfigurationRecord
    {


        protected byte configurationVersion = 1;
        public byte ConfigurationVersion { get { return this.configurationVersion; } set { this.configurationVersion = value; } }

        protected byte AVCProfileIndication;
        public byte _AVCProfileIndication { get { return this.AVCProfileIndication; } set { this.AVCProfileIndication = value; } }

        protected byte profile_compatibility;
        public byte ProfileCompatibility { get { return this.profile_compatibility; } set { this.profile_compatibility = value; } }

        protected byte AVCLevelIndication;
        public byte _AVCLevelIndication { get { return this.AVCLevelIndication; } set { this.AVCLevelIndication = value; } }

        protected byte reserved = 0b111111;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte lengthSizeMinusOne;
        public byte LengthSizeMinusOne { get { return this.lengthSizeMinusOne; } set { this.lengthSizeMinusOne = value; } }

        protected byte reserved0 = 0b111;
        public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected byte numOfSequenceParameterSets;
        public byte NumOfSequenceParameterSets { get { return this.numOfSequenceParameterSets; } set { this.numOfSequenceParameterSets = value; } }

        protected ushort sequenceParameterSetLength;
        public ushort SequenceParameterSetLength { get { return this.sequenceParameterSetLength; } set { this.sequenceParameterSetLength = value; } }

        protected byte[] sequenceParameterSetNALUnit;
        public byte[] SequenceParameterSetNALUnit { get { return this.sequenceParameterSetNALUnit; } set { this.sequenceParameterSetNALUnit = value; } }

        protected byte numOfPictureParameterSets;
        public byte NumOfPictureParameterSets { get { return this.numOfPictureParameterSets; } set { this.numOfPictureParameterSets = value; } }

        protected ushort pictureParameterSetLength;
        public ushort PictureParameterSetLength { get { return this.pictureParameterSetLength; } set { this.pictureParameterSetLength = value; } }

        protected byte[] pictureParameterSetNALUnit;
        public byte[] PictureParameterSetNALUnit { get { return this.pictureParameterSetNALUnit; } set { this.pictureParameterSetNALUnit = value; } }

        protected byte reserved1 = 0b111111;
        public byte Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

        protected byte chroma_format;
        public byte ChromaFormat { get { return this.chroma_format; } set { this.chroma_format = value; } }

        protected byte reserved00 = 0b11111;
        public byte Reserved00 { get { return this.reserved00; } set { this.reserved00 = value; } }

        protected byte bit_depth_luma_minus8;
        public byte BitDepthLumaMinus8 { get { return this.bit_depth_luma_minus8; } set { this.bit_depth_luma_minus8 = value; } }

        protected byte reserved10 = 0b11111;
        public byte Reserved10 { get { return this.reserved10; } set { this.reserved10 = value; } }

        protected byte bit_depth_chroma_minus8;
        public byte BitDepthChromaMinus8 { get { return this.bit_depth_chroma_minus8; } set { this.bit_depth_chroma_minus8 = value; } }

        protected byte numOfSequenceParameterSetExt;
        public byte NumOfSequenceParameterSetExt { get { return this.numOfSequenceParameterSetExt; } set { this.numOfSequenceParameterSetExt = value; } }

        protected ushort sequenceParameterSetExtLength;
        public ushort SequenceParameterSetExtLength { get { return this.sequenceParameterSetExtLength; } set { this.sequenceParameterSetExtLength = value; } }

        protected byte[] sequenceParameterSetExtNALUnit;
        public byte[] SequenceParameterSetExtNALUnit { get { return this.sequenceParameterSetExtNALUnit; } set { this.sequenceParameterSetExtNALUnit = value; } }

        public AVCDecoderConfigurationRecord() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUInt8(out this.configurationVersion);
            boxSize += stream.ReadUInt8(out this.AVCProfileIndication);
            boxSize += stream.ReadUInt8(out this.profile_compatibility);
            boxSize += stream.ReadUInt8(out this.AVCLevelIndication);
            boxSize += stream.ReadBits(6, out this.reserved);
            boxSize += stream.ReadBits(2, out this.lengthSizeMinusOne);
            boxSize += stream.ReadBits(3, out this.reserved0);
            boxSize += stream.ReadBits(5, out this.numOfSequenceParameterSets);

            for (int i = 0; i < numOfSequenceParameterSets; i++)
            {
                boxSize += stream.ReadUInt16(out this.sequenceParameterSetLength);
                boxSize += stream.ReadBytes(sequenceParameterSetLength, out this.sequenceParameterSetNALUnit);
            }
            boxSize += stream.ReadUInt8(out this.numOfPictureParameterSets);

            for (int i = 0; i < numOfPictureParameterSets; i++)
            {
                boxSize += stream.ReadUInt16(out this.pictureParameterSetLength);
                boxSize += stream.ReadBytes(pictureParameterSetLength, out this.pictureParameterSetNALUnit);
            }

            if (AVCProfileIndication == 100 || AVCProfileIndication == 110 ||
        AVCProfileIndication == 122 || AVCProfileIndication == 144)
            {
                boxSize += stream.ReadBits(6, out this.reserved1);
                boxSize += stream.ReadBits(2, out this.chroma_format);
                boxSize += stream.ReadBits(5, out this.reserved00);
                boxSize += stream.ReadBits(3, out this.bit_depth_luma_minus8);
                boxSize += stream.ReadBits(5, out this.reserved10);
                boxSize += stream.ReadBits(3, out this.bit_depth_chroma_minus8);
                boxSize += stream.ReadUInt8(out this.numOfSequenceParameterSetExt);

                for (int i = 0; i < numOfSequenceParameterSetExt; i++)
                {
                    boxSize += stream.ReadUInt16(out this.sequenceParameterSetExtLength);
                    boxSize += stream.ReadBytes(sequenceParameterSetExtLength, out this.sequenceParameterSetExtNALUnit);
                }
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUInt8(this.configurationVersion);
            boxSize += stream.WriteUInt8(this.AVCProfileIndication);
            boxSize += stream.WriteUInt8(this.profile_compatibility);
            boxSize += stream.WriteUInt8(this.AVCLevelIndication);
            boxSize += stream.WriteBits(6, this.reserved);
            boxSize += stream.WriteBits(2, this.lengthSizeMinusOne);
            boxSize += stream.WriteBits(3, this.reserved0);
            boxSize += stream.WriteBits(5, this.numOfSequenceParameterSets);

            for (int i = 0; i < numOfSequenceParameterSets; i++)
            {
                boxSize += stream.WriteUInt16(this.sequenceParameterSetLength);
                boxSize += stream.WriteBytes(sequenceParameterSetLength, this.sequenceParameterSetNALUnit);
            }
            boxSize += stream.WriteUInt8(this.numOfPictureParameterSets);

            for (int i = 0; i < numOfPictureParameterSets; i++)
            {
                boxSize += stream.WriteUInt16(this.pictureParameterSetLength);
                boxSize += stream.WriteBytes(pictureParameterSetLength, this.pictureParameterSetNALUnit);
            }

            if (AVCProfileIndication == 100 || AVCProfileIndication == 110 ||
        AVCProfileIndication == 122 || AVCProfileIndication == 144)
            {
                boxSize += stream.WriteBits(6, this.reserved1);
                boxSize += stream.WriteBits(2, this.chroma_format);
                boxSize += stream.WriteBits(5, this.reserved00);
                boxSize += stream.WriteBits(3, this.bit_depth_luma_minus8);
                boxSize += stream.WriteBits(5, this.reserved10);
                boxSize += stream.WriteBits(3, this.bit_depth_chroma_minus8);
                boxSize += stream.WriteUInt8(this.numOfSequenceParameterSetExt);

                for (int i = 0; i < numOfSequenceParameterSetExt; i++)
                {
                    boxSize += stream.WriteUInt16(this.sequenceParameterSetExtLength);
                    boxSize += stream.WriteBytes(sequenceParameterSetExtLength, this.sequenceParameterSetExtNALUnit);
                }
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 8; // configurationVersion
            boxSize += 8; // AVCProfileIndication
            boxSize += 8; // profile_compatibility
            boxSize += 8; // AVCLevelIndication
            boxSize += 6; // reserved
            boxSize += 2; // lengthSizeMinusOne
            boxSize += 3; // reserved0
            boxSize += 5; // numOfSequenceParameterSets

            for (int i = 0; i < numOfSequenceParameterSets; i++)
            {
                boxSize += 16; // sequenceParameterSetLength
                boxSize += (ulong)sequenceParameterSetLength * 8; // sequenceParameterSetNALUnit
            }
            boxSize += 8; // numOfPictureParameterSets

            for (int i = 0; i < numOfPictureParameterSets; i++)
            {
                boxSize += 16; // pictureParameterSetLength
                boxSize += (ulong)pictureParameterSetLength * 8; // pictureParameterSetNALUnit
            }

            if (AVCProfileIndication == 100 || AVCProfileIndication == 110 ||
        AVCProfileIndication == 122 || AVCProfileIndication == 144)
            {
                boxSize += 6; // reserved1
                boxSize += 2; // chroma_format
                boxSize += 5; // reserved00
                boxSize += 3; // bit_depth_luma_minus8
                boxSize += 5; // reserved10
                boxSize += 3; // bit_depth_chroma_minus8
                boxSize += 8; // numOfSequenceParameterSetExt

                for (int i = 0; i < numOfSequenceParameterSetExt; i++)
                {
                    boxSize += 16; // sequenceParameterSetExtLength
                    boxSize += (ulong)sequenceParameterSetExtLength * 8; // sequenceParameterSetExtNALUnit
                }
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class MVCDecoderConfigurationRecord { 
    unsigned int(8) configurationVersion = 1; 
    unsigned int(8) AVCProfileIndication; 
    unsigned int(8) profile_compatibility; 
    unsigned int(8) AVCLevelIndication;  
     bit(1) complete_representation; 
     bit(1) explicit_au_track; 
    bit(4) reserved = '1111'b; 
    unsigned int(2) lengthSizeMinusOne;  
    bit(1) reserved = '0'b; 
    unsigned int(7) numOfSequenceParameterSets; 
    for (i=0; i< numOfSequenceParameterSets; i++) { 
    unsigned int(16) sequenceParameterSetLength ; 
      bit(8*sequenceParameterSetLength) sequenceParameterSetNALUnit; 
     } 
    unsigned int(8) numOfPictureParameterSets; 
    for (i=0; i< numOfPictureParameterSets; i++) { 
      unsigned int(16) pictureParameterSetLength; 
      bit(8*pictureParameterSetLength) pictureParameterSetNALUnit; 
     } 
    }
    */
    public class MVCDecoderConfigurationRecord
    {


        protected byte configurationVersion = 1;
        public byte ConfigurationVersion { get { return this.configurationVersion; } set { this.configurationVersion = value; } }

        protected byte AVCProfileIndication;
        public byte _AVCProfileIndication { get { return this.AVCProfileIndication; } set { this.AVCProfileIndication = value; } }

        protected byte profile_compatibility;
        public byte ProfileCompatibility { get { return this.profile_compatibility; } set { this.profile_compatibility = value; } }

        protected byte AVCLevelIndication;
        public byte _AVCLevelIndication { get { return this.AVCLevelIndication; } set { this.AVCLevelIndication = value; } }

        protected bool complete_representation;
        public bool CompleteRepresentation { get { return this.complete_representation; } set { this.complete_representation = value; } }

        protected bool explicit_au_track;
        public bool ExplicitAuTrack { get { return this.explicit_au_track; } set { this.explicit_au_track = value; } }

        protected byte reserved = 0b1111;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte lengthSizeMinusOne;
        public byte LengthSizeMinusOne { get { return this.lengthSizeMinusOne; } set { this.lengthSizeMinusOne = value; } }

        protected bool reserved0 = false;
        public bool Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected byte numOfSequenceParameterSets;
        public byte NumOfSequenceParameterSets { get { return this.numOfSequenceParameterSets; } set { this.numOfSequenceParameterSets = value; } }

        protected ushort sequenceParameterSetLength;
        public ushort SequenceParameterSetLength { get { return this.sequenceParameterSetLength; } set { this.sequenceParameterSetLength = value; } }

        protected byte[] sequenceParameterSetNALUnit;
        public byte[] SequenceParameterSetNALUnit { get { return this.sequenceParameterSetNALUnit; } set { this.sequenceParameterSetNALUnit = value; } }

        protected byte numOfPictureParameterSets;
        public byte NumOfPictureParameterSets { get { return this.numOfPictureParameterSets; } set { this.numOfPictureParameterSets = value; } }

        protected ushort pictureParameterSetLength;
        public ushort PictureParameterSetLength { get { return this.pictureParameterSetLength; } set { this.pictureParameterSetLength = value; } }

        protected byte[] pictureParameterSetNALUnit;
        public byte[] PictureParameterSetNALUnit { get { return this.pictureParameterSetNALUnit; } set { this.pictureParameterSetNALUnit = value; } }

        public MVCDecoderConfigurationRecord() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUInt8(out this.configurationVersion);
            boxSize += stream.ReadUInt8(out this.AVCProfileIndication);
            boxSize += stream.ReadUInt8(out this.profile_compatibility);
            boxSize += stream.ReadUInt8(out this.AVCLevelIndication);
            boxSize += stream.ReadBit(out this.complete_representation);
            boxSize += stream.ReadBit(out this.explicit_au_track);
            boxSize += stream.ReadBits(4, out this.reserved);
            boxSize += stream.ReadBits(2, out this.lengthSizeMinusOne);
            boxSize += stream.ReadBit(out this.reserved0);
            boxSize += stream.ReadBits(7, out this.numOfSequenceParameterSets);

            for (int i = 0; i < numOfSequenceParameterSets; i++)
            {
                boxSize += stream.ReadUInt16(out this.sequenceParameterSetLength);
                boxSize += stream.ReadBytes(sequenceParameterSetLength, out this.sequenceParameterSetNALUnit);
            }
            boxSize += stream.ReadUInt8(out this.numOfPictureParameterSets);

            for (int i = 0; i < numOfPictureParameterSets; i++)
            {
                boxSize += stream.ReadUInt16(out this.pictureParameterSetLength);
                boxSize += stream.ReadBytes(pictureParameterSetLength, out this.pictureParameterSetNALUnit);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUInt8(this.configurationVersion);
            boxSize += stream.WriteUInt8(this.AVCProfileIndication);
            boxSize += stream.WriteUInt8(this.profile_compatibility);
            boxSize += stream.WriteUInt8(this.AVCLevelIndication);
            boxSize += stream.WriteBit(this.complete_representation);
            boxSize += stream.WriteBit(this.explicit_au_track);
            boxSize += stream.WriteBits(4, this.reserved);
            boxSize += stream.WriteBits(2, this.lengthSizeMinusOne);
            boxSize += stream.WriteBit(this.reserved0);
            boxSize += stream.WriteBits(7, this.numOfSequenceParameterSets);

            for (int i = 0; i < numOfSequenceParameterSets; i++)
            {
                boxSize += stream.WriteUInt16(this.sequenceParameterSetLength);
                boxSize += stream.WriteBytes(sequenceParameterSetLength, this.sequenceParameterSetNALUnit);
            }
            boxSize += stream.WriteUInt8(this.numOfPictureParameterSets);

            for (int i = 0; i < numOfPictureParameterSets; i++)
            {
                boxSize += stream.WriteUInt16(this.pictureParameterSetLength);
                boxSize += stream.WriteBytes(pictureParameterSetLength, this.pictureParameterSetNALUnit);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 8; // configurationVersion
            boxSize += 8; // AVCProfileIndication
            boxSize += 8; // profile_compatibility
            boxSize += 8; // AVCLevelIndication
            boxSize += 1; // complete_representation
            boxSize += 1; // explicit_au_track
            boxSize += 4; // reserved
            boxSize += 2; // lengthSizeMinusOne
            boxSize += 1; // reserved0
            boxSize += 7; // numOfSequenceParameterSets

            for (int i = 0; i < numOfSequenceParameterSets; i++)
            {
                boxSize += 16; // sequenceParameterSetLength
                boxSize += (ulong)sequenceParameterSetLength * 8; // sequenceParameterSetNALUnit
            }
            boxSize += 8; // numOfPictureParameterSets

            for (int i = 0; i < numOfPictureParameterSets; i++)
            {
                boxSize += 16; // pictureParameterSetLength
                boxSize += (ulong)pictureParameterSetLength * 8; // pictureParameterSetNALUnit
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SVCDecoderConfigurationRecord { 
    unsigned int(8) configurationVersion = 1; 
    unsigned int(8) AVCProfileIndication; 
    unsigned int(8) profile_compatibility; 
    unsigned int(8) AVCLevelIndication;  
     bit(1) complete_represenation; 
    bit(5) reserved = '11111'b; 
    unsigned int(2) lengthSizeMinusOne;  
    bit(1) reserved = '0'b; 
    unsigned int(7) numOfSequenceParameterSets; 
    for (i=0; i< numOfSequenceParameterSets; i++) { 
    unsigned int(16) sequenceParameterSetLength ; 
      bit(8*sequenceParameterSetLength) sequenceParameterSetNALUnit; 
     } 
    unsigned int(8) numOfPictureParameterSets; 
    for (i=0; i< numOfPictureParameterSets; i++) { 
      unsigned int(16) pictureParameterSetLength; 
      bit(8*pictureParameterSetLength) pictureParameterSetNALUnit; 
     } 
    }
    */
    public class SVCDecoderConfigurationRecord
    {


        protected byte configurationVersion = 1;
        public byte ConfigurationVersion { get { return this.configurationVersion; } set { this.configurationVersion = value; } }

        protected byte AVCProfileIndication;
        public byte _AVCProfileIndication { get { return this.AVCProfileIndication; } set { this.AVCProfileIndication = value; } }

        protected byte profile_compatibility;
        public byte ProfileCompatibility { get { return this.profile_compatibility; } set { this.profile_compatibility = value; } }

        protected byte AVCLevelIndication;
        public byte _AVCLevelIndication { get { return this.AVCLevelIndication; } set { this.AVCLevelIndication = value; } }

        protected bool complete_represenation;
        public bool CompleteRepresenation { get { return this.complete_represenation; } set { this.complete_represenation = value; } }

        protected byte reserved = 0b11111;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte lengthSizeMinusOne;
        public byte LengthSizeMinusOne { get { return this.lengthSizeMinusOne; } set { this.lengthSizeMinusOne = value; } }

        protected bool reserved0 = false;
        public bool Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected byte numOfSequenceParameterSets;
        public byte NumOfSequenceParameterSets { get { return this.numOfSequenceParameterSets; } set { this.numOfSequenceParameterSets = value; } }

        protected ushort sequenceParameterSetLength;
        public ushort SequenceParameterSetLength { get { return this.sequenceParameterSetLength; } set { this.sequenceParameterSetLength = value; } }

        protected byte[] sequenceParameterSetNALUnit;
        public byte[] SequenceParameterSetNALUnit { get { return this.sequenceParameterSetNALUnit; } set { this.sequenceParameterSetNALUnit = value; } }

        protected byte numOfPictureParameterSets;
        public byte NumOfPictureParameterSets { get { return this.numOfPictureParameterSets; } set { this.numOfPictureParameterSets = value; } }

        protected ushort pictureParameterSetLength;
        public ushort PictureParameterSetLength { get { return this.pictureParameterSetLength; } set { this.pictureParameterSetLength = value; } }

        protected byte[] pictureParameterSetNALUnit;
        public byte[] PictureParameterSetNALUnit { get { return this.pictureParameterSetNALUnit; } set { this.pictureParameterSetNALUnit = value; } }

        public SVCDecoderConfigurationRecord() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUInt8(out this.configurationVersion);
            boxSize += stream.ReadUInt8(out this.AVCProfileIndication);
            boxSize += stream.ReadUInt8(out this.profile_compatibility);
            boxSize += stream.ReadUInt8(out this.AVCLevelIndication);
            boxSize += stream.ReadBit(out this.complete_represenation);
            boxSize += stream.ReadBits(5, out this.reserved);
            boxSize += stream.ReadBits(2, out this.lengthSizeMinusOne);
            boxSize += stream.ReadBit(out this.reserved0);
            boxSize += stream.ReadBits(7, out this.numOfSequenceParameterSets);

            for (int i = 0; i < numOfSequenceParameterSets; i++)
            {
                boxSize += stream.ReadUInt16(out this.sequenceParameterSetLength);
                boxSize += stream.ReadBytes(sequenceParameterSetLength, out this.sequenceParameterSetNALUnit);
            }
            boxSize += stream.ReadUInt8(out this.numOfPictureParameterSets);

            for (int i = 0; i < numOfPictureParameterSets; i++)
            {
                boxSize += stream.ReadUInt16(out this.pictureParameterSetLength);
                boxSize += stream.ReadBytes(pictureParameterSetLength, out this.pictureParameterSetNALUnit);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUInt8(this.configurationVersion);
            boxSize += stream.WriteUInt8(this.AVCProfileIndication);
            boxSize += stream.WriteUInt8(this.profile_compatibility);
            boxSize += stream.WriteUInt8(this.AVCLevelIndication);
            boxSize += stream.WriteBit(this.complete_represenation);
            boxSize += stream.WriteBits(5, this.reserved);
            boxSize += stream.WriteBits(2, this.lengthSizeMinusOne);
            boxSize += stream.WriteBit(this.reserved0);
            boxSize += stream.WriteBits(7, this.numOfSequenceParameterSets);

            for (int i = 0; i < numOfSequenceParameterSets; i++)
            {
                boxSize += stream.WriteUInt16(this.sequenceParameterSetLength);
                boxSize += stream.WriteBytes(sequenceParameterSetLength, this.sequenceParameterSetNALUnit);
            }
            boxSize += stream.WriteUInt8(this.numOfPictureParameterSets);

            for (int i = 0; i < numOfPictureParameterSets; i++)
            {
                boxSize += stream.WriteUInt16(this.pictureParameterSetLength);
                boxSize += stream.WriteBytes(pictureParameterSetLength, this.pictureParameterSetNALUnit);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 8; // configurationVersion
            boxSize += 8; // AVCProfileIndication
            boxSize += 8; // profile_compatibility
            boxSize += 8; // AVCLevelIndication
            boxSize += 1; // complete_represenation
            boxSize += 5; // reserved
            boxSize += 2; // lengthSizeMinusOne
            boxSize += 1; // reserved0
            boxSize += 7; // numOfSequenceParameterSets

            for (int i = 0; i < numOfSequenceParameterSets; i++)
            {
                boxSize += 16; // sequenceParameterSetLength
                boxSize += (ulong)sequenceParameterSetLength * 8; // sequenceParameterSetNALUnit
            }
            boxSize += 8; // numOfPictureParameterSets

            for (int i = 0; i < numOfPictureParameterSets; i++)
            {
                boxSize += 16; // pictureParameterSetLength
                boxSize += (ulong)pictureParameterSetLength * 8; // pictureParameterSetNALUnit
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class HEVCDecoderConfigurationRecord {
        unsigned int(8) configurationVersion = 1;
        unsigned int(2) general_profile_space;
        unsigned int(1) general_tier_flag;
        unsigned int(5) general_profile_idc;
        unsigned int(32) general_profile_compatibility_flags;
        unsigned int(48) general_constraint_indicator_flags;
        unsigned int(8) general_level_idc;
        bit(4) reserved = '1111'b;
        unsigned int(12) min_spatial_segmentation_idc;
        bit(6) reserved = '111111'b;
        unsigned int(2) parallelismType;
        bit(6) reserved = '111111'b;
        unsigned int(2) chromaFormat;
        bit(5) reserved = '11111'b;
        unsigned int(3) bitDepthLumaMinus8;
        bit(5) reserved = '11111'b;
        unsigned int(3) bitDepthChromaMinus8;
        bit(16) avgFrameRate;
        bit(2) constantFrameRate;
        bit(3) numTemporalLayers;
        bit(1) temporalIdNested;
        unsigned int(2) lengthSizeMinusOne; 
        unsigned int(8) numOfArrays;
        for (j=0; j < numOfArrays; j++) {
            bit(1) array_completeness;
            unsigned int(1) reserved = 0;
            unsigned int(6) NAL_unit_type;
            unsigned int(16) numNalus;
            for (i=0; i< numNalus; i++) {
                unsigned int(16) nalUnitLength;
                bit(8*nalUnitLength) nalUnit;
            }
        }
    }
    */
    public class HEVCDecoderConfigurationRecord
    {


        protected byte configurationVersion = 1;
        public byte ConfigurationVersion { get { return this.configurationVersion; } set { this.configurationVersion = value; } }

        protected byte general_profile_space;
        public byte GeneralProfileSpace { get { return this.general_profile_space; } set { this.general_profile_space = value; } }

        protected bool general_tier_flag;
        public bool GeneralTierFlag { get { return this.general_tier_flag; } set { this.general_tier_flag = value; } }

        protected byte general_profile_idc;
        public byte GeneralProfileIdc { get { return this.general_profile_idc; } set { this.general_profile_idc = value; } }

        protected uint general_profile_compatibility_flags;
        public uint GeneralProfileCompatibilityFlags { get { return this.general_profile_compatibility_flags; } set { this.general_profile_compatibility_flags = value; } }

        protected ulong general_constraint_indicator_flags;
        public ulong GeneralConstraintIndicatorFlags { get { return this.general_constraint_indicator_flags; } set { this.general_constraint_indicator_flags = value; } }

        protected byte general_level_idc;
        public byte GeneralLevelIdc { get { return this.general_level_idc; } set { this.general_level_idc = value; } }

        protected byte reserved = 0b1111;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected ushort min_spatial_segmentation_idc;
        public ushort MinSpatialSegmentationIdc { get { return this.min_spatial_segmentation_idc; } set { this.min_spatial_segmentation_idc = value; } }

        protected byte reserved0 = 0b111111;
        public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected byte parallelismType;
        public byte ParallelismType { get { return this.parallelismType; } set { this.parallelismType = value; } }

        protected byte reserved1 = 0b111111;
        public byte Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

        protected byte chromaFormat;
        public byte ChromaFormat { get { return this.chromaFormat; } set { this.chromaFormat = value; } }

        protected byte reserved2 = 0b11111;
        public byte Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

        protected byte bitDepthLumaMinus8;
        public byte BitDepthLumaMinus8 { get { return this.bitDepthLumaMinus8; } set { this.bitDepthLumaMinus8 = value; } }

        protected byte reserved3 = 0b11111;
        public byte Reserved3 { get { return this.reserved3; } set { this.reserved3 = value; } }

        protected byte bitDepthChromaMinus8;
        public byte BitDepthChromaMinus8 { get { return this.bitDepthChromaMinus8; } set { this.bitDepthChromaMinus8 = value; } }

        protected ushort avgFrameRate;
        public ushort AvgFrameRate { get { return this.avgFrameRate; } set { this.avgFrameRate = value; } }

        protected byte constantFrameRate;
        public byte ConstantFrameRate { get { return this.constantFrameRate; } set { this.constantFrameRate = value; } }

        protected byte numTemporalLayers;
        public byte NumTemporalLayers { get { return this.numTemporalLayers; } set { this.numTemporalLayers = value; } }

        protected bool temporalIdNested;
        public bool TemporalIdNested { get { return this.temporalIdNested; } set { this.temporalIdNested = value; } }

        protected byte lengthSizeMinusOne;
        public byte LengthSizeMinusOne { get { return this.lengthSizeMinusOne; } set { this.lengthSizeMinusOne = value; } }

        protected byte numOfArrays;
        public byte NumOfArrays { get { return this.numOfArrays; } set { this.numOfArrays = value; } }

        protected bool array_completeness;
        public bool ArrayCompleteness { get { return this.array_completeness; } set { this.array_completeness = value; } }

        protected bool reserved4 = false;
        public bool Reserved4 { get { return this.reserved4; } set { this.reserved4 = value; } }

        protected byte NAL_unit_type;
        public byte NALUnitType { get { return this.NAL_unit_type; } set { this.NAL_unit_type = value; } }

        protected ushort numNalus;
        public ushort NumNalus { get { return this.numNalus; } set { this.numNalus = value; } }

        protected ushort nalUnitLength;
        public ushort NalUnitLength { get { return this.nalUnitLength; } set { this.nalUnitLength = value; } }

        protected byte[] nalUnit;
        public byte[] NalUnit { get { return this.nalUnit; } set { this.nalUnit = value; } }

        public HEVCDecoderConfigurationRecord() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUInt8(out this.configurationVersion);
            boxSize += stream.ReadBits(2, out this.general_profile_space);
            boxSize += stream.ReadBit(out this.general_tier_flag);
            boxSize += stream.ReadBits(5, out this.general_profile_idc);
            boxSize += stream.ReadUInt32(out this.general_profile_compatibility_flags);
            boxSize += stream.ReadUInt48(out this.general_constraint_indicator_flags);
            boxSize += stream.ReadUInt8(out this.general_level_idc);
            boxSize += stream.ReadBits(4, out this.reserved);
            boxSize += stream.ReadBits(12, out this.min_spatial_segmentation_idc);
            boxSize += stream.ReadBits(6, out this.reserved0);
            boxSize += stream.ReadBits(2, out this.parallelismType);
            boxSize += stream.ReadBits(6, out this.reserved1);
            boxSize += stream.ReadBits(2, out this.chromaFormat);
            boxSize += stream.ReadBits(5, out this.reserved2);
            boxSize += stream.ReadBits(3, out this.bitDepthLumaMinus8);
            boxSize += stream.ReadBits(5, out this.reserved3);
            boxSize += stream.ReadBits(3, out this.bitDepthChromaMinus8);
            boxSize += stream.ReadUInt16(out this.avgFrameRate);
            boxSize += stream.ReadBits(2, out this.constantFrameRate);
            boxSize += stream.ReadBits(3, out this.numTemporalLayers);
            boxSize += stream.ReadBit(out this.temporalIdNested);
            boxSize += stream.ReadBits(2, out this.lengthSizeMinusOne);
            boxSize += stream.ReadUInt8(out this.numOfArrays);

            for (int j = 0; j < numOfArrays; j++)
            {
                boxSize += stream.ReadBit(out this.array_completeness);
                boxSize += stream.ReadBit(out this.reserved4);
                boxSize += stream.ReadBits(6, out this.NAL_unit_type);
                boxSize += stream.ReadUInt16(out this.numNalus);

                for (int i = 0; i < numNalus; i++)
                {
                    boxSize += stream.ReadUInt16(out this.nalUnitLength);
                    boxSize += stream.ReadBytes(nalUnitLength, out this.nalUnit);
                }
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUInt8(this.configurationVersion);
            boxSize += stream.WriteBits(2, this.general_profile_space);
            boxSize += stream.WriteBit(this.general_tier_flag);
            boxSize += stream.WriteBits(5, this.general_profile_idc);
            boxSize += stream.WriteUInt32(this.general_profile_compatibility_flags);
            boxSize += stream.WriteUInt48(this.general_constraint_indicator_flags);
            boxSize += stream.WriteUInt8(this.general_level_idc);
            boxSize += stream.WriteBits(4, this.reserved);
            boxSize += stream.WriteBits(12, this.min_spatial_segmentation_idc);
            boxSize += stream.WriteBits(6, this.reserved0);
            boxSize += stream.WriteBits(2, this.parallelismType);
            boxSize += stream.WriteBits(6, this.reserved1);
            boxSize += stream.WriteBits(2, this.chromaFormat);
            boxSize += stream.WriteBits(5, this.reserved2);
            boxSize += stream.WriteBits(3, this.bitDepthLumaMinus8);
            boxSize += stream.WriteBits(5, this.reserved3);
            boxSize += stream.WriteBits(3, this.bitDepthChromaMinus8);
            boxSize += stream.WriteUInt16(this.avgFrameRate);
            boxSize += stream.WriteBits(2, this.constantFrameRate);
            boxSize += stream.WriteBits(3, this.numTemporalLayers);
            boxSize += stream.WriteBit(this.temporalIdNested);
            boxSize += stream.WriteBits(2, this.lengthSizeMinusOne);
            boxSize += stream.WriteUInt8(this.numOfArrays);

            for (int j = 0; j < numOfArrays; j++)
            {
                boxSize += stream.WriteBit(this.array_completeness);
                boxSize += stream.WriteBit(this.reserved4);
                boxSize += stream.WriteBits(6, this.NAL_unit_type);
                boxSize += stream.WriteUInt16(this.numNalus);

                for (int i = 0; i < numNalus; i++)
                {
                    boxSize += stream.WriteUInt16(this.nalUnitLength);
                    boxSize += stream.WriteBytes(nalUnitLength, this.nalUnit);
                }
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 8; // configurationVersion
            boxSize += 2; // general_profile_space
            boxSize += 1; // general_tier_flag
            boxSize += 5; // general_profile_idc
            boxSize += 32; // general_profile_compatibility_flags
            boxSize += 48; // general_constraint_indicator_flags
            boxSize += 8; // general_level_idc
            boxSize += 4; // reserved
            boxSize += 12; // min_spatial_segmentation_idc
            boxSize += 6; // reserved0
            boxSize += 2; // parallelismType
            boxSize += 6; // reserved1
            boxSize += 2; // chromaFormat
            boxSize += 5; // reserved2
            boxSize += 3; // bitDepthLumaMinus8
            boxSize += 5; // reserved3
            boxSize += 3; // bitDepthChromaMinus8
            boxSize += 16; // avgFrameRate
            boxSize += 2; // constantFrameRate
            boxSize += 3; // numTemporalLayers
            boxSize += 1; // temporalIdNested
            boxSize += 2; // lengthSizeMinusOne
            boxSize += 8; // numOfArrays

            for (int j = 0; j < numOfArrays; j++)
            {
                boxSize += 1; // array_completeness
                boxSize += 1; // reserved4
                boxSize += 6; // NAL_unit_type
                boxSize += 16; // numNalus

                for (int i = 0; i < numNalus; i++)
                {
                    boxSize += 16; // nalUnitLength
                    boxSize += (ulong)nalUnitLength * 8; // nalUnit
                }
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class VvcPTLRecord(num_sublayers) {
        bit(2) reserved = 0;
        unsigned int(6) num_bytes_constraint_info;
        unsigned int(7) general_profile_idc;
        unsigned int(1) general_tier_flag;
        unsigned int(8) general_level_idc;
        unsigned int(1) ptl_frame_only_constraint_flag;
        unsigned int(1) ptl_multi_layer_enabled_flag;
        unsigned int(8*num_bytes_constraint_info - 2) general_constraint_info;
        for (i=num_sublayers - 2; i >= 0; i--)
            unsigned int(1) ptl_sublayer_level_present_flag[i];
        for (j=num_sublayers; j<=8 && num_sublayers > 1; j++)
            bit(1) ptl_reserved_zero_bit = 0;
        for (i=num_sublayers-2; i >= 0; i--) {
            if (ptl_sublayer_level_present_flag[i])
                unsigned int(8) sublayer_level_idc[i];
            }
        unsigned int(8) ptl_num_sub_profiles;
        for (j=0; j < ptl_num_sub_profiles; j++)
            unsigned int(32) general_sub_profile_idc[j];
    } 
    */
    public class VvcPTLRecord
    {


        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte num_bytes_constraint_info;
        public byte NumBytesConstraintInfo { get { return this.num_bytes_constraint_info; } set { this.num_bytes_constraint_info = value; } }

        protected byte general_profile_idc;
        public byte GeneralProfileIdc { get { return this.general_profile_idc; } set { this.general_profile_idc = value; } }

        protected bool general_tier_flag;
        public bool GeneralTierFlag { get { return this.general_tier_flag; } set { this.general_tier_flag = value; } }

        protected byte general_level_idc;
        public byte GeneralLevelIdc { get { return this.general_level_idc; } set { this.general_level_idc = value; } }

        protected bool ptl_frame_only_constraint_flag;
        public bool PtlFrameOnlyConstraintFlag { get { return this.ptl_frame_only_constraint_flag; } set { this.ptl_frame_only_constraint_flag = value; } }

        protected bool ptl_multi_layer_enabled_flag;
        public bool PtlMultiLayerEnabledFlag { get { return this.ptl_multi_layer_enabled_flag; } set { this.ptl_multi_layer_enabled_flag = value; } }

        protected byte[] general_constraint_info;
        public byte[] GeneralConstraintInfo { get { return this.general_constraint_info; } set { this.general_constraint_info = value; } }

        protected bool[] ptl_sublayer_level_present_flag;
        public bool[] PtlSublayerLevelPresentFlag { get { return this.ptl_sublayer_level_present_flag; } set { this.ptl_sublayer_level_present_flag = value; } }

        protected bool ptl_reserved_zero_bit = false;
        public bool PtlReservedZeroBit { get { return this.ptl_reserved_zero_bit; } set { this.ptl_reserved_zero_bit = value; } }

        protected byte[] sublayer_level_idc;
        public byte[] SublayerLevelIdc { get { return this.sublayer_level_idc; } set { this.sublayer_level_idc = value; } }

        protected byte ptl_num_sub_profiles;
        public byte PtlNumSubProfiles { get { return this.ptl_num_sub_profiles; } set { this.ptl_num_sub_profiles = value; } }

        protected uint[] general_sub_profile_idc;
        public uint[] GeneralSubProfileIdc { get { return this.general_sub_profile_idc; } set { this.general_sub_profile_idc = value; } }

        public VvcPTLRecord(ulong num_sublayers) : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            int num_sublayers = 0; // TODO pass arg

            boxSize += stream.ReadBits(2, out this.reserved);
            boxSize += stream.ReadBits(6, out this.num_bytes_constraint_info);
            boxSize += stream.ReadBits(7, out this.general_profile_idc);
            boxSize += stream.ReadBit(out this.general_tier_flag);
            boxSize += stream.ReadUInt8(out this.general_level_idc);
            boxSize += stream.ReadBit(out this.ptl_frame_only_constraint_flag);
            boxSize += stream.ReadBit(out this.ptl_multi_layer_enabled_flag);
            boxSize += stream.ReadBytes((ulong)(num_bytes_constraint_info - 2), out this.general_constraint_info);

            for (int i = num_sublayers - 2; i >= 0; i--)
            {
                boxSize += stream.ReadBit(out this.ptl_sublayer_level_present_flag[i]);
            }

            for (int j = num_sublayers; j <= 8 && num_sublayers > 1; j++)
            {
                boxSize += stream.ReadBit(out this.ptl_reserved_zero_bit);
            }

            for (int i = num_sublayers - 2; i >= 0; i--)
            {

                if (ptl_sublayer_level_present_flag[i])
                {
                    boxSize += stream.ReadUInt8(out this.sublayer_level_idc[i]);
                }
            }
            boxSize += stream.ReadUInt8(out this.ptl_num_sub_profiles);

            for (int j = 0; j < ptl_num_sub_profiles; j++)
            {
                boxSize += stream.ReadUInt32(out this.general_sub_profile_idc[j]);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            int num_sublayers = 0; // TODO pass arg

            boxSize += stream.WriteBits(2, this.reserved);
            boxSize += stream.WriteBits(6, this.num_bytes_constraint_info);
            boxSize += stream.WriteBits(7, this.general_profile_idc);
            boxSize += stream.WriteBit(this.general_tier_flag);
            boxSize += stream.WriteUInt8(this.general_level_idc);
            boxSize += stream.WriteBit(this.ptl_frame_only_constraint_flag);
            boxSize += stream.WriteBit(this.ptl_multi_layer_enabled_flag);
            boxSize += stream.WriteBytes((ulong)(num_bytes_constraint_info - 2), this.general_constraint_info);

            for (int i = num_sublayers - 2; i >= 0; i--)
            {
                boxSize += stream.WriteBit(this.ptl_sublayer_level_present_flag[i]);
            }

            for (int j = num_sublayers; j <= 8 && num_sublayers > 1; j++)
            {
                boxSize += stream.WriteBit(this.ptl_reserved_zero_bit);
            }

            for (int i = num_sublayers - 2; i >= 0; i--)
            {

                if (ptl_sublayer_level_present_flag[i])
                {
                    boxSize += stream.WriteUInt8(this.sublayer_level_idc[i]);
                }
            }
            boxSize += stream.WriteUInt8(this.ptl_num_sub_profiles);

            for (int j = 0; j < ptl_num_sub_profiles; j++)
            {
                boxSize += stream.WriteUInt32(this.general_sub_profile_idc[j]);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            int num_sublayers = 0; // TODO pass arg

            boxSize += 2; // reserved
            boxSize += 6; // num_bytes_constraint_info
            boxSize += 7; // general_profile_idc
            boxSize += 1; // general_tier_flag
            boxSize += 8; // general_level_idc
            boxSize += 1; // ptl_frame_only_constraint_flag
            boxSize += 1; // ptl_multi_layer_enabled_flag
            boxSize += (ulong)(num_bytes_constraint_info - 2); // general_constraint_info

            for (int i = num_sublayers - 2; i >= 0; i--)
            {
                boxSize += 1; // ptl_sublayer_level_present_flag
            }

            for (int j = num_sublayers; j <= 8 && num_sublayers > 1; j++)
            {
                boxSize += 1; // ptl_reserved_zero_bit
            }

            for (int i = num_sublayers - 2; i >= 0; i--)
            {

                if (ptl_sublayer_level_present_flag[i])
                {
                    boxSize += 8; // sublayer_level_idc
                }
            }
            boxSize += 8; // ptl_num_sub_profiles

            for (int j = 0; j < ptl_num_sub_profiles; j++)
            {
                boxSize += 32; // general_sub_profile_idc
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class VvcDecoderConfigurationRecord {
        bit(5) reserved = '11111'b;
        unsigned int(2) LengthSizeMinusOne;
        unsigned int(1) ptl_present_flag;
        if (ptl_present_flag) {
            unsigned int(9) ols_idx;
            unsigned int(3) num_sublayers;
            unsigned int(2) constant_frame_rate;
            unsigned int(2) chroma_format_idc;
            unsigned int(3) bit_depth_minus8;
            bit(5) reserved = '11111'b;
            VvcPTLRecord(num_sublayers) native_ptl;
            unsigned_int(16) max_picture_width;
            unsigned_int(16) max_picture_height;
            unsigned int(16) avg_frame_rate;
        }
        unsigned int(8) num_of_arrays;
        for (j=0; j < num_of_arrays; j++) {
            unsigned int(1) array_completeness;
            bit(2) reserved = 0;
            unsigned int(5) NAL_unit_type;
            if (NAL_unit_type != DCI_NUT  &&  NAL_unit_type != OPI_NUT)
                unsigned int(16) num_nalus;
            for (i=0; i< num_nalus; i++) {
                unsigned int(16) nal_unit_length;
                bit(8*nal_unit_length) nal_unit;
            }
        }
    }
    */
    public class VvcDecoderConfigurationRecord
    {


        protected byte reserved = 0b11111;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte LengthSizeMinusOne;
        public byte _LengthSizeMinusOne { get { return this.LengthSizeMinusOne; } set { this.LengthSizeMinusOne = value; } }

        protected bool ptl_present_flag;
        public bool PtlPresentFlag { get { return this.ptl_present_flag; } set { this.ptl_present_flag = value; } }

        protected ushort ols_idx;
        public ushort OlsIdx { get { return this.ols_idx; } set { this.ols_idx = value; } }

        protected byte num_sublayers;
        public byte NumSublayers { get { return this.num_sublayers; } set { this.num_sublayers = value; } }

        protected byte constant_frame_rate;
        public byte ConstantFrameRate { get { return this.constant_frame_rate; } set { this.constant_frame_rate = value; } }

        protected byte chroma_format_idc;
        public byte ChromaFormatIdc { get { return this.chroma_format_idc; } set { this.chroma_format_idc = value; } }

        protected byte bit_depth_minus8;
        public byte BitDepthMinus8 { get { return this.bit_depth_minus8; } set { this.bit_depth_minus8 = value; } }

        protected byte reserved0 = 0b11111;
        public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected VvcPTLRecord[] native_ptl;
        public VvcPTLRecord[] NativePtl { get { return this.native_ptl; } set { this.native_ptl = value; } }

        protected ushort max_picture_width;
        public ushort MaxPictureWidth { get { return this.max_picture_width; } set { this.max_picture_width = value; } }

        protected ushort max_picture_height;
        public ushort MaxPictureHeight { get { return this.max_picture_height; } set { this.max_picture_height = value; } }

        protected ushort avg_frame_rate;
        public ushort AvgFrameRate { get { return this.avg_frame_rate; } set { this.avg_frame_rate = value; } }

        protected byte num_of_arrays;
        public byte NumOfArrays { get { return this.num_of_arrays; } set { this.num_of_arrays = value; } }

        protected bool array_completeness;
        public bool ArrayCompleteness { get { return this.array_completeness; } set { this.array_completeness = value; } }

        protected byte reserved1 = 0;
        public byte Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

        protected byte NAL_unit_type;
        public byte NALUnitType { get { return this.NAL_unit_type; } set { this.NAL_unit_type = value; } }

        protected ushort num_nalus;
        public ushort NumNalus { get { return this.num_nalus; } set { this.num_nalus = value; } }

        protected ushort nal_unit_length;
        public ushort NalUnitLength { get { return this.nal_unit_length; } set { this.nal_unit_length = value; } }

        protected byte[] nal_unit;
        public byte[] NalUnit { get { return this.nal_unit; } set { this.nal_unit = value; } }

        public VvcDecoderConfigurationRecord() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            const int OPI_NUT = 12;
            const int DCI_NUT = 13;

            boxSize += stream.ReadBits(5, out this.reserved);
            boxSize += stream.ReadBits(2, out this.LengthSizeMinusOne);
            boxSize += stream.ReadBit(out this.ptl_present_flag);

            if (ptl_present_flag)
            {
                boxSize += stream.ReadBits(9, out this.ols_idx);
                boxSize += stream.ReadBits(3, out this.num_sublayers);
                boxSize += stream.ReadBits(2, out this.constant_frame_rate);
                boxSize += stream.ReadBits(2, out this.chroma_format_idc);
                boxSize += stream.ReadBits(3, out this.bit_depth_minus8);
                boxSize += stream.ReadBits(5, out this.reserved0);
                boxSize += stream.ReadClass(num_sublayers, out this.native_ptl);
                boxSize += stream.ReadUInt16(out this.max_picture_width);
                boxSize += stream.ReadUInt16(out this.max_picture_height);
                boxSize += stream.ReadUInt16(out this.avg_frame_rate);
            }
            boxSize += stream.ReadUInt8(out this.num_of_arrays);

            for (int j = 0; j < num_of_arrays; j++)
            {
                boxSize += stream.ReadBit(out this.array_completeness);
                boxSize += stream.ReadBits(2, out this.reserved1);
                boxSize += stream.ReadBits(5, out this.NAL_unit_type);

                if (NAL_unit_type != DCI_NUT && NAL_unit_type != OPI_NUT)
                {
                    boxSize += stream.ReadUInt16(out this.num_nalus);
                }

                for (int i = 0; i < num_nalus; i++)
                {
                    boxSize += stream.ReadUInt16(out this.nal_unit_length);
                    boxSize += stream.ReadBytes(nal_unit_length, out this.nal_unit);
                }
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            const int OPI_NUT = 12;
            const int DCI_NUT = 13;

            boxSize += stream.WriteBits(5, this.reserved);
            boxSize += stream.WriteBits(2, this.LengthSizeMinusOne);
            boxSize += stream.WriteBit(this.ptl_present_flag);

            if (ptl_present_flag)
            {
                boxSize += stream.WriteBits(9, this.ols_idx);
                boxSize += stream.WriteBits(3, this.num_sublayers);
                boxSize += stream.WriteBits(2, this.constant_frame_rate);
                boxSize += stream.WriteBits(2, this.chroma_format_idc);
                boxSize += stream.WriteBits(3, this.bit_depth_minus8);
                boxSize += stream.WriteBits(5, this.reserved0);
                boxSize += stream.WriteClass(num_sublayers, this.native_ptl);
                boxSize += stream.WriteUInt16(this.max_picture_width);
                boxSize += stream.WriteUInt16(this.max_picture_height);
                boxSize += stream.WriteUInt16(this.avg_frame_rate);
            }
            boxSize += stream.WriteUInt8(this.num_of_arrays);

            for (int j = 0; j < num_of_arrays; j++)
            {
                boxSize += stream.WriteBit(this.array_completeness);
                boxSize += stream.WriteBits(2, this.reserved1);
                boxSize += stream.WriteBits(5, this.NAL_unit_type);

                if (NAL_unit_type != DCI_NUT && NAL_unit_type != OPI_NUT)
                {
                    boxSize += stream.WriteUInt16(this.num_nalus);
                }

                for (int i = 0; i < num_nalus; i++)
                {
                    boxSize += stream.WriteUInt16(this.nal_unit_length);
                    boxSize += stream.WriteBytes(nal_unit_length, this.nal_unit);
                }
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            const int OPI_NUT = 12;
            const int DCI_NUT = 13;

            boxSize += 5; // reserved
            boxSize += 2; // LengthSizeMinusOne
            boxSize += 1; // ptl_present_flag

            if (ptl_present_flag)
            {
                boxSize += 9; // ols_idx
                boxSize += 3; // num_sublayers
                boxSize += 2; // constant_frame_rate
                boxSize += 2; // chroma_format_idc
                boxSize += 3; // bit_depth_minus8
                boxSize += 5; // reserved0
                boxSize += IsoStream.CalculateClassSize(native_ptl); // native_ptl
                boxSize += 16; // max_picture_width
                boxSize += 16; // max_picture_height
                boxSize += 16; // avg_frame_rate
            }
            boxSize += 8; // num_of_arrays

            for (int j = 0; j < num_of_arrays; j++)
            {
                boxSize += 1; // array_completeness
                boxSize += 2; // reserved1
                boxSize += 5; // NAL_unit_type

                if (NAL_unit_type != DCI_NUT && NAL_unit_type != OPI_NUT)
                {
                    boxSize += 16; // num_nalus
                }

                for (int i = 0; i < num_nalus; i++)
                {
                    boxSize += 16; // nal_unit_length
                    boxSize += (ulong)nal_unit_length * 8; // nal_unit
                }
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class MVDDecoderConfigurationRecord { 
    unsigned int(8) configurationVersion = 1; 
    unsigned int(8) AVCProfileIndication; 
    unsigned int(8) profile_compatibility; 
    unsigned int(8) AVCLevelIndication;  
     bit(1) complete_representation; 
     bit(1) explicit_au_track; 
    bit(4) reserved = '1111'b; 
    unsigned int(2) lengthSizeMinusOne;  
    bit(1) reserved = '0'b; 
    unsigned int(7) numOfSequenceParameterSets; 
    for (i=0; i< numOfSequenceParameterSets; i++) { 
    unsigned int(16) sequenceParameterSetLength ; 
      bit(8*sequenceParameterSetLength) sequenceParameterSetNALUnit; 
     } 
    unsigned int(8) numOfPictureParameterSets; 
    for (i=0; i< numOfPictureParameterSets; i++) { 
      unsigned int(16) pictureParameterSetLength; 
      bit(8*pictureParameterSetLength) pictureParameterSetNALUnit; 
     } 
    }
    */
    public class MVDDecoderConfigurationRecord
    {


        protected byte configurationVersion = 1;
        public byte ConfigurationVersion { get { return this.configurationVersion; } set { this.configurationVersion = value; } }

        protected byte AVCProfileIndication;
        public byte _AVCProfileIndication { get { return this.AVCProfileIndication; } set { this.AVCProfileIndication = value; } }

        protected byte profile_compatibility;
        public byte ProfileCompatibility { get { return this.profile_compatibility; } set { this.profile_compatibility = value; } }

        protected byte AVCLevelIndication;
        public byte _AVCLevelIndication { get { return this.AVCLevelIndication; } set { this.AVCLevelIndication = value; } }

        protected bool complete_representation;
        public bool CompleteRepresentation { get { return this.complete_representation; } set { this.complete_representation = value; } }

        protected bool explicit_au_track;
        public bool ExplicitAuTrack { get { return this.explicit_au_track; } set { this.explicit_au_track = value; } }

        protected byte reserved = 0b1111;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte lengthSizeMinusOne;
        public byte LengthSizeMinusOne { get { return this.lengthSizeMinusOne; } set { this.lengthSizeMinusOne = value; } }

        protected bool reserved0 = false;
        public bool Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected byte numOfSequenceParameterSets;
        public byte NumOfSequenceParameterSets { get { return this.numOfSequenceParameterSets; } set { this.numOfSequenceParameterSets = value; } }

        protected ushort sequenceParameterSetLength;
        public ushort SequenceParameterSetLength { get { return this.sequenceParameterSetLength; } set { this.sequenceParameterSetLength = value; } }

        protected byte[] sequenceParameterSetNALUnit;
        public byte[] SequenceParameterSetNALUnit { get { return this.sequenceParameterSetNALUnit; } set { this.sequenceParameterSetNALUnit = value; } }

        protected byte numOfPictureParameterSets;
        public byte NumOfPictureParameterSets { get { return this.numOfPictureParameterSets; } set { this.numOfPictureParameterSets = value; } }

        protected ushort pictureParameterSetLength;
        public ushort PictureParameterSetLength { get { return this.pictureParameterSetLength; } set { this.pictureParameterSetLength = value; } }

        protected byte[] pictureParameterSetNALUnit;
        public byte[] PictureParameterSetNALUnit { get { return this.pictureParameterSetNALUnit; } set { this.pictureParameterSetNALUnit = value; } }

        public MVDDecoderConfigurationRecord() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUInt8(out this.configurationVersion);
            boxSize += stream.ReadUInt8(out this.AVCProfileIndication);
            boxSize += stream.ReadUInt8(out this.profile_compatibility);
            boxSize += stream.ReadUInt8(out this.AVCLevelIndication);
            boxSize += stream.ReadBit(out this.complete_representation);
            boxSize += stream.ReadBit(out this.explicit_au_track);
            boxSize += stream.ReadBits(4, out this.reserved);
            boxSize += stream.ReadBits(2, out this.lengthSizeMinusOne);
            boxSize += stream.ReadBit(out this.reserved0);
            boxSize += stream.ReadBits(7, out this.numOfSequenceParameterSets);

            for (int i = 0; i < numOfSequenceParameterSets; i++)
            {
                boxSize += stream.ReadUInt16(out this.sequenceParameterSetLength);
                boxSize += stream.ReadBytes(sequenceParameterSetLength, out this.sequenceParameterSetNALUnit);
            }
            boxSize += stream.ReadUInt8(out this.numOfPictureParameterSets);

            for (int i = 0; i < numOfPictureParameterSets; i++)
            {
                boxSize += stream.ReadUInt16(out this.pictureParameterSetLength);
                boxSize += stream.ReadBytes(pictureParameterSetLength, out this.pictureParameterSetNALUnit);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUInt8(this.configurationVersion);
            boxSize += stream.WriteUInt8(this.AVCProfileIndication);
            boxSize += stream.WriteUInt8(this.profile_compatibility);
            boxSize += stream.WriteUInt8(this.AVCLevelIndication);
            boxSize += stream.WriteBit(this.complete_representation);
            boxSize += stream.WriteBit(this.explicit_au_track);
            boxSize += stream.WriteBits(4, this.reserved);
            boxSize += stream.WriteBits(2, this.lengthSizeMinusOne);
            boxSize += stream.WriteBit(this.reserved0);
            boxSize += stream.WriteBits(7, this.numOfSequenceParameterSets);

            for (int i = 0; i < numOfSequenceParameterSets; i++)
            {
                boxSize += stream.WriteUInt16(this.sequenceParameterSetLength);
                boxSize += stream.WriteBytes(sequenceParameterSetLength, this.sequenceParameterSetNALUnit);
            }
            boxSize += stream.WriteUInt8(this.numOfPictureParameterSets);

            for (int i = 0; i < numOfPictureParameterSets; i++)
            {
                boxSize += stream.WriteUInt16(this.pictureParameterSetLength);
                boxSize += stream.WriteBytes(pictureParameterSetLength, this.pictureParameterSetNALUnit);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 8; // configurationVersion
            boxSize += 8; // AVCProfileIndication
            boxSize += 8; // profile_compatibility
            boxSize += 8; // AVCLevelIndication
            boxSize += 1; // complete_representation
            boxSize += 1; // explicit_au_track
            boxSize += 4; // reserved
            boxSize += 2; // lengthSizeMinusOne
            boxSize += 1; // reserved0
            boxSize += 7; // numOfSequenceParameterSets

            for (int i = 0; i < numOfSequenceParameterSets; i++)
            {
                boxSize += 16; // sequenceParameterSetLength
                boxSize += (ulong)sequenceParameterSetLength * 8; // sequenceParameterSetNALUnit
            }
            boxSize += 8; // numOfPictureParameterSets

            for (int i = 0; i < numOfPictureParameterSets; i++)
            {
                boxSize += 16; // pictureParameterSetLength
                boxSize += (ulong)pictureParameterSetLength * 8; // pictureParameterSetNALUnit
            }
            return boxSize;
        }
    }


    /*
    class VvcOperatingPointsRecord { 
    unsigned int(8) num_profile_tier_level_minus1;
    for (i=0; i<=num_profile_tier_level_minus1; i++) { 
     unsigned int(8) ptl_max_temporal_id[i]; 
     VvcPTLRecord(ptl_max_temporal_id[i]+1) ptl[i];
    } 
    unsigned int(1) all_independent_layers_flag; 
    bit(7) reserved = 0; 
    if (all_independent_layers_flag){ 
     unsigned int(1) each_layer_is_an_ols_flag; 
     bit(7) reserved = 0; 
    } 
    else 
     unsigned int(8) ols_mode_idc; 
    unsigned int(16) num_operating_points; 
    for (i=0; i<num_operating_points; i++) { 
     unsigned int(16) output_layer_set_idx; 
     unsigned int(8) ptl_idx; 
     unsigned int(8) max_temporal_id; 
     unsigned int(8) layer_count; 
     for (j=0; j<layer_count; j++) { 
      unsigned int(6) layer_id; 
      unsigned int(1) is_outputlayer;
      bit(1) reserved = 0;
     }
     bit(6) reserved = 0; 
     unsigned int(1) frame_rate_info_flag;
     unsigned int(1) bit_rate_info_flag;
     if (frame_rate_info_flag) { 
      unsigned int(16) avgFrameRate; 
      bit(6) reserved = 0; 
      unsigned int(2) constantFrameRate;
     } 
     if (bit_rate_info_flag) { 
      unsigned int(32) maxBitRate; 
      unsigned int(32) avgBitRate;
     }
    }
    unsigned int(8) max_layer_count; 
    for (i=0; i<max_layer_count; i++) { 
     unsigned int(8) layerID; 
     unsigned int(8) num_direct_ref_layers; 
     for (j=0; j<num_direct_ref_layers; j++) 
      unsigned int(8) direct_ref_layerID; 
     unsigned int(8) max_tid_il_ref_pics_plus1; 
     }
    }

    */
    public class VvcOperatingPointsRecord
    {


        protected byte num_profile_tier_level_minus1;
        public byte NumProfileTierLevelMinus1 { get { return this.num_profile_tier_level_minus1; } set { this.num_profile_tier_level_minus1 = value; } }

        protected byte[] ptl_max_temporal_id;
        public byte[] PtlMaxTemporalId { get { return this.ptl_max_temporal_id; } set { this.ptl_max_temporal_id = value; } }

        protected VvcPTLRecord[] ptl;
        public VvcPTLRecord[] Ptl { get { return this.ptl; } set { this.ptl = value; } }

        protected bool all_independent_layers_flag;
        public bool AllIndependentLayersFlag { get { return this.all_independent_layers_flag; } set { this.all_independent_layers_flag = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected bool each_layer_is_an_ols_flag;
        public bool EachLayerIsAnOlsFlag { get { return this.each_layer_is_an_ols_flag; } set { this.each_layer_is_an_ols_flag = value; } }

        protected byte reserved0 = 0;
        public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected byte ols_mode_idc;
        public byte OlsModeIdc { get { return this.ols_mode_idc; } set { this.ols_mode_idc = value; } }

        protected ushort num_operating_points;
        public ushort NumOperatingPoints { get { return this.num_operating_points; } set { this.num_operating_points = value; } }

        protected ushort output_layer_set_idx;
        public ushort OutputLayerSetIdx { get { return this.output_layer_set_idx; } set { this.output_layer_set_idx = value; } }

        protected byte ptl_idx;
        public byte PtlIdx { get { return this.ptl_idx; } set { this.ptl_idx = value; } }

        protected byte max_temporal_id;
        public byte MaxTemporalId { get { return this.max_temporal_id; } set { this.max_temporal_id = value; } }

        protected byte layer_count;
        public byte LayerCount { get { return this.layer_count; } set { this.layer_count = value; } }

        protected byte layer_id;
        public byte LayerId { get { return this.layer_id; } set { this.layer_id = value; } }

        protected bool is_outputlayer;
        public bool IsOutputlayer { get { return this.is_outputlayer; } set { this.is_outputlayer = value; } }

        protected bool reserved1 = false;
        public bool Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

        protected byte reserved00 = 0;
        public byte Reserved00 { get { return this.reserved00; } set { this.reserved00 = value; } }

        protected bool frame_rate_info_flag;
        public bool FrameRateInfoFlag { get { return this.frame_rate_info_flag; } set { this.frame_rate_info_flag = value; } }

        protected bool bit_rate_info_flag;
        public bool BitRateInfoFlag { get { return this.bit_rate_info_flag; } set { this.bit_rate_info_flag = value; } }

        protected ushort avgFrameRate;
        public ushort AvgFrameRate { get { return this.avgFrameRate; } set { this.avgFrameRate = value; } }

        protected byte reserved10 = 0;
        public byte Reserved10 { get { return this.reserved10; } set { this.reserved10 = value; } }

        protected byte constantFrameRate;
        public byte ConstantFrameRate { get { return this.constantFrameRate; } set { this.constantFrameRate = value; } }

        protected uint maxBitRate;
        public uint MaxBitRate { get { return this.maxBitRate; } set { this.maxBitRate = value; } }

        protected uint avgBitRate;
        public uint AvgBitRate { get { return this.avgBitRate; } set { this.avgBitRate = value; } }

        protected byte max_layer_count;
        public byte MaxLayerCount { get { return this.max_layer_count; } set { this.max_layer_count = value; } }

        protected byte layerID;
        public byte LayerID { get { return this.layerID; } set { this.layerID = value; } }

        protected byte num_direct_ref_layers;
        public byte NumDirectRefLayers { get { return this.num_direct_ref_layers; } set { this.num_direct_ref_layers = value; } }

        protected byte direct_ref_layerID;
        public byte DirectRefLayerID { get { return this.direct_ref_layerID; } set { this.direct_ref_layerID = value; } }

        protected byte max_tid_il_ref_pics_plus1;
        public byte MaxTidIlRefPicsPlus1 { get { return this.max_tid_il_ref_pics_plus1; } set { this.max_tid_il_ref_pics_plus1 = value; } }

        public VvcOperatingPointsRecord() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUInt8(out this.num_profile_tier_level_minus1);

            for (int i = 0; i <= num_profile_tier_level_minus1; i++)
            {
                boxSize += stream.ReadUInt8(out this.ptl_max_temporal_id[i]);
                boxSize += stream.ReadClass(out this.ptl[i]);
            }
            boxSize += stream.ReadBit(out this.all_independent_layers_flag);
            boxSize += stream.ReadBits(7, out this.reserved);

            if (all_independent_layers_flag)
            {
                boxSize += stream.ReadBit(out this.each_layer_is_an_ols_flag);
                boxSize += stream.ReadBits(7, out this.reserved0);
            }

            else
            {
                boxSize += stream.ReadUInt8(out this.ols_mode_idc);
            }
            boxSize += stream.ReadUInt16(out this.num_operating_points);

            for (int i = 0; i < num_operating_points; i++)
            {
                boxSize += stream.ReadUInt16(out this.output_layer_set_idx);
                boxSize += stream.ReadUInt8(out this.ptl_idx);
                boxSize += stream.ReadUInt8(out this.max_temporal_id);
                boxSize += stream.ReadUInt8(out this.layer_count);

                for (int j = 0; j < layer_count; j++)
                {
                    boxSize += stream.ReadBits(6, out this.layer_id);
                    boxSize += stream.ReadBit(out this.is_outputlayer);
                    boxSize += stream.ReadBit(out this.reserved1);
                }
                boxSize += stream.ReadBits(6, out this.reserved00);
                boxSize += stream.ReadBit(out this.frame_rate_info_flag);
                boxSize += stream.ReadBit(out this.bit_rate_info_flag);

                if (frame_rate_info_flag)
                {
                    boxSize += stream.ReadUInt16(out this.avgFrameRate);
                    boxSize += stream.ReadBits(6, out this.reserved10);
                    boxSize += stream.ReadBits(2, out this.constantFrameRate);
                }

                if (bit_rate_info_flag)
                {
                    boxSize += stream.ReadUInt32(out this.maxBitRate);
                    boxSize += stream.ReadUInt32(out this.avgBitRate);
                }
            }
            boxSize += stream.ReadUInt8(out this.max_layer_count);

            for (int i = 0; i < max_layer_count; i++)
            {
                boxSize += stream.ReadUInt8(out this.layerID);
                boxSize += stream.ReadUInt8(out this.num_direct_ref_layers);

                for (int j = 0; j < num_direct_ref_layers; j++)
                {
                    boxSize += stream.ReadUInt8(out this.direct_ref_layerID);
                }
                boxSize += stream.ReadUInt8(out this.max_tid_il_ref_pics_plus1);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUInt8(this.num_profile_tier_level_minus1);

            for (int i = 0; i <= num_profile_tier_level_minus1; i++)
            {
                boxSize += stream.WriteUInt8(this.ptl_max_temporal_id[i]);
                boxSize += stream.WriteClass(this.ptl[i]);
            }
            boxSize += stream.WriteBit(this.all_independent_layers_flag);
            boxSize += stream.WriteBits(7, this.reserved);

            if (all_independent_layers_flag)
            {
                boxSize += stream.WriteBit(this.each_layer_is_an_ols_flag);
                boxSize += stream.WriteBits(7, this.reserved0);
            }

            else
            {
                boxSize += stream.WriteUInt8(this.ols_mode_idc);
            }
            boxSize += stream.WriteUInt16(this.num_operating_points);

            for (int i = 0; i < num_operating_points; i++)
            {
                boxSize += stream.WriteUInt16(this.output_layer_set_idx);
                boxSize += stream.WriteUInt8(this.ptl_idx);
                boxSize += stream.WriteUInt8(this.max_temporal_id);
                boxSize += stream.WriteUInt8(this.layer_count);

                for (int j = 0; j < layer_count; j++)
                {
                    boxSize += stream.WriteBits(6, this.layer_id);
                    boxSize += stream.WriteBit(this.is_outputlayer);
                    boxSize += stream.WriteBit(this.reserved1);
                }
                boxSize += stream.WriteBits(6, this.reserved00);
                boxSize += stream.WriteBit(this.frame_rate_info_flag);
                boxSize += stream.WriteBit(this.bit_rate_info_flag);

                if (frame_rate_info_flag)
                {
                    boxSize += stream.WriteUInt16(this.avgFrameRate);
                    boxSize += stream.WriteBits(6, this.reserved10);
                    boxSize += stream.WriteBits(2, this.constantFrameRate);
                }

                if (bit_rate_info_flag)
                {
                    boxSize += stream.WriteUInt32(this.maxBitRate);
                    boxSize += stream.WriteUInt32(this.avgBitRate);
                }
            }
            boxSize += stream.WriteUInt8(this.max_layer_count);

            for (int i = 0; i < max_layer_count; i++)
            {
                boxSize += stream.WriteUInt8(this.layerID);
                boxSize += stream.WriteUInt8(this.num_direct_ref_layers);

                for (int j = 0; j < num_direct_ref_layers; j++)
                {
                    boxSize += stream.WriteUInt8(this.direct_ref_layerID);
                }
                boxSize += stream.WriteUInt8(this.max_tid_il_ref_pics_plus1);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 8; // num_profile_tier_level_minus1

            for (int i = 0; i <= num_profile_tier_level_minus1; i++)
            {
                boxSize += 8; // ptl_max_temporal_id
                boxSize += IsoStream.CalculateClassSize(ptl); // ptl
            }
            boxSize += 1; // all_independent_layers_flag
            boxSize += 7; // reserved

            if (all_independent_layers_flag)
            {
                boxSize += 1; // each_layer_is_an_ols_flag
                boxSize += 7; // reserved0
            }

            else
            {
                boxSize += 8; // ols_mode_idc
            }
            boxSize += 16; // num_operating_points

            for (int i = 0; i < num_operating_points; i++)
            {
                boxSize += 16; // output_layer_set_idx
                boxSize += 8; // ptl_idx
                boxSize += 8; // max_temporal_id
                boxSize += 8; // layer_count

                for (int j = 0; j < layer_count; j++)
                {
                    boxSize += 6; // layer_id
                    boxSize += 1; // is_outputlayer
                    boxSize += 1; // reserved1
                }
                boxSize += 6; // reserved00
                boxSize += 1; // frame_rate_info_flag
                boxSize += 1; // bit_rate_info_flag

                if (frame_rate_info_flag)
                {
                    boxSize += 16; // avgFrameRate
                    boxSize += 6; // reserved10
                    boxSize += 2; // constantFrameRate
                }

                if (bit_rate_info_flag)
                {
                    boxSize += 32; // maxBitRate
                    boxSize += 32; // avgBitRate
                }
            }
            boxSize += 8; // max_layer_count

            for (int i = 0; i < max_layer_count; i++)
            {
                boxSize += 8; // layerID
                boxSize += 8; // num_direct_ref_layers

                for (int j = 0; j < num_direct_ref_layers; j++)
                {
                    boxSize += 8; // direct_ref_layerID
                }
                boxSize += 8; // max_tid_il_ref_pics_plus1
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class EVCDecoderConfigurationRecord {
    unsigned int(8) configurationVersion=1;
    unsigned int(8) profile_idc;
    unsigned int(8) level_idc;
     unsigned int(32) toolset_idc;
    unsigned int(2) chroma_format_idc;
     unsigned int(3) bit_depth_luma_minus8;
    unsigned int(3) bit_depth_chroma_minus8;
    unsigned int(32) pic_width_in_luma_samples;
    unsigned int(32) pic_height_in_luma_samples;
    unsigned int(5) reserved='00000'b;
    unsigned int(1) sps_in_stream;
     unsigned int(1) pps_in_stream;
    unsigned int(1) aps_in_stream;
     unsigned int(8) numOfArrays;
     for (j=0; j<numOfArrays; j++) {
    bit(2) reserved='00'b;
    unsigned int(6) NAL_unit_type;
     unsigned int(16) numNalus;
    for (i=0; i<numNalus; i++) {
     unsigned int(16) nalUnitLength;
    bit(8*nalUnitLength) nalUnit;
    }
    }
    }
    */
    public class EVCDecoderConfigurationRecord
    {


        protected byte configurationVersion = 1;
        public byte ConfigurationVersion { get { return this.configurationVersion; } set { this.configurationVersion = value; } }

        protected byte profile_idc;
        public byte ProfileIdc { get { return this.profile_idc; } set { this.profile_idc = value; } }

        protected byte level_idc;
        public byte LevelIdc { get { return this.level_idc; } set { this.level_idc = value; } }

        protected uint toolset_idc;
        public uint ToolsetIdc { get { return this.toolset_idc; } set { this.toolset_idc = value; } }

        protected byte chroma_format_idc;
        public byte ChromaFormatIdc { get { return this.chroma_format_idc; } set { this.chroma_format_idc = value; } }

        protected byte bit_depth_luma_minus8;
        public byte BitDepthLumaMinus8 { get { return this.bit_depth_luma_minus8; } set { this.bit_depth_luma_minus8 = value; } }

        protected byte bit_depth_chroma_minus8;
        public byte BitDepthChromaMinus8 { get { return this.bit_depth_chroma_minus8; } set { this.bit_depth_chroma_minus8 = value; } }

        protected uint pic_width_in_luma_samples;
        public uint PicWidthInLumaSamples { get { return this.pic_width_in_luma_samples; } set { this.pic_width_in_luma_samples = value; } }

        protected uint pic_height_in_luma_samples;
        public uint PicHeightInLumaSamples { get { return this.pic_height_in_luma_samples; } set { this.pic_height_in_luma_samples = value; } }

        protected byte reserved = 0b00000;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected bool sps_in_stream;
        public bool SpsInStream { get { return this.sps_in_stream; } set { this.sps_in_stream = value; } }

        protected bool pps_in_stream;
        public bool PpsInStream { get { return this.pps_in_stream; } set { this.pps_in_stream = value; } }

        protected bool aps_in_stream;
        public bool ApsInStream { get { return this.aps_in_stream; } set { this.aps_in_stream = value; } }

        protected byte numOfArrays;
        public byte NumOfArrays { get { return this.numOfArrays; } set { this.numOfArrays = value; } }

        protected byte reserved0 = 0b00;
        public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected byte NAL_unit_type;
        public byte NALUnitType { get { return this.NAL_unit_type; } set { this.NAL_unit_type = value; } }

        protected ushort numNalus;
        public ushort NumNalus { get { return this.numNalus; } set { this.numNalus = value; } }

        protected ushort nalUnitLength;
        public ushort NalUnitLength { get { return this.nalUnitLength; } set { this.nalUnitLength = value; } }

        protected byte[] nalUnit;
        public byte[] NalUnit { get { return this.nalUnit; } set { this.nalUnit = value; } }

        public EVCDecoderConfigurationRecord() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUInt8(out this.configurationVersion);
            boxSize += stream.ReadUInt8(out this.profile_idc);
            boxSize += stream.ReadUInt8(out this.level_idc);
            boxSize += stream.ReadUInt32(out this.toolset_idc);
            boxSize += stream.ReadBits(2, out this.chroma_format_idc);
            boxSize += stream.ReadBits(3, out this.bit_depth_luma_minus8);
            boxSize += stream.ReadBits(3, out this.bit_depth_chroma_minus8);
            boxSize += stream.ReadUInt32(out this.pic_width_in_luma_samples);
            boxSize += stream.ReadUInt32(out this.pic_height_in_luma_samples);
            boxSize += stream.ReadBits(5, out this.reserved);
            boxSize += stream.ReadBit(out this.sps_in_stream);
            boxSize += stream.ReadBit(out this.pps_in_stream);
            boxSize += stream.ReadBit(out this.aps_in_stream);
            boxSize += stream.ReadUInt8(out this.numOfArrays);

            for (int j = 0; j < numOfArrays; j++)
            {
                boxSize += stream.ReadBits(2, out this.reserved0);
                boxSize += stream.ReadBits(6, out this.NAL_unit_type);
                boxSize += stream.ReadUInt16(out this.numNalus);

                for (int i = 0; i < numNalus; i++)
                {
                    boxSize += stream.ReadUInt16(out this.nalUnitLength);
                    boxSize += stream.ReadBytes(nalUnitLength, out this.nalUnit);
                }
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUInt8(this.configurationVersion);
            boxSize += stream.WriteUInt8(this.profile_idc);
            boxSize += stream.WriteUInt8(this.level_idc);
            boxSize += stream.WriteUInt32(this.toolset_idc);
            boxSize += stream.WriteBits(2, this.chroma_format_idc);
            boxSize += stream.WriteBits(3, this.bit_depth_luma_minus8);
            boxSize += stream.WriteBits(3, this.bit_depth_chroma_minus8);
            boxSize += stream.WriteUInt32(this.pic_width_in_luma_samples);
            boxSize += stream.WriteUInt32(this.pic_height_in_luma_samples);
            boxSize += stream.WriteBits(5, this.reserved);
            boxSize += stream.WriteBit(this.sps_in_stream);
            boxSize += stream.WriteBit(this.pps_in_stream);
            boxSize += stream.WriteBit(this.aps_in_stream);
            boxSize += stream.WriteUInt8(this.numOfArrays);

            for (int j = 0; j < numOfArrays; j++)
            {
                boxSize += stream.WriteBits(2, this.reserved0);
                boxSize += stream.WriteBits(6, this.NAL_unit_type);
                boxSize += stream.WriteUInt16(this.numNalus);

                for (int i = 0; i < numNalus; i++)
                {
                    boxSize += stream.WriteUInt16(this.nalUnitLength);
                    boxSize += stream.WriteBytes(nalUnitLength, this.nalUnit);
                }
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 8; // configurationVersion
            boxSize += 8; // profile_idc
            boxSize += 8; // level_idc
            boxSize += 32; // toolset_idc
            boxSize += 2; // chroma_format_idc
            boxSize += 3; // bit_depth_luma_minus8
            boxSize += 3; // bit_depth_chroma_minus8
            boxSize += 32; // pic_width_in_luma_samples
            boxSize += 32; // pic_height_in_luma_samples
            boxSize += 5; // reserved
            boxSize += 1; // sps_in_stream
            boxSize += 1; // pps_in_stream
            boxSize += 1; // aps_in_stream
            boxSize += 8; // numOfArrays

            for (int j = 0; j < numOfArrays; j++)
            {
                boxSize += 2; // reserved0
                boxSize += 6; // NAL_unit_type
                boxSize += 16; // numNalus

                for (int i = 0; i < numNalus; i++)
                {
                    boxSize += 16; // nalUnitLength
                    boxSize += (ulong)nalUnitLength * 8; // nalUnit
                }
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class LHEVCDecoderConfigurationRecord {
    unsigned int(8) configurationVersion = 1;
    unsigned int(2) general_profile_space;
    unsigned int(1) general_tier_flag;
    unsigned int(5) general_profile_idc;
    unsigned int(32) general_profile_compatibility_flags;
    unsigned int(48) general_constraint_indicator_flags;
    unsigned int(8) general_level_idc;
    bit(1) complete_representation;
    bit(3) reserved = '111'b;
    unsigned int(12) min_spatial_segmentation_idc;
    bit(6) reserved = '111111'b;
    unsigned int(2) parallelismType;
    bit(6) reserved = '111111'b;
    unsigned int(2) chromaFormat;
    bit(5) reserved = '11111'b;
    unsigned int(3) bitDepthLumaMinus8;
    bit(5) reserved = '11111'b;
    unsigned int(3) bitDepthChromaMinus8;
    bit(16) avgFrameRate;
    bit(2) constantFrameRate;
    bit(3) numTemporalLayers;
    bit(1) temporalIdNested;
    unsigned int(2) lengthSizeMinusOne;
    unsigned int(8) numOfArrays;
    for (j = 0; j <numOfArrays; j ++) {
    bit(1) array_completeness;
    unsigned int(1) reserved = 0;
    unsigned int(6) NAL_unit_type;
    unsigned int(16) numNalus;
    for (i = 0; i <numNalus; i ++) {
    unsigned int(16) nalUnitLength;
    bit(8*nalUnitLength) nalUnit;
    }
    }
    unsigned int(16) operationPointIdx;
    }
    */
    public class LHEVCDecoderConfigurationRecord
    {


        protected byte configurationVersion = 1;
        public byte ConfigurationVersion { get { return this.configurationVersion; } set { this.configurationVersion = value; } }

        protected byte general_profile_space;
        public byte GeneralProfileSpace { get { return this.general_profile_space; } set { this.general_profile_space = value; } }

        protected bool general_tier_flag;
        public bool GeneralTierFlag { get { return this.general_tier_flag; } set { this.general_tier_flag = value; } }

        protected byte general_profile_idc;
        public byte GeneralProfileIdc { get { return this.general_profile_idc; } set { this.general_profile_idc = value; } }

        protected uint general_profile_compatibility_flags;
        public uint GeneralProfileCompatibilityFlags { get { return this.general_profile_compatibility_flags; } set { this.general_profile_compatibility_flags = value; } }

        protected ulong general_constraint_indicator_flags;
        public ulong GeneralConstraintIndicatorFlags { get { return this.general_constraint_indicator_flags; } set { this.general_constraint_indicator_flags = value; } }

        protected byte general_level_idc;
        public byte GeneralLevelIdc { get { return this.general_level_idc; } set { this.general_level_idc = value; } }

        protected bool complete_representation;
        public bool CompleteRepresentation { get { return this.complete_representation; } set { this.complete_representation = value; } }

        protected byte reserved = 0b111;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected ushort min_spatial_segmentation_idc;
        public ushort MinSpatialSegmentationIdc { get { return this.min_spatial_segmentation_idc; } set { this.min_spatial_segmentation_idc = value; } }

        protected byte reserved0 = 0b111111;
        public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected byte parallelismType;
        public byte ParallelismType { get { return this.parallelismType; } set { this.parallelismType = value; } }

        protected byte reserved1 = 0b111111;
        public byte Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

        protected byte chromaFormat;
        public byte ChromaFormat { get { return this.chromaFormat; } set { this.chromaFormat = value; } }

        protected byte reserved2 = 0b11111;
        public byte Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

        protected byte bitDepthLumaMinus8;
        public byte BitDepthLumaMinus8 { get { return this.bitDepthLumaMinus8; } set { this.bitDepthLumaMinus8 = value; } }

        protected byte reserved3 = 0b11111;
        public byte Reserved3 { get { return this.reserved3; } set { this.reserved3 = value; } }

        protected byte bitDepthChromaMinus8;
        public byte BitDepthChromaMinus8 { get { return this.bitDepthChromaMinus8; } set { this.bitDepthChromaMinus8 = value; } }

        protected ushort avgFrameRate;
        public ushort AvgFrameRate { get { return this.avgFrameRate; } set { this.avgFrameRate = value; } }

        protected byte constantFrameRate;
        public byte ConstantFrameRate { get { return this.constantFrameRate; } set { this.constantFrameRate = value; } }

        protected byte numTemporalLayers;
        public byte NumTemporalLayers { get { return this.numTemporalLayers; } set { this.numTemporalLayers = value; } }

        protected bool temporalIdNested;
        public bool TemporalIdNested { get { return this.temporalIdNested; } set { this.temporalIdNested = value; } }

        protected byte lengthSizeMinusOne;
        public byte LengthSizeMinusOne { get { return this.lengthSizeMinusOne; } set { this.lengthSizeMinusOne = value; } }

        protected byte numOfArrays;
        public byte NumOfArrays { get { return this.numOfArrays; } set { this.numOfArrays = value; } }

        protected bool array_completeness;
        public bool ArrayCompleteness { get { return this.array_completeness; } set { this.array_completeness = value; } }

        protected bool reserved4 = false;
        public bool Reserved4 { get { return this.reserved4; } set { this.reserved4 = value; } }

        protected byte NAL_unit_type;
        public byte NALUnitType { get { return this.NAL_unit_type; } set { this.NAL_unit_type = value; } }

        protected ushort numNalus;
        public ushort NumNalus { get { return this.numNalus; } set { this.numNalus = value; } }

        protected ushort nalUnitLength;
        public ushort NalUnitLength { get { return this.nalUnitLength; } set { this.nalUnitLength = value; } }

        protected byte[] nalUnit;
        public byte[] NalUnit { get { return this.nalUnit; } set { this.nalUnit = value; } }

        protected ushort operationPointIdx;
        public ushort OperationPointIdx { get { return this.operationPointIdx; } set { this.operationPointIdx = value; } }

        public LHEVCDecoderConfigurationRecord() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUInt8(out this.configurationVersion);
            boxSize += stream.ReadBits(2, out this.general_profile_space);
            boxSize += stream.ReadBit(out this.general_tier_flag);
            boxSize += stream.ReadBits(5, out this.general_profile_idc);
            boxSize += stream.ReadUInt32(out this.general_profile_compatibility_flags);
            boxSize += stream.ReadUInt48(out this.general_constraint_indicator_flags);
            boxSize += stream.ReadUInt8(out this.general_level_idc);
            boxSize += stream.ReadBit(out this.complete_representation);
            boxSize += stream.ReadBits(3, out this.reserved);
            boxSize += stream.ReadBits(12, out this.min_spatial_segmentation_idc);
            boxSize += stream.ReadBits(6, out this.reserved0);
            boxSize += stream.ReadBits(2, out this.parallelismType);
            boxSize += stream.ReadBits(6, out this.reserved1);
            boxSize += stream.ReadBits(2, out this.chromaFormat);
            boxSize += stream.ReadBits(5, out this.reserved2);
            boxSize += stream.ReadBits(3, out this.bitDepthLumaMinus8);
            boxSize += stream.ReadBits(5, out this.reserved3);
            boxSize += stream.ReadBits(3, out this.bitDepthChromaMinus8);
            boxSize += stream.ReadUInt16(out this.avgFrameRate);
            boxSize += stream.ReadBits(2, out this.constantFrameRate);
            boxSize += stream.ReadBits(3, out this.numTemporalLayers);
            boxSize += stream.ReadBit(out this.temporalIdNested);
            boxSize += stream.ReadBits(2, out this.lengthSizeMinusOne);
            boxSize += stream.ReadUInt8(out this.numOfArrays);

            for (int j = 0; j < numOfArrays; j++)
            {
                boxSize += stream.ReadBit(out this.array_completeness);
                boxSize += stream.ReadBit(out this.reserved4);
                boxSize += stream.ReadBits(6, out this.NAL_unit_type);
                boxSize += stream.ReadUInt16(out this.numNalus);

                for (int i = 0; i < numNalus; i++)
                {
                    boxSize += stream.ReadUInt16(out this.nalUnitLength);
                    boxSize += stream.ReadBytes(nalUnitLength, out this.nalUnit);
                }
            }
            boxSize += stream.ReadUInt16(out this.operationPointIdx);
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUInt8(this.configurationVersion);
            boxSize += stream.WriteBits(2, this.general_profile_space);
            boxSize += stream.WriteBit(this.general_tier_flag);
            boxSize += stream.WriteBits(5, this.general_profile_idc);
            boxSize += stream.WriteUInt32(this.general_profile_compatibility_flags);
            boxSize += stream.WriteUInt48(this.general_constraint_indicator_flags);
            boxSize += stream.WriteUInt8(this.general_level_idc);
            boxSize += stream.WriteBit(this.complete_representation);
            boxSize += stream.WriteBits(3, this.reserved);
            boxSize += stream.WriteBits(12, this.min_spatial_segmentation_idc);
            boxSize += stream.WriteBits(6, this.reserved0);
            boxSize += stream.WriteBits(2, this.parallelismType);
            boxSize += stream.WriteBits(6, this.reserved1);
            boxSize += stream.WriteBits(2, this.chromaFormat);
            boxSize += stream.WriteBits(5, this.reserved2);
            boxSize += stream.WriteBits(3, this.bitDepthLumaMinus8);
            boxSize += stream.WriteBits(5, this.reserved3);
            boxSize += stream.WriteBits(3, this.bitDepthChromaMinus8);
            boxSize += stream.WriteUInt16(this.avgFrameRate);
            boxSize += stream.WriteBits(2, this.constantFrameRate);
            boxSize += stream.WriteBits(3, this.numTemporalLayers);
            boxSize += stream.WriteBit(this.temporalIdNested);
            boxSize += stream.WriteBits(2, this.lengthSizeMinusOne);
            boxSize += stream.WriteUInt8(this.numOfArrays);

            for (int j = 0; j < numOfArrays; j++)
            {
                boxSize += stream.WriteBit(this.array_completeness);
                boxSize += stream.WriteBit(this.reserved4);
                boxSize += stream.WriteBits(6, this.NAL_unit_type);
                boxSize += stream.WriteUInt16(this.numNalus);

                for (int i = 0; i < numNalus; i++)
                {
                    boxSize += stream.WriteUInt16(this.nalUnitLength);
                    boxSize += stream.WriteBytes(nalUnitLength, this.nalUnit);
                }
            }
            boxSize += stream.WriteUInt16(this.operationPointIdx);
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 8; // configurationVersion
            boxSize += 2; // general_profile_space
            boxSize += 1; // general_tier_flag
            boxSize += 5; // general_profile_idc
            boxSize += 32; // general_profile_compatibility_flags
            boxSize += 48; // general_constraint_indicator_flags
            boxSize += 8; // general_level_idc
            boxSize += 1; // complete_representation
            boxSize += 3; // reserved
            boxSize += 12; // min_spatial_segmentation_idc
            boxSize += 6; // reserved0
            boxSize += 2; // parallelismType
            boxSize += 6; // reserved1
            boxSize += 2; // chromaFormat
            boxSize += 5; // reserved2
            boxSize += 3; // bitDepthLumaMinus8
            boxSize += 5; // reserved3
            boxSize += 3; // bitDepthChromaMinus8
            boxSize += 16; // avgFrameRate
            boxSize += 2; // constantFrameRate
            boxSize += 3; // numTemporalLayers
            boxSize += 1; // temporalIdNested
            boxSize += 2; // lengthSizeMinusOne
            boxSize += 8; // numOfArrays

            for (int j = 0; j < numOfArrays; j++)
            {
                boxSize += 1; // array_completeness
                boxSize += 1; // reserved4
                boxSize += 6; // NAL_unit_type
                boxSize += 16; // numNalus

                for (int i = 0; i < numNalus; i++)
                {
                    boxSize += 16; // nalUnitLength
                    boxSize += (ulong)nalUnitLength * 8; // nalUnit
                }
            }
            boxSize += 16; // operationPointIdx
            return boxSize;
        }
    }


    /*
    class ReceivedSsrcBox extends Box('rssr') {
        unsigned int(32)	SSRC
    }
    */
    public class ReceivedSsrcBox : Box
    {
        public const string FourCC = "rssr";

        protected uint SSRC;
        public uint _SSRC { get { return this.SSRC; } set { this.SSRC = value; } }

        public ReceivedSsrcBox() : base("rssr")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.SSRC);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.SSRC);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // SSRC
            return boxSize;
        }
    }


    /*
    class timestampsynchrony() extends Box('tssy') {
        unsigned int(6) reserved;
        unsigned int(2) timestamp_sync;
    }
    */
    public class timestampsynchrony : Box
    {
        public const string FourCC = "tssy";

        protected byte reserved;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte timestamp_sync;
        public byte TimestampSync { get { return this.timestamp_sync; } set { this.timestamp_sync = value; } }

        public timestampsynchrony() : base("tssy")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(6, out this.reserved);
            boxSize += stream.ReadBits(2, out this.timestamp_sync);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(6, this.reserved);
            boxSize += stream.WriteBits(2, this.timestamp_sync);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 6; // reserved
            boxSize += 2; // timestamp_sync
            return boxSize;
        }
    }


    /*
    class timescaleentry() extends Box('tims') {
        uint(32)	timescale;
    }


    */
    public class timescaleentry : Box
    {
        public const string FourCC = "tims";

        protected uint timescale;
        public uint Timescale { get { return this.timescale; } set { this.timescale = value; } }

        public timescaleentry() : base("tims")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.timescale);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.timescale);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // timescale
            return boxSize;
        }
    }


    /*
    class timeoffset() extends Box('tsro') {
        int(32)		offset;
    }


    */
    public class timeoffset : Box
    {
        public const string FourCC = "tsro";

        protected int offset;
        public int Offset { get { return this.offset; } set { this.offset = value; } }

        public timeoffset() : base("tsro")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadInt32(out this.offset);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteInt32(this.offset);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // offset
            return boxSize;
        }
    }


    /*
    class sequenceoffset() extends Box('snro') {
        int(32)		offset;
    }
    */
    public class sequenceoffset : Box
    {
        public const string FourCC = "snro";

        protected int offset;
        public int Offset { get { return this.offset; } set { this.offset = value; } }

        public sequenceoffset() : base("snro")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadInt32(out this.offset);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteInt32(this.offset);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // offset
            return boxSize;
        }
    }


    /*
    aligned(8) class hintBytesSent extends Box('trpy') {
        uint(64)	bytessent; }	// total bytes sent, including 12-byte RTP headers

    */
    public class hintBytesSentTrpy : Box
    {
        public const string FourCC = "trpy";

        protected ulong bytessent;
        public ulong Bytessent { get { return this.bytessent; } set { this.bytessent = value; } }

        public hintBytesSentTrpy() : base("trpy")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt64(out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt64(this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    /*
    aligned(8) class hintPacketsSent extends Box('nump') {
        uint(64)	packetssent; }	// total packets sent

    */
    public class hintPacketsSentNump : Box
    {
        public const string FourCC = "nump";

        protected ulong packetssent;
        public ulong Packetssent { get { return this.packetssent; } set { this.packetssent = value; } }

        public hintPacketsSentNump() : base("nump")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt64(out this.packetssent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt64(this.packetssent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // packetssent
            return boxSize;
        }
    }


    /*
    aligned(8) class hintBytesSent extends Box('tpyl') {
        uint(64)	bytessent; }	// total bytes sent, not including RTP headers
    */
    public class hintBytesSentTpyl : Box
    {
        public const string FourCC = "tpyl";

        protected ulong bytessent;
        public ulong Bytessent { get { return this.bytessent; } set { this.bytessent = value; } }

        public hintBytesSentTpyl() : base("tpyl")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt64(out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt64(this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    /*
    aligned(8) class hintBytesSent extends Box('totl') {
        uint(32)	bytessent; }	// total bytes sent, including 12-byte RTP headers

    */
    public class hintBytesSentTotl : Box
    {
        public const string FourCC = "totl";

        protected uint bytessent;
        public uint Bytessent { get { return this.bytessent; } set { this.bytessent = value; } }

        public hintBytesSentTotl() : base("totl")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // bytessent
            return boxSize;
        }
    }


    /*
    aligned(8) class hintPacketsSent extends Box('npck') {
        uint(32)	packetssent; }	// total packets sent

    */
    public class hintPacketsSentNpck : Box
    {
        public const string FourCC = "npck";

        protected uint packetssent;
        public uint Packetssent { get { return this.packetssent; } set { this.packetssent = value; } }

        public hintPacketsSentNpck() : base("npck")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.packetssent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.packetssent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // packetssent
            return boxSize;
        }
    }


    /*
    aligned(8) class hintBytesSent extends Box('tpay') {
        uint(32)	bytessent; }	// total bytes sent, not including RTP headers
    */
    public class hintBytesSentTpay : Box
    {
        public const string FourCC = "tpay";

        protected uint bytessent;
        public uint Bytessent { get { return this.bytessent; } set { this.bytessent = value; } }

        public hintBytesSentTpay() : base("tpay")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // bytessent
            return boxSize;
        }
    }


    /*
    aligned(8) class hintmaxrate extends Box('maxr') {	// maximum data rate
        uint(32)	period;			// in milliseconds
        uint(32)	bytes; }			// max bytes sent in any period 'period' long including RTP headers
    */
    public class hintmaxrate : Box
    {
        public const string FourCC = "maxr";

        protected uint period;  //  in milliseconds
        public uint Period { get { return this.period; } set { this.period = value; } }

        protected uint bytes;
        public uint Bytes { get { return this.bytes; } set { this.bytes = value; } }

        public hintmaxrate() : base("maxr")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            /*  maximum data rate */
            boxSize += stream.ReadUInt32(out this.period); // in milliseconds
            boxSize += stream.ReadUInt32(out this.bytes);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            /*  maximum data rate */
            boxSize += stream.WriteUInt32(this.period); // in milliseconds
            boxSize += stream.WriteUInt32(this.bytes);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            /*  maximum data rate */
            boxSize += 32; // period
            boxSize += 32; // bytes
            return boxSize;
        }
    }


    /*
    aligned(8) class hintmediaBytesSent extends Box('dmed') {
        uint(64)	bytessent; }	// total bytes sent from media tracks

    */
    public class hintmediaBytesSent : Box
    {
        public const string FourCC = "dmed";

        protected ulong bytessent;
        public ulong Bytessent { get { return this.bytessent; } set { this.bytessent = value; } }

        public hintmediaBytesSent() : base("dmed")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt64(out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt64(this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    /*
    aligned(8) class hintimmediateBytesSent extends Box('dimm') {
        uint(64)	bytessent; }	// total bytes sent immediate mode

    */
    public class hintimmediateBytesSent : Box
    {
        public const string FourCC = "dimm";

        protected ulong bytessent;
        public ulong Bytessent { get { return this.bytessent; } set { this.bytessent = value; } }

        public hintimmediateBytesSent() : base("dimm")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt64(out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt64(this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    /*
    aligned(8) class hintrepeatedBytesSent extends Box('drep') {
        uint(64)	bytessent; }	// total bytes in repeated packets
    */
    public class hintrepeatedBytesSent : Box
    {
        public const string FourCC = "drep";

        protected ulong bytessent;
        public ulong Bytessent { get { return this.bytessent; } set { this.bytessent = value; } }

        public hintrepeatedBytesSent() : base("drep")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt64(out this.bytessent);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt64(this.bytessent);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // bytessent
            return boxSize;
        }
    }


    /*
    aligned(8) class hintminrelativetime extends Box('tmin') {
        int(32)		time; }		// smallest relative transmission time, milliseconds

    */
    public class hintminrelativetime : Box
    {
        public const string FourCC = "tmin";

        protected int time;
        public int Time { get { return this.time; } set { this.time = value; } }

        public hintminrelativetime() : base("tmin")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadInt32(out this.time);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteInt32(this.time);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // time
            return boxSize;
        }
    }


    /*
    aligned(8) class hintmaxrelativetime extends Box('tmax') {
        int(32)		time; }		// largest relative transmission time, milliseconds
    */
    public class hintmaxrelativetime : Box
    {
        public const string FourCC = "tmax";

        protected int time;
        public int Time { get { return this.time; } set { this.time = value; } }

        public hintmaxrelativetime() : base("tmax")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadInt32(out this.time);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteInt32(this.time);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // time
            return boxSize;
        }
    }


    /*
    aligned(8) class hintlargestpacket extends Box('pmax') {
        uint(32)	bytes; }			// largest packet sent, including RTP header

    */
    public class hintlargestpacket : Box
    {
        public const string FourCC = "pmax";

        protected uint bytes;
        public uint Bytes { get { return this.bytes; } set { this.bytes = value; } }

        public hintlargestpacket() : base("pmax")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.bytes);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.bytes);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // bytes
            return boxSize;
        }
    }


    /*
    aligned(8) class hintlongestpacket extends Box('dmax') {
        uint(32)	time; }			// longest packet duration, milliseconds
    */
    public class hintlongestpacket : Box
    {
        public const string FourCC = "dmax";

        protected uint time;
        public uint Time { get { return this.time; } set { this.time = value; } }

        public hintlongestpacket() : base("dmax")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.time);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.time);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // time
            return boxSize;
        }
    }


    /*
    aligned(8) class hintpayloadID extends Box('payt') {
        uint(32)	payloadID;		// payload ID used in RTP packets
        uint(8)		count;
        char		rtpmap_string[count]; }
    */
    public class hintpayloadID : Box
    {
        public const string FourCC = "payt";

        protected uint payloadID;  //  payload ID used in RTP packets
        public uint PayloadID { get { return this.payloadID; } set { this.payloadID = value; } }

        protected byte count;
        public byte Count { get { return this.count; } set { this.count = value; } }

        protected byte[] rtpmap_string;
        public byte[] RtpmapString { get { return this.rtpmap_string; } set { this.rtpmap_string = value; } }

        public hintpayloadID() : base("payt")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.payloadID); // payload ID used in RTP packets
            boxSize += stream.ReadUInt8(out this.count);
            boxSize += stream.ReadUInt8Array(count, out this.rtpmap_string);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.payloadID); // payload ID used in RTP packets
            boxSize += stream.WriteUInt8(this.count);
            boxSize += stream.WriteUInt8Array(count, this.rtpmap_string);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // payloadID
            boxSize += 8; // count
            boxSize += (ulong)count * 8; // rtpmap_string
            return boxSize;
        }
    }


    /*
    aligned(8) class StereoVideoBox extends FullBox('stvi', version = 0, 0)
    {
        template unsigned int(30) reserved = 0;
        unsigned int(2)	single_view_allowed;
        unsigned int(32)	stereo_scheme;
        unsigned int(32)	length;
        unsigned int(8)[length]	stereo_indication_type;
        Box[] any_box; // optional
    }
    */
    public class StereoVideoBox : FullBox
    {
        public const string FourCC = "stvi";

        protected uint reserved = 0;
        public uint Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte single_view_allowed;
        public byte SingleViewAllowed { get { return this.single_view_allowed; } set { this.single_view_allowed = value; } }

        protected uint stereo_scheme;
        public uint StereoScheme { get { return this.stereo_scheme; } set { this.stereo_scheme = value; } }

        protected uint length;
        public uint Length { get { return this.length; } set { this.length = value; } }

        protected byte[] stereo_indication_type;
        public byte[] StereoIndicationType { get { return this.stereo_indication_type; } set { this.stereo_indication_type = value; } }

        protected Box[] any_box;  //  optional
        public Box[] AnyBox { get { return this.any_box; } set { this.any_box = value; } }

        public StereoVideoBox() : base("stvi", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(30, out this.reserved);
            boxSize += stream.ReadBits(2, out this.single_view_allowed);
            boxSize += stream.ReadUInt32(out this.stereo_scheme);
            boxSize += stream.ReadUInt32(out this.length);
            boxSize += stream.ReadBytes(length, out this.stereo_indication_type);
            if (boxSize < size) boxSize += stream.ReadBox(out this.any_box); // optional
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(30, this.reserved);
            boxSize += stream.WriteBits(2, this.single_view_allowed);
            boxSize += stream.WriteUInt32(this.stereo_scheme);
            boxSize += stream.WriteUInt32(this.length);
            boxSize += stream.WriteBytes(length, this.stereo_indication_type);
            if (this.any_box != null) boxSize += stream.WriteBox(this.any_box); // optional
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 30; // reserved
            boxSize += 2; // single_view_allowed
            boxSize += 32; // stereo_scheme
            boxSize += 32; // length
            boxSize += (ulong)length * 8; // stereo_indication_type
            if (this.any_box != null) boxSize += IsoStream.CalculateSize(any_box); // any_box
            return boxSize;
        }
    }


    /*
    aligned(8) class ExtendedLanguageBox extends FullBox('elng', 0, 0) {
        utf8string	extended_language;
    }
    */
    public class ExtendedLanguageBox : FullBox
    {
        public const string FourCC = "elng";

        protected string extended_language;
        public string ExtendedLanguage { get { return this.extended_language; } set { this.extended_language = value; } }

        public ExtendedLanguageBox() : base("elng", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadString(out this.extended_language);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteString(this.extended_language);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)extended_language.Length * 8; // extended_language
            return boxSize;
        }
    }


    /*
    class BitRateBox extends Box('btrt'){
        unsigned int(32) bufferSizeDB;
        unsigned int(32) maxBitrate;
        unsigned int(32) avgBitrate;
    }
    */
    public class BitRateBox : Box
    {
        public const string FourCC = "btrt";

        protected uint bufferSizeDB;
        public uint BufferSizeDB { get { return this.bufferSizeDB; } set { this.bufferSizeDB = value; } }

        protected uint maxBitrate;
        public uint MaxBitrate { get { return this.maxBitrate; } set { this.maxBitrate = value; } }

        protected uint avgBitrate;
        public uint AvgBitrate { get { return this.avgBitrate; } set { this.avgBitrate = value; } }

        public BitRateBox() : base("btrt")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.bufferSizeDB);
            boxSize += stream.ReadUInt32(out this.maxBitrate);
            boxSize += stream.ReadUInt32(out this.avgBitrate);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.bufferSizeDB);
            boxSize += stream.WriteUInt32(this.maxBitrate);
            boxSize += stream.WriteUInt32(this.avgBitrate);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // bufferSizeDB
            boxSize += 32; // maxBitrate
            boxSize += 32; // avgBitrate
            return boxSize;
        }
    }


    /*
    class PixelAspectRatioBox extends Box('pasp'){
        unsigned int(32) hSpacing;
        unsigned int(32) vSpacing;
    }
    */
    public class PixelAspectRatioBox : Box
    {
        public const string FourCC = "pasp";

        protected uint hSpacing;
        public uint HSpacing { get { return this.hSpacing; } set { this.hSpacing = value; } }

        protected uint vSpacing;
        public uint VSpacing { get { return this.vSpacing; } set { this.vSpacing = value; } }

        public PixelAspectRatioBox() : base("pasp")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.hSpacing);
            boxSize += stream.ReadUInt32(out this.vSpacing);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.hSpacing);
            boxSize += stream.WriteUInt32(this.vSpacing);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // hSpacing
            boxSize += 32; // vSpacing
            return boxSize;
        }
    }


    /*
    class CleanApertureBox extends Box('clap'){
        unsigned int(32) cleanApertureWidthN;
        unsigned int(32) cleanApertureWidthD;

        unsigned int(32) cleanApertureHeightN;
        unsigned int(32) cleanApertureHeightD;


        unsigned int(32) horizOffN;
        unsigned int(32) horizOffD;


        unsigned int(32) vertOffN;
        unsigned int(32) vertOffD;

    }
    */
    public class CleanApertureBox : Box
    {
        public const string FourCC = "clap";

        protected uint cleanApertureWidthN;
        public uint CleanApertureWidthN { get { return this.cleanApertureWidthN; } set { this.cleanApertureWidthN = value; } }

        protected uint cleanApertureWidthD;
        public uint CleanApertureWidthD { get { return this.cleanApertureWidthD; } set { this.cleanApertureWidthD = value; } }

        protected uint cleanApertureHeightN;
        public uint CleanApertureHeightN { get { return this.cleanApertureHeightN; } set { this.cleanApertureHeightN = value; } }

        protected uint cleanApertureHeightD;
        public uint CleanApertureHeightD { get { return this.cleanApertureHeightD; } set { this.cleanApertureHeightD = value; } }

        protected uint horizOffN;
        public uint HorizOffN { get { return this.horizOffN; } set { this.horizOffN = value; } }

        protected uint horizOffD;
        public uint HorizOffD { get { return this.horizOffD; } set { this.horizOffD = value; } }

        protected uint vertOffN;
        public uint VertOffN { get { return this.vertOffN; } set { this.vertOffN = value; } }

        protected uint vertOffD;
        public uint VertOffD { get { return this.vertOffD; } set { this.vertOffD = value; } }

        public CleanApertureBox() : base("clap")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.cleanApertureWidthN);
            boxSize += stream.ReadUInt32(out this.cleanApertureWidthD);
            boxSize += stream.ReadUInt32(out this.cleanApertureHeightN);
            boxSize += stream.ReadUInt32(out this.cleanApertureHeightD);
            boxSize += stream.ReadUInt32(out this.horizOffN);
            boxSize += stream.ReadUInt32(out this.horizOffD);
            boxSize += stream.ReadUInt32(out this.vertOffN);
            boxSize += stream.ReadUInt32(out this.vertOffD);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.cleanApertureWidthN);
            boxSize += stream.WriteUInt32(this.cleanApertureWidthD);
            boxSize += stream.WriteUInt32(this.cleanApertureHeightN);
            boxSize += stream.WriteUInt32(this.cleanApertureHeightD);
            boxSize += stream.WriteUInt32(this.horizOffN);
            boxSize += stream.WriteUInt32(this.horizOffD);
            boxSize += stream.WriteUInt32(this.vertOffN);
            boxSize += stream.WriteUInt32(this.vertOffD);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // cleanApertureWidthN
            boxSize += 32; // cleanApertureWidthD
            boxSize += 32; // cleanApertureHeightN
            boxSize += 32; // cleanApertureHeightD
            boxSize += 32; // horizOffN
            boxSize += 32; // horizOffD
            boxSize += 32; // vertOffN
            boxSize += 32; // vertOffD
            return boxSize;
        }
    }


    /*
    class ContentColourVolumeBox extends Box('cclv'){
        unsigned int(1) reserved1 = 0;	// ccv_cancel_flag
        unsigned int(1) reserved2 = 0;	// ccv_persistence_flag
        unsigned int(1) ccv_primaries_present_flag;
        unsigned int(1) ccv_min_luminance_value_present_flag;
        unsigned int(1) ccv_max_luminance_value_present_flag;
        unsigned int(1) ccv_avg_luminance_value_present_flag;
        unsigned int(2) ccv_reserved_zero_2bits = 0;
        if( ccv_primaries_present_flag ) {
            for( c = 0; c < 3; c++ ) {
                signed int(32) ccv_primaries_x[ c ];
                signed int(32) ccv_primaries_y[ c ];
            }
        }
        if( ccv_min_luminance_value_present_flag )
            unsigned int(32) ccv_min_luminance_value;
        if( ccv_max_luminance_value_present_flag )
            unsigned int(32) ccv_max_luminance_value;
        if( ccv_avg_luminance_value_present_flag )
            unsigned int(32) ccv_avg_luminance_value;
    }
    */
    public class ContentColourVolumeBox : Box
    {
        public const string FourCC = "cclv";

        protected bool reserved1 = false;  //  ccv_cancel_flag
        public bool Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

        protected bool reserved2 = false;  //  ccv_persistence_flag
        public bool Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

        protected bool ccv_primaries_present_flag;
        public bool CcvPrimariesPresentFlag { get { return this.ccv_primaries_present_flag; } set { this.ccv_primaries_present_flag = value; } }

        protected bool ccv_min_luminance_value_present_flag;
        public bool CcvMinLuminanceValuePresentFlag { get { return this.ccv_min_luminance_value_present_flag; } set { this.ccv_min_luminance_value_present_flag = value; } }

        protected bool ccv_max_luminance_value_present_flag;
        public bool CcvMaxLuminanceValuePresentFlag { get { return this.ccv_max_luminance_value_present_flag; } set { this.ccv_max_luminance_value_present_flag = value; } }

        protected bool ccv_avg_luminance_value_present_flag;
        public bool CcvAvgLuminanceValuePresentFlag { get { return this.ccv_avg_luminance_value_present_flag; } set { this.ccv_avg_luminance_value_present_flag = value; } }

        protected byte ccv_reserved_zero_2bits = 0;
        public byte CcvReservedZero2bits { get { return this.ccv_reserved_zero_2bits; } set { this.ccv_reserved_zero_2bits = value; } }

        protected int[] ccv_primaries_x;
        public int[] CcvPrimariesx { get { return this.ccv_primaries_x; } set { this.ccv_primaries_x = value; } }

        protected int[] ccv_primaries_y;
        public int[] CcvPrimariesy { get { return this.ccv_primaries_y; } set { this.ccv_primaries_y = value; } }

        protected uint ccv_min_luminance_value;
        public uint CcvMinLuminanceValue { get { return this.ccv_min_luminance_value; } set { this.ccv_min_luminance_value = value; } }

        protected uint ccv_max_luminance_value;
        public uint CcvMaxLuminanceValue { get { return this.ccv_max_luminance_value; } set { this.ccv_max_luminance_value = value; } }

        protected uint ccv_avg_luminance_value;
        public uint CcvAvgLuminanceValue { get { return this.ccv_avg_luminance_value; } set { this.ccv_avg_luminance_value = value; } }

        public ContentColourVolumeBox() : base("cclv")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBit(out this.reserved1); // ccv_cancel_flag
            boxSize += stream.ReadBit(out this.reserved2); // ccv_persistence_flag
            boxSize += stream.ReadBit(out this.ccv_primaries_present_flag);
            boxSize += stream.ReadBit(out this.ccv_min_luminance_value_present_flag);
            boxSize += stream.ReadBit(out this.ccv_max_luminance_value_present_flag);
            boxSize += stream.ReadBit(out this.ccv_avg_luminance_value_present_flag);
            boxSize += stream.ReadBits(2, out this.ccv_reserved_zero_2bits);

            if (ccv_primaries_present_flag)
            {

                for (int c = 0; c < 3; c++)
                {
                    boxSize += stream.ReadInt32(out this.ccv_primaries_x[c]);
                    boxSize += stream.ReadInt32(out this.ccv_primaries_y[c]);
                }
            }

            if (ccv_min_luminance_value_present_flag)
            {
                boxSize += stream.ReadUInt32(out this.ccv_min_luminance_value);
            }

            if (ccv_max_luminance_value_present_flag)
            {
                boxSize += stream.ReadUInt32(out this.ccv_max_luminance_value);
            }

            if (ccv_avg_luminance_value_present_flag)
            {
                boxSize += stream.ReadUInt32(out this.ccv_avg_luminance_value);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBit(this.reserved1); // ccv_cancel_flag
            boxSize += stream.WriteBit(this.reserved2); // ccv_persistence_flag
            boxSize += stream.WriteBit(this.ccv_primaries_present_flag);
            boxSize += stream.WriteBit(this.ccv_min_luminance_value_present_flag);
            boxSize += stream.WriteBit(this.ccv_max_luminance_value_present_flag);
            boxSize += stream.WriteBit(this.ccv_avg_luminance_value_present_flag);
            boxSize += stream.WriteBits(2, this.ccv_reserved_zero_2bits);

            if (ccv_primaries_present_flag)
            {

                for (int c = 0; c < 3; c++)
                {
                    boxSize += stream.WriteInt32(this.ccv_primaries_x[c]);
                    boxSize += stream.WriteInt32(this.ccv_primaries_y[c]);
                }
            }

            if (ccv_min_luminance_value_present_flag)
            {
                boxSize += stream.WriteUInt32(this.ccv_min_luminance_value);
            }

            if (ccv_max_luminance_value_present_flag)
            {
                boxSize += stream.WriteUInt32(this.ccv_max_luminance_value);
            }

            if (ccv_avg_luminance_value_present_flag)
            {
                boxSize += stream.WriteUInt32(this.ccv_avg_luminance_value);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // reserved1
            boxSize += 1; // reserved2
            boxSize += 1; // ccv_primaries_present_flag
            boxSize += 1; // ccv_min_luminance_value_present_flag
            boxSize += 1; // ccv_max_luminance_value_present_flag
            boxSize += 1; // ccv_avg_luminance_value_present_flag
            boxSize += 2; // ccv_reserved_zero_2bits

            if (ccv_primaries_present_flag)
            {

                for (int c = 0; c < 3; c++)
                {
                    boxSize += 32; // ccv_primaries_x
                    boxSize += 32; // ccv_primaries_y
                }
            }

            if (ccv_min_luminance_value_present_flag)
            {
                boxSize += 32; // ccv_min_luminance_value
            }

            if (ccv_max_luminance_value_present_flag)
            {
                boxSize += 32; // ccv_max_luminance_value
            }

            if (ccv_avg_luminance_value_present_flag)
            {
                boxSize += 32; // ccv_avg_luminance_value
            }
            return boxSize;
        }
    }


    /*
    class ColourInformationBox extends Box('colr'){
        unsigned int(32) colour_type;
        if (colour_type == 'nclx')	/* on-screen colours *//*
        {
            unsigned int(16) colour_primaries;
            unsigned int(16) transfer_characteristics;
            unsigned int(16) matrix_coefficients;
            unsigned int(1)  full_range_flag;
            unsigned int(7)  reserved = 0;
        }
        else if (colour_type == 'rICC')
        {
            ICC_profile;	// restricted ICC profile
        }
        else if (colour_type == 'prof')
        {
            ICC_profile;	// unrestricted ICC profile
        }
    }
    */
    public class ColourInformationBox : Box
    {
        public const string FourCC = "colr";

        protected uint colour_type;
        public uint ColourType { get { return this.colour_type; } set { this.colour_type = value; } }

        protected ushort colour_primaries;
        public ushort ColourPrimaries { get { return this.colour_primaries; } set { this.colour_primaries = value; } }

        protected ushort transfer_characteristics;
        public ushort TransferCharacteristics { get { return this.transfer_characteristics; } set { this.transfer_characteristics = value; } }

        protected ushort matrix_coefficients;
        public ushort MatrixCoefficients { get { return this.matrix_coefficients; } set { this.matrix_coefficients = value; } }

        protected bool full_range_flag;
        public bool FullRangeFlag { get { return this.full_range_flag; } set { this.full_range_flag = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected ICC_profile ICC_profile;  //  restricted ICC profile
        public ICC_profile ICCProfile { get { return this.ICC_profile; } set { this.ICC_profile = value; } }

        protected ICC_profile ICC_profile0;  //  unrestricted ICC profile
        public ICC_profile ICCProfile0 { get { return this.ICC_profile0; } set { this.ICC_profile0 = value; } }

        public ColourInformationBox() : base("colr")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.colour_type);

            if (colour_type == IsoStream.FromFourCC("nclx"))
            {
                boxSize += stream.ReadUInt16(out this.colour_primaries);
                boxSize += stream.ReadUInt16(out this.transfer_characteristics);
                boxSize += stream.ReadUInt16(out this.matrix_coefficients);
                boxSize += stream.ReadBit(out this.full_range_flag);
                boxSize += stream.ReadBits(7, out this.reserved);
            }

            else if (colour_type == IsoStream.FromFourCC("rICC"))
            {
                boxSize += stream.ReadClass(out this.ICC_profile); // restricted ICC profile
            }

            else if (colour_type == IsoStream.FromFourCC("prof"))
            {
                boxSize += stream.ReadClass(out this.ICC_profile0); // unrestricted ICC profile
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.colour_type);

            if (colour_type == IsoStream.FromFourCC("nclx"))
            {
                boxSize += stream.WriteUInt16(this.colour_primaries);
                boxSize += stream.WriteUInt16(this.transfer_characteristics);
                boxSize += stream.WriteUInt16(this.matrix_coefficients);
                boxSize += stream.WriteBit(this.full_range_flag);
                boxSize += stream.WriteBits(7, this.reserved);
            }

            else if (colour_type == IsoStream.FromFourCC("rICC"))
            {
                boxSize += stream.WriteClass(this.ICC_profile); // restricted ICC profile
            }

            else if (colour_type == IsoStream.FromFourCC("prof"))
            {
                boxSize += stream.WriteClass(this.ICC_profile0); // unrestricted ICC profile
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // colour_type

            if (colour_type == IsoStream.FromFourCC("nclx"))
            {
                boxSize += 16; // colour_primaries
                boxSize += 16; // transfer_characteristics
                boxSize += 16; // matrix_coefficients
                boxSize += 1; // full_range_flag
                boxSize += 7; // reserved
            }

            else if (colour_type == IsoStream.FromFourCC("rICC"))
            {
                boxSize += IsoStream.CalculateClassSize(ICC_profile); // ICC_profile
            }

            else if (colour_type == IsoStream.FromFourCC("prof"))
            {
                boxSize += IsoStream.CalculateClassSize(ICC_profile0); // ICC_profile0
            }
            return boxSize;
        }
    }


    /*
    class ContentLightLevelBox extends Box('clli'){
        unsigned int(16) max_content_light_level;
        unsigned int(16) max_pic_average_light_level;
    }
    */
    public class ContentLightLevelBox : Box
    {
        public const string FourCC = "clli";

        protected ushort max_content_light_level;
        public ushort MaxContentLightLevel { get { return this.max_content_light_level; } set { this.max_content_light_level = value; } }

        protected ushort max_pic_average_light_level;
        public ushort MaxPicAverageLightLevel { get { return this.max_pic_average_light_level; } set { this.max_pic_average_light_level = value; } }

        public ContentLightLevelBox() : base("clli")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.max_content_light_level);
            boxSize += stream.ReadUInt16(out this.max_pic_average_light_level);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.max_content_light_level);
            boxSize += stream.WriteUInt16(this.max_pic_average_light_level);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // max_content_light_level
            boxSize += 16; // max_pic_average_light_level
            return boxSize;
        }
    }


    /*
    class MasteringDisplayColourVolumeBox extends Box('mdcv'){
        for (c = 0; c<3; c++) {
            unsigned int(16) display_primaries_x;
            unsigned int(16) display_primaries_y;
        }
        unsigned int(16) white_point_x;
        unsigned int(16) white_point_y;
        unsigned int(32) max_display_mastering_luminance;
        unsigned int(32) min_display_mastering_luminance;
    }
    */
    public class MasteringDisplayColourVolumeBox : Box
    {
        public const string FourCC = "mdcv";

        protected ushort display_primaries_x;
        public ushort DisplayPrimariesx { get { return this.display_primaries_x; } set { this.display_primaries_x = value; } }

        protected ushort display_primaries_y;
        public ushort DisplayPrimariesy { get { return this.display_primaries_y; } set { this.display_primaries_y = value; } }

        protected ushort white_point_x;
        public ushort WhitePointx { get { return this.white_point_x; } set { this.white_point_x = value; } }

        protected ushort white_point_y;
        public ushort WhitePointy { get { return this.white_point_y; } set { this.white_point_y = value; } }

        protected uint max_display_mastering_luminance;
        public uint MaxDisplayMasteringLuminance { get { return this.max_display_mastering_luminance; } set { this.max_display_mastering_luminance = value; } }

        protected uint min_display_mastering_luminance;
        public uint MinDisplayMasteringLuminance { get { return this.min_display_mastering_luminance; } set { this.min_display_mastering_luminance = value; } }

        public MasteringDisplayColourVolumeBox() : base("mdcv")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            for (int c = 0; c < 3; c++)
            {
                boxSize += stream.ReadUInt16(out this.display_primaries_x);
                boxSize += stream.ReadUInt16(out this.display_primaries_y);
            }
            boxSize += stream.ReadUInt16(out this.white_point_x);
            boxSize += stream.ReadUInt16(out this.white_point_y);
            boxSize += stream.ReadUInt32(out this.max_display_mastering_luminance);
            boxSize += stream.ReadUInt32(out this.min_display_mastering_luminance);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            for (int c = 0; c < 3; c++)
            {
                boxSize += stream.WriteUInt16(this.display_primaries_x);
                boxSize += stream.WriteUInt16(this.display_primaries_y);
            }
            boxSize += stream.WriteUInt16(this.white_point_x);
            boxSize += stream.WriteUInt16(this.white_point_y);
            boxSize += stream.WriteUInt32(this.max_display_mastering_luminance);
            boxSize += stream.WriteUInt32(this.min_display_mastering_luminance);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            for (int c = 0; c < 3; c++)
            {
                boxSize += 16; // display_primaries_x
                boxSize += 16; // display_primaries_y
            }
            boxSize += 16; // white_point_x
            boxSize += 16; // white_point_y
            boxSize += 32; // max_display_mastering_luminance
            boxSize += 32; // min_display_mastering_luminance
            return boxSize;
        }
    }


    /*
    aligned(8) class ScrambleSchemeInfoBox extends Box('scrb') {
        SchemeTypeBox scheme_type_box;
        SchemeInformationBox info; // optional
    }
    */
    public class ScrambleSchemeInfoBox : Box
    {
        public const string FourCC = "scrb";

        protected SchemeTypeBox scheme_type_box;
        public SchemeTypeBox SchemeTypeBox { get { return this.scheme_type_box; } set { this.scheme_type_box = value; } }

        protected SchemeInformationBox info;  //  optional
        public SchemeInformationBox Info { get { return this.info; } set { this.info = value; } }

        public ScrambleSchemeInfoBox() : base("scrb")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.scheme_type_box);
            if (boxSize < size) boxSize += stream.ReadBox(out this.info); // optional
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.scheme_type_box);
            if (this.info != null) boxSize += stream.WriteBox(this.info); // optional
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(scheme_type_box); // scheme_type_box
            if (this.info != null) boxSize += IsoStream.CalculateSize(info); // info
            return boxSize;
        }
    }


    /*
    aligned(8) class ChannelLayout extends FullBox('chnl', version, flags=0) {	if (version==0) {
            unsigned int(8) stream_structure;
            if (stream_structure & channelStructured) {
                unsigned int(8) definedLayout;
                if (definedLayout==0) {
                    for (i = 1 ; i <= layout_channel_count ; i++) {
                        //  layout_channel_count comes from the sample entry
                        unsigned int(8) speaker_position;
                        if (speaker_position == 126) {	// explicit position
                            signed int (16) azimuth;
                            signed int (8)  elevation;
                        }
                    }
                } else {
                    unsigned int(64)	omittedChannelsMap; 
                            // a ‘1’ bit indicates ‘not in this track’
                }
            }
            if (stream_structure & objectStructured) {
                unsigned int(8) object_count;
            }
        } else {
            unsigned int(4) stream_structure;
            unsigned int(4) format_ordering;
            unsigned int(8) baseChannelCount;
            if (stream_structure & channelStructured) {
                unsigned int(8) definedLayout;
                if (definedLayout==0) {
                    unsigned int(8) layout_channel_count;
                    for (i = 1 ; i <= layout_channel_count ; i++) {
                        unsigned int(8) speaker_position;
                        if (speaker_position == 126) {	// explicit position
                            signed int (16) azimuth;
                            signed int (8)  elevation;
                        }
                    }
                } else {
                    int(4) reserved = 0;
                    unsigned int(3) channel_order_definition;
                    unsigned int(1) omitted_channels_present;
                    if (omitted_channels_present == 1) {
                        unsigned int(64)	omittedChannelsMap; 
                                // a ‘1’ bit indicates ‘not in this track’
                    }
                }
            }
            if (stream_structure & objectStructured) {
                                // object_count is derived from baseChannelCount
            }
        }
    }

    */
    public class ChannelLayout : FullBox
    {
        public const string FourCC = "chnl";

        protected byte stream_structure;
        public byte StreamStructure { get { return this.stream_structure; } set { this.stream_structure = value; } }

        protected byte definedLayout;
        public byte DefinedLayout { get { return this.definedLayout; } set { this.definedLayout = value; } }

        protected byte speaker_position;
        public byte SpeakerPosition { get { return this.speaker_position; } set { this.speaker_position = value; } }

        protected short azimuth;
        public short Azimuth { get { return this.azimuth; } set { this.azimuth = value; } }

        protected sbyte elevation;
        public sbyte Elevation { get { return this.elevation; } set { this.elevation = value; } }

        protected ulong omittedChannelsMap;  //  a ‘1’ bit indicates ‘not in this track’
        public ulong OmittedChannelsMap { get { return this.omittedChannelsMap; } set { this.omittedChannelsMap = value; } }

        protected byte object_count;
        public byte ObjectCount { get { return this.object_count; } set { this.object_count = value; } }

        protected byte stream_structure0;
        public byte StreamStructure0 { get { return this.stream_structure0; } set { this.stream_structure0 = value; } }

        protected byte format_ordering;
        public byte FormatOrdering { get { return this.format_ordering; } set { this.format_ordering = value; } }

        protected byte baseChannelCount;
        public byte BaseChannelCount { get { return this.baseChannelCount; } set { this.baseChannelCount = value; } }

        protected byte definedLayout0;
        public byte DefinedLayout0 { get { return this.definedLayout0; } set { this.definedLayout0 = value; } }

        protected byte layout_channel_count;
        public byte LayoutChannelCount { get { return this.layout_channel_count; } set { this.layout_channel_count = value; } }

        protected byte speaker_position0;
        public byte SpeakerPosition0 { get { return this.speaker_position0; } set { this.speaker_position0 = value; } }

        protected short azimuth0;
        public short Azimuth0 { get { return this.azimuth0; } set { this.azimuth0 = value; } }

        protected sbyte elevation0;
        public sbyte Elevation0 { get { return this.elevation0; } set { this.elevation0 = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte channel_order_definition;
        public byte ChannelOrderDefinition { get { return this.channel_order_definition; } set { this.channel_order_definition = value; } }

        protected bool omitted_channels_present;
        public bool OmittedChannelsPresent { get { return this.omitted_channels_present; } set { this.omitted_channels_present = value; } }

        protected ulong omittedChannelsMap0;  //  a ‘1’ bit indicates ‘not in this track’
        public ulong OmittedChannelsMap0 { get { return this.omittedChannelsMap0; } set { this.omittedChannelsMap0 = value; } }

        public ChannelLayout(byte version = 0) : base("chnl", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 0)
            {
                boxSize += stream.ReadUInt8(out this.stream_structure);

                if ((stream_structure & 1) == 1)
                {
                    boxSize += stream.ReadUInt8(out this.definedLayout);

                    if (definedLayout == 0)
                    {

                        for (int i = 1; i <= layout_channel_count; i++)
                        {
                            /*   layout_channel_count comes from the sample entry */
                            boxSize += stream.ReadUInt8(out this.speaker_position);

                            if (speaker_position == 126)
                            {
                                /*  explicit position */
                                boxSize += stream.ReadInt16(out this.azimuth);
                                boxSize += stream.ReadInt8(out this.elevation);
                            }
                        }
                    }

                    else
                    {
                        boxSize += stream.ReadUInt64(out this.omittedChannelsMap); // a ‘1’ bit indicates ‘not in this track’
                    }
                }

                if ((stream_structure & 2) == 2)
                {
                    boxSize += stream.ReadUInt8(out this.object_count);
                }
            }

            else
            {
                boxSize += stream.ReadBits(4, out this.stream_structure0);
                boxSize += stream.ReadBits(4, out this.format_ordering);
                boxSize += stream.ReadUInt8(out this.baseChannelCount);

                if ((stream_structure & 1) == 1)
                {
                    boxSize += stream.ReadUInt8(out this.definedLayout0);

                    if (definedLayout == 0)
                    {
                        boxSize += stream.ReadUInt8(out this.layout_channel_count);

                        for (int i = 1; i <= layout_channel_count; i++)
                        {
                            boxSize += stream.ReadUInt8(out this.speaker_position0);

                            if (speaker_position == 126)
                            {
                                /*  explicit position */
                                boxSize += stream.ReadInt16(out this.azimuth0);
                                boxSize += stream.ReadInt8(out this.elevation0);
                            }
                        }
                    }

                    else
                    {
                        boxSize += stream.ReadBits(4, out this.reserved);
                        boxSize += stream.ReadBits(3, out this.channel_order_definition);
                        boxSize += stream.ReadBit(out this.omitted_channels_present);

                        if (omitted_channels_present == true)
                        {
                            boxSize += stream.ReadUInt64(out this.omittedChannelsMap0); // a ‘1’ bit indicates ‘not in this track’
                        }
                    }
                }

                if ((stream_structure & 2) == 2)
                {
                    /*  object_count is derived from baseChannelCount */
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 0)
            {
                boxSize += stream.WriteUInt8(this.stream_structure);

                if ((stream_structure & 1) == 1)
                {
                    boxSize += stream.WriteUInt8(this.definedLayout);

                    if (definedLayout == 0)
                    {

                        for (int i = 1; i <= layout_channel_count; i++)
                        {
                            /*   layout_channel_count comes from the sample entry */
                            boxSize += stream.WriteUInt8(this.speaker_position);

                            if (speaker_position == 126)
                            {
                                /*  explicit position */
                                boxSize += stream.WriteInt16(this.azimuth);
                                boxSize += stream.WriteInt8(this.elevation);
                            }
                        }
                    }

                    else
                    {
                        boxSize += stream.WriteUInt64(this.omittedChannelsMap); // a ‘1’ bit indicates ‘not in this track’
                    }
                }

                if ((stream_structure & 2) == 2)
                {
                    boxSize += stream.WriteUInt8(this.object_count);
                }
            }

            else
            {
                boxSize += stream.WriteBits(4, this.stream_structure0);
                boxSize += stream.WriteBits(4, this.format_ordering);
                boxSize += stream.WriteUInt8(this.baseChannelCount);

                if ((stream_structure & 1) == 1)
                {
                    boxSize += stream.WriteUInt8(this.definedLayout0);

                    if (definedLayout == 0)
                    {
                        boxSize += stream.WriteUInt8(this.layout_channel_count);

                        for (int i = 1; i <= layout_channel_count; i++)
                        {
                            boxSize += stream.WriteUInt8(this.speaker_position0);

                            if (speaker_position == 126)
                            {
                                /*  explicit position */
                                boxSize += stream.WriteInt16(this.azimuth0);
                                boxSize += stream.WriteInt8(this.elevation0);
                            }
                        }
                    }

                    else
                    {
                        boxSize += stream.WriteBits(4, this.reserved);
                        boxSize += stream.WriteBits(3, this.channel_order_definition);
                        boxSize += stream.WriteBit(this.omitted_channels_present);

                        if (omitted_channels_present == true)
                        {
                            boxSize += stream.WriteUInt64(this.omittedChannelsMap0); // a ‘1’ bit indicates ‘not in this track’
                        }
                    }
                }

                if ((stream_structure & 2) == 2)
                {
                    /*  object_count is derived from baseChannelCount */
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 0)
            {
                boxSize += 8; // stream_structure

                if ((stream_structure & 1) == 1)
                {
                    boxSize += 8; // definedLayout

                    if (definedLayout == 0)
                    {

                        for (int i = 1; i <= layout_channel_count; i++)
                        {
                            /*   layout_channel_count comes from the sample entry */
                            boxSize += 8; // speaker_position

                            if (speaker_position == 126)
                            {
                                /*  explicit position */
                                boxSize += 16; // azimuth
                                boxSize += 8; // elevation
                            }
                        }
                    }

                    else
                    {
                        boxSize += 64; // omittedChannelsMap
                    }
                }

                if ((stream_structure & 2) == 2)
                {
                    boxSize += 8; // object_count
                }
            }

            else
            {
                boxSize += 4; // stream_structure0
                boxSize += 4; // format_ordering
                boxSize += 8; // baseChannelCount

                if ((stream_structure & 1) == 1)
                {
                    boxSize += 8; // definedLayout0

                    if (definedLayout == 0)
                    {
                        boxSize += 8; // layout_channel_count

                        for (int i = 1; i <= layout_channel_count; i++)
                        {
                            boxSize += 8; // speaker_position0

                            if (speaker_position == 126)
                            {
                                /*  explicit position */
                                boxSize += 16; // azimuth0
                                boxSize += 8; // elevation0
                            }
                        }
                    }

                    else
                    {
                        boxSize += 4; // reserved
                        boxSize += 3; // channel_order_definition
                        boxSize += 1; // omitted_channels_present

                        if (omitted_channels_present == true)
                        {
                            boxSize += 64; // omittedChannelsMap0
                        }
                    }
                }

                if ((stream_structure & 2) == 2)
                {
                    /*  object_count is derived from baseChannelCount */
                }
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class DownMixInstructions extends FullBox('dmix', version, flags=0) {
        if (version >= 1) {
            bit(1) reserved = 0;
            bit(7) downmix_instructions_count;
        } else {
            int downmix_instructions_count = 1;
        }
        for (a=1; a<=downmix_instructions_count; a++) { 
            unsigned int(8) targetLayout;
            unsigned int(1) reserved = 0;
            unsigned int(7) targetChannelCount;
            bit(1) in_stream; 
            unsigned int(7) downmix_ID;
            if (in_stream==0) 
            {	// downmix coefficients are out of stream and supplied here
                int i, j;
                if (version >= 1) {
                    bit(4) bs_downmix_offset;
                    int size = 4;
                    for (i=1; i <= targetChannelCount; i++){
                        for (j=1; j <= baseChannelCount; j++) {
                            bit(5) bs_downmix_coefficient_v1;
                            size += 5;
                        }
                    }
                    bit(8 ceil(size / 8) – size) reserved = 0; // byte align
                } else {
                    for (i=1; i <= targetChannelCount; i++){
                        for (j=1; j <= baseChannelCount; j++) {
                            bit(4) bs_downmix_coefficient;
                        }
                    }
                }
            }
        }
    }
    */
    public class DownMixInstructions : FullBox
    {
        public const string FourCC = "dmix";

        protected bool reserved = false;
        public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte downmix_instructions_count;
        public byte DownmixInstructionsCount { get { return this.downmix_instructions_count; } set { this.downmix_instructions_count = value; } }

        protected int downmix_instructions_count0 = 1;
        public int DownmixInstructionsCount0 { get { return this.downmix_instructions_count0; } set { this.downmix_instructions_count0 = value; } }

        protected byte targetLayout;
        public byte TargetLayout { get { return this.targetLayout; } set { this.targetLayout = value; } }

        protected bool reserved0 = false;
        public bool Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected byte targetChannelCount;
        public byte TargetChannelCount { get { return this.targetChannelCount; } set { this.targetChannelCount = value; } }

        protected bool in_stream;
        public bool InStream { get { return this.in_stream; } set { this.in_stream = value; } }

        protected byte downmix_ID;
        public byte DownmixID { get { return this.downmix_ID; } set { this.downmix_ID = value; } }

        protected byte bs_downmix_offset;
        public byte BsDownmixOffset { get { return this.bs_downmix_offset; } set { this.bs_downmix_offset = value; } }

        protected byte bs_downmix_coefficient_v1;
        public byte BsDownmixCoefficientV1 { get { return this.bs_downmix_coefficient_v1; } set { this.bs_downmix_coefficient_v1 = value; } }

        protected byte[] reserved00 = [];  //  byte align
        public byte[] Reserved00 { get { return this.reserved00; } set { this.reserved00 = value; } }

        protected byte bs_downmix_coefficient;
        public byte BsDownmixCoefficient { get { return this.bs_downmix_coefficient; } set { this.bs_downmix_coefficient = value; } }

        public DownMixInstructions(byte version = 0) : base("dmix", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            int baseChannelCount = 0; // TODO: get somewhere

            if (version >= 1)
            {
                boxSize += stream.ReadBit(out this.reserved);
                boxSize += stream.ReadBits(7, out this.downmix_instructions_count);
            }

            else
            {
                boxSize += stream.ReadInt32(out this.downmix_instructions_count0);
            }

            for (int a = 1; a <= downmix_instructions_count; a++)
            {
                boxSize += stream.ReadUInt8(out this.targetLayout);
                boxSize += stream.ReadBit(out this.reserved0);
                boxSize += stream.ReadBits(7, out this.targetChannelCount);
                boxSize += stream.ReadBit(out this.in_stream);
                boxSize += stream.ReadBits(7, out this.downmix_ID);

                if (in_stream == false)
                {
                    /*  downmix coefficients are out of stream and supplied here */


                    if (version >= 1)
                    {
                        boxSize += stream.ReadBits(4, out this.bs_downmix_offset);
                        int size = 4;

                        for (int i = 1; i <= targetChannelCount; i++)
                        {

                            for (int j = 1; j <= baseChannelCount; j++)
                            {
                                boxSize += stream.ReadBits(5, out this.bs_downmix_coefficient_v1);
                                size += 5;
                            }
                        }
                        boxSize += stream.ReadBytes((ulong)(Math.Ceiling(size / 8d) - size), out this.reserved00); // byte align
                    }

                    else
                    {

                        for (int i = 1; i <= targetChannelCount; i++)
                        {

                            for (int j = 1; j <= baseChannelCount; j++)
                            {
                                boxSize += stream.ReadBits(4, out this.bs_downmix_coefficient);
                            }
                        }
                    }
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            int baseChannelCount = 0; // TODO: get somewhere

            if (version >= 1)
            {
                boxSize += stream.WriteBit(this.reserved);
                boxSize += stream.WriteBits(7, this.downmix_instructions_count);
            }

            else
            {
                boxSize += stream.WriteInt32(this.downmix_instructions_count0);
            }

            for (int a = 1; a <= downmix_instructions_count; a++)
            {
                boxSize += stream.WriteUInt8(this.targetLayout);
                boxSize += stream.WriteBit(this.reserved0);
                boxSize += stream.WriteBits(7, this.targetChannelCount);
                boxSize += stream.WriteBit(this.in_stream);
                boxSize += stream.WriteBits(7, this.downmix_ID);

                if (in_stream == false)
                {
                    /*  downmix coefficients are out of stream and supplied here */


                    if (version >= 1)
                    {
                        boxSize += stream.WriteBits(4, this.bs_downmix_offset);
                        int size = 4;

                        for (int i = 1; i <= targetChannelCount; i++)
                        {

                            for (int j = 1; j <= baseChannelCount; j++)
                            {
                                boxSize += stream.WriteBits(5, this.bs_downmix_coefficient_v1);
                                size += 5;
                            }
                        }
                        boxSize += stream.WriteBytes((ulong)(Math.Ceiling(size / 8d) - size), this.reserved00); // byte align
                    }

                    else
                    {

                        for (int i = 1; i <= targetChannelCount; i++)
                        {

                            for (int j = 1; j <= baseChannelCount; j++)
                            {
                                boxSize += stream.WriteBits(4, this.bs_downmix_coefficient);
                            }
                        }
                    }
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            int baseChannelCount = 0; // TODO: get somewhere

            if (version >= 1)
            {
                boxSize += 1; // reserved
                boxSize += 7; // downmix_instructions_count
            }

            else
            {
                boxSize += 32; // downmix_instructions_count0
            }

            for (int a = 1; a <= downmix_instructions_count; a++)
            {
                boxSize += 8; // targetLayout
                boxSize += 1; // reserved0
                boxSize += 7; // targetChannelCount
                boxSize += 1; // in_stream
                boxSize += 7; // downmix_ID

                if (in_stream == false)
                {
                    /*  downmix coefficients are out of stream and supplied here */


                    if (version >= 1)
                    {
                        boxSize += 4; // bs_downmix_offset
                        int size = 4;

                        for (int i = 1; i <= targetChannelCount; i++)
                        {

                            for (int j = 1; j <= baseChannelCount; j++)
                            {
                                boxSize += 5; // bs_downmix_coefficient_v1
                                size += 5;
                            }
                        }
                        boxSize += (ulong)(Math.Ceiling(size / 8d) - size) * 8; // reserved00
                    }

                    else
                    {

                        for (int i = 1; i <= targetChannelCount; i++)
                        {

                            for (int j = 1; j <= baseChannelCount; j++)
                            {
                                boxSize += 4; // bs_downmix_coefficient
                            }
                        }
                    }
                }
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SamplingRateBox extends FullBox('srat') {
        unsigned int(32) sampling_rate;
    }
    */
    public class SamplingRateBox : FullBox
    {
        public const string FourCC = "srat";

        protected uint sampling_rate;
        public uint SamplingRate { get { return this.sampling_rate; } set { this.sampling_rate = value; } }

        public SamplingRateBox() : base("srat")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.sampling_rate);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.sampling_rate);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // sampling_rate
            return boxSize;
        }
    }


    /*
    class TextConfigBox() extends FullBox ('txtC', 0, 0) {
        utf8string text_config;
    }
    */
    public class TextConfigBox : FullBox
    {
        public const string FourCC = "txtC";

        protected string text_config;
        public string TextConfig { get { return this.text_config; } set { this.text_config = value; } }

        public TextConfigBox() : base("txtC", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadString(out this.text_config);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteString(this.text_config);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)text_config.Length * 8; // text_config
            return boxSize;
        }
    }


    /*
    aligned(8) class URIInitBox
            extends FullBox('uriI', version = 0, 0) {
        unsigned int(8) uri_initialization_data[];
    }
    */
    public class URIInitBox : FullBox
    {
        public const string FourCC = "uriI";

        protected byte[] uri_initialization_data;
        public byte[] UriInitializationData { get { return this.uri_initialization_data; } set { this.uri_initialization_data = value; } }

        public URIInitBox() : base("uriI", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8Array(out this.uri_initialization_data);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8Array(this.uri_initialization_data);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)uri_initialization_data.Length * 8; // uri_initialization_data
            return boxSize;
        }
    }


    /*
    aligned(8) class CopyrightBox
        extends FullBox('cprt', version = 0, 0) {
        const bit(1) pad = 0;
        unsigned int(5)[3] language; // ISO-639-2/T language code
        utfstring notice;
    }
    */
    public class CopyrightBox : FullBox
    {
        public const string FourCC = "cprt";

        protected bool pad = false;
        public bool Pad { get { return this.pad; } set { this.pad = value; } }

        protected byte[] language;  //  ISO-639-2/T language code
        public byte[] Language { get { return this.language; } set { this.language = value; } }

        protected string notice;
        public string Notice { get { return this.notice; } set { this.notice = value; } }

        public CopyrightBox() : base("cprt", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBit(out this.pad);
            boxSize += stream.ReadBitsArray(5, 3, out this.language); // ISO-639-2/T language code
            boxSize += stream.ReadString(out this.notice);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBit(this.pad);
            boxSize += stream.WriteBitsArray(5, 3, this.language); // ISO-639-2/T language code
            boxSize += stream.WriteString(this.notice);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // pad
            boxSize += 3 * 5; // language
            boxSize += (ulong)notice.Length * 8; // notice
            return boxSize;
        }
    }


    /*
    aligned(8) class KindBox extends FullBox('kind', version = 0, 0) {
        utf8string schemeURI;
        utf8string value;
    }
    */
    public class KindBox : FullBox
    {
        public const string FourCC = "kind";

        protected string schemeURI;
        public string SchemeURI { get { return this.schemeURI; } set { this.schemeURI = value; } }

        protected string value;
        public string Value { get { return this.value; } set { this.value = value; } }

        public KindBox() : base("kind", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadString(out this.schemeURI);
            boxSize += stream.ReadString(out this.value);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteString(this.schemeURI);
            boxSize += stream.WriteString(this.value);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)schemeURI.Length * 8; // schemeURI
            boxSize += (ulong)value.Length * 8; // value
            return boxSize;
        }
    }


    /*
    aligned(8) class TrackSelectionBox
        extends FullBox('tsel', version = 0, 0) {
        template int(32) switch_group = 0;
        unsigned int(32) attribute_list[];		// to end of the box
    }
    */
    public class TrackSelectionBox : FullBox
    {
        public const string FourCC = "tsel";

        protected int switch_group = 0;
        public int SwitchGroup { get { return this.switch_group; } set { this.switch_group = value; } }

        protected uint[] attribute_list;  //  to end of the box
        public uint[] AttributeList { get { return this.attribute_list; } set { this.attribute_list = value; } }

        public TrackSelectionBox() : base("tsel", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadInt32(out this.switch_group);
            boxSize += stream.ReadUInt32Array(out this.attribute_list); // to end of the box
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteInt32(this.switch_group);
            boxSize += stream.WriteUInt32Array(this.attribute_list); // to end of the box
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // switch_group
            boxSize += 32; // attribute_list
            return boxSize;
        }
    }


    /*
    aligned(8) class SubTrackBox extends Box('strk') {
    }
    */
    public class SubTrackBox : Box
    {
        public const string FourCC = "strk";

        public SubTrackBox() : base("strk")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class trackhintinformation extends Box('hnti') {
    }


    */
    public class trackhintinformation : Box
    {
        public const string FourCC = "hnti";

        public trackhintinformation() : base("hnti")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class rtptracksdphintinformation extends Box('sdp ') {
        char	sdptext[];
    }
    */
    public class rtptracksdphintinformation : Box
    {
        public const string FourCC = "sdp ";

        protected byte[] sdptext;
        public byte[] Sdptext { get { return this.sdptext; } set { this.sdptext = value; } }

        public rtptracksdphintinformation() : base("sdp ")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8Array(out this.sdptext);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8Array(this.sdptext);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)sdptext.Length * 8; // sdptext
            return boxSize;
        }
    }


    /*
    aligned(8) class moviehintinformation extends Box('hnti') {
    }


    */
    public class moviehintinformation : Box
    {
        public const string FourCC = "hnti";

        public moviehintinformation() : base("hnti")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class rtpmoviehintinformation extends Box('rtp ') {
        uint(32) descriptionformat = 'sdp ';
        char  sdptext[];
    }
    */
    public class rtpmoviehintinformation : Box
    {
        public const string FourCC = "rtp ";

        protected uint descriptionformat = IsoStream.FromFourCC("sdp ");
        public uint Descriptionformat { get { return this.descriptionformat; } set { this.descriptionformat = value; } }

        protected byte[] sdptext;
        public byte[] Sdptext { get { return this.sdptext; } set { this.sdptext = value; } }

        public rtpmoviehintinformation() : base("rtp ")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.descriptionformat);
            boxSize += stream.ReadUInt8Array(out this.sdptext);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.descriptionformat);
            boxSize += stream.WriteUInt8Array(this.sdptext);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // descriptionformat
            boxSize += (ulong)sdptext.Length * 8; // sdptext
            return boxSize;
        }
    }


    /*
    aligned(8) class hintstatisticsbox extends Box('hinf') {
    }
    */
    public class hintstatisticsbox : Box
    {
        public const string FourCC = "hinf";

        public hintstatisticsbox() : base("hinf")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class LoudnessBox extends Box('ludt') {
        // not more than one TrackLoudnessInfo box with version>=1 is allowed
        TrackLoudnessInfo[]			loudness;
        // not more than one AlbumLoudnessInfo box with version>=1 is allowed
        AlbumLoudnessInfo[] albumLoudness	;
    }
    */
    public class LoudnessBox : Box
    {
        public const string FourCC = "ludt";

        protected TrackLoudnessInfo[] loudness;  //  not more than one AlbumLoudnessInfo box with version>=1 is allowed
        public TrackLoudnessInfo[] Loudness { get { return this.loudness; } set { this.loudness = value; } }

        protected AlbumLoudnessInfo[] albumLoudness;
        public AlbumLoudnessInfo[] AlbumLoudness { get { return this.albumLoudness; } set { this.albumLoudness = value; } }

        public LoudnessBox() : base("ludt")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            /*  not more than one TrackLoudnessInfo box with version>=1 is allowed */
            boxSize += stream.ReadBox(out this.loudness); // not more than one AlbumLoudnessInfo box with version>=1 is allowed
            boxSize += stream.ReadBox(out this.albumLoudness);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            /*  not more than one TrackLoudnessInfo box with version>=1 is allowed */
            boxSize += stream.WriteBox(this.loudness); // not more than one AlbumLoudnessInfo box with version>=1 is allowed
            boxSize += stream.WriteBox(this.albumLoudness);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            /*  not more than one TrackLoudnessInfo box with version>=1 is allowed */
            boxSize += IsoStream.CalculateSize(loudness); // loudness
            boxSize += IsoStream.CalculateSize(albumLoudness); // albumLoudness
            return boxSize;
        }
    }


    /*
    aligned(8) class TrackLoudnessInfo extends LoudnessBaseBox('tlou') { }
    */
    public class TrackLoudnessInfo : LoudnessBaseBox
    {
        public const string FourCC = "tlou";

        public TrackLoudnessInfo() : base("tlou")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class AlbumLoudnessInfo extends LoudnessBaseBox ('alou') { }
    */
    public class AlbumLoudnessInfo : LoudnessBaseBox
    {
        public const string FourCC = "alou";

        public AlbumLoudnessInfo() : base("alou")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class DataEntryUrlBox (bit(24) flags)
        extends DataEntryBaseBox('url ', flags) {
        utf8string location;
    }
    */
    public class DataEntryUrlBox : DataEntryBaseBox
    {
        public const string FourCC = "url ";

        protected string location;
        public string Location { get { return this.location; } set { this.location = value; } }

        public DataEntryUrlBox(uint flags = 0) : base("url ", flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadString(out this.location);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteString(this.location);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)location.Length * 8; // location
            return boxSize;
        }
    }


    /*
    aligned(8) class DataEntryUrnBox (bit(24) flags)
        extends DataEntryBaseBox('urn ', flags) {
        utf8string name;
        utf8string location;
    }
    */
    public class DataEntryUrnBox : DataEntryBaseBox
    {
        public const string FourCC = "urn ";

        protected string name;
        public string Name { get { return this.name; } set { this.name = value; } }

        protected string location;
        public string Location { get { return this.location; } set { this.location = value; } }

        public DataEntryUrnBox(uint flags = 0) : base("urn ", flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadString(out this.name);
            boxSize += stream.ReadString(out this.location);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteString(this.name);
            boxSize += stream.WriteString(this.location);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)name.Length * 8; // name
            boxSize += (ulong)location.Length * 8; // location
            return boxSize;
        }
    }


    /*
    aligned(8) class DataEntryImdaBox (bit(24) flags)
        extends DataEntryBaseBox('imdt', flags) {
        unsigned int(32) imda_ref_identifier;
    }
    */
    public class DataEntryImdaBox : DataEntryBaseBox
    {
        public const string FourCC = "imdt";

        protected uint imda_ref_identifier;
        public uint ImdaRefIdentifier { get { return this.imda_ref_identifier; } set { this.imda_ref_identifier = value; } }

        public DataEntryImdaBox(uint flags = 0) : base("imdt", flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.imda_ref_identifier);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.imda_ref_identifier);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // imda_ref_identifier
            return boxSize;
        }
    }


    /*
    aligned(8) class DataEntrySeqNumImdaBox (bit(24) flags)
        extends DataEntryBaseBox ('snim', flags) {
    }
    */
    public class DataEntrySeqNumImdaBox : DataEntryBaseBox
    {
        public const string FourCC = "snim";

        public DataEntrySeqNumImdaBox(uint flags = 0) : base("snim", flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class ItemPropertyContainerBox
        extends Box('ipco')
    {
        Box properties[];	// boxes derived from
            // ItemProperty or ItemFullProperty, or FreeSpaceBox(es)
            // to fill the box
    }

    */
    public class ItemPropertyContainerBox : Box
    {
        public const string FourCC = "ipco";

        protected Box[] properties;  //  boxes derived from
        public Box[] Properties { get { return this.properties; } set { this.properties = value; } }

        public ItemPropertyContainerBox() : base("ipco")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.properties); // boxes derived from
            /*  ItemProperty or ItemFullProperty, or FreeSpaceBox(es) */
            /*  to fill the box */
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.properties); // boxes derived from
            /*  ItemProperty or ItemFullProperty, or FreeSpaceBox(es) */
            /*  to fill the box */
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(properties); // properties
            /*  ItemProperty or ItemFullProperty, or FreeSpaceBox(es) */
            /*  to fill the box */
            return boxSize;
        }
    }


    /*
    aligned(8) class ItemPropertyAssociationBox
        extends FullBox('ipma', version, flags)
    {
        unsigned int(32) entry_count;
        for(i = 0; i < entry_count; i++) {
            if (version < 1)
                unsigned int(16)	item_ID;
            else
                unsigned int(32)	item_ID;
            unsigned int(8) association_count;
            for (j=0; j<association_count; j++) {
                bit(1) essential;
                if (flags & 1)
                    unsigned int(15) property_index;
                else
                    unsigned int(7) property_index;
            }
        }
    }

    */
    public class ItemPropertyAssociationBox : FullBox
    {
        public const string FourCC = "ipma";

        protected uint entry_count;
        public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected ushort item_ID;
        public ushort ItemID { get { return this.item_ID; } set { this.item_ID = value; } }

        protected uint item_ID0;
        public uint ItemID0 { get { return this.item_ID0; } set { this.item_ID0 = value; } }

        protected byte association_count;
        public byte AssociationCount { get { return this.association_count; } set { this.association_count = value; } }

        protected bool essential;
        public bool Essential { get { return this.essential; } set { this.essential = value; } }

        protected ushort property_index;
        public ushort PropertyIndex { get { return this.property_index; } set { this.property_index = value; } }

        protected byte property_index0;
        public byte PropertyIndex0 { get { return this.property_index0; } set { this.property_index0 = value; } }

        public ItemPropertyAssociationBox(byte version = 0, uint flags = 0) : base("ipma", version, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.entry_count);

            for (int i = 0; i < entry_count; i++)
            {

                if (version < 1)
                {
                    boxSize += stream.ReadUInt16(out this.item_ID);
                }

                else
                {
                    boxSize += stream.ReadUInt32(out this.item_ID0);
                }
                boxSize += stream.ReadUInt8(out this.association_count);

                for (int j = 0; j < association_count; j++)
                {
                    boxSize += stream.ReadBit(out this.essential);

                    if ((flags & 1) == 1)
                    {
                        boxSize += stream.ReadBits(15, out this.property_index);
                    }

                    else
                    {
                        boxSize += stream.ReadBits(7, out this.property_index0);
                    }
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.entry_count);

            for (int i = 0; i < entry_count; i++)
            {

                if (version < 1)
                {
                    boxSize += stream.WriteUInt16(this.item_ID);
                }

                else
                {
                    boxSize += stream.WriteUInt32(this.item_ID0);
                }
                boxSize += stream.WriteUInt8(this.association_count);

                for (int j = 0; j < association_count; j++)
                {
                    boxSize += stream.WriteBit(this.essential);

                    if ((flags & 1) == 1)
                    {
                        boxSize += stream.WriteBits(15, this.property_index);
                    }

                    else
                    {
                        boxSize += stream.WriteBits(7, this.property_index0);
                    }
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count

            for (int i = 0; i < entry_count; i++)
            {

                if (version < 1)
                {
                    boxSize += 16; // item_ID
                }

                else
                {
                    boxSize += 32; // item_ID0
                }
                boxSize += 8; // association_count

                for (int j = 0; j < association_count; j++)
                {
                    boxSize += 1; // essential

                    if ((flags & 1) == 1)
                    {
                        boxSize += 15; // property_index
                    }

                    else
                    {
                        boxSize += 7; // property_index0
                    }
                }
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class ItemPropertiesBox
            extends Box('iprp') {
        ItemPropertyContainerBox property_container;
        ItemPropertyAssociationBox association[];
     }
    */
    public class ItemPropertiesBox : Box
    {
        public const string FourCC = "iprp";

        protected ItemPropertyContainerBox property_container;
        public ItemPropertyContainerBox PropertyContainer { get { return this.property_container; } set { this.property_container = value; } }

        protected ItemPropertyAssociationBox[] association;
        public ItemPropertyAssociationBox[] Association { get { return this.association; } set { this.association = value; } }

        public ItemPropertiesBox() : base("iprp")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.property_container);
            boxSize += stream.ReadBox(out this.association);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.property_container);
            boxSize += stream.WriteBox(this.association);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(property_container); // property_container
            boxSize += IsoStream.CalculateSize(association); // association
            return boxSize;
        }
    }


    /*
    class AlternativeStartupSequencePropertiesBox extends FullBox('assp', version, 0) {
        if (version == 0) {
            signed int(32)		min_initial_alt_startup_offset;
        }
        else if (version == 1) {
            unsigned int(32)	num_entries;
            for (j=1; j <= num_entries; j++) {
                unsigned int(32)	grouping_type_parameter;
                signed int(32)		min_initial_alt_startup_offset;
            }
        }
    }
    */
    public class AlternativeStartupSequencePropertiesBox : FullBox
    {
        public const string FourCC = "assp";

        protected int min_initial_alt_startup_offset;
        public int MinInitialAltStartupOffset { get { return this.min_initial_alt_startup_offset; } set { this.min_initial_alt_startup_offset = value; } }

        protected uint num_entries;
        public uint NumEntries { get { return this.num_entries; } set { this.num_entries = value; } }

        protected uint grouping_type_parameter;
        public uint GroupingTypeParameter { get { return this.grouping_type_parameter; } set { this.grouping_type_parameter = value; } }

        protected int min_initial_alt_startup_offset0;
        public int MinInitialAltStartupOffset0 { get { return this.min_initial_alt_startup_offset0; } set { this.min_initial_alt_startup_offset0 = value; } }

        public AlternativeStartupSequencePropertiesBox(byte version = 0) : base("assp", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 0)
            {
                boxSize += stream.ReadInt32(out this.min_initial_alt_startup_offset);
            }

            else if (version == 1)
            {
                boxSize += stream.ReadUInt32(out this.num_entries);

                for (int j = 1; j <= num_entries; j++)
                {
                    boxSize += stream.ReadUInt32(out this.grouping_type_parameter);
                    boxSize += stream.ReadInt32(out this.min_initial_alt_startup_offset0);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 0)
            {
                boxSize += stream.WriteInt32(this.min_initial_alt_startup_offset);
            }

            else if (version == 1)
            {
                boxSize += stream.WriteUInt32(this.num_entries);

                for (int j = 1; j <= num_entries; j++)
                {
                    boxSize += stream.WriteUInt32(this.grouping_type_parameter);
                    boxSize += stream.WriteInt32(this.min_initial_alt_startup_offset0);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 0)
            {
                boxSize += 32; // min_initial_alt_startup_offset
            }

            else if (version == 1)
            {
                boxSize += 32; // num_entries

                for (int j = 1; j <= num_entries; j++)
                {
                    boxSize += 32; // grouping_type_parameter
                    boxSize += 32; // min_initial_alt_startup_offset0
                }
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class BinaryXMLBox
            extends FullBox('bxml', version = 0, 0) {
        unsigned int(8) data[];		// to end of box
    }
    */
    public class BinaryXMLBox : FullBox
    {
        public const string FourCC = "bxml";

        protected byte[] data;  //  to end of box
        public byte[] Data { get { return this.data; } set { this.data = value; } }

        public BinaryXMLBox() : base("bxml", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8Array(out this.data); // to end of box
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8Array(this.data); // to end of box
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)data.Length * 8; // data
            return boxSize;
        }
    }


    /*
    aligned(8) class CompleteTrackInfoBox(fmt) extends Box('cinf') {
        OriginalFormatBox(fmt)	original_format;
    }
    */
    public class CompleteTrackInfoBox : Box
    {
        public const string FourCC = "cinf";

        protected OriginalFormatBox original_format;
        public OriginalFormatBox OriginalFormat { get { return this.original_format; } set { this.original_format = value; } }

        public CompleteTrackInfoBox(string fmt = "") : base("cinf")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.original_format);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.original_format);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(original_format); // original_format
            return boxSize;
        }
    }


    /*
    aligned(8) class ChunkLargeOffsetBox
        extends FullBox('co64', version = 0, 0) {
        unsigned int(32)	entry_count;
        for (i=1; i <= entry_count; i++) {
            unsigned int(64)	chunk_offset;
        }
    }
    */
    public class ChunkLargeOffsetBox : FullBox
    {
        public const string FourCC = "co64";

        protected uint entry_count;
        public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected ulong chunk_offset;
        public ulong ChunkOffset { get { return this.chunk_offset; } set { this.chunk_offset = value; } }

        public ChunkLargeOffsetBox() : base("co64", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.ReadUInt64(out this.chunk_offset);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.WriteUInt64(this.chunk_offset);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += 64; // chunk_offset
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class CompactSampleToGroupBox
        extends FullBox('csgp', version, flags)
    {
        unsigned int(32) grouping_type;

        if (grouping_type_parameter_present == 1) {
            unsigned int(32) grouping_type_parameter;
        }
        unsigned int(32) pattern_count;
        totalPatternLength = 0;
        for (i=1; i <= pattern_count; i++) {
            unsigned int(f(pattern_size_code)) pattern_length[i];
            unsigned int(f(count_size_code)) sample_count[i];
        }
        for (j=1; j <= pattern_count; j++) {
            for (k=1; k <= pattern_length[j]; k++) {
                unsigned int(f(index_size_code))
                             sample_group_description_index[j][k];
                // whose msb might indicate fragment_local or global
            }
        }
    }
    */
    public class CompactSampleToGroupBox : FullBox
    {
        public const string FourCC = "csgp";

        protected uint grouping_type;
        public uint GroupingType { get { return this.grouping_type; } set { this.grouping_type = value; } }

        protected uint grouping_type_parameter;
        public uint GroupingTypeParameter { get { return this.grouping_type_parameter; } set { this.grouping_type_parameter = value; } }

        protected uint pattern_count;
        public uint PatternCount { get { return this.pattern_count; } set { this.pattern_count = value; } }

        protected byte[] pattern_length;
        public byte[] PatternLength { get { return this.pattern_length; } set { this.pattern_length = value; } }

        protected byte[] sample_count;
        public byte[] SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

        protected byte[][] sample_group_description_index;  //  whose msb might indicate fragment_local or global
        public byte[][] SampleGroupDescriptionIndex { get { return this.sample_group_description_index; } set { this.sample_group_description_index = value; } }

        public CompactSampleToGroupBox(byte version = 0, uint flags = 0) : base("csgp", version, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            bool grouping_type_parameter_present = (flags & (1 << 6)) == (1 << 6);
            uint count_size_code = (flags >> 2) & 0x3;
            uint pattern_size_code = (flags >> 4) & 0x3;
            uint index_size_code = flags & 0x3;

            boxSize += stream.ReadUInt32(out this.grouping_type);

            if (grouping_type_parameter_present == true)
            {
                boxSize += stream.ReadUInt32(out this.grouping_type_parameter);
            }
            boxSize += stream.ReadUInt32(out this.pattern_count);
            uint totalPatternLength = 0;

            for (int i = 1; i <= pattern_count; i++)
            {
                boxSize += stream.ReadBits(pattern_size_code, out this.pattern_length[i]);
                boxSize += stream.ReadBits(count_size_code, out this.sample_count[i]);
            }

            for (int j = 1; j <= pattern_count; j++)
            {

                for (int k = 1; k <= pattern_length[j]; k++)
                {
                    boxSize += stream.ReadBits(index_size_code, out this.sample_group_description_index[j][k]); // whose msb might indicate fragment_local or global
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            bool grouping_type_parameter_present = (flags & (1 << 6)) == (1 << 6);
            uint count_size_code = (flags >> 2) & 0x3;
            uint pattern_size_code = (flags >> 4) & 0x3;
            uint index_size_code = flags & 0x3;

            boxSize += stream.WriteUInt32(this.grouping_type);

            if (grouping_type_parameter_present == true)
            {
                boxSize += stream.WriteUInt32(this.grouping_type_parameter);
            }
            boxSize += stream.WriteUInt32(this.pattern_count);
            uint totalPatternLength = 0;

            for (int i = 1; i <= pattern_count; i++)
            {
                boxSize += stream.WriteBits(pattern_size_code, this.pattern_length[i]);
                boxSize += stream.WriteBits(count_size_code, this.sample_count[i]);
            }

            for (int j = 1; j <= pattern_count; j++)
            {

                for (int k = 1; k <= pattern_length[j]; k++)
                {
                    boxSize += stream.WriteBits(index_size_code, this.sample_group_description_index[j][k]); // whose msb might indicate fragment_local or global
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            bool grouping_type_parameter_present = (flags & (1 << 6)) == (1 << 6);
            uint count_size_code = (flags >> 2) & 0x3;
            uint pattern_size_code = (flags >> 4) & 0x3;
            uint index_size_code = flags & 0x3;

            boxSize += 32; // grouping_type

            if (grouping_type_parameter_present == true)
            {
                boxSize += 32; // grouping_type_parameter
            }
            boxSize += 32; // pattern_count
            uint totalPatternLength = 0;

            for (int i = 1; i <= pattern_count; i++)
            {
                boxSize += (ulong)pattern_size_code; // pattern_length
                boxSize += (ulong)count_size_code; // sample_count
            }

            for (int j = 1; j <= pattern_count; j++)
            {

                for (int k = 1; k <= pattern_length[j]; k++)
                {
                    boxSize += (ulong)index_size_code; // sample_group_description_index
                }
            }
            return boxSize;
        }
    }


    /*
    class CompositionToDecodeBox extends FullBox('cslg', version, 0) {
        if (version==0) {
            signed int(32)	compositionToDTSShift;
            signed int(32)	leastDecodeToDisplayDelta;
            signed int(32)	greatestDecodeToDisplayDelta;
            signed int(32)	compositionStartTime;
            signed int(32)	compositionEndTime;
        } else {
            signed int(64)	compositionToDTSShift;
            signed int(64)	leastDecodeToDisplayDelta;
            signed int(64)	greatestDecodeToDisplayDelta;
            signed int(64)	compositionStartTime;
            signed int(64)	compositionEndTime;
        }
    }
    */
    public class CompositionToDecodeBox : FullBox
    {
        public const string FourCC = "cslg";

        protected int compositionToDTSShift;
        public int CompositionToDTSShift { get { return this.compositionToDTSShift; } set { this.compositionToDTSShift = value; } }

        protected int leastDecodeToDisplayDelta;
        public int LeastDecodeToDisplayDelta { get { return this.leastDecodeToDisplayDelta; } set { this.leastDecodeToDisplayDelta = value; } }

        protected int greatestDecodeToDisplayDelta;
        public int GreatestDecodeToDisplayDelta { get { return this.greatestDecodeToDisplayDelta; } set { this.greatestDecodeToDisplayDelta = value; } }

        protected int compositionStartTime;
        public int CompositionStartTime { get { return this.compositionStartTime; } set { this.compositionStartTime = value; } }

        protected int compositionEndTime;
        public int CompositionEndTime { get { return this.compositionEndTime; } set { this.compositionEndTime = value; } }

        protected long compositionToDTSShift0;
        public long CompositionToDTSShift0 { get { return this.compositionToDTSShift0; } set { this.compositionToDTSShift0 = value; } }

        protected long leastDecodeToDisplayDelta0;
        public long LeastDecodeToDisplayDelta0 { get { return this.leastDecodeToDisplayDelta0; } set { this.leastDecodeToDisplayDelta0 = value; } }

        protected long greatestDecodeToDisplayDelta0;
        public long GreatestDecodeToDisplayDelta0 { get { return this.greatestDecodeToDisplayDelta0; } set { this.greatestDecodeToDisplayDelta0 = value; } }

        protected long compositionStartTime0;
        public long CompositionStartTime0 { get { return this.compositionStartTime0; } set { this.compositionStartTime0 = value; } }

        protected long compositionEndTime0;
        public long CompositionEndTime0 { get { return this.compositionEndTime0; } set { this.compositionEndTime0 = value; } }

        public CompositionToDecodeBox(byte version = 0) : base("cslg", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 0)
            {
                boxSize += stream.ReadInt32(out this.compositionToDTSShift);
                boxSize += stream.ReadInt32(out this.leastDecodeToDisplayDelta);
                boxSize += stream.ReadInt32(out this.greatestDecodeToDisplayDelta);
                boxSize += stream.ReadInt32(out this.compositionStartTime);
                boxSize += stream.ReadInt32(out this.compositionEndTime);
            }

            else
            {
                boxSize += stream.ReadInt64(out this.compositionToDTSShift0);
                boxSize += stream.ReadInt64(out this.leastDecodeToDisplayDelta0);
                boxSize += stream.ReadInt64(out this.greatestDecodeToDisplayDelta0);
                boxSize += stream.ReadInt64(out this.compositionStartTime0);
                boxSize += stream.ReadInt64(out this.compositionEndTime0);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 0)
            {
                boxSize += stream.WriteInt32(this.compositionToDTSShift);
                boxSize += stream.WriteInt32(this.leastDecodeToDisplayDelta);
                boxSize += stream.WriteInt32(this.greatestDecodeToDisplayDelta);
                boxSize += stream.WriteInt32(this.compositionStartTime);
                boxSize += stream.WriteInt32(this.compositionEndTime);
            }

            else
            {
                boxSize += stream.WriteInt64(this.compositionToDTSShift0);
                boxSize += stream.WriteInt64(this.leastDecodeToDisplayDelta0);
                boxSize += stream.WriteInt64(this.greatestDecodeToDisplayDelta0);
                boxSize += stream.WriteInt64(this.compositionStartTime0);
                boxSize += stream.WriteInt64(this.compositionEndTime0);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 0)
            {
                boxSize += 32; // compositionToDTSShift
                boxSize += 32; // leastDecodeToDisplayDelta
                boxSize += 32; // greatestDecodeToDisplayDelta
                boxSize += 32; // compositionStartTime
                boxSize += 32; // compositionEndTime
            }

            else
            {
                boxSize += 64; // compositionToDTSShift0
                boxSize += 64; // leastDecodeToDisplayDelta0
                boxSize += 64; // greatestDecodeToDisplayDelta0
                boxSize += 64; // compositionStartTime0
                boxSize += 64; // compositionEndTime0
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class CompositionOffsetBox
        extends FullBox('ctts', version, 0) {
        unsigned int(32)	entry_count;
            int i;
        if (version==0) {
            for (i=0; i < entry_count; i++) {
                unsigned int(32)	sample_count;
                unsigned int(32)	sample_offset;
            }
        }
        else if (version == 1) {
            for (i=0; i < entry_count; i++) {
                unsigned int(32)	sample_count;
                signed   int(32)	sample_offset;
            }
        }
    }
    */
    public class CompositionOffsetBox : FullBox
    {
        public const string FourCC = "ctts";

        protected uint entry_count;
        public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected uint sample_count;
        public uint SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

        protected uint sample_offset;
        public uint SampleOffset { get { return this.sample_offset; } set { this.sample_offset = value; } }

        protected uint sample_count0;
        public uint SampleCount0 { get { return this.sample_count0; } set { this.sample_count0 = value; } }

        protected int sample_offset0;
        public int SampleOffset0 { get { return this.sample_offset0; } set { this.sample_offset0 = value; } }

        public CompositionOffsetBox(byte version = 0) : base("ctts", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.entry_count);


            if (version == 0)
            {

                for (int i = 0; i < entry_count; i++)
                {
                    boxSize += stream.ReadUInt32(out this.sample_count);
                    boxSize += stream.ReadUInt32(out this.sample_offset);
                }
            }

            else if (version == 1)
            {

                for (int i = 0; i < entry_count; i++)
                {
                    boxSize += stream.ReadUInt32(out this.sample_count0);
                    boxSize += stream.ReadInt32(out this.sample_offset0);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.entry_count);


            if (version == 0)
            {

                for (int i = 0; i < entry_count; i++)
                {
                    boxSize += stream.WriteUInt32(this.sample_count);
                    boxSize += stream.WriteUInt32(this.sample_offset);
                }
            }

            else if (version == 1)
            {

                for (int i = 0; i < entry_count; i++)
                {
                    boxSize += stream.WriteUInt32(this.sample_count0);
                    boxSize += stream.WriteInt32(this.sample_offset0);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count


            if (version == 0)
            {

                for (int i = 0; i < entry_count; i++)
                {
                    boxSize += 32; // sample_count
                    boxSize += 32; // sample_offset
                }
            }

            else if (version == 1)
            {

                for (int i = 0; i < entry_count; i++)
                {
                    boxSize += 32; // sample_count0
                    boxSize += 32; // sample_offset0
                }
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class DataInformationBox extends Box('dinf') {
    }
    */
    public class DataInformationBox : Box
    {
        public const string FourCC = "dinf";

        public DataInformationBox() : base("dinf")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class DataReferenceBox
        extends FullBox('dref', version = 0, 0) {
        unsigned int(32)	entry_count;
        for (i=1; i <= entry_count; i++) {
            DataEntryBaseBox(entry_type, entry_flags)	data_entry;
        }
    }
    */
    public class DataReferenceBox : FullBox
    {
        public const string FourCC = "dref";

        protected uint entry_count;
        public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected DataEntryBaseBox data_entry;
        public DataEntryBaseBox DataEntry { get { return this.data_entry; } set { this.data_entry = value; } }

        public DataReferenceBox() : base("dref", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.ReadBox(out this.data_entry);
            }
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.WriteBox(this.data_entry);
            }
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoStream.CalculateSize(data_entry); // data_entry
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class EditBox extends Box('edts') {
    }
    */
    public class EditBox : Box
    {
        public const string FourCC = "edts";

        public EditBox() : base("edts")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class EditListBox extends FullBox('elst', version, flags) {
        unsigned int(32)	entry_count;
        for (i=1; i <= entry_count; i++) {
            if (version==1) {
                unsigned int(64) edit_duration;
                int(64) media_time;
            } else { // version==0
                unsigned int(32) edit_duration;
                int(32)	media_time;
            }
            int(16) media_rate_integer;
            int(16) media_rate_fraction;
        }
    }
    */
    public class EditListBox : FullBox
    {
        public const string FourCC = "elst";

        protected uint entry_count;
        public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected ulong edit_duration;
        public ulong EditDuration { get { return this.edit_duration; } set { this.edit_duration = value; } }

        protected long media_time;
        public long MediaTime { get { return this.media_time; } set { this.media_time = value; } }

        protected uint edit_duration0;
        public uint EditDuration0 { get { return this.edit_duration0; } set { this.edit_duration0 = value; } }

        protected int media_time0;
        public int MediaTime0 { get { return this.media_time0; } set { this.media_time0 = value; } }

        protected short media_rate_integer;
        public short MediaRateInteger { get { return this.media_rate_integer; } set { this.media_rate_integer = value; } }

        protected short media_rate_fraction;
        public short MediaRateFraction { get { return this.media_rate_fraction; } set { this.media_rate_fraction = value; } }

        public EditListBox(byte version = 0, uint flags = 0) : base("elst", version, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {

                if (version == 1)
                {
                    boxSize += stream.ReadUInt64(out this.edit_duration);
                    boxSize += stream.ReadInt64(out this.media_time);
                }

                else
                {
                    /*  version==0 */
                    boxSize += stream.ReadUInt32(out this.edit_duration0);
                    boxSize += stream.ReadInt32(out this.media_time0);
                }
                boxSize += stream.ReadInt16(out this.media_rate_integer);
                boxSize += stream.ReadInt16(out this.media_rate_fraction);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {

                if (version == 1)
                {
                    boxSize += stream.WriteUInt64(this.edit_duration);
                    boxSize += stream.WriteInt64(this.media_time);
                }

                else
                {
                    /*  version==0 */
                    boxSize += stream.WriteUInt32(this.edit_duration0);
                    boxSize += stream.WriteInt32(this.media_time0);
                }
                boxSize += stream.WriteInt16(this.media_rate_integer);
                boxSize += stream.WriteInt16(this.media_rate_fraction);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {

                if (version == 1)
                {
                    boxSize += 64; // edit_duration
                    boxSize += 64; // media_time
                }

                else
                {
                    /*  version==0 */
                    boxSize += 32; // edit_duration0
                    boxSize += 32; // media_time0
                }
                boxSize += 16; // media_rate_integer
                boxSize += 16; // media_rate_fraction
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class ExtendedTypeBox extends Box('etyp') {
        TypeCombinationBox	compatible_combinations[];	// to end of the box
    }
    */
    public class ExtendedTypeBox : Box
    {
        public const string FourCC = "etyp";

        protected TypeCombinationBox[] compatible_combinations;  //  to end of the box
        public TypeCombinationBox[] CompatibleCombinations { get { return this.compatible_combinations; } set { this.compatible_combinations = value; } }

        public ExtendedTypeBox() : base("etyp")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.compatible_combinations); // to end of the box
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.compatible_combinations); // to end of the box
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(compatible_combinations); // compatible_combinations
            return boxSize;
        }
    }


    /*
    aligned(8) class FDItemInfoExtension() extends ItemInfoExtension ('fdel') {
        utf8string content_location;
        utf8string content_MD5;
        unsigned int(64) content_length;
        unsigned int(64) transfer_length;
        unsigned int(8) entry_count;
        for (i=1; i <= entry_count; i++)
            unsigned int(32) group_id;
    }
    */
    public class FDItemInfoExtension : ItemInfoExtension
    {
        public const string FourCC = "fdel";

        protected string content_location;
        public string ContentLocation { get { return this.content_location; } set { this.content_location = value; } }

        protected string content_MD5;
        public string ContentMD5 { get { return this.content_MD5; } set { this.content_MD5 = value; } }

        protected ulong content_length;
        public ulong ContentLength { get { return this.content_length; } set { this.content_length = value; } }

        protected ulong transfer_length;
        public ulong TransferLength { get { return this.transfer_length; } set { this.transfer_length = value; } }

        protected byte entry_count;
        public byte EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected uint group_id;
        public uint GroupId { get { return this.group_id; } set { this.group_id = value; } }

        public FDItemInfoExtension() : base("fdel")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadString(out this.content_location);
            boxSize += stream.ReadString(out this.content_MD5);
            boxSize += stream.ReadUInt64(out this.content_length);
            boxSize += stream.ReadUInt64(out this.transfer_length);
            boxSize += stream.ReadUInt8(out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.ReadUInt32(out this.group_id);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteString(this.content_location);
            boxSize += stream.WriteString(this.content_MD5);
            boxSize += stream.WriteUInt64(this.content_length);
            boxSize += stream.WriteUInt64(this.transfer_length);
            boxSize += stream.WriteUInt8(this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.WriteUInt32(this.group_id);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)content_location.Length * 8; // content_location
            boxSize += (ulong)content_MD5.Length * 8; // content_MD5
            boxSize += 64; // content_length
            boxSize += 64; // transfer_length
            boxSize += 8; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += 32; // group_id
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class FECReservoirBox
            extends FullBox('fecr', version, 0) {
        if (version == 0) {
            unsigned int(16)	entry_count;
        } else {
            unsigned int(32)	entry_count;
        }
        for (i=1; i <= entry_count; i++) {
            if (version == 0) {
                unsigned int(16)	item_ID;
            } else {
                unsigned int(32)	item_ID;
            }
            unsigned int(32)	symbol_count;
        }
    }
    */
    public class FECReservoirBox : FullBox
    {
        public const string FourCC = "fecr";

        protected ushort entry_count;
        public ushort EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected uint entry_count0;
        public uint EntryCount0 { get { return this.entry_count0; } set { this.entry_count0 = value; } }

        protected ushort item_ID;
        public ushort ItemID { get { return this.item_ID; } set { this.item_ID = value; } }

        protected uint item_ID0;
        public uint ItemID0 { get { return this.item_ID0; } set { this.item_ID0 = value; } }

        protected uint symbol_count;
        public uint SymbolCount { get { return this.symbol_count; } set { this.symbol_count = value; } }

        public FECReservoirBox(byte version = 0) : base("fecr", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 0)
            {
                boxSize += stream.ReadUInt16(out this.entry_count);
            }

            else
            {
                boxSize += stream.ReadUInt32(out this.entry_count0);
            }

            for (int i = 1; i <= entry_count; i++)
            {

                if (version == 0)
                {
                    boxSize += stream.ReadUInt16(out this.item_ID);
                }

                else
                {
                    boxSize += stream.ReadUInt32(out this.item_ID0);
                }
                boxSize += stream.ReadUInt32(out this.symbol_count);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 0)
            {
                boxSize += stream.WriteUInt16(this.entry_count);
            }

            else
            {
                boxSize += stream.WriteUInt32(this.entry_count0);
            }

            for (int i = 1; i <= entry_count; i++)
            {

                if (version == 0)
                {
                    boxSize += stream.WriteUInt16(this.item_ID);
                }

                else
                {
                    boxSize += stream.WriteUInt32(this.item_ID0);
                }
                boxSize += stream.WriteUInt32(this.symbol_count);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 0)
            {
                boxSize += 16; // entry_count
            }

            else
            {
                boxSize += 32; // entry_count0
            }

            for (int i = 1; i <= entry_count; i++)
            {

                if (version == 0)
                {
                    boxSize += 16; // item_ID
                }

                else
                {
                    boxSize += 32; // item_ID0
                }
                boxSize += 32; // symbol_count
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class PartitionEntry extends Box('paen') {
        FilePartitionBox	blocks_and_symbols;
        FECReservoirBox	FEC_symbol_locations; //optional
        FileReservoirBox	File_symbol_locations; //optional
    }


    */
    public class PartitionEntry : Box
    {
        public const string FourCC = "paen";

        protected FilePartitionBox blocks_and_symbols;
        public FilePartitionBox BlocksAndSymbols { get { return this.blocks_and_symbols; } set { this.blocks_and_symbols = value; } }

        protected FECReservoirBox FEC_symbol_locations;  // optional
        public FECReservoirBox FECSymbolLocations { get { return this.FEC_symbol_locations; } set { this.FEC_symbol_locations = value; } }

        protected FileReservoirBox File_symbol_locations;  // optional
        public FileReservoirBox FileSymbolLocations { get { return this.File_symbol_locations; } set { this.File_symbol_locations = value; } }

        public PartitionEntry() : base("paen")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.blocks_and_symbols);
            if (boxSize < size) boxSize += stream.ReadBox(out this.FEC_symbol_locations); //optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.File_symbol_locations); //optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.blocks_and_symbols);
            if (this.FEC_symbol_locations != null) boxSize += stream.WriteBox(this.FEC_symbol_locations); //optional
            if (this.File_symbol_locations != null) boxSize += stream.WriteBox(this.File_symbol_locations); //optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(blocks_and_symbols); // blocks_and_symbols
            if (this.FEC_symbol_locations != null) boxSize += IsoStream.CalculateSize(FEC_symbol_locations); // FEC_symbol_locations
            if (this.File_symbol_locations != null) boxSize += IsoStream.CalculateSize(File_symbol_locations); // File_symbol_locations
            return boxSize;
        }
    }


    /*
    aligned(8) class FDItemInformationBox
            extends FullBox('fiin', version = 0, 0) {
        unsigned int(16)	entry_count;
        PartitionEntry		partition_entries[ entry_count ];
        FDSessionGroupBox	session_info;			//optional
        GroupIdToNameBox	group_id_to_name;	//optional
    }
    */
    public class FDItemInformationBox : FullBox
    {
        public const string FourCC = "fiin";

        protected ushort entry_count;
        public ushort EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected PartitionEntry[] partition_entries;
        public PartitionEntry[] PartitionEntries { get { return this.partition_entries; } set { this.partition_entries = value; } }

        protected FDSessionGroupBox session_info;  // optional
        public FDSessionGroupBox SessionInfo { get { return this.session_info; } set { this.session_info = value; } }

        protected GroupIdToNameBox group_id_to_name;  // optional
        public GroupIdToNameBox GroupIdToName { get { return this.group_id_to_name; } set { this.group_id_to_name = value; } }

        public FDItemInformationBox() : base("fiin", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.entry_count);
            boxSize += stream.ReadBox(entry_count, out this.partition_entries);
            if (boxSize < size) boxSize += stream.ReadBox(out this.session_info); //optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.group_id_to_name); //optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.entry_count);
            boxSize += stream.WriteBox(entry_count, this.partition_entries);
            if (this.session_info != null) boxSize += stream.WriteBox(this.session_info); //optional
            if (this.group_id_to_name != null) boxSize += stream.WriteBox(this.group_id_to_name); //optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // entry_count
            boxSize += IsoStream.CalculateSize(partition_entries); // partition_entries
            if (this.session_info != null) boxSize += IsoStream.CalculateSize(session_info); // session_info
            if (this.group_id_to_name != null) boxSize += IsoStream.CalculateSize(group_id_to_name); // group_id_to_name
            return boxSize;
        }
    }


    /*
    aligned(8) class FileReservoirBox
            extends FullBox('fire', version, 0) {
        if (version == 0) {
            unsigned int(16)	entry_count;
        } else {
            unsigned int(32)	entry_count;
        }
        for (i=1; i <= entry_count; i++) {
            if (version == 0) {
                unsigned int(16)	item_ID;
            } else {
                unsigned int(32)	item_ID;
            }
            unsigned int(32)	symbol_count;
        }
    }
    */
    public class FileReservoirBox : FullBox
    {
        public const string FourCC = "fire";

        protected ushort entry_count;
        public ushort EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected uint entry_count0;
        public uint EntryCount0 { get { return this.entry_count0; } set { this.entry_count0 = value; } }

        protected ushort item_ID;
        public ushort ItemID { get { return this.item_ID; } set { this.item_ID = value; } }

        protected uint item_ID0;
        public uint ItemID0 { get { return this.item_ID0; } set { this.item_ID0 = value; } }

        protected uint symbol_count;
        public uint SymbolCount { get { return this.symbol_count; } set { this.symbol_count = value; } }

        public FileReservoirBox(byte version = 0) : base("fire", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 0)
            {
                boxSize += stream.ReadUInt16(out this.entry_count);
            }

            else
            {
                boxSize += stream.ReadUInt32(out this.entry_count0);
            }

            for (int i = 1; i <= entry_count; i++)
            {

                if (version == 0)
                {
                    boxSize += stream.ReadUInt16(out this.item_ID);
                }

                else
                {
                    boxSize += stream.ReadUInt32(out this.item_ID0);
                }
                boxSize += stream.ReadUInt32(out this.symbol_count);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 0)
            {
                boxSize += stream.WriteUInt16(this.entry_count);
            }

            else
            {
                boxSize += stream.WriteUInt32(this.entry_count0);
            }

            for (int i = 1; i <= entry_count; i++)
            {

                if (version == 0)
                {
                    boxSize += stream.WriteUInt16(this.item_ID);
                }

                else
                {
                    boxSize += stream.WriteUInt32(this.item_ID0);
                }
                boxSize += stream.WriteUInt32(this.symbol_count);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 0)
            {
                boxSize += 16; // entry_count
            }

            else
            {
                boxSize += 32; // entry_count0
            }

            for (int i = 1; i <= entry_count; i++)
            {

                if (version == 0)
                {
                    boxSize += 16; // item_ID
                }

                else
                {
                    boxSize += 32; // item_ID0
                }
                boxSize += 32; // symbol_count
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class FilePartitionBox
            extends FullBox('fpar', version, 0) {
        if (version == 0) {
            unsigned int(16)	item_ID;
        } else {
            unsigned int(32)	item_ID;
        }
        unsigned int(16)	packet_payload_size;
        unsigned int(8)	reserved = 0;
        unsigned int(8)	FEC_encoding_ID;
        unsigned int(16)	FEC_instance_ID;
        unsigned int(16)	max_source_block_length;
        unsigned int(16)	encoding_symbol_length;
        unsigned int(16)	max_number_of_encoding_symbols;
        base64string		scheme_specific_info;
        if (version == 0) {
            unsigned int(16)	entry_count;
        } else {
            unsigned int(32)	entry_count;
        }
        for (i=1; i <= entry_count; i++) {
            unsigned int(16)	block_count;
            unsigned int(32)	block_size;
        }
    }
    */
    public class FilePartitionBox : FullBox
    {
        public const string FourCC = "fpar";

        protected ushort item_ID;
        public ushort ItemID { get { return this.item_ID; } set { this.item_ID = value; } }

        protected uint item_ID0;
        public uint ItemID0 { get { return this.item_ID0; } set { this.item_ID0 = value; } }

        protected ushort packet_payload_size;
        public ushort PacketPayloadSize { get { return this.packet_payload_size; } set { this.packet_payload_size = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte FEC_encoding_ID;
        public byte FECEncodingID { get { return this.FEC_encoding_ID; } set { this.FEC_encoding_ID = value; } }

        protected ushort FEC_instance_ID;
        public ushort FECInstanceID { get { return this.FEC_instance_ID; } set { this.FEC_instance_ID = value; } }

        protected ushort max_source_block_length;
        public ushort MaxSourceBlockLength { get { return this.max_source_block_length; } set { this.max_source_block_length = value; } }

        protected ushort encoding_symbol_length;
        public ushort EncodingSymbolLength { get { return this.encoding_symbol_length; } set { this.encoding_symbol_length = value; } }

        protected ushort max_number_of_encoding_symbols;
        public ushort MaxNumberOfEncodingSymbols { get { return this.max_number_of_encoding_symbols; } set { this.max_number_of_encoding_symbols = value; } }

        protected string scheme_specific_info;
        public string SchemeSpecificInfo { get { return this.scheme_specific_info; } set { this.scheme_specific_info = value; } }

        protected ushort entry_count;
        public ushort EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected uint entry_count0;
        public uint EntryCount0 { get { return this.entry_count0; } set { this.entry_count0 = value; } }

        protected ushort block_count;
        public ushort BlockCount { get { return this.block_count; } set { this.block_count = value; } }

        protected uint block_size;
        public uint BlockSize { get { return this.block_size; } set { this.block_size = value; } }

        public FilePartitionBox(byte version = 0) : base("fpar", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 0)
            {
                boxSize += stream.ReadUInt16(out this.item_ID);
            }

            else
            {
                boxSize += stream.ReadUInt32(out this.item_ID0);
            }
            boxSize += stream.ReadUInt16(out this.packet_payload_size);
            boxSize += stream.ReadUInt8(out this.reserved);
            boxSize += stream.ReadUInt8(out this.FEC_encoding_ID);
            boxSize += stream.ReadUInt16(out this.FEC_instance_ID);
            boxSize += stream.ReadUInt16(out this.max_source_block_length);
            boxSize += stream.ReadUInt16(out this.encoding_symbol_length);
            boxSize += stream.ReadUInt16(out this.max_number_of_encoding_symbols);
            boxSize += stream.ReadString(out this.scheme_specific_info);

            if (version == 0)
            {
                boxSize += stream.ReadUInt16(out this.entry_count);
            }

            else
            {
                boxSize += stream.ReadUInt32(out this.entry_count0);
            }

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.ReadUInt16(out this.block_count);
                boxSize += stream.ReadUInt32(out this.block_size);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 0)
            {
                boxSize += stream.WriteUInt16(this.item_ID);
            }

            else
            {
                boxSize += stream.WriteUInt32(this.item_ID0);
            }
            boxSize += stream.WriteUInt16(this.packet_payload_size);
            boxSize += stream.WriteUInt8(this.reserved);
            boxSize += stream.WriteUInt8(this.FEC_encoding_ID);
            boxSize += stream.WriteUInt16(this.FEC_instance_ID);
            boxSize += stream.WriteUInt16(this.max_source_block_length);
            boxSize += stream.WriteUInt16(this.encoding_symbol_length);
            boxSize += stream.WriteUInt16(this.max_number_of_encoding_symbols);
            boxSize += stream.WriteString(this.scheme_specific_info);

            if (version == 0)
            {
                boxSize += stream.WriteUInt16(this.entry_count);
            }

            else
            {
                boxSize += stream.WriteUInt32(this.entry_count0);
            }

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.WriteUInt16(this.block_count);
                boxSize += stream.WriteUInt32(this.block_size);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 0)
            {
                boxSize += 16; // item_ID
            }

            else
            {
                boxSize += 32; // item_ID0
            }
            boxSize += 16; // packet_payload_size
            boxSize += 8; // reserved
            boxSize += 8; // FEC_encoding_ID
            boxSize += 16; // FEC_instance_ID
            boxSize += 16; // max_source_block_length
            boxSize += 16; // encoding_symbol_length
            boxSize += 16; // max_number_of_encoding_symbols
            boxSize += (ulong)scheme_specific_info.Length * 8; // scheme_specific_info

            if (version == 0)
            {
                boxSize += 16; // entry_count
            }

            else
            {
                boxSize += 32; // entry_count0
            }

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += 16; // block_count
                boxSize += 32; // block_size
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class FreeSpaceBox extends Box('free') {
    unsigned int(8) data[];
    }
    */
    public class FreeSpaceBox : Box
    {
        public const string FourCC = "free";

        protected byte[] data;
        public byte[] Data { get { return this.data; } set { this.data = value; } }

        public FreeSpaceBox() : base("free")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8Array(out this.data);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8Array(this.data);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)data.Length * 8; // data
            return boxSize;
        }
    }


    /*
    aligned(8) class OriginalFormatBox(codingname) extends Box ('frma') {
        unsigned int(32)	data_format = codingname;
                // format of decrypted, encoded data (in case of protection)
                // or un-transformed sample entry (in case of restriction
                // and complete track information)
    }
    */
    public class OriginalFormatBox : Box
    {
        public const string FourCC = "frma";

        protected uint data_format; // = codingname
        public uint DataFormat { get { return this.data_format; } set { this.data_format = value; } }

        public OriginalFormatBox(string codingname = "") : base("frma")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.data_format); // format of decrypted, encoded data (in case of protection)
            /*  or un-transformed sample entry (in case of restriction */
            /*  and complete track information) */
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.data_format); // format of decrypted, encoded data (in case of protection)
            /*  or un-transformed sample entry (in case of restriction */
            /*  and complete track information) */
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // data_format
            /*  or un-transformed sample entry (in case of restriction */
            /*  and complete track information) */
            return boxSize;
        }
    }


    /*
    aligned(8) class FileTypeBox
    extends Box('ftyp')
    {
    unsigned int(32) major_brand;
    unsigned int(32) minor_version;
    unsigned int(32) compatible_brands[];// to end of the box
    }
    */
    public class FileTypeBox : Box
    {
        public const string FourCC = "ftyp";

        protected uint major_brand;
        public uint MajorBrand { get { return this.major_brand; } set { this.major_brand = value; } }

        protected uint minor_version;
        public uint MinorVersion { get { return this.minor_version; } set { this.minor_version = value; } }

        protected uint[] compatible_brands;  //  to end of the box
        public uint[] CompatibleBrands { get { return this.compatible_brands; } set { this.compatible_brands = value; } }

        public FileTypeBox() : base("ftyp")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.major_brand);
            boxSize += stream.ReadUInt32(out this.minor_version);
            boxSize += stream.ReadUInt32Array(out this.compatible_brands); // to end of the box
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.major_brand);
            boxSize += stream.WriteUInt32(this.minor_version);
            boxSize += stream.WriteUInt32Array(this.compatible_brands); // to end of the box
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // major_brand
            boxSize += 32; // minor_version
            boxSize += 32; // compatible_brands
            return boxSize;
        }
    }


    /*
    aligned(8) class GroupIdToNameBox
            extends FullBox('gitn', version = 0, 0) {
        unsigned int(16)	entry_count;
        for (i=1; i <= entry_count; i++) {
            unsigned int(32)	group_ID;
            utf8string			group_name;
        }
    }
    */
    public class GroupIdToNameBox : FullBox
    {
        public const string FourCC = "gitn";

        protected ushort entry_count;
        public ushort EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected uint group_ID;
        public uint GroupID { get { return this.group_ID; } set { this.group_ID = value; } }

        protected string group_name;
        public string GroupName { get { return this.group_name; } set { this.group_name = value; } }

        public GroupIdToNameBox() : base("gitn", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.ReadUInt32(out this.group_ID);
                boxSize += stream.ReadString(out this.group_name);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.WriteUInt32(this.group_ID);
                boxSize += stream.WriteString(this.group_name);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += 32; // group_ID
                boxSize += (ulong)group_name.Length * 8; // group_name
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class GroupsListBox extends Box('grpl') {
    }
    */
    public class GroupsListBox : Box
    {
        public const string FourCC = "grpl";

        public GroupsListBox() : base("grpl")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class HandlerBox extends FullBox('hdlr', version = 0, 0) {
        unsigned int(32)	pre_defined = 0;
        unsigned int(32)	handler_type;
        const unsigned int(32)[3]	reserved = 0;
        utf8string	name;
    }
    */
    public class HandlerBox : FullBox
    {
        public const string FourCC = "hdlr";

        protected uint pre_defined = 0;
        public uint PreDefined { get { return this.pre_defined; } set { this.pre_defined = value; } }

        protected uint handler_type;
        public uint HandlerType { get { return this.handler_type; } set { this.handler_type = value; } }

        protected uint[] reserved = [];
        public uint[] Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected string name;
        public string Name { get { return this.name; } set { this.name = value; } }

        public HandlerBox() : base("hdlr", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.pre_defined);
            boxSize += stream.ReadUInt32(out this.handler_type);
            boxSize += stream.ReadUInt32Array(3, out this.reserved);
            boxSize += stream.ReadString(out this.name);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.pre_defined);
            boxSize += stream.WriteUInt32(this.handler_type);
            boxSize += stream.WriteUInt32Array(3, this.reserved);
            boxSize += stream.WriteString(this.name);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // pre_defined
            boxSize += 32; // handler_type
            boxSize += 3 * 32; // reserved
            boxSize += (ulong)name.Length * 8; // name
            return boxSize;
        }
    }


    /*
    aligned(8) class HintMediaHeaderBox
        extends FullBox('hmhd', version = 0, 0) {
        unsigned int(16)	maxPDUsize;
        unsigned int(16)	avgPDUsize;
        unsigned int(32)	maxbitrate;
        unsigned int(32)	avgbitrate;
        unsigned int(32)	reserved = 0;
    }
    */
    public class HintMediaHeaderBox : FullBox
    {
        public const string FourCC = "hmhd";

        protected ushort maxPDUsize;
        public ushort MaxPDUsize { get { return this.maxPDUsize; } set { this.maxPDUsize = value; } }

        protected ushort avgPDUsize;
        public ushort AvgPDUsize { get { return this.avgPDUsize; } set { this.avgPDUsize = value; } }

        protected uint maxbitrate;
        public uint Maxbitrate { get { return this.maxbitrate; } set { this.maxbitrate = value; } }

        protected uint avgbitrate;
        public uint Avgbitrate { get { return this.avgbitrate; } set { this.avgbitrate = value; } }

        protected uint reserved = 0;
        public uint Reserved { get { return this.reserved; } set { this.reserved = value; } }

        public HintMediaHeaderBox() : base("hmhd", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.maxPDUsize);
            boxSize += stream.ReadUInt16(out this.avgPDUsize);
            boxSize += stream.ReadUInt32(out this.maxbitrate);
            boxSize += stream.ReadUInt32(out this.avgbitrate);
            boxSize += stream.ReadUInt32(out this.reserved);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.maxPDUsize);
            boxSize += stream.WriteUInt16(this.avgPDUsize);
            boxSize += stream.WriteUInt32(this.maxbitrate);
            boxSize += stream.WriteUInt32(this.avgbitrate);
            boxSize += stream.WriteUInt32(this.reserved);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // maxPDUsize
            boxSize += 16; // avgPDUsize
            boxSize += 32; // maxbitrate
            boxSize += 32; // avgbitrate
            boxSize += 32; // reserved
            return boxSize;
        }
    }


    /*
    aligned(8) class ItemDataBox extends Box('idat') {
        bit(8) data[];
    }
    */
    public class ItemDataBox : Box
    {
        public const string FourCC = "idat";

        protected byte[] data;
        public byte[] Data { get { return this.data; } set { this.data = value; } }

        public ItemDataBox() : base("idat")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8Array(out this.data);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8Array(this.data);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8 * (ulong)data.Length; // data
            return boxSize;
        }
    }


    /*
    aligned(8) class ItemInfoBox
            extends FullBox('iinf', version, 0) {
        if (version == 0) {
            unsigned int(16)	entry_count;
        } else {
            unsigned int(32) entry_count;
        }
        ItemInfoEntry[ entry_count ]		item_infos;
    }
    */
    public class ItemInfoBox : FullBox
    {
        public const string FourCC = "iinf";

        protected ushort entry_count;
        public ushort EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected uint entry_count0;
        public uint EntryCount0 { get { return this.entry_count0; } set { this.entry_count0 = value; } }

        protected ItemInfoEntry[] item_infos;
        public ItemInfoEntry[] ItemInfos { get { return this.item_infos; } set { this.item_infos = value; } }

        public ItemInfoBox(byte version = 0) : base("iinf", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 0)
            {
                boxSize += stream.ReadUInt16(out this.entry_count);
            }

            else
            {
                boxSize += stream.ReadUInt32(out this.entry_count0);
            }
            boxSize += stream.ReadBox(out this.item_infos);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 0)
            {
                boxSize += stream.WriteUInt16(this.entry_count);
            }

            else
            {
                boxSize += stream.WriteUInt32(this.entry_count0);
            }
            boxSize += stream.WriteBox(entry_count, this.item_infos);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 0)
            {
                boxSize += 16; // entry_count
            }

            else
            {
                boxSize += 32; // entry_count0
            }
            boxSize += IsoStream.CalculateSize(item_infos); // item_infos
            return boxSize;
        }
    }


    /*
    aligned(8) class ItemLocationBox extends FullBox('iloc', version, 0) {
        unsigned int(4)	offset_size;
        unsigned int(4)	length_size;
        unsigned int(4)	base_offset_size;
        if ((version == 1) || (version == 2)) {
            unsigned int(4)	index_size;
        } else {
            unsigned int(4)	reserved;
        }
        if (version < 2) {
            unsigned int(16)	item_count;
        } else if (version == 2) {
            unsigned int(32)	item_count;
        }
        for (i=0; i<item_count; i++) {
            if (version < 2) {
                unsigned int(16)	item_ID;
            } else if (version == 2) {
                unsigned int(32)	item_ID;
            }
            if ((version == 1) || (version == 2)) {
                unsigned int(12)	reserved = 0;
                unsigned int(4)	construction_method;
            }
            unsigned int(16)	data_reference_index;
            unsigned int(base_offset_size*8)	base_offset;
            unsigned int(16)		extent_count;
            for (j=0; j<extent_count; j++) {
                if (((version == 1) || (version == 2)) && (index_size > 0)) {
                    unsigned int(index_size*8)	item_reference_index;
                }
                unsigned int(offset_size*8)	extent_offset;
                unsigned int(length_size*8)	extent_length;
            }
        }
    }
    */
    public class ItemLocationBox : FullBox
    {
        public const string FourCC = "iloc";

        protected byte offset_size;
        public byte OffsetSize { get { return this.offset_size; } set { this.offset_size = value; } }

        protected byte length_size;
        public byte LengthSize { get { return this.length_size; } set { this.length_size = value; } }

        protected byte base_offset_size;
        public byte BaseOffsetSize { get { return this.base_offset_size; } set { this.base_offset_size = value; } }

        protected byte index_size;
        public byte IndexSize { get { return this.index_size; } set { this.index_size = value; } }

        protected byte reserved;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected ushort item_count;
        public ushort ItemCount { get { return this.item_count; } set { this.item_count = value; } }

        protected uint item_count0;
        public uint ItemCount0 { get { return this.item_count0; } set { this.item_count0 = value; } }

        protected ushort item_ID;
        public ushort ItemID { get { return this.item_ID; } set { this.item_ID = value; } }

        protected uint item_ID0;
        public uint ItemID0 { get { return this.item_ID0; } set { this.item_ID0 = value; } }

        protected ushort reserved0 = 0;
        public ushort Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected byte construction_method;
        public byte ConstructionMethod { get { return this.construction_method; } set { this.construction_method = value; } }

        protected ushort data_reference_index;
        public ushort DataReferenceIndex { get { return this.data_reference_index; } set { this.data_reference_index = value; } }

        protected byte[] base_offset;
        public byte[] BaseOffset { get { return this.base_offset; } set { this.base_offset = value; } }

        protected ushort extent_count;
        public ushort ExtentCount { get { return this.extent_count; } set { this.extent_count = value; } }

        protected byte[] item_reference_index;
        public byte[] ItemReferenceIndex { get { return this.item_reference_index; } set { this.item_reference_index = value; } }

        protected byte[] extent_offset;
        public byte[] ExtentOffset { get { return this.extent_offset; } set { this.extent_offset = value; } }

        protected byte[] extent_length;
        public byte[] ExtentLength { get { return this.extent_length; } set { this.extent_length = value; } }

        public ItemLocationBox(byte version = 0) : base("iloc", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(4, out this.offset_size);
            boxSize += stream.ReadBits(4, out this.length_size);
            boxSize += stream.ReadBits(4, out this.base_offset_size);

            if ((version == 1) || (version == 2))
            {
                boxSize += stream.ReadBits(4, out this.index_size);
            }

            else
            {
                boxSize += stream.ReadBits(4, out this.reserved);
            }

            if (version < 2)
            {
                boxSize += stream.ReadUInt16(out this.item_count);
            }

            else if (version == 2)
            {
                boxSize += stream.ReadUInt32(out this.item_count0);
            }

            for (int i = 0; i < item_count; i++)
            {

                if (version < 2)
                {
                    boxSize += stream.ReadUInt16(out this.item_ID);
                }

                else if (version == 2)
                {
                    boxSize += stream.ReadUInt32(out this.item_ID0);
                }

                if ((version == 1) || (version == 2))
                {
                    boxSize += stream.ReadBits(12, out this.reserved0);
                    boxSize += stream.ReadBits(4, out this.construction_method);
                }
                boxSize += stream.ReadUInt16(out this.data_reference_index);
                boxSize += stream.ReadBytes(base_offset_size, out this.base_offset);
                boxSize += stream.ReadUInt16(out this.extent_count);

                for (int j = 0; j < extent_count; j++)
                {

                    if (((version == 1) || (version == 2)) && (index_size > 0))
                    {
                        boxSize += stream.ReadBytes(index_size, out this.item_reference_index);
                    }
                    boxSize += stream.ReadBytes(offset_size, out this.extent_offset);
                    boxSize += stream.ReadBytes(length_size, out this.extent_length);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(4, this.offset_size);
            boxSize += stream.WriteBits(4, this.length_size);
            boxSize += stream.WriteBits(4, this.base_offset_size);

            if ((version == 1) || (version == 2))
            {
                boxSize += stream.WriteBits(4, this.index_size);
            }

            else
            {
                boxSize += stream.WriteBits(4, this.reserved);
            }

            if (version < 2)
            {
                boxSize += stream.WriteUInt16(this.item_count);
            }

            else if (version == 2)
            {
                boxSize += stream.WriteUInt32(this.item_count0);
            }

            for (int i = 0; i < item_count; i++)
            {

                if (version < 2)
                {
                    boxSize += stream.WriteUInt16(this.item_ID);
                }

                else if (version == 2)
                {
                    boxSize += stream.WriteUInt32(this.item_ID0);
                }

                if ((version == 1) || (version == 2))
                {
                    boxSize += stream.WriteBits(12, this.reserved0);
                    boxSize += stream.WriteBits(4, this.construction_method);
                }
                boxSize += stream.WriteUInt16(this.data_reference_index);
                boxSize += stream.WriteBytes(base_offset_size, this.base_offset);
                boxSize += stream.WriteUInt16(this.extent_count);

                for (int j = 0; j < extent_count; j++)
                {

                    if (((version == 1) || (version == 2)) && (index_size > 0))
                    {
                        boxSize += stream.WriteBytes(index_size, this.item_reference_index);
                    }
                    boxSize += stream.WriteBytes(offset_size, this.extent_offset);
                    boxSize += stream.WriteBytes(length_size, this.extent_length);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 4; // offset_size
            boxSize += 4; // length_size
            boxSize += 4; // base_offset_size

            if ((version == 1) || (version == 2))
            {
                boxSize += 4; // index_size
            }

            else
            {
                boxSize += 4; // reserved
            }

            if (version < 2)
            {
                boxSize += 16; // item_count
            }

            else if (version == 2)
            {
                boxSize += 32; // item_count0
            }

            for (int i = 0; i < item_count; i++)
            {

                if (version < 2)
                {
                    boxSize += 16; // item_ID
                }

                else if (version == 2)
                {
                    boxSize += 32; // item_ID0
                }

                if ((version == 1) || (version == 2))
                {
                    boxSize += 12; // reserved0
                    boxSize += 4; // construction_method
                }
                boxSize += 16; // data_reference_index
                boxSize += (ulong)base_offset_size * 8; // base_offset
                boxSize += 16; // extent_count

                for (int j = 0; j < extent_count; j++)
                {

                    if (((version == 1) || (version == 2)) && (index_size > 0))
                    {
                        boxSize += (ulong)index_size * 8; // item_reference_index
                    }
                    boxSize += (ulong)offset_size * 8; // extent_offset
                    boxSize += (ulong)length_size * 8; // extent_length
                }
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class IdentifiedMediaDataBox extends Box('imda') {
        unsigned int(32) imda_identifier;
        bit(8) data[]; // until the end of the box
    }
    */
    public class IdentifiedMediaDataBox : Box
    {
        public const string FourCC = "imda";

        protected uint imda_identifier;
        public uint ImdaIdentifier { get { return this.imda_identifier; } set { this.imda_identifier = value; } }

        protected byte[] data;  //  until the end of the box
        public byte[] Data { get { return this.data; } set { this.data = value; } }

        public IdentifiedMediaDataBox() : base("imda")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.imda_identifier);
            boxSize += stream.ReadUInt8Array(out this.data); // until the end of the box
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.imda_identifier);
            boxSize += stream.WriteUInt8Array(this.data); // until the end of the box
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // imda_identifier
            boxSize += 8 * (ulong)data.Length; // data
            return boxSize;
        }
    }


    /*
    aligned(8) class ItemInfoEntry
            extends FullBox('infe', version, flags) {
        if ((version == 0) || (version == 1)) {
            unsigned int(16) item_ID;
            unsigned int(16) item_protection_index;
            utf8string item_name;
            utf8string content_type;
            utf8string content_encoding; //optional
        }
        if (version == 1) {
            unsigned int(32) extension_type; //optional
            ItemInfoExtension(extension_type); //optional
        }
        if (version >= 2) {
            if (version == 2) {
                unsigned int(16) item_ID;
            } else if (version == 3) {
                unsigned int(32) item_ID;
            }
            unsigned int(16) item_protection_index;
            unsigned int(32) item_type;
            utf8string item_name;
            if (item_type=='mime') {
                utf8string content_type;
                utf8string content_encoding; //optional
            } else if (item_type == 'uri ') {
                utf8string item_uri_type;
            }
        }
    }
    */
    public class ItemInfoEntry : FullBox
    {
        public const string FourCC = "infe";

        protected ushort item_ID;
        public ushort ItemID { get { return this.item_ID; } set { this.item_ID = value; } }

        protected ushort item_protection_index;
        public ushort ItemProtectionIndex { get { return this.item_protection_index; } set { this.item_protection_index = value; } }

        protected string item_name;
        public string ItemName { get { return this.item_name; } set { this.item_name = value; } }

        protected string content_type;
        public string ContentType { get { return this.content_type; } set { this.content_type = value; } }

        protected string content_encoding;  // optional
        public string ContentEncoding { get { return this.content_encoding; } set { this.content_encoding = value; } }

        protected uint extension_type;  // optional
        public uint ExtensionType { get { return this.extension_type; } set { this.extension_type = value; } }

        protected ItemInfoExtension ItemInfoExtension;  // optional
        public ItemInfoExtension _ItemInfoExtension { get { return this.ItemInfoExtension; } set { this.ItemInfoExtension = value; } }

        protected ushort item_ID0;
        public ushort ItemID0 { get { return this.item_ID0; } set { this.item_ID0 = value; } }

        protected uint item_ID00;
        public uint ItemID00 { get { return this.item_ID00; } set { this.item_ID00 = value; } }

        protected ushort item_protection_index0;
        public ushort ItemProtectionIndex0 { get { return this.item_protection_index0; } set { this.item_protection_index0 = value; } }

        protected uint item_type;
        public uint ItemType { get { return this.item_type; } set { this.item_type = value; } }

        protected string item_name0;
        public string ItemName0 { get { return this.item_name0; } set { this.item_name0 = value; } }

        protected string content_type0;
        public string ContentType0 { get { return this.content_type0; } set { this.content_type0 = value; } }

        protected string content_encoding0;  // optional
        public string ContentEncoding0 { get { return this.content_encoding0; } set { this.content_encoding0 = value; } }

        protected string item_uri_type;
        public string ItemUriType { get { return this.item_uri_type; } set { this.item_uri_type = value; } }

        public ItemInfoEntry(byte version = 0, uint flags = 0) : base("infe", version, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if ((version == 0) || (version == 1))
            {
                boxSize += stream.ReadUInt16(out this.item_ID);
                boxSize += stream.ReadUInt16(out this.item_protection_index);
                boxSize += stream.ReadString(out this.item_name);
                boxSize += stream.ReadString(out this.content_type);
                if (boxSize < size) boxSize += stream.ReadString(out this.content_encoding); //optional
            }

            if (version == 1)
            {
                if (boxSize < size) boxSize += stream.ReadUInt32(out this.extension_type); //optional
                if (boxSize < size) boxSize += stream.ReadClass(out this.ItemInfoExtension); //optional
            }

            if (version >= 2)
            {

                if (version == 2)
                {
                    boxSize += stream.ReadUInt16(out this.item_ID0);
                }

                else if (version == 3)
                {
                    boxSize += stream.ReadUInt32(out this.item_ID00);
                }
                boxSize += stream.ReadUInt16(out this.item_protection_index0);
                boxSize += stream.ReadUInt32(out this.item_type);
                boxSize += stream.ReadString(out this.item_name0);

                if (item_type == IsoStream.FromFourCC("mime"))
                {
                    boxSize += stream.ReadString(out this.content_type0);
                    if (boxSize < size) boxSize += stream.ReadString(out this.content_encoding0); //optional
                }

                else if (item_type == IsoStream.FromFourCC("uri "))
                {
                    boxSize += stream.ReadString(out this.item_uri_type);
                }
            }
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if ((version == 0) || (version == 1))
            {
                boxSize += stream.WriteUInt16(this.item_ID);
                boxSize += stream.WriteUInt16(this.item_protection_index);
                boxSize += stream.WriteString(this.item_name);
                boxSize += stream.WriteString(this.content_type);
                if (this.content_encoding != null) boxSize += stream.WriteString(this.content_encoding); //optional
            }

            if (version == 1)
            {
                if (this.extension_type != null) boxSize += stream.WriteUInt32(this.extension_type); //optional
                if (this.ItemInfoExtension != null) boxSize += stream.WriteClass(this.ItemInfoExtension); //optional
            }

            if (version >= 2)
            {

                if (version == 2)
                {
                    boxSize += stream.WriteUInt16(this.item_ID0);
                }

                else if (version == 3)
                {
                    boxSize += stream.WriteUInt32(this.item_ID00);
                }
                boxSize += stream.WriteUInt16(this.item_protection_index0);
                boxSize += stream.WriteUInt32(this.item_type);
                boxSize += stream.WriteString(this.item_name0);

                if (item_type == IsoStream.FromFourCC("mime"))
                {
                    boxSize += stream.WriteString(this.content_type0);
                    if (this.content_encoding0 != null) boxSize += stream.WriteString(this.content_encoding0); //optional
                }

                else if (item_type == IsoStream.FromFourCC("uri "))
                {
                    boxSize += stream.WriteString(this.item_uri_type);
                }
            }
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if ((version == 0) || (version == 1))
            {
                boxSize += 16; // item_ID
                boxSize += 16; // item_protection_index
                boxSize += (ulong)item_name.Length * 8; // item_name
                boxSize += (ulong)content_type.Length * 8; // content_type
                if (this.content_encoding != null) boxSize += (ulong)content_encoding.Length * 8; // content_encoding
            }

            if (version == 1)
            {
                if (this.extension_type != null) boxSize += 32; // extension_type
                if (this.ItemInfoExtension != null) boxSize += IsoStream.CalculateClassSize(ItemInfoExtension); // ItemInfoExtension
            }

            if (version >= 2)
            {

                if (version == 2)
                {
                    boxSize += 16; // item_ID0
                }

                else if (version == 3)
                {
                    boxSize += 32; // item_ID00
                }
                boxSize += 16; // item_protection_index0
                boxSize += 32; // item_type
                boxSize += (ulong)item_name0.Length * 8; // item_name0

                if (item_type == IsoStream.FromFourCC("mime"))
                {
                    boxSize += (ulong)content_type0.Length * 8; // content_type0
                    if (this.content_encoding0 != null) boxSize += (ulong)content_encoding0.Length * 8; // content_encoding0
                }

                else if (item_type == IsoStream.FromFourCC("uri "))
                {
                    boxSize += (ulong)item_uri_type.Length * 8; // item_uri_type
                }
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class ItemProtectionBox
            extends FullBox('ipro', version = 0, 0) {
        unsigned int(16) protection_count;
        for (i=1; i<=protection_count; i++) {
            ProtectionSchemeInfoBox	protection_information;
        }
    }
    */
    public class ItemProtectionBox : FullBox
    {
        public const string FourCC = "ipro";

        protected ushort protection_count;
        public ushort ProtectionCount { get { return this.protection_count; } set { this.protection_count = value; } }

        protected ProtectionSchemeInfoBox protection_information;
        public ProtectionSchemeInfoBox ProtectionInformation { get { return this.protection_information; } set { this.protection_information = value; } }

        public ItemProtectionBox() : base("ipro", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.protection_count);

            for (int i = 1; i <= protection_count; i++)
            {
                boxSize += stream.ReadBox(out this.protection_information);
            }
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.protection_count);

            for (int i = 1; i <= protection_count; i++)
            {
                boxSize += stream.WriteBox(this.protection_information);
            }
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // protection_count

            for (int i = 1; i <= protection_count; i++)
            {
                boxSize += IsoStream.CalculateSize(protection_information); // protection_information
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class ItemReferenceBox extends FullBox('iref', version, 0) {
        if (version==0) {
            SingleItemTypeReferenceBox				references[];
        } else if (version==1) {
            SingleItemTypeReferenceBoxLarge	references[];
        }
    }
    */
    public class ItemReferenceBox : FullBox
    {
        public const string FourCC = "iref";

        protected SingleItemTypeReferenceBox[] references;
        public SingleItemTypeReferenceBox[] References { get { return this.references; } set { this.references = value; } }

        protected SingleItemTypeReferenceBoxLarge[] references0;
        public SingleItemTypeReferenceBoxLarge[] References0 { get { return this.references0; } set { this.references0 = value; } }

        public ItemReferenceBox(byte version = 0) : base("iref", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 0)
            {
                boxSize += stream.ReadBox(out this.references);
            }

            else if (version == 1)
            {
                boxSize += stream.ReadBox(out this.references0);
            }
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 0)
            {
                boxSize += stream.WriteBox(this.references);
            }

            else if (version == 1)
            {
                boxSize += stream.WriteBox(this.references0);
            }
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 0)
            {
                boxSize += IsoStream.CalculateSize(references); // references
            }

            else if (version == 1)
            {
                boxSize += IsoStream.CalculateSize(references0); // references0
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class LevelAssignmentBox extends FullBox('leva', 0, 0)
    {
        unsigned int(8)	level_count;
        for (j=1; j <= level_count; j++) {
            unsigned int(32)	track_ID;
            unsigned int(1)	padding_flag;
            unsigned int(7)	assignment_type;
            if (assignment_type == 0) {
                unsigned int(32)	grouping_type;
            }
            else if (assignment_type == 1) {
                unsigned int(32)	grouping_type;
                unsigned int(32)	grouping_type_parameter;
            }
            else if (assignment_type == 2) {}
                // no further syntax elements needed
            else if (assignment_type == 3) {}
                // no further syntax elements needed
            else if (assignment_type == 4) {
                unsigned int(32) sub_track_ID;
            }
            // other assignment_type values are reserved
        }
    }
    */
    public class LevelAssignmentBox : FullBox
    {
        public const string FourCC = "leva";

        protected byte level_count;
        public byte LevelCount { get { return this.level_count; } set { this.level_count = value; } }

        protected uint track_ID;
        public uint TrackID { get { return this.track_ID; } set { this.track_ID = value; } }

        protected bool padding_flag;
        public bool PaddingFlag { get { return this.padding_flag; } set { this.padding_flag = value; } }

        protected byte assignment_type;
        public byte AssignmentType { get { return this.assignment_type; } set { this.assignment_type = value; } }

        protected uint grouping_type;
        public uint GroupingType { get { return this.grouping_type; } set { this.grouping_type = value; } }

        protected uint grouping_type0;
        public uint GroupingType0 { get { return this.grouping_type0; } set { this.grouping_type0 = value; } }

        protected uint grouping_type_parameter;
        public uint GroupingTypeParameter { get { return this.grouping_type_parameter; } set { this.grouping_type_parameter = value; } }

        protected uint sub_track_ID;
        public uint SubTrackID { get { return this.sub_track_ID; } set { this.sub_track_ID = value; } }

        public LevelAssignmentBox() : base("leva", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.level_count);

            for (int j = 1; j <= level_count; j++)
            {
                boxSize += stream.ReadUInt32(out this.track_ID);
                boxSize += stream.ReadBit(out this.padding_flag);
                boxSize += stream.ReadBits(7, out this.assignment_type);

                if (assignment_type == 0)
                {
                    boxSize += stream.ReadUInt32(out this.grouping_type);
                }

                else if (assignment_type == 1)
                {
                    boxSize += stream.ReadUInt32(out this.grouping_type0);
                    boxSize += stream.ReadUInt32(out this.grouping_type_parameter);
                }

                else if (assignment_type == 2)
                {
                }
                /*  no further syntax elements needed */

                else if (assignment_type == 3)
                {
                }
                /*  no further syntax elements needed */

                else if (assignment_type == 4)
                {
                    boxSize += stream.ReadUInt32(out this.sub_track_ID);
                }
                /*  other assignment_type values are reserved */
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.level_count);

            for (int j = 1; j <= level_count; j++)
            {
                boxSize += stream.WriteUInt32(this.track_ID);
                boxSize += stream.WriteBit(this.padding_flag);
                boxSize += stream.WriteBits(7, this.assignment_type);

                if (assignment_type == 0)
                {
                    boxSize += stream.WriteUInt32(this.grouping_type);
                }

                else if (assignment_type == 1)
                {
                    boxSize += stream.WriteUInt32(this.grouping_type0);
                    boxSize += stream.WriteUInt32(this.grouping_type_parameter);
                }

                else if (assignment_type == 2)
                {
                }
                /*  no further syntax elements needed */

                else if (assignment_type == 3)
                {
                }
                /*  no further syntax elements needed */

                else if (assignment_type == 4)
                {
                    boxSize += stream.WriteUInt32(this.sub_track_ID);
                }
                /*  other assignment_type values are reserved */
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // level_count

            for (int j = 1; j <= level_count; j++)
            {
                boxSize += 32; // track_ID
                boxSize += 1; // padding_flag
                boxSize += 7; // assignment_type

                if (assignment_type == 0)
                {
                    boxSize += 32; // grouping_type
                }

                else if (assignment_type == 1)
                {
                    boxSize += 32; // grouping_type0
                    boxSize += 32; // grouping_type_parameter
                }

                else if (assignment_type == 2)
                {
                }
                /*  no further syntax elements needed */

                else if (assignment_type == 3)
                {
                }
                /*  no further syntax elements needed */

                else if (assignment_type == 4)
                {
                    boxSize += 32; // sub_track_ID
                }
                /*  other assignment_type values are reserved */
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class MediaDataBox extends Box('mdat') {
        bit(8) data[];
    }
    */
    public class MediaDataBox : Box
    {
        public const string FourCC = "mdat";

        protected byte[] data;
        public byte[] Data { get { return this.data; } set { this.data = value; } }

        public MediaDataBox() : base("mdat")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8Array(out this.data);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8Array(this.data);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8 * (ulong)data.Length; // data
            return boxSize;
        }
    }


    /*
    aligned(8) class MediaHeaderBox extends FullBox('mdhd', version, 0) {
        if (version==1) {
            unsigned int(64)	creation_time;
            unsigned int(64)	modification_time;
            unsigned int(32)	timescale;
            unsigned int(64)	duration;
        } else { // version==0
            unsigned int(32)	creation_time;
            unsigned int(32)	modification_time;
            unsigned int(32)	timescale;
            unsigned int(32)	duration;
        }
        bit(1)	pad = 0;
        unsigned int(5)[3]	language;	// ISO-639-2/T language code
        unsigned int(16)	pre_defined = 0;
    }
    */
    public class MediaHeaderBox : FullBox
    {
        public const string FourCC = "mdhd";

        protected ulong creation_time;
        public ulong CreationTime { get { return this.creation_time; } set { this.creation_time = value; } }

        protected ulong modification_time;
        public ulong ModificationTime { get { return this.modification_time; } set { this.modification_time = value; } }

        protected uint timescale;
        public uint Timescale { get { return this.timescale; } set { this.timescale = value; } }

        protected ulong duration;
        public ulong Duration { get { return this.duration; } set { this.duration = value; } }

        protected uint creation_time0;
        public uint CreationTime0 { get { return this.creation_time0; } set { this.creation_time0 = value; } }

        protected uint modification_time0;
        public uint ModificationTime0 { get { return this.modification_time0; } set { this.modification_time0 = value; } }

        protected uint timescale0;
        public uint Timescale0 { get { return this.timescale0; } set { this.timescale0 = value; } }

        protected uint duration0;
        public uint Duration0 { get { return this.duration0; } set { this.duration0 = value; } }

        protected bool pad = false;
        public bool Pad { get { return this.pad; } set { this.pad = value; } }

        protected byte[] language;  //  ISO-639-2/T language code
        public byte[] Language { get { return this.language; } set { this.language = value; } }

        protected ushort pre_defined = 0;
        public ushort PreDefined { get { return this.pre_defined; } set { this.pre_defined = value; } }

        public MediaHeaderBox(byte version = 0) : base("mdhd", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 1)
            {
                boxSize += stream.ReadUInt64(out this.creation_time);
                boxSize += stream.ReadUInt64(out this.modification_time);
                boxSize += stream.ReadUInt32(out this.timescale);
                boxSize += stream.ReadUInt64(out this.duration);
            }

            else
            {
                /*  version==0 */
                boxSize += stream.ReadUInt32(out this.creation_time0);
                boxSize += stream.ReadUInt32(out this.modification_time0);
                boxSize += stream.ReadUInt32(out this.timescale0);
                boxSize += stream.ReadUInt32(out this.duration0);
            }
            boxSize += stream.ReadBit(out this.pad);
            boxSize += stream.ReadBitsArray(5, 3, out this.language); // ISO-639-2/T language code
            boxSize += stream.ReadUInt16(out this.pre_defined);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 1)
            {
                boxSize += stream.WriteUInt64(this.creation_time);
                boxSize += stream.WriteUInt64(this.modification_time);
                boxSize += stream.WriteUInt32(this.timescale);
                boxSize += stream.WriteUInt64(this.duration);
            }

            else
            {
                /*  version==0 */
                boxSize += stream.WriteUInt32(this.creation_time0);
                boxSize += stream.WriteUInt32(this.modification_time0);
                boxSize += stream.WriteUInt32(this.timescale0);
                boxSize += stream.WriteUInt32(this.duration0);
            }
            boxSize += stream.WriteBit(this.pad);
            boxSize += stream.WriteBitsArray(5, 3, this.language); // ISO-639-2/T language code
            boxSize += stream.WriteUInt16(this.pre_defined);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 1)
            {
                boxSize += 64; // creation_time
                boxSize += 64; // modification_time
                boxSize += 32; // timescale
                boxSize += 64; // duration
            }

            else
            {
                /*  version==0 */
                boxSize += 32; // creation_time0
                boxSize += 32; // modification_time0
                boxSize += 32; // timescale0
                boxSize += 32; // duration0
            }
            boxSize += 1; // pad
            boxSize += 3 * 5; // language
            boxSize += 16; // pre_defined
            return boxSize;
        }
    }


    /*
    aligned(8) class MediaBox extends Box('mdia') {
    }
    */
    public class MediaBox : Box
    {
        public const string FourCC = "mdia";

        public MediaBox() : base("mdia")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class MovieExtendsHeaderBox extends FullBox('mehd', version, 0) {
        if (version==1) {
            unsigned int(64)	fragment_duration;
        } else { // version==0
            unsigned int(32)	fragment_duration;
        }
    }
    */
    public class MovieExtendsHeaderBox : FullBox
    {
        public const string FourCC = "mehd";

        protected ulong fragment_duration;
        public ulong FragmentDuration { get { return this.fragment_duration; } set { this.fragment_duration = value; } }

        protected uint fragment_duration0;
        public uint FragmentDuration0 { get { return this.fragment_duration0; } set { this.fragment_duration0 = value; } }

        public MovieExtendsHeaderBox(byte version = 0) : base("mehd", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 1)
            {
                boxSize += stream.ReadUInt64(out this.fragment_duration);
            }

            else
            {
                /*  version==0 */
                boxSize += stream.ReadUInt32(out this.fragment_duration0);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 1)
            {
                boxSize += stream.WriteUInt64(this.fragment_duration);
            }

            else
            {
                /*  version==0 */
                boxSize += stream.WriteUInt32(this.fragment_duration0);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 1)
            {
                boxSize += 64; // fragment_duration
            }

            else
            {
                /*  version==0 */
                boxSize += 32; // fragment_duration0
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class MetaBox (handler_type)
        extends FullBox('meta', version = 0, 0) {
        HandlerBox(handler_type)	theHandler;
        PrimaryItemBox		primary_resource;		// optional
        DataInformationBox	file_locations;		// optional
        ItemLocationBox		item_locations;		// optional
        ItemProtectionBox	protections;			// optional
        ItemInfoBox			item_infos;				// optional
        IPMPControlBox		IPMP_control;			// optional
        ItemReferenceBox		item_refs;					// optional
        ItemDataBox			item_data;					// optional
        Box	other_boxes[];								// optional
    }
    */
    public class MetaBox : FullBox
    {
        public const string FourCC = "meta";

        protected HandlerBox theHandler;
        public HandlerBox TheHandler { get { return this.theHandler; } set { this.theHandler = value; } }

        protected PrimaryItemBox primary_resource;  //  optional
        public PrimaryItemBox PrimaryResource { get { return this.primary_resource; } set { this.primary_resource = value; } }

        protected DataInformationBox file_locations;  //  optional
        public DataInformationBox FileLocations { get { return this.file_locations; } set { this.file_locations = value; } }

        protected ItemLocationBox item_locations;  //  optional
        public ItemLocationBox ItemLocations { get { return this.item_locations; } set { this.item_locations = value; } }

        protected ItemProtectionBox protections;  //  optional
        public ItemProtectionBox Protections { get { return this.protections; } set { this.protections = value; } }

        protected ItemInfoBox item_infos;  //  optional
        public ItemInfoBox ItemInfos { get { return this.item_infos; } set { this.item_infos = value; } }

        protected IPMPControlBox IPMP_control;  //  optional
        public IPMPControlBox IPMPControl { get { return this.IPMP_control; } set { this.IPMP_control = value; } }

        protected ItemReferenceBox item_refs;  //  optional
        public ItemReferenceBox ItemRefs { get { return this.item_refs; } set { this.item_refs = value; } }

        protected ItemDataBox item_data;  //  optional
        public ItemDataBox ItemData { get { return this.item_data; } set { this.item_data = value; } }

        protected Box[] other_boxes;  //  optional
        public Box[] OtherBoxes { get { return this.other_boxes; } set { this.other_boxes = value; } }

        public MetaBox(string handler_type = "") : base("meta", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.theHandler);
            if (boxSize < size) boxSize += stream.ReadBox(out this.primary_resource); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.file_locations); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.item_locations); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.protections); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.item_infos); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.IPMP_control); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.item_refs); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.item_data); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.other_boxes); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.theHandler);
            if (this.primary_resource != null) boxSize += stream.WriteBox(this.primary_resource); // optional
            if (this.file_locations != null) boxSize += stream.WriteBox(this.file_locations); // optional
            if (this.item_locations != null) boxSize += stream.WriteBox(this.item_locations); // optional
            if (this.protections != null) boxSize += stream.WriteBox(this.protections); // optional
            if (this.item_infos != null) boxSize += stream.WriteBox(this.item_infos); // optional
            if (this.IPMP_control != null) boxSize += stream.WriteBox(this.IPMP_control); // optional
            if (this.item_refs != null) boxSize += stream.WriteBox(this.item_refs); // optional
            if (this.item_data != null) boxSize += stream.WriteBox(this.item_data); // optional
            if (this.other_boxes != null) boxSize += stream.WriteBox(this.other_boxes); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(theHandler); // theHandler
            if (this.primary_resource != null) boxSize += IsoStream.CalculateSize(primary_resource); // primary_resource
            if (this.file_locations != null) boxSize += IsoStream.CalculateSize(file_locations); // file_locations
            if (this.item_locations != null) boxSize += IsoStream.CalculateSize(item_locations); // item_locations
            if (this.protections != null) boxSize += IsoStream.CalculateSize(protections); // protections
            if (this.item_infos != null) boxSize += IsoStream.CalculateSize(item_infos); // item_infos
            if (this.IPMP_control != null) boxSize += IsoStream.CalculateSize(IPMP_control); // IPMP_control
            if (this.item_refs != null) boxSize += IsoStream.CalculateSize(item_refs); // item_refs
            if (this.item_data != null) boxSize += IsoStream.CalculateSize(item_data); // item_data
            if (this.other_boxes != null) boxSize += IsoStream.CalculateSize(other_boxes); // other_boxes
            return boxSize;
        }
    }


    /*
    aligned(8) class MovieFragmentHeaderBox
                extends FullBox('mfhd', 0, 0){
        unsigned int(32)	sequence_number;
    }
    */
    public class MovieFragmentHeaderBox : FullBox
    {
        public const string FourCC = "mfhd";

        protected uint sequence_number;
        public uint SequenceNumber { get { return this.sequence_number; } set { this.sequence_number = value; } }

        public MovieFragmentHeaderBox() : base("mfhd", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.sequence_number);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.sequence_number);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // sequence_number
            return boxSize;
        }
    }


    /*
    aligned(8) class MovieFragmentRandomAccessBox
        extends Box('mfra')
    {
    }
    */
    public class MovieFragmentRandomAccessBox : Box
    {
        public const string FourCC = "mfra";

        public MovieFragmentRandomAccessBox() : base("mfra")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class MovieFragmentRandomAccessOffsetBox
     extends FullBox('mfro', version, 0) {
        unsigned int(32)	parent_size;
    }
    */
    public class MovieFragmentRandomAccessOffsetBox : FullBox
    {
        public const string FourCC = "mfro";

        protected uint parent_size;
        public uint ParentSize { get { return this.parent_size; } set { this.parent_size = value; } }

        public MovieFragmentRandomAccessOffsetBox(byte version = 0) : base("mfro", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.parent_size);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.parent_size);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // parent_size
            return boxSize;
        }
    }


    /*
    aligned(8) class MediaInformationBox extends Box('minf') {
    }
    */
    public class MediaInformationBox : Box
    {
        public const string FourCC = "minf";

        public MediaInformationBox() : base("minf")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class CompressedMovieFragmentBox
        extends CompressedBox('!mof', 'moof') {
    }

    */
    public class CompressedMovieFragmentBox : CompressedBox
    {
        public const string FourCC = "moof";

        public CompressedMovieFragmentBox() : base("moof")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class CompressedMovieBox
        extends CompressedBox('!mov', 'moov') {
    }
    */
    public class CompressedMovieBox : CompressedBox
    {
        public const string FourCC = "moov";

        public CompressedMovieBox() : base("moov")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class MovieExtendsBox extends Box('mvex'){
    }
    */
    public class MovieExtendsBox : Box
    {
        public const string FourCC = "mvex";

        public MovieExtendsBox() : base("mvex")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class MovieHeaderBox extends FullBox('mvhd', version, 0) {
        if (version==1) {
            unsigned int(64)	creation_time;
            unsigned int(64)	modification_time;
            unsigned int(32)	timescale;
            unsigned int(64)	duration;
        } else { // version==0
            unsigned int(32)	creation_time;
            unsigned int(32)	modification_time;
            unsigned int(32)	timescale;
            unsigned int(32)	duration;
        }
        template int(32)	rate = 0x00010000;	// typically 1.0
        template int(16)	volume = 0x0100;	// typically, full volume
        const bit(16)	reserved = 0;
        const unsigned int(32)[2]	reserved = 0;
        template int(32)[9]	matrix =
            { 0x00010000,0,0,0,0x00010000,0,0,0,0x40000000 };
            // Unity matrix
        bit(32)[6]	pre_defined = 0;
        unsigned int(32)	next_track_ID;
    }
    */
    public class MovieHeaderBox : FullBox
    {
        public const string FourCC = "mvhd";

        protected ulong creation_time;
        public ulong CreationTime { get { return this.creation_time; } set { this.creation_time = value; } }

        protected ulong modification_time;
        public ulong ModificationTime { get { return this.modification_time; } set { this.modification_time = value; } }

        protected uint timescale;
        public uint Timescale { get { return this.timescale; } set { this.timescale = value; } }

        protected ulong duration;
        public ulong Duration { get { return this.duration; } set { this.duration = value; } }

        protected uint creation_time0;
        public uint CreationTime0 { get { return this.creation_time0; } set { this.creation_time0 = value; } }

        protected uint modification_time0;
        public uint ModificationTime0 { get { return this.modification_time0; } set { this.modification_time0 = value; } }

        protected uint timescale0;
        public uint Timescale0 { get { return this.timescale0; } set { this.timescale0 = value; } }

        protected uint duration0;
        public uint Duration0 { get { return this.duration0; } set { this.duration0 = value; } }

        protected int rate = 0x00010000;  //  typically 1.0
        public int Rate { get { return this.rate; } set { this.rate = value; } }

        protected short volume = 0x0100;  //  typically, full volume
        public short Volume { get { return this.volume; } set { this.volume = value; } }

        protected ushort reserved = 0;
        public ushort Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected uint[] reserved0 = [];
        public uint[] Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected uint[] matrix =
            { 0x00010000,0,0,0,0x00010000,0,0,0,0x40000000 };  //  Unity matrix
        public uint[] Matrix { get { return this.matrix; } set { this.matrix = value; } }

        protected uint[] pre_defined = [];
        public uint[] PreDefined { get { return this.pre_defined; } set { this.pre_defined = value; } }

        protected uint next_track_ID;
        public uint NextTrackID { get { return this.next_track_ID; } set { this.next_track_ID = value; } }

        public MovieHeaderBox(byte version = 0) : base("mvhd", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 1)
            {
                boxSize += stream.ReadUInt64(out this.creation_time);
                boxSize += stream.ReadUInt64(out this.modification_time);
                boxSize += stream.ReadUInt32(out this.timescale);
                boxSize += stream.ReadUInt64(out this.duration);
            }

            else
            {
                /*  version==0 */
                boxSize += stream.ReadUInt32(out this.creation_time0);
                boxSize += stream.ReadUInt32(out this.modification_time0);
                boxSize += stream.ReadUInt32(out this.timescale0);
                boxSize += stream.ReadUInt32(out this.duration0);
            }
            boxSize += stream.ReadInt32(out this.rate); // typically 1.0
            boxSize += stream.ReadInt16(out this.volume); // typically, full volume
            boxSize += stream.ReadUInt16(out this.reserved);
            boxSize += stream.ReadUInt32Array(2, out this.reserved0);
            boxSize += stream.ReadUInt32Array(9, out this.matrix); // Unity matrix
            boxSize += stream.ReadUInt32Array(6, out this.pre_defined);
            boxSize += stream.ReadUInt32(out this.next_track_ID);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 1)
            {
                boxSize += stream.WriteUInt64(this.creation_time);
                boxSize += stream.WriteUInt64(this.modification_time);
                boxSize += stream.WriteUInt32(this.timescale);
                boxSize += stream.WriteUInt64(this.duration);
            }

            else
            {
                /*  version==0 */
                boxSize += stream.WriteUInt32(this.creation_time0);
                boxSize += stream.WriteUInt32(this.modification_time0);
                boxSize += stream.WriteUInt32(this.timescale0);
                boxSize += stream.WriteUInt32(this.duration0);
            }
            boxSize += stream.WriteInt32(this.rate); // typically 1.0
            boxSize += stream.WriteInt16(this.volume); // typically, full volume
            boxSize += stream.WriteUInt16(this.reserved);
            boxSize += stream.WriteUInt32Array(2, this.reserved0);
            boxSize += stream.WriteUInt32Array(9, this.matrix); // Unity matrix
            boxSize += stream.WriteUInt32Array(6, this.pre_defined);
            boxSize += stream.WriteUInt32(this.next_track_ID);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 1)
            {
                boxSize += 64; // creation_time
                boxSize += 64; // modification_time
                boxSize += 32; // timescale
                boxSize += 64; // duration
            }

            else
            {
                /*  version==0 */
                boxSize += 32; // creation_time0
                boxSize += 32; // modification_time0
                boxSize += 32; // timescale0
                boxSize += 32; // duration0
            }
            boxSize += 32; // rate
            boxSize += 16; // volume
            boxSize += 16; // reserved
            boxSize += 2 * 32; // reserved0
            boxSize += 9 * 32; // matrix
            boxSize += 6 * 32; // pre_defined
            boxSize += 32; // next_track_ID
            return boxSize;
        }
    }


    /*
    aligned(8) class NullMediaHeaderBox
        extends FullBox('nmhd', version = 0, flags) {
    }
    */
    public class NullMediaHeaderBox : FullBox
    {
        public const string FourCC = "nmhd";

        public NullMediaHeaderBox(uint flags = 0) : base("nmhd", 0, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class OriginalFileTypeBox extends Box('otyp') {
    }
    */
    public class OriginalFileTypeBox : Box
    {
        public const string FourCC = "otyp";

        public OriginalFileTypeBox() : base("otyp")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class PaddingBitsBox extends FullBox('padb', version = 0, 0) {
        unsigned int(32)	sample_count;
        int i;
        for (i=0; i < floor((sample_count + 1)/2); i++) {
            bit(1)	reserved = 0;
            bit(3)	pad1;
            bit(1)	reserved = 0;
            bit(3)	pad2;
        }
    }
    */
    public class PaddingBitsBox : FullBox
    {
        public const string FourCC = "padb";

        protected uint sample_count;
        public uint SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

        protected bool reserved = false;
        public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte pad1;
        public byte Pad1 { get { return this.pad1; } set { this.pad1 = value; } }

        protected bool reserved0 = false;
        public bool Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected byte pad2;
        public byte Pad2 { get { return this.pad2; } set { this.pad2 = value; } }

        public PaddingBitsBox() : base("padb", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.sample_count);


            for (int i = 0; i < ((sample_count + 1) / 2); i++)
            {
                boxSize += stream.ReadBit(out this.reserved);
                boxSize += stream.ReadBits(3, out this.pad1);
                boxSize += stream.ReadBit(out this.reserved0);
                boxSize += stream.ReadBits(3, out this.pad2);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.sample_count);


            for (int i = 0; i < ((sample_count + 1) / 2); i++)
            {
                boxSize += stream.WriteBit(this.reserved);
                boxSize += stream.WriteBits(3, this.pad1);
                boxSize += stream.WriteBit(this.reserved0);
                boxSize += stream.WriteBits(3, this.pad2);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // sample_count


            for (int i = 0; i < ((sample_count + 1) / 2); i++)
            {
                boxSize += 1; // reserved
                boxSize += 3; // pad1
                boxSize += 1; // reserved0
                boxSize += 3; // pad2
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class ProgressiveDownloadInfoBox
            extends FullBox('pdin', version = 0, 0) {
        for (i=0; ; i++) {	// to end of box
            unsigned int(32)  rate;
            unsigned int(32)  initial_delay;
        }
    }
    */
    public class ProgressiveDownloadInfoBox : FullBox
    {
        public const string FourCC = "pdin";

        protected uint rate;
        public uint Rate { get { return this.rate; } set { this.rate = value; } }

        protected uint initial_delay;
        public uint InitialDelay { get { return this.initial_delay; } set { this.initial_delay = value; } }

        public ProgressiveDownloadInfoBox() : base("pdin", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            for (int i = 0; ; i++)
            {
                /*  to end of box */
                boxSize += stream.ReadUInt32(out this.rate);
                boxSize += stream.ReadUInt32(out this.initial_delay);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            for (int i = 0; ; i++)
            {
                /*  to end of box */
                boxSize += stream.WriteUInt32(this.rate);
                boxSize += stream.WriteUInt32(this.initial_delay);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            for (int i = 0; ; i++)
            {
                /*  to end of box */
                boxSize += 32; // rate
                boxSize += 32; // initial_delay
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class PrimaryItemBox
            extends FullBox('pitm', version, 0) {
        if (version == 0) {
            unsigned int(16)	item_ID;
        } else {
            unsigned int(32)	item_ID;
        }
    }
    */
    public class PrimaryItemBox : FullBox
    {
        public const string FourCC = "pitm";

        protected ushort item_ID;
        public ushort ItemID { get { return this.item_ID; } set { this.item_ID = value; } }

        protected uint item_ID0;
        public uint ItemID0 { get { return this.item_ID0; } set { this.item_ID0 = value; } }

        public PrimaryItemBox(byte version = 0) : base("pitm", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 0)
            {
                boxSize += stream.ReadUInt16(out this.item_ID);
            }

            else
            {
                boxSize += stream.ReadUInt32(out this.item_ID0);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 0)
            {
                boxSize += stream.WriteUInt16(this.item_ID);
            }

            else
            {
                boxSize += stream.WriteUInt32(this.item_ID0);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 0)
            {
                boxSize += 16; // item_ID
            }

            else
            {
                boxSize += 32; // item_ID0
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class ProducerReferenceTimeBox
        extends FullBox('prft', version, flags) {
        unsigned int(32) reference_track_ID;
        unsigned int(64) ntp_timestamp;
        if (version==0) {
            unsigned int(32) media_time;
        } else {
            unsigned int(64) media_time;
        }
    }
    */
    public class ProducerReferenceTimeBox : FullBox
    {
        public const string FourCC = "prft";

        protected uint reference_track_ID;
        public uint ReferenceTrackID { get { return this.reference_track_ID; } set { this.reference_track_ID = value; } }

        protected ulong ntp_timestamp;
        public ulong NtpTimestamp { get { return this.ntp_timestamp; } set { this.ntp_timestamp = value; } }

        protected uint media_time;
        public uint MediaTime { get { return this.media_time; } set { this.media_time = value; } }

        protected ulong media_time0;
        public ulong MediaTime0 { get { return this.media_time0; } set { this.media_time0 = value; } }

        public ProducerReferenceTimeBox(byte version = 0, uint flags = 0) : base("prft", version, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.reference_track_ID);
            boxSize += stream.ReadUInt64(out this.ntp_timestamp);

            if (version == 0)
            {
                boxSize += stream.ReadUInt32(out this.media_time);
            }

            else
            {
                boxSize += stream.ReadUInt64(out this.media_time0);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.reference_track_ID);
            boxSize += stream.WriteUInt64(this.ntp_timestamp);

            if (version == 0)
            {
                boxSize += stream.WriteUInt32(this.media_time);
            }

            else
            {
                boxSize += stream.WriteUInt64(this.media_time0);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // reference_track_ID
            boxSize += 64; // ntp_timestamp

            if (version == 0)
            {
                boxSize += 32; // media_time
            }

            else
            {
                boxSize += 64; // media_time0
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class RestrictedSchemeInfoBox(fmt) extends Box('rinf') {
        OriginalFormatBox(fmt)	original_format;
        SchemeTypeBox			scheme_type_box;
        SchemeInformationBox	info;				// optional
    }
    */
    public class RestrictedSchemeInfoBox : Box
    {
        public const string FourCC = "rinf";

        protected OriginalFormatBox original_format;
        public OriginalFormatBox OriginalFormat { get { return this.original_format; } set { this.original_format = value; } }

        protected SchemeTypeBox scheme_type_box;
        public SchemeTypeBox SchemeTypeBox { get { return this.scheme_type_box; } set { this.scheme_type_box = value; } }

        protected SchemeInformationBox info;  //  optional
        public SchemeInformationBox Info { get { return this.info; } set { this.info = value; } }

        public RestrictedSchemeInfoBox(string fmt = "") : base("rinf")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.original_format);
            boxSize += stream.ReadBox(out this.scheme_type_box);
            if (boxSize < size) boxSize += stream.ReadBox(out this.info); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.original_format);
            boxSize += stream.WriteBox(this.scheme_type_box);
            if (this.info != null) boxSize += stream.WriteBox(this.info); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(original_format); // original_format
            boxSize += IsoStream.CalculateSize(scheme_type_box); // scheme_type_box
            if (this.info != null) boxSize += IsoStream.CalculateSize(info); // info
            return boxSize;
        }
    }


    /*
    aligned(8) class SampleAuxiliaryInformationOffsetsBox
        extends FullBox('saio', version, flags)
    {
        if (flags & 1) {
            unsigned int(32) aux_info_type;
            unsigned int(32) aux_info_type_parameter;
        }
        unsigned int(32) entry_count;
        if ( version == 0 ) {
            unsigned int(32) offset[ entry_count ];
        }
        else {
            unsigned int(64) offset[ entry_count ];
        }
    }
    */
    public class SampleAuxiliaryInformationOffsetsBox : FullBox
    {
        public const string FourCC = "saio";

        protected uint aux_info_type;
        public uint AuxInfoType { get { return this.aux_info_type; } set { this.aux_info_type = value; } }

        protected uint aux_info_type_parameter;
        public uint AuxInfoTypeParameter { get { return this.aux_info_type_parameter; } set { this.aux_info_type_parameter = value; } }

        protected uint entry_count;
        public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected uint[] offset;
        public uint[] Offset { get { return this.offset; } set { this.offset = value; } }

        protected ulong[] offset0;
        public ulong[] Offset0 { get { return this.offset0; } set { this.offset0 = value; } }

        public SampleAuxiliaryInformationOffsetsBox(byte version = 0, uint flags = 0) : base("saio", version, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if ((flags & 1) == 1)
            {
                boxSize += stream.ReadUInt32(out this.aux_info_type);
                boxSize += stream.ReadUInt32(out this.aux_info_type_parameter);
            }
            boxSize += stream.ReadUInt32(out this.entry_count);

            if (version == 0)
            {
                boxSize += stream.ReadUInt32Array(entry_count, out this.offset);
            }

            else
            {
                boxSize += stream.ReadUInt64Array(entry_count, out this.offset0);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if ((flags & 1) == 1)
            {
                boxSize += stream.WriteUInt32(this.aux_info_type);
                boxSize += stream.WriteUInt32(this.aux_info_type_parameter);
            }
            boxSize += stream.WriteUInt32(this.entry_count);

            if (version == 0)
            {
                boxSize += stream.WriteUInt32Array(entry_count, this.offset);
            }

            else
            {
                boxSize += stream.WriteUInt64Array(entry_count, this.offset0);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if ((flags & 1) == 1)
            {
                boxSize += 32; // aux_info_type
                boxSize += 32; // aux_info_type_parameter
            }
            boxSize += 32; // entry_count

            if (version == 0)
            {
                boxSize += (ulong)entry_count * 32; // offset
            }

            else
            {
                boxSize += (ulong)entry_count * 64; // offset0
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SampleAuxiliaryInformationSizesBox
        extends FullBox('saiz', version = 0, flags)
    {
        if (flags & 1) {
            unsigned int(32) aux_info_type;
            unsigned int(32) aux_info_type_parameter;
        }
        unsigned int(8) default_sample_info_size;
        unsigned int(32) sample_count;
        if (default_sample_info_size == 0) {
            unsigned int(8) sample_info_size[ sample_count ];
        }
    }
    */
    public class SampleAuxiliaryInformationSizesBox : FullBox
    {
        public const string FourCC = "saiz";

        protected uint aux_info_type;
        public uint AuxInfoType { get { return this.aux_info_type; } set { this.aux_info_type = value; } }

        protected uint aux_info_type_parameter;
        public uint AuxInfoTypeParameter { get { return this.aux_info_type_parameter; } set { this.aux_info_type_parameter = value; } }

        protected byte default_sample_info_size;
        public byte DefaultSampleInfoSize { get { return this.default_sample_info_size; } set { this.default_sample_info_size = value; } }

        protected uint sample_count;
        public uint SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

        protected byte[] sample_info_size;
        public byte[] SampleInfoSize { get { return this.sample_info_size; } set { this.sample_info_size = value; } }

        public SampleAuxiliaryInformationSizesBox(uint flags = 0) : base("saiz", 0, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if ((flags & 1) == 1)
            {
                boxSize += stream.ReadUInt32(out this.aux_info_type);
                boxSize += stream.ReadUInt32(out this.aux_info_type_parameter);
            }
            boxSize += stream.ReadUInt8(out this.default_sample_info_size);
            boxSize += stream.ReadUInt32(out this.sample_count);

            if (default_sample_info_size == 0)
            {
                boxSize += stream.ReadBytes(sample_count, out this.sample_info_size);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if ((flags & 1) == 1)
            {
                boxSize += stream.WriteUInt32(this.aux_info_type);
                boxSize += stream.WriteUInt32(this.aux_info_type_parameter);
            }
            boxSize += stream.WriteUInt8(this.default_sample_info_size);
            boxSize += stream.WriteUInt32(this.sample_count);

            if (default_sample_info_size == 0)
            {
                boxSize += stream.WriteBytes(sample_count, this.sample_info_size);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if ((flags & 1) == 1)
            {
                boxSize += 32; // aux_info_type
                boxSize += 32; // aux_info_type_parameter
            }
            boxSize += 8; // default_sample_info_size
            boxSize += 32; // sample_count

            if (default_sample_info_size == 0)
            {
                boxSize += (ulong)sample_count * 8; // sample_info_size
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SampleToGroupBox
        extends FullBox('sbgp', version, 0)
    {
        unsigned int(32)	grouping_type;
        if (version == 1) {
            unsigned int(32) grouping_type_parameter;
        }
        unsigned int(32)	entry_count;
        for (i=1; i <= entry_count; i++)
        {
            unsigned int(32)	sample_count;
            unsigned int(32)	group_description_index;
        }
    }
    */
    public class SampleToGroupBox : FullBox
    {
        public const string FourCC = "sbgp";

        protected uint grouping_type;
        public uint GroupingType { get { return this.grouping_type; } set { this.grouping_type = value; } }

        protected uint grouping_type_parameter;
        public uint GroupingTypeParameter { get { return this.grouping_type_parameter; } set { this.grouping_type_parameter = value; } }

        protected uint entry_count;
        public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected uint sample_count;
        public uint SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

        protected uint group_description_index;
        public uint GroupDescriptionIndex { get { return this.group_description_index; } set { this.group_description_index = value; } }

        public SampleToGroupBox(byte version = 0) : base("sbgp", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.grouping_type);

            if (version == 1)
            {
                boxSize += stream.ReadUInt32(out this.grouping_type_parameter);
            }
            boxSize += stream.ReadUInt32(out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.ReadUInt32(out this.sample_count);
                boxSize += stream.ReadUInt32(out this.group_description_index);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.grouping_type);

            if (version == 1)
            {
                boxSize += stream.WriteUInt32(this.grouping_type_parameter);
            }
            boxSize += stream.WriteUInt32(this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.WriteUInt32(this.sample_count);
                boxSize += stream.WriteUInt32(this.group_description_index);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // grouping_type

            if (version == 1)
            {
                boxSize += 32; // grouping_type_parameter
            }
            boxSize += 32; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += 32; // sample_count
                boxSize += 32; // group_description_index
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SchemeInformationBox extends Box('schi') {
        Box	scheme_specific_data[];
    }
    */
    public class SchemeInformationBox : Box
    {
        public const string FourCC = "schi";

        protected Box[] scheme_specific_data;
        public Box[] SchemeSpecificData { get { return this.scheme_specific_data; } set { this.scheme_specific_data = value; } }

        public SchemeInformationBox() : base("schi")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.scheme_specific_data);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.scheme_specific_data);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(scheme_specific_data); // scheme_specific_data
            return boxSize;
        }
    }


    /*
    aligned(8) class SchemeTypeBox extends FullBox('schm', 0, flags) {
        unsigned int(32) scheme_type; // 4CC identifying the scheme
        unsigned int(32) scheme_version; // scheme version
        if (flags & 0x000001) {
            utf8string scheme_uri; // browser uri
        }
    }
    */
    public class SchemeTypeBox : FullBox
    {
        public const string FourCC = "schm";

        protected uint scheme_type;  //  4CC identifying the scheme
        public uint SchemeType { get { return this.scheme_type; } set { this.scheme_type = value; } }

        protected uint scheme_version;  //  scheme version
        public uint SchemeVersion { get { return this.scheme_version; } set { this.scheme_version = value; } }

        protected string scheme_uri;  //  browser uri
        public string SchemeUri { get { return this.scheme_uri; } set { this.scheme_uri = value; } }

        public SchemeTypeBox(uint flags = 0) : base("schm", 0, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.scheme_type); // 4CC identifying the scheme
            boxSize += stream.ReadUInt32(out this.scheme_version); // scheme version

            if ((flags & 0x000001) == 0x000001)
            {
                boxSize += stream.ReadString(out this.scheme_uri); // browser uri
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.scheme_type); // 4CC identifying the scheme
            boxSize += stream.WriteUInt32(this.scheme_version); // scheme version

            if ((flags & 0x000001) == 0x000001)
            {
                boxSize += stream.WriteString(this.scheme_uri); // browser uri
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // scheme_type
            boxSize += 32; // scheme_version

            if ((flags & 0x000001) == 0x000001)
            {
                boxSize += (ulong)scheme_uri.Length * 8; // scheme_uri
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class CompatibleSchemeTypeBox extends FullBox('csch', 0, flags) {
        // identical syntax to SchemeTypeBox
        unsigned int(32)	scheme_type;		// 4CC identifying the scheme
        unsigned int(32)	scheme_version;	// scheme version 
        if (flags & 0x000001) {
            utf8string scheme_uri;		// browser uri
        }
    }

    */
    public class CompatibleSchemeTypeBox : FullBox
    {
        public const string FourCC = "csch";

        protected uint scheme_type;  //  4CC identifying the scheme
        public uint SchemeType { get { return this.scheme_type; } set { this.scheme_type = value; } }

        protected uint scheme_version;  //  scheme version 
        public uint SchemeVersion { get { return this.scheme_version; } set { this.scheme_version = value; } }

        protected string scheme_uri;  //  browser uri
        public string SchemeUri { get { return this.scheme_uri; } set { this.scheme_uri = value; } }

        public CompatibleSchemeTypeBox(uint flags = 0) : base("csch", 0, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            /*  identical syntax to SchemeTypeBox */
            boxSize += stream.ReadUInt32(out this.scheme_type); // 4CC identifying the scheme
            boxSize += stream.ReadUInt32(out this.scheme_version); // scheme version 

            if ((flags & 0x000001) == 0x000001)
            {
                boxSize += stream.ReadString(out this.scheme_uri); // browser uri
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            /*  identical syntax to SchemeTypeBox */
            boxSize += stream.WriteUInt32(this.scheme_type); // 4CC identifying the scheme
            boxSize += stream.WriteUInt32(this.scheme_version); // scheme version 

            if ((flags & 0x000001) == 0x000001)
            {
                boxSize += stream.WriteString(this.scheme_uri); // browser uri
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            /*  identical syntax to SchemeTypeBox */
            boxSize += 32; // scheme_type
            boxSize += 32; // scheme_version

            if ((flags & 0x000001) == 0x000001)
            {
                boxSize += (ulong)scheme_uri.Length * 8; // scheme_uri
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SampleDependencyTypeBox
        extends FullBox('sdtp', version = 0, 0) {
        for (i=0; i < sample_count; i++){
            unsigned int(2) is_leading;
            unsigned int(2) sample_depends_on;
            unsigned int(2) sample_is_depended_on;
            unsigned int(2) sample_has_redundancy;
        }
    }
    */
    public class SampleDependencyTypeBox : FullBox
    {
        public const string FourCC = "sdtp";

        protected byte is_leading;
        public byte IsLeading { get { return this.is_leading; } set { this.is_leading = value; } }

        protected byte sample_depends_on;
        public byte SampleDependsOn { get { return this.sample_depends_on; } set { this.sample_depends_on = value; } }

        protected byte sample_is_depended_on;
        public byte SampleIsDependedOn { get { return this.sample_is_depended_on; } set { this.sample_is_depended_on = value; } }

        protected byte sample_has_redundancy;
        public byte SampleHasRedundancy { get { return this.sample_has_redundancy; } set { this.sample_has_redundancy = value; } }

        public SampleDependencyTypeBox() : base("sdtp", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            int sample_count = 0; // TODO: taken from the stsz sample_count


            for (int i = 0; i < sample_count; i++)
            {
                boxSize += stream.ReadBits(2, out this.is_leading);
                boxSize += stream.ReadBits(2, out this.sample_depends_on);
                boxSize += stream.ReadBits(2, out this.sample_is_depended_on);
                boxSize += stream.ReadBits(2, out this.sample_has_redundancy);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            int sample_count = 0; // TODO: taken from the stsz sample_count


            for (int i = 0; i < sample_count; i++)
            {
                boxSize += stream.WriteBits(2, this.is_leading);
                boxSize += stream.WriteBits(2, this.sample_depends_on);
                boxSize += stream.WriteBits(2, this.sample_is_depended_on);
                boxSize += stream.WriteBits(2, this.sample_has_redundancy);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            int sample_count = 0; // TODO: taken from the stsz sample_count


            for (int i = 0; i < sample_count; i++)
            {
                boxSize += 2; // is_leading
                boxSize += 2; // sample_depends_on
                boxSize += 2; // sample_is_depended_on
                boxSize += 2; // sample_has_redundancy
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class FDSessionGroupBox extends Box('segr') {
        unsigned int(16)	num_session_groups;
        for(i=0; i < num_session_groups; i++) {
            unsigned int(8)	entry_count;
            for (j=0; j < entry_count; j++) {
                unsigned int(32)	group_ID;
            }
            unsigned int(16) num_channels_in_session_group;
            for(k=0; k < num_channels_in_session_group; k++) {
                unsigned int(32) hint_track_ID;
            }
        }
    }
    */
    public class FDSessionGroupBox : Box
    {
        public const string FourCC = "segr";

        protected ushort num_session_groups;
        public ushort NumSessionGroups { get { return this.num_session_groups; } set { this.num_session_groups = value; } }

        protected byte entry_count;
        public byte EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected uint group_ID;
        public uint GroupID { get { return this.group_ID; } set { this.group_ID = value; } }

        protected ushort num_channels_in_session_group;
        public ushort NumChannelsInSessionGroup { get { return this.num_channels_in_session_group; } set { this.num_channels_in_session_group = value; } }

        protected uint hint_track_ID;
        public uint HintTrackID { get { return this.hint_track_ID; } set { this.hint_track_ID = value; } }

        public FDSessionGroupBox() : base("segr")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.num_session_groups);

            for (int i = 0; i < num_session_groups; i++)
            {
                boxSize += stream.ReadUInt8(out this.entry_count);

                for (int j = 0; j < entry_count; j++)
                {
                    boxSize += stream.ReadUInt32(out this.group_ID);
                }
                boxSize += stream.ReadUInt16(out this.num_channels_in_session_group);

                for (int k = 0; k < num_channels_in_session_group; k++)
                {
                    boxSize += stream.ReadUInt32(out this.hint_track_ID);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.num_session_groups);

            for (int i = 0; i < num_session_groups; i++)
            {
                boxSize += stream.WriteUInt8(this.entry_count);

                for (int j = 0; j < entry_count; j++)
                {
                    boxSize += stream.WriteUInt32(this.group_ID);
                }
                boxSize += stream.WriteUInt16(this.num_channels_in_session_group);

                for (int k = 0; k < num_channels_in_session_group; k++)
                {
                    boxSize += stream.WriteUInt32(this.hint_track_ID);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // num_session_groups

            for (int i = 0; i < num_session_groups; i++)
            {
                boxSize += 8; // entry_count

                for (int j = 0; j < entry_count; j++)
                {
                    boxSize += 32; // group_ID
                }
                boxSize += 16; // num_channels_in_session_group

                for (int k = 0; k < num_channels_in_session_group; k++)
                {
                    boxSize += 32; // hint_track_ID
                }
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SampleGroupDescriptionBox ()
        extends FullBox('sgpd', version, flags){
        unsigned int(32) grouping_type;
        if (version>=1) { unsigned int(32) default_length; }
        if (version>=2) {
            unsigned int(32) default_group_description_index;
        }
        unsigned int(32) entry_count;
        int i;
        for (i = 1 ; i <= entry_count ; i++){
            if (version>=1) {
                if (default_length==0) {
                    unsigned int(32) description_length;
                }
            }
            SampleGroupDescriptionEntry (grouping_type);
            // an instance of a class derived from SampleGroupDescriptionEntry
            //  that is appropriate and permitted for the media type
        }
    }
    */
    public class SampleGroupDescriptionBox : FullBox
    {
        public const string FourCC = "sgpd";

        protected uint grouping_type;
        public uint GroupingType { get { return this.grouping_type; } set { this.grouping_type = value; } }

        protected uint default_length;
        public uint DefaultLength { get { return this.default_length; } set { this.default_length = value; } }

        protected uint default_group_description_index;
        public uint DefaultGroupDescriptionIndex { get { return this.default_group_description_index; } set { this.default_group_description_index = value; } }

        protected uint entry_count;
        public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected uint description_length;
        public uint DescriptionLength { get { return this.description_length; } set { this.description_length = value; } }

        protected SampleGroupDescriptionEntry SampleGroupDescriptionEntry;  //  an instance of a class derived from SampleGroupDescriptionEntry
        public SampleGroupDescriptionEntry _SampleGroupDescriptionEntry { get { return this.SampleGroupDescriptionEntry; } set { this.SampleGroupDescriptionEntry = value; } }

        public SampleGroupDescriptionBox(byte version = 0, uint flags = 0) : base("sgpd", version, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.grouping_type);

            if (version >= 1)
            {
                boxSize += stream.ReadUInt32(out this.default_length);
            }

            if (version >= 2)
            {
                boxSize += stream.ReadUInt32(out this.default_group_description_index);
            }
            boxSize += stream.ReadUInt32(out this.entry_count);


            for (int i = 1; i <= entry_count; i++)
            {

                if (version >= 1)
                {

                    if (default_length == 0)
                    {
                        boxSize += stream.ReadUInt32(out this.description_length);
                    }
                }
                boxSize += stream.ReadBox(out this.SampleGroupDescriptionEntry); // an instance of a class derived from SampleGroupDescriptionEntry
                /*   that is appropriate and permitted for the media type */
            }
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.grouping_type);

            if (version >= 1)
            {
                boxSize += stream.WriteUInt32(this.default_length);
            }

            if (version >= 2)
            {
                boxSize += stream.WriteUInt32(this.default_group_description_index);
            }
            boxSize += stream.WriteUInt32(this.entry_count);


            for (int i = 1; i <= entry_count; i++)
            {

                if (version >= 1)
                {

                    if (default_length == 0)
                    {
                        boxSize += stream.WriteUInt32(this.description_length);
                    }
                }
                boxSize += stream.WriteBox(this.SampleGroupDescriptionEntry); // an instance of a class derived from SampleGroupDescriptionEntry
                /*   that is appropriate and permitted for the media type */
            }
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // grouping_type

            if (version >= 1)
            {
                boxSize += 32; // default_length
            }

            if (version >= 2)
            {
                boxSize += 32; // default_group_description_index
            }
            boxSize += 32; // entry_count


            for (int i = 1; i <= entry_count; i++)
            {

                if (version >= 1)
                {

                    if (default_length == 0)
                    {
                        boxSize += 32; // description_length
                    }
                }
                boxSize += IsoStream.CalculateSize(SampleGroupDescriptionEntry); // SampleGroupDescriptionEntry
                /*   that is appropriate and permitted for the media type */
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class CompressedSegmentIndexBox
        extends CompressedBox('!six', 'sidx') {
    }

    */
    public class CompressedSegmentIndexBox : CompressedBox
    {
        public const string FourCC = "sidx";

        public CompressedSegmentIndexBox() : base("sidx")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class ProtectionSchemeInfoBox(fmt) extends Box('sinf') {
        OriginalFormatBox(fmt)	original_format;

        SchemeTypeBox			scheme_type_box;		// optional
        SchemeInformationBox	info;						// optional
    }
    */
    public class ProtectionSchemeInfoBox : Box
    {
        public const string FourCC = "sinf";

        protected OriginalFormatBox original_format;
        public OriginalFormatBox OriginalFormat { get { return this.original_format; } set { this.original_format = value; } }

        protected SchemeTypeBox scheme_type_box;  //  optional
        public SchemeTypeBox SchemeTypeBox { get { return this.scheme_type_box; } set { this.scheme_type_box = value; } }

        protected SchemeInformationBox info;  //  optional
        public SchemeInformationBox Info { get { return this.info; } set { this.info = value; } }

        public ProtectionSchemeInfoBox(string fmt = "") : base("sinf")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.original_format);
            if (boxSize < size) boxSize += stream.ReadBox(out this.scheme_type_box); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.info); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.original_format);
            if (this.scheme_type_box != null) boxSize += stream.WriteBox(this.scheme_type_box); // optional
            if (this.info != null) boxSize += stream.WriteBox(this.info); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(original_format); // original_format
            if (this.scheme_type_box != null) boxSize += IsoStream.CalculateSize(scheme_type_box); // scheme_type_box
            if (this.info != null) boxSize += IsoStream.CalculateSize(info); // info
            return boxSize;
        }
    }


    /*
    aligned(8) class FreeSpaceBox extends Box('skip') {
    unsigned int(8) data[];
    }
    */
    public class FreeSpaceBox_skip : Box
    {
        public const string FourCC = "skip";

        protected byte[] data;
        public byte[] Data { get { return this.data; } set { this.data = value; } }

        public FreeSpaceBox_skip() : base("skip")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8Array(out this.data);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8Array(this.data);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)data.Length * 8; // data
            return boxSize;
        }
    }


    /*
    aligned(8) class SoundMediaHeaderBox
        extends FullBox('smhd', version = 0, 0) {
        template int(16) balance = 0;
        const unsigned int(16)	reserved = 0;
    }
    */
    public class SoundMediaHeaderBox : FullBox
    {
        public const string FourCC = "smhd";

        protected short balance = 0;
        public short Balance { get { return this.balance; } set { this.balance = value; } }

        protected ushort reserved = 0;
        public ushort Reserved { get { return this.reserved; } set { this.reserved = value; } }

        public SoundMediaHeaderBox() : base("smhd", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadInt16(out this.balance);
            boxSize += stream.ReadUInt16(out this.reserved);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteInt16(this.balance);
            boxSize += stream.WriteUInt16(this.reserved);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // balance
            boxSize += 16; // reserved
            return boxSize;
        }
    }


    /*
    aligned(8) class SRTPProcessBox extends FullBox('srpp', version, 0) {
        unsigned int(32)		encryption_algorithm_rtp;
        unsigned int(32)		encryption_algorithm_rtcp;
        unsigned int(32)		integrity_algorithm_rtp;
        unsigned int(32)		integrity_algorithm_rtcp;
        SchemeTypeBox			scheme_type_box;
        SchemeInformationBox	info;
    }
    */
    public class SRTPProcessBox : FullBox
    {
        public const string FourCC = "srpp";

        protected uint encryption_algorithm_rtp;
        public uint EncryptionAlgorithmRtp { get { return this.encryption_algorithm_rtp; } set { this.encryption_algorithm_rtp = value; } }

        protected uint encryption_algorithm_rtcp;
        public uint EncryptionAlgorithmRtcp { get { return this.encryption_algorithm_rtcp; } set { this.encryption_algorithm_rtcp = value; } }

        protected uint integrity_algorithm_rtp;
        public uint IntegrityAlgorithmRtp { get { return this.integrity_algorithm_rtp; } set { this.integrity_algorithm_rtp = value; } }

        protected uint integrity_algorithm_rtcp;
        public uint IntegrityAlgorithmRtcp { get { return this.integrity_algorithm_rtcp; } set { this.integrity_algorithm_rtcp = value; } }

        protected SchemeTypeBox scheme_type_box;
        public SchemeTypeBox SchemeTypeBox { get { return this.scheme_type_box; } set { this.scheme_type_box = value; } }

        protected SchemeInformationBox info;
        public SchemeInformationBox Info { get { return this.info; } set { this.info = value; } }

        public SRTPProcessBox(byte version = 0) : base("srpp", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.encryption_algorithm_rtp);
            boxSize += stream.ReadUInt32(out this.encryption_algorithm_rtcp);
            boxSize += stream.ReadUInt32(out this.integrity_algorithm_rtp);
            boxSize += stream.ReadUInt32(out this.integrity_algorithm_rtcp);
            boxSize += stream.ReadBox(out this.scheme_type_box);
            boxSize += stream.ReadBox(out this.info);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.encryption_algorithm_rtp);
            boxSize += stream.WriteUInt32(this.encryption_algorithm_rtcp);
            boxSize += stream.WriteUInt32(this.integrity_algorithm_rtp);
            boxSize += stream.WriteUInt32(this.integrity_algorithm_rtcp);
            boxSize += stream.WriteBox(this.scheme_type_box);
            boxSize += stream.WriteBox(this.info);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // encryption_algorithm_rtp
            boxSize += 32; // encryption_algorithm_rtcp
            boxSize += 32; // integrity_algorithm_rtp
            boxSize += 32; // integrity_algorithm_rtcp
            boxSize += IsoStream.CalculateSize(scheme_type_box); // scheme_type_box
            boxSize += IsoStream.CalculateSize(info); // info
            return boxSize;
        }
    }


    /*
    aligned(8) class CompressedSubsegmentIndexBox
        extends CompressedBox('!ssx', 'ssix') {
    }
    */
    public class CompressedSubsegmentIndexBox : CompressedBox
    {
        public const string FourCC = "ssix";

        public CompressedSubsegmentIndexBox() : base("ssix")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class SampleTableBox extends Box('stbl') {
    }
    */
    public class SampleTableBox : Box
    {
        public const string FourCC = "stbl";

        public SampleTableBox() : base("stbl")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class ChunkOffsetBox
        extends FullBox('stco', version = 0, 0) {
        unsigned int(32)	entry_count;
        for (i=1; i <= entry_count; i++) {
            unsigned int(32)	chunk_offset;
        }
    }
    */
    public class ChunkOffsetBox : FullBox
    {
        public const string FourCC = "stco";

        protected uint entry_count;
        public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected uint chunk_offset;
        public uint ChunkOffset { get { return this.chunk_offset; } set { this.chunk_offset = value; } }

        public ChunkOffsetBox() : base("stco", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.ReadUInt32(out this.chunk_offset);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.WriteUInt32(this.chunk_offset);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += 32; // chunk_offset
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class DegradationPriorityBox
        extends FullBox('stdp', version = 0, 0) {
        int i;
        for (i=0; i < sample_count; i++) {
            unsigned int(16)	priority;
        }
    }
    */
    public class DegradationPriorityBox : FullBox
    {
        public const string FourCC = "stdp";

        protected ushort priority;
        public ushort Priority { get { return this.priority; } set { this.priority = value; } }

        public DegradationPriorityBox() : base("stdp", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            int sample_count = 0; // TODO: taken from the stsz sample_count



            for (int i = 0; i < sample_count; i++)
            {
                boxSize += stream.ReadUInt16(out this.priority);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            int sample_count = 0; // TODO: taken from the stsz sample_count



            for (int i = 0; i < sample_count; i++)
            {
                boxSize += stream.WriteUInt16(this.priority);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            int sample_count = 0; // TODO: taken from the stsz sample_count



            for (int i = 0; i < sample_count; i++)
            {
                boxSize += 16; // priority
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SubtitleMediaHeaderBox
        extends FullBox ('sthd', version = 0, flags = 0){
    }
    */
    public class SubtitleMediaHeaderBox : FullBox
    {
        public const string FourCC = "sthd";

        public SubtitleMediaHeaderBox() : base("sthd", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class SubTrackDefinitionBox extends Box('strd') {
    }
    */
    public class SubTrackDefinitionBox : Box
    {
        public const string FourCC = "strd";

        public SubTrackDefinitionBox() : base("strd")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class SubTrackInformationBox
        extends FullBox('stri', version = 0, 0){
        template int(16)	switch_group = 0;
        template int(16)	alternate_group = 0;
        template unsigned int(32)	sub_track_ID = 0;
        unsigned int(32)	attribute_list[];	// to the end of the box
    }
    */
    public class SubTrackInformationBox : FullBox
    {
        public const string FourCC = "stri";

        protected short switch_group = 0;
        public short SwitchGroup { get { return this.switch_group; } set { this.switch_group = value; } }

        protected short alternate_group = 0;
        public short AlternateGroup { get { return this.alternate_group; } set { this.alternate_group = value; } }

        protected uint sub_track_ID = 0;
        public uint SubTrackID { get { return this.sub_track_ID; } set { this.sub_track_ID = value; } }

        protected uint[] attribute_list;  //  to the end of the box
        public uint[] AttributeList { get { return this.attribute_list; } set { this.attribute_list = value; } }

        public SubTrackInformationBox() : base("stri", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadInt16(out this.switch_group);
            boxSize += stream.ReadInt16(out this.alternate_group);
            boxSize += stream.ReadUInt32(out this.sub_track_ID);
            boxSize += stream.ReadUInt32Array(out this.attribute_list); // to the end of the box
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteInt16(this.switch_group);
            boxSize += stream.WriteInt16(this.alternate_group);
            boxSize += stream.WriteUInt32(this.sub_track_ID);
            boxSize += stream.WriteUInt32Array(this.attribute_list); // to the end of the box
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // switch_group
            boxSize += 16; // alternate_group
            boxSize += 32; // sub_track_ID
            boxSize += 32; // attribute_list
            return boxSize;
        }
    }


    /*
    aligned(8) class SampleToChunkBox
        extends FullBox('stsc', version = 0, 0) {
        unsigned int(32)	entry_count;
        for (i=1; i <= entry_count; i++) {
            unsigned int(32)	first_chunk;
            unsigned int(32)	samples_per_chunk;
            unsigned int(32)	sample_description_index;
        }
    }
    */
    public class SampleToChunkBox : FullBox
    {
        public const string FourCC = "stsc";

        protected uint entry_count;
        public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected uint first_chunk;
        public uint FirstChunk { get { return this.first_chunk; } set { this.first_chunk = value; } }

        protected uint samples_per_chunk;
        public uint SamplesPerChunk { get { return this.samples_per_chunk; } set { this.samples_per_chunk = value; } }

        protected uint sample_description_index;
        public uint SampleDescriptionIndex { get { return this.sample_description_index; } set { this.sample_description_index = value; } }

        public SampleToChunkBox() : base("stsc", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.ReadUInt32(out this.first_chunk);
                boxSize += stream.ReadUInt32(out this.samples_per_chunk);
                boxSize += stream.ReadUInt32(out this.sample_description_index);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.WriteUInt32(this.first_chunk);
                boxSize += stream.WriteUInt32(this.samples_per_chunk);
                boxSize += stream.WriteUInt32(this.sample_description_index);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += 32; // first_chunk
                boxSize += 32; // samples_per_chunk
                boxSize += 32; // sample_description_index
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SampleDescriptionBox ()
        extends FullBox('stsd', version, 0){
        int i ;
        unsigned int(32) entry_count;
        for (i = 1 ; i <= entry_count ; i++){
            SampleEntry();		// an instance of a class derived from SampleEntry
        }
    }
    */
    public class SampleDescriptionBox : FullBox
    {
        public const string FourCC = "stsd";

        protected uint entry_count;
        public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected SampleEntry SampleEntry;  //  an instance of a class derived from SampleEntry
        public SampleEntry _SampleEntry { get { return this.SampleEntry; } set { this.SampleEntry = value; } }

        public SampleDescriptionBox(byte version = 0) : base("stsd", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            boxSize += stream.ReadUInt32(out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.ReadBox(out this.SampleEntry); // an instance of a class derived from SampleEntry
            }
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            boxSize += stream.WriteUInt32(this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.WriteBox(this.SampleEntry); // an instance of a class derived from SampleEntry
            }
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            boxSize += 32; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += IsoStream.CalculateSize(SampleEntry); // SampleEntry
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SubTrackSampleGroupBox
        extends FullBox('stsg', 0, 0){
        unsigned int(32) grouping_type;
        unsigned int(16) item_count;
        for(i = 0; i< item_count; i++)
            unsigned int(32)	group_description_index;
    }
    */
    public class SubTrackSampleGroupBox : FullBox
    {
        public const string FourCC = "stsg";

        protected uint grouping_type;
        public uint GroupingType { get { return this.grouping_type; } set { this.grouping_type = value; } }

        protected ushort item_count;
        public ushort ItemCount { get { return this.item_count; } set { this.item_count = value; } }

        protected uint group_description_index;
        public uint GroupDescriptionIndex { get { return this.group_description_index; } set { this.group_description_index = value; } }

        public SubTrackSampleGroupBox() : base("stsg", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.grouping_type);
            boxSize += stream.ReadUInt16(out this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += stream.ReadUInt32(out this.group_description_index);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.grouping_type);
            boxSize += stream.WriteUInt16(this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += stream.WriteUInt32(this.group_description_index);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // grouping_type
            boxSize += 16; // item_count

            for (int i = 0; i < item_count; i++)
            {
                boxSize += 32; // group_description_index
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class ShadowSyncSampleBox
        extends FullBox('stsh', version = 0, 0) {
        unsigned int(32)	entry_count;
        int i;
        for (i=0; i < entry_count; i++) {
            unsigned int(32)	shadowed_sample_number;
            unsigned int(32)	sync_sample_number;
        }
    }
    */
    public class ShadowSyncSampleBox : FullBox
    {
        public const string FourCC = "stsh";

        protected uint entry_count;
        public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected uint shadowed_sample_number;
        public uint ShadowedSampleNumber { get { return this.shadowed_sample_number; } set { this.shadowed_sample_number = value; } }

        protected uint sync_sample_number;
        public uint SyncSampleNumber { get { return this.sync_sample_number; } set { this.sync_sample_number = value; } }

        public ShadowSyncSampleBox() : base("stsh", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.entry_count);


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += stream.ReadUInt32(out this.shadowed_sample_number);
                boxSize += stream.ReadUInt32(out this.sync_sample_number);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.entry_count);


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += stream.WriteUInt32(this.shadowed_sample_number);
                boxSize += stream.WriteUInt32(this.sync_sample_number);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += 32; // shadowed_sample_number
                boxSize += 32; // sync_sample_number
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SyncSampleBox
        extends FullBox('stss', version = 0, 0) {
        unsigned int(32)	entry_count;
        int i;
        for (i=0; i < entry_count; i++) {
            unsigned int(32)	sample_number;
        }
    }
    */
    public class SyncSampleBox : FullBox
    {
        public const string FourCC = "stss";

        protected uint entry_count;
        public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected uint sample_number;
        public uint SampleNumber { get { return this.sample_number; } set { this.sample_number = value; } }

        public SyncSampleBox() : base("stss", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.entry_count);


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += stream.ReadUInt32(out this.sample_number);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.entry_count);


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += stream.WriteUInt32(this.sample_number);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += 32; // sample_number
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SampleSizeBox extends FullBox('stsz', version = 0, 0) {
        unsigned int(32)	sample_size;
        unsigned int(32)	sample_count;
        if (sample_size==0) {
            for (i=1; i <= sample_count; i++) {
            unsigned int(32)	entry_size;
            }
        }
    }
    */
    public class SampleSizeBox : FullBox
    {
        public const string FourCC = "stsz";

        protected uint sample_size;
        public uint SampleSize { get { return this.sample_size; } set { this.sample_size = value; } }

        protected uint sample_count;
        public uint SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

        protected uint entry_size;
        public uint EntrySize { get { return this.entry_size; } set { this.entry_size = value; } }

        public SampleSizeBox() : base("stsz", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.sample_size);
            boxSize += stream.ReadUInt32(out this.sample_count);

            if (sample_size == 0)
            {

                for (int i = 1; i <= sample_count; i++)
                {
                    boxSize += stream.ReadUInt32(out this.entry_size);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.sample_size);
            boxSize += stream.WriteUInt32(this.sample_count);

            if (sample_size == 0)
            {

                for (int i = 1; i <= sample_count; i++)
                {
                    boxSize += stream.WriteUInt32(this.entry_size);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // sample_size
            boxSize += 32; // sample_count

            if (sample_size == 0)
            {

                for (int i = 1; i <= sample_count; i++)
                {
                    boxSize += 32; // entry_size
                }
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class TimeToSampleBox
        extends FullBox('stts', version = 0, 0) {
        unsigned int(32)	entry_count;
            int i;
        for (i=0; i < entry_count; i++) {
            unsigned int(32)	sample_count;
            unsigned int(32)	sample_delta;
        }
    }
    */
    public class TimeToSampleBox : FullBox
    {
        public const string FourCC = "stts";

        protected uint entry_count;
        public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected uint sample_count;
        public uint SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

        protected uint sample_delta;
        public uint SampleDelta { get { return this.sample_delta; } set { this.sample_delta = value; } }

        public TimeToSampleBox() : base("stts", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.entry_count);


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += stream.ReadUInt32(out this.sample_count);
                boxSize += stream.ReadUInt32(out this.sample_delta);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.entry_count);


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += stream.WriteUInt32(this.sample_count);
                boxSize += stream.WriteUInt32(this.sample_delta);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += 32; // sample_count
                boxSize += 32; // sample_delta
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SegmentTypeBox extends GeneralTypeBox ('styp')
    {}
    */
    public class SegmentTypeBox : GeneralTypeBox
    {
        public const string FourCC = "styp";

        public SegmentTypeBox() : base("styp")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class CompactSampleSizeBox 
            extends FullBox('stz2', version = 0, 0) {
        unsigned int(24)	reserved = 0;
        unsigned int(8)	field_size;
        unsigned int(32)	sample_count;
        for (i=1; i <= sample_count; i++) {
            unsigned int(field_size)	entry_size;
        }
    }
    */
    public class CompactSampleSizeBox : FullBox
    {
        public const string FourCC = "stz2";

        protected uint reserved = 0;
        public uint Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte field_size;
        public byte FieldSize { get { return this.field_size; } set { this.field_size = value; } }

        protected uint sample_count;
        public uint SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

        protected byte[] entry_size;
        public byte[] EntrySize { get { return this.entry_size; } set { this.entry_size = value; } }

        public CompactSampleSizeBox() : base("stz2", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt24(out this.reserved);
            boxSize += stream.ReadUInt8(out this.field_size);
            boxSize += stream.ReadUInt32(out this.sample_count);

            for (int i = 1; i <= sample_count; i++)
            {
                boxSize += stream.ReadBytes(field_size, out this.entry_size);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt24(this.reserved);
            boxSize += stream.WriteUInt8(this.field_size);
            boxSize += stream.WriteUInt32(this.sample_count);

            for (int i = 1; i <= sample_count; i++)
            {
                boxSize += stream.WriteBytes(field_size, this.entry_size);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 24; // reserved
            boxSize += 8; // field_size
            boxSize += 32; // sample_count

            for (int i = 1; i <= sample_count; i++)
            {
                boxSize += (ulong)field_size; // entry_size
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SubSampleInformationBox
        extends FullBox('subs', version, flags) {
        unsigned int(32) entry_count;
        int i,j;
        for (i=0; i < entry_count; i++) {
            unsigned int(32) sample_delta;
            unsigned int(16) subsample_count;
            if (subsample_count > 0) {
                for (j=0; j < subsample_count; j++) {
                    if(version == 1)
                    {
                        unsigned int(32) subsample_size;
                    }
                    else
                    {
                        unsigned int(16) subsample_size;
                    }
                    unsigned int(8) subsample_priority;
                    unsigned int(8) discardable;
                    unsigned int(32) codec_specific_parameters;
                }
            }
        }
    }
    */
    public class SubSampleInformationBox : FullBox
    {
        public const string FourCC = "subs";

        protected uint entry_count;
        public uint EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected uint sample_delta;
        public uint SampleDelta { get { return this.sample_delta; } set { this.sample_delta = value; } }

        protected ushort subsample_count;
        public ushort SubsampleCount { get { return this.subsample_count; } set { this.subsample_count = value; } }

        protected uint subsample_size;
        public uint SubsampleSize { get { return this.subsample_size; } set { this.subsample_size = value; } }

        protected ushort subsample_size0;
        public ushort SubsampleSize0 { get { return this.subsample_size0; } set { this.subsample_size0 = value; } }

        protected byte subsample_priority;
        public byte SubsamplePriority { get { return this.subsample_priority; } set { this.subsample_priority = value; } }

        protected byte discardable;
        public byte Discardable { get { return this.discardable; } set { this.discardable = value; } }

        protected uint codec_specific_parameters;
        public uint CodecSpecificParameters { get { return this.codec_specific_parameters; } set { this.codec_specific_parameters = value; } }

        public SubSampleInformationBox(byte version = 0, uint flags = 0) : base("subs", version, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.entry_count);


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += stream.ReadUInt32(out this.sample_delta);
                boxSize += stream.ReadUInt16(out this.subsample_count);

                if (subsample_count > 0)
                {

                    for (int j = 0; j < subsample_count; j++)
                    {

                        if (version == 1)
                        {
                            boxSize += stream.ReadUInt32(out this.subsample_size);
                        }

                        else
                        {
                            boxSize += stream.ReadUInt16(out this.subsample_size0);
                        }
                        boxSize += stream.ReadUInt8(out this.subsample_priority);
                        boxSize += stream.ReadUInt8(out this.discardable);
                        boxSize += stream.ReadUInt32(out this.codec_specific_parameters);
                    }
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.entry_count);


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += stream.WriteUInt32(this.sample_delta);
                boxSize += stream.WriteUInt16(this.subsample_count);

                if (subsample_count > 0)
                {

                    for (int j = 0; j < subsample_count; j++)
                    {

                        if (version == 1)
                        {
                            boxSize += stream.WriteUInt32(this.subsample_size);
                        }

                        else
                        {
                            boxSize += stream.WriteUInt16(this.subsample_size0);
                        }
                        boxSize += stream.WriteUInt8(this.subsample_priority);
                        boxSize += stream.WriteUInt8(this.discardable);
                        boxSize += stream.WriteUInt32(this.codec_specific_parameters);
                    }
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // entry_count


            for (int i = 0; i < entry_count; i++)
            {
                boxSize += 32; // sample_delta
                boxSize += 16; // subsample_count

                if (subsample_count > 0)
                {

                    for (int j = 0; j < subsample_count; j++)
                    {

                        if (version == 1)
                        {
                            boxSize += 32; // subsample_size
                        }

                        else
                        {
                            boxSize += 16; // subsample_size0
                        }
                        boxSize += 8; // subsample_priority
                        boxSize += 8; // discardable
                        boxSize += 32; // codec_specific_parameters
                    }
                }
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class TrackFragmentBaseMediaDecodeTimeBox
        extends FullBox('tfdt', version, 0) {
        if (version==1) {
            unsigned int(64) baseMediaDecodeTime;
        } else { // version==0
            unsigned int(32) baseMediaDecodeTime;
        }
    }
    */
    public class TrackFragmentBaseMediaDecodeTimeBox : FullBox
    {
        public const string FourCC = "tfdt";

        protected ulong baseMediaDecodeTime;
        public ulong BaseMediaDecodeTime { get { return this.baseMediaDecodeTime; } set { this.baseMediaDecodeTime = value; } }

        protected uint baseMediaDecodeTime0;
        public uint BaseMediaDecodeTime0 { get { return this.baseMediaDecodeTime0; } set { this.baseMediaDecodeTime0 = value; } }

        public TrackFragmentBaseMediaDecodeTimeBox(byte version = 0) : base("tfdt", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 1)
            {
                boxSize += stream.ReadUInt64(out this.baseMediaDecodeTime);
            }

            else
            {
                /*  version==0 */
                boxSize += stream.ReadUInt32(out this.baseMediaDecodeTime0);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 1)
            {
                boxSize += stream.WriteUInt64(this.baseMediaDecodeTime);
            }

            else
            {
                /*  version==0 */
                boxSize += stream.WriteUInt32(this.baseMediaDecodeTime0);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 1)
            {
                boxSize += 64; // baseMediaDecodeTime
            }

            else
            {
                /*  version==0 */
                boxSize += 32; // baseMediaDecodeTime0
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class TrackFragmentHeaderBox
                extends FullBox('tfhd', 0, tf_flags){
        unsigned int(32)	track_ID;
        // all the following are optional fields
        // their presence is indicated by bits in the tf_flags
        unsigned int(64)	base_data_offset;
        unsigned int(32)	sample_description_index;
        unsigned int(32)	default_sample_duration;
        unsigned int(32)	default_sample_size;
        unsigned int(32)	default_sample_flags;
    }
    */
    public class TrackFragmentHeaderBox : FullBox
    {
        public const string FourCC = "tfhd";

        protected uint track_ID;  //  all the following are optional fields
        public uint TrackID { get { return this.track_ID; } set { this.track_ID = value; } }

        protected ulong base_data_offset;
        public ulong BaseDataOffset { get { return this.base_data_offset; } set { this.base_data_offset = value; } }

        protected uint sample_description_index;
        public uint SampleDescriptionIndex { get { return this.sample_description_index; } set { this.sample_description_index = value; } }

        protected uint default_sample_duration;
        public uint DefaultSampleDuration { get { return this.default_sample_duration; } set { this.default_sample_duration = value; } }

        protected uint default_sample_size;
        public uint DefaultSampleSize { get { return this.default_sample_size; } set { this.default_sample_size = value; } }

        protected uint default_sample_flags;
        public uint DefaultSampleFlags { get { return this.default_sample_flags; } set { this.default_sample_flags = value; } }

        public TrackFragmentHeaderBox(uint tf_flags = 0) : base("tfhd", 0, tf_flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += stream.ReadUInt32(out this.track_ID); // all the following are optional fields
            /*  their presence is indicated by bits in the tf_flags */
            boxSize += stream.ReadUInt64(out this.base_data_offset);
            boxSize += stream.ReadUInt32(out this.sample_description_index);
            boxSize += stream.ReadUInt32(out this.default_sample_duration);
            boxSize += stream.ReadUInt32(out this.default_sample_size);
            boxSize += stream.ReadUInt32(out this.default_sample_flags);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.track_ID != null) boxSize += stream.WriteUInt32(this.track_ID); // all the following are optional fields
            /*  their presence is indicated by bits in the tf_flags */
            boxSize += stream.WriteUInt64(this.base_data_offset);
            boxSize += stream.WriteUInt32(this.sample_description_index);
            boxSize += stream.WriteUInt32(this.default_sample_duration);
            boxSize += stream.WriteUInt32(this.default_sample_size);
            boxSize += stream.WriteUInt32(this.default_sample_flags);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.track_ID != null) boxSize += 32; // track_ID
            /*  their presence is indicated by bits in the tf_flags */
            boxSize += 64; // base_data_offset
            boxSize += 32; // sample_description_index
            boxSize += 32; // default_sample_duration
            boxSize += 32; // default_sample_size
            boxSize += 32; // default_sample_flags
            return boxSize;
        }
    }


    /*
    aligned(8) class TrackFragmentRandomAccessBox
     extends FullBox('tfra', version, 0) {
        unsigned int(32)	track_ID;
        const unsigned int(26)	reserved = 0;
        unsigned int(2)	length_size_of_traf_num;
        unsigned int(2)	length_size_of_trun_num;
        unsigned int(2)	length_size_of_sample_num;
        unsigned int(32)	number_of_entry;
        for(i=1; i <= number_of_entry; i++){
            if(version==1){
                unsigned int(64)	time;
                unsigned int(64)	moof_offset;
            }else{
                unsigned int(32)	time;
                unsigned int(32)	moof_offset;
            }
            unsigned int((length_size_of_traf_num+1) * 8)	traf_number;
            unsigned int((length_size_of_trun_num+1) * 8)	trun_number;
            unsigned int((length_size_of_sample_num+1) * 8)	sample_delta;
        }
    }
    */
    public class TrackFragmentRandomAccessBox : FullBox
    {
        public const string FourCC = "tfra";

        protected uint track_ID;
        public uint TrackID { get { return this.track_ID; } set { this.track_ID = value; } }

        protected uint reserved = 0;
        public uint Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte length_size_of_traf_num;
        public byte LengthSizeOfTrafNum { get { return this.length_size_of_traf_num; } set { this.length_size_of_traf_num = value; } }

        protected byte length_size_of_trun_num;
        public byte LengthSizeOfTrunNum { get { return this.length_size_of_trun_num; } set { this.length_size_of_trun_num = value; } }

        protected byte length_size_of_sample_num;
        public byte LengthSizeOfSampleNum { get { return this.length_size_of_sample_num; } set { this.length_size_of_sample_num = value; } }

        protected uint number_of_entry;
        public uint NumberOfEntry { get { return this.number_of_entry; } set { this.number_of_entry = value; } }

        protected ulong time;
        public ulong Time { get { return this.time; } set { this.time = value; } }

        protected ulong moof_offset;
        public ulong MoofOffset { get { return this.moof_offset; } set { this.moof_offset = value; } }

        protected uint time0;
        public uint Time0 { get { return this.time0; } set { this.time0 = value; } }

        protected uint moof_offset0;
        public uint MoofOffset0 { get { return this.moof_offset0; } set { this.moof_offset0 = value; } }

        protected byte[] traf_number;
        public byte[] TrafNumber { get { return this.traf_number; } set { this.traf_number = value; } }

        protected byte[] trun_number;
        public byte[] TrunNumber { get { return this.trun_number; } set { this.trun_number = value; } }

        protected byte[] sample_delta;
        public byte[] SampleDelta { get { return this.sample_delta; } set { this.sample_delta = value; } }

        public TrackFragmentRandomAccessBox(byte version = 0) : base("tfra", version, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.track_ID);
            boxSize += stream.ReadBits(26, out this.reserved);
            boxSize += stream.ReadBits(2, out this.length_size_of_traf_num);
            boxSize += stream.ReadBits(2, out this.length_size_of_trun_num);
            boxSize += stream.ReadBits(2, out this.length_size_of_sample_num);
            boxSize += stream.ReadUInt32(out this.number_of_entry);

            for (int i = 1; i <= number_of_entry; i++)
            {

                if (version == 1)
                {
                    boxSize += stream.ReadUInt64(out this.time);
                    boxSize += stream.ReadUInt64(out this.moof_offset);
                }

                else
                {
                    boxSize += stream.ReadUInt32(out this.time0);
                    boxSize += stream.ReadUInt32(out this.moof_offset0);
                }
                boxSize += stream.ReadBytes((ulong)(length_size_of_traf_num + 1), out this.traf_number);
                boxSize += stream.ReadBytes((ulong)(length_size_of_trun_num + 1), out this.trun_number);
                boxSize += stream.ReadBytes((ulong)(length_size_of_sample_num + 1), out this.sample_delta);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.track_ID);
            boxSize += stream.WriteBits(26, this.reserved);
            boxSize += stream.WriteBits(2, this.length_size_of_traf_num);
            boxSize += stream.WriteBits(2, this.length_size_of_trun_num);
            boxSize += stream.WriteBits(2, this.length_size_of_sample_num);
            boxSize += stream.WriteUInt32(this.number_of_entry);

            for (int i = 1; i <= number_of_entry; i++)
            {

                if (version == 1)
                {
                    boxSize += stream.WriteUInt64(this.time);
                    boxSize += stream.WriteUInt64(this.moof_offset);
                }

                else
                {
                    boxSize += stream.WriteUInt32(this.time0);
                    boxSize += stream.WriteUInt32(this.moof_offset0);
                }
                boxSize += stream.WriteBytes((ulong)(length_size_of_traf_num + 1), this.traf_number);
                boxSize += stream.WriteBytes((ulong)(length_size_of_trun_num + 1), this.trun_number);
                boxSize += stream.WriteBytes((ulong)(length_size_of_sample_num + 1), this.sample_delta);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_ID
            boxSize += 26; // reserved
            boxSize += 2; // length_size_of_traf_num
            boxSize += 2; // length_size_of_trun_num
            boxSize += 2; // length_size_of_sample_num
            boxSize += 32; // number_of_entry

            for (int i = 1; i <= number_of_entry; i++)
            {

                if (version == 1)
                {
                    boxSize += 64; // time
                    boxSize += 64; // moof_offset
                }

                else
                {
                    boxSize += 32; // time0
                    boxSize += 32; // moof_offset0
                }
                boxSize += (ulong)(length_size_of_traf_num + 1) * 8; // traf_number
                boxSize += (ulong)(length_size_of_trun_num + 1) * 8; // trun_number
                boxSize += (ulong)(length_size_of_sample_num + 1) * 8; // sample_delta
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class TrackHeaderBox
        extends FullBox('tkhd', version, flags){
        if (version==1) {
            unsigned int(64)	creation_time;
            unsigned int(64)	modification_time;
            unsigned int(32)	track_ID;
            const unsigned int(32)	reserved = 0;
            unsigned int(64)	duration;
        } else { // version==0
            unsigned int(32)	creation_time;
            unsigned int(32)	modification_time;
            unsigned int(32)	track_ID;
            const unsigned int(32)	reserved = 0;
            unsigned int(32)	duration;
        }
        const unsigned int(32)[2]	reserved = 0;
        template int(16) layer = 0;
        template int(16) alternate_group = 0;
        template int(16)	volume = {if track_is_audio 0x0100 else 0};
        const unsigned int(16)	reserved = 0;
        template int(32)[9]	matrix=
            { 0x00010000,0,0,0,0x00010000,0,0,0,0x40000000 };
            // unity matrix
        unsigned int(32) width;
        unsigned int(32) height;
    }
    */
    public class TrackHeaderBox : FullBox
    {
        public const string FourCC = "tkhd";

        protected ulong creation_time;
        public ulong CreationTime { get { return this.creation_time; } set { this.creation_time = value; } }

        protected ulong modification_time;
        public ulong ModificationTime { get { return this.modification_time; } set { this.modification_time = value; } }

        protected uint track_ID;
        public uint TrackID { get { return this.track_ID; } set { this.track_ID = value; } }

        protected uint reserved = 0;
        public uint Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected ulong duration;
        public ulong Duration { get { return this.duration; } set { this.duration = value; } }

        protected uint creation_time0;
        public uint CreationTime0 { get { return this.creation_time0; } set { this.creation_time0 = value; } }

        protected uint modification_time0;
        public uint ModificationTime0 { get { return this.modification_time0; } set { this.modification_time0 = value; } }

        protected uint track_ID0;
        public uint TrackID0 { get { return this.track_ID0; } set { this.track_ID0 = value; } }

        protected uint reserved0 = 0;
        public uint Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected uint duration0;
        public uint Duration0 { get { return this.duration0; } set { this.duration0 = value; } }

        protected uint[] reserved1 = [];
        public uint[] Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

        protected short layer = 0;
        public short Layer { get { return this.layer; } set { this.layer = value; } }

        protected short alternate_group = 0;
        public short AlternateGroup { get { return this.alternate_group; } set { this.alternate_group = value; } }

        protected short volume = 0; // = { default samplerate of media}<<16;
        public short Volume { get { return this.volume; } set { this.volume = value; } }

        protected ushort reserved2 = 0;
        public ushort Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

        protected uint[] matrix =
            { 0x00010000,0,0,0,0x00010000,0,0,0,0x40000000 };  //  unity matrix
        public uint[] Matrix { get { return this.matrix; } set { this.matrix = value; } }

        protected uint width;
        public uint Width { get { return this.width; } set { this.width = value; } }

        protected uint height;
        public uint Height { get { return this.height; } set { this.height = value; } }

        public TrackHeaderBox(byte version = 0, uint flags = 0) : base("tkhd", version, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            if (version == 1)
            {
                boxSize += stream.ReadUInt64(out this.creation_time);
                boxSize += stream.ReadUInt64(out this.modification_time);
                boxSize += stream.ReadUInt32(out this.track_ID);
                boxSize += stream.ReadUInt32(out this.reserved);
                boxSize += stream.ReadUInt64(out this.duration);
            }

            else
            {
                /*  version==0 */
                boxSize += stream.ReadUInt32(out this.creation_time0);
                boxSize += stream.ReadUInt32(out this.modification_time0);
                boxSize += stream.ReadUInt32(out this.track_ID0);
                boxSize += stream.ReadUInt32(out this.reserved0);
                boxSize += stream.ReadUInt32(out this.duration0);
            }
            boxSize += stream.ReadUInt32Array(2, out this.reserved1);
            boxSize += stream.ReadInt16(out this.layer);
            boxSize += stream.ReadInt16(out this.alternate_group);
            boxSize += stream.ReadInt16(out this.volume);
            boxSize += stream.ReadUInt16(out this.reserved2);
            boxSize += stream.ReadUInt32Array(9, out this.matrix); // unity matrix
            boxSize += stream.ReadUInt32(out this.width);
            boxSize += stream.ReadUInt32(out this.height);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            if (version == 1)
            {
                boxSize += stream.WriteUInt64(this.creation_time);
                boxSize += stream.WriteUInt64(this.modification_time);
                boxSize += stream.WriteUInt32(this.track_ID);
                boxSize += stream.WriteUInt32(this.reserved);
                boxSize += stream.WriteUInt64(this.duration);
            }

            else
            {
                /*  version==0 */
                boxSize += stream.WriteUInt32(this.creation_time0);
                boxSize += stream.WriteUInt32(this.modification_time0);
                boxSize += stream.WriteUInt32(this.track_ID0);
                boxSize += stream.WriteUInt32(this.reserved0);
                boxSize += stream.WriteUInt32(this.duration0);
            }
            boxSize += stream.WriteUInt32Array(2, this.reserved1);
            boxSize += stream.WriteInt16(this.layer);
            boxSize += stream.WriteInt16(this.alternate_group);
            boxSize += stream.WriteInt16(this.volume);
            boxSize += stream.WriteUInt16(this.reserved2);
            boxSize += stream.WriteUInt32Array(9, this.matrix); // unity matrix
            boxSize += stream.WriteUInt32(this.width);
            boxSize += stream.WriteUInt32(this.height);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            if (version == 1)
            {
                boxSize += 64; // creation_time
                boxSize += 64; // modification_time
                boxSize += 32; // track_ID
                boxSize += 32; // reserved
                boxSize += 64; // duration
            }

            else
            {
                /*  version==0 */
                boxSize += 32; // creation_time0
                boxSize += 32; // modification_time0
                boxSize += 32; // track_ID0
                boxSize += 32; // reserved0
                boxSize += 32; // duration0
            }
            boxSize += 2 * 32; // reserved1
            boxSize += 16; // layer
            boxSize += 16; // alternate_group
            boxSize += 16; // volume
            boxSize += 16; // reserved2
            boxSize += 9 * 32; // matrix
            boxSize += 32; // width
            boxSize += 32; // height
            return boxSize;
        }
    }


    /*
    aligned(8) class TrackFragmentBox extends Box('traf'){
    }
    */
    public class TrackFragmentBox : Box
    {
        public const string FourCC = "traf";

        public TrackFragmentBox() : base("traf")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class TrackBox extends Box('trak') {
    }
    */
    public class TrackBox : Box
    {
        public const string FourCC = "trak";

        public TrackBox() : base("trak")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class TrackReferenceBox extends Box('tref') {
        TrackReferenceTypeBox [];
    }
    */
    public class TrackReferenceBox : Box
    {
        public const string FourCC = "tref";

        protected TrackReferenceTypeBox[] TrackReferenceTypeBox;
        public TrackReferenceTypeBox[] _TrackReferenceTypeBox { get { return this.TrackReferenceTypeBox; } set { this.TrackReferenceTypeBox = value; } }

        public TrackReferenceBox() : base("tref")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.TrackReferenceTypeBox);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.TrackReferenceTypeBox);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(TrackReferenceTypeBox); // TrackReferenceTypeBox
            return boxSize;
        }
    }


    /*
    class TrackExtensionPropertiesBox extends FullBox('trep', 0, 0) {
        unsigned int(32) track_ID;
        // Any number of boxes may follow
    }
    */
    public class TrackExtensionPropertiesBox : FullBox
    {
        public const string FourCC = "trep";

        protected uint track_ID;  //  Any number of boxes may follow
        public uint TrackID { get { return this.track_ID; } set { this.track_ID = value; } }

        public TrackExtensionPropertiesBox() : base("trep", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.track_ID); // Any number of boxes may follow
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.track_ID); // Any number of boxes may follow
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_ID
            return boxSize;
        }
    }


    /*
    aligned(8) class TrackExtendsBox extends FullBox('trex', 0, 0){
        unsigned int(32)	track_ID;
        unsigned int(32)	default_sample_description_index;
        unsigned int(32)	default_sample_duration;
        unsigned int(32)	default_sample_size;
        unsigned int(32)	default_sample_flags;
    }
    */
    public class TrackExtendsBox : FullBox
    {
        public const string FourCC = "trex";

        protected uint track_ID;
        public uint TrackID { get { return this.track_ID; } set { this.track_ID = value; } }

        protected uint default_sample_description_index;
        public uint DefaultSampleDescriptionIndex { get { return this.default_sample_description_index; } set { this.default_sample_description_index = value; } }

        protected uint default_sample_duration;
        public uint DefaultSampleDuration { get { return this.default_sample_duration; } set { this.default_sample_duration = value; } }

        protected uint default_sample_size;
        public uint DefaultSampleSize { get { return this.default_sample_size; } set { this.default_sample_size = value; } }

        protected uint default_sample_flags;
        public uint DefaultSampleFlags { get { return this.default_sample_flags; } set { this.default_sample_flags = value; } }

        public TrackExtendsBox() : base("trex", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.track_ID);
            boxSize += stream.ReadUInt32(out this.default_sample_description_index);
            boxSize += stream.ReadUInt32(out this.default_sample_duration);
            boxSize += stream.ReadUInt32(out this.default_sample_size);
            boxSize += stream.ReadUInt32(out this.default_sample_flags);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.track_ID);
            boxSize += stream.WriteUInt32(this.default_sample_description_index);
            boxSize += stream.WriteUInt32(this.default_sample_duration);
            boxSize += stream.WriteUInt32(this.default_sample_size);
            boxSize += stream.WriteUInt32(this.default_sample_flags);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_ID
            boxSize += 32; // default_sample_description_index
            boxSize += 32; // default_sample_duration
            boxSize += 32; // default_sample_size
            boxSize += 32; // default_sample_flags
            return boxSize;
        }
    }


    /*
    aligned(8) class TrackGroupBox extends Box('trgr') {
    }
    */
    public class TrackGroupBox : Box
    {
        public const string FourCC = "trgr";

        public TrackGroupBox() : base("trgr")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class TrackRunBox
                extends FullBox('trun', version, tr_flags) {
        unsigned int(32)	sample_count;
        // the following are optional fields
        signed int(32)	data_offset;
        unsigned int(32)	first_sample_flags;
        // all fields in the following array are optional
        // as indicated by bits set in the tr_flags
        {
            unsigned int(32)	sample_duration;
            unsigned int(32)	sample_size;
            unsigned int(32)	sample_flags;
            if (version == 0)
                { unsigned int(32)	sample_composition_time_offset; }
            else
                { signed int(32)		sample_composition_time_offset; }
        }[ sample_count ]
    }
    */
    public class TrackRunBox : FullBox
    {
        public const string FourCC = "trun";

        protected uint sample_count;  //  the following are optional fields
        public uint SampleCount { get { return this.sample_count; } set { this.sample_count = value; } }

        protected int data_offset;
        public int DataOffset { get { return this.data_offset; } set { this.data_offset = value; } }

        protected uint first_sample_flags;  //  all fields in the following array are optional
        public uint FirstSampleFlags { get { return this.first_sample_flags; } set { this.first_sample_flags = value; } }

        public TrackRunBox(byte version = 0, uint tr_flags = 0) : base("trun", version, tr_flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += stream.ReadUInt32(out this.sample_count); // the following are optional fields
            boxSize += stream.ReadInt32(out this.data_offset);
            if (boxSize < size) boxSize += stream.ReadUInt32(out this.first_sample_flags); // all fields in the following array are optional
            /*  as indicated by bits set in the tr_flags */

            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.sample_count != null) boxSize += stream.WriteUInt32(this.sample_count); // the following are optional fields
            boxSize += stream.WriteInt32(this.data_offset);
            if (this.first_sample_flags != null) boxSize += stream.WriteUInt32(this.first_sample_flags); // all fields in the following array are optional
            /*  as indicated by bits set in the tr_flags */

            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.sample_count != null) boxSize += 32; // sample_count
            boxSize += 32; // data_offset
            if (this.first_sample_flags != null) boxSize += 32; // first_sample_flags
            /*  as indicated by bits set in the tr_flags */

            return boxSize;
        }
    }


    /*
    aligned(8) class TrackTypeBox extends GeneralTypeBox ('ttyp')
    {}
    */
    public class TrackTypeBox : GeneralTypeBox
    {
        public const string FourCC = "ttyp";

        public TrackTypeBox() : base("ttyp")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class TypeCombinationBox extends Box('tyco') {
        unsigned int(32)	compatible_brands[];	// to end of the box
    }
    */
    public class TypeCombinationBox : Box
    {
        public const string FourCC = "tyco";

        protected uint[] compatible_brands;  //  to end of the box
        public uint[] CompatibleBrands { get { return this.compatible_brands; } set { this.compatible_brands = value; } }

        public TypeCombinationBox() : base("tyco")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32Array(out this.compatible_brands); // to end of the box
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32Array(this.compatible_brands); // to end of the box
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // compatible_brands
            return boxSize;
        }
    }


    /*
    aligned(8) class UserDataBox extends Box('udta') {
    }
    */
    public class UserDataBox : Box
    {
        public const string FourCC = "udta";

        public UserDataBox() : base("udta")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class BoxHeader (
            unsigned int(32) boxtype,
            optional unsigned int(8)[16] extended_type) {
        unsigned int(32) size;
        unsigned int(32) type = boxtype;
        if (size==1) {
            unsigned int(64) largesize;
        } else if (size==0) {
            // box extends to end of file
        }
        if (type=='uuid') {
            unsigned int(8)[16] usertype = extended_type;
        }
    }
    */
    public class BoxHeader
    {


        protected uint size;
        public uint Size { get { return this.size; } set { this.size = value; } }

        protected uint type; // = boxtype
        public uint Type { get { return this.type; } set { this.type = value; } }

        protected ulong largesize;
        public ulong Largesize { get { return this.largesize; } set { this.largesize = value; } }

        protected byte[] usertype; // = extended_type
        public byte[] Usertype { get { return this.usertype; } set { this.usertype = value; } }

        public BoxHeader(string boxtype, byte[] extended_type) : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUInt32(out this.size);
            boxSize += stream.ReadUInt32(out this.type);

            if (size == 1)
            {
                boxSize += stream.ReadUInt64(out this.largesize);
            }

            else if (size == 0)
            {
                /*  box extends to end of file */
            }

            if (type == IsoStream.FromFourCC("uuid"))
            {
                boxSize += stream.ReadBytes(16, out this.usertype);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUInt32(this.size);
            boxSize += stream.WriteUInt32(this.type);

            if (size == 1)
            {
                boxSize += stream.WriteUInt64(this.largesize);
            }

            else if (size == 0)
            {
                /*  box extends to end of file */
            }

            if (type == IsoStream.FromFourCC("uuid"))
            {
                boxSize += stream.WriteBytes(16, this.usertype);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 32; // size
            boxSize += 32; // type

            if (size == 1)
            {
                boxSize += 64; // largesize
            }

            else if (size == 0)
            {
                /*  box extends to end of file */
            }

            if (type == IsoStream.FromFourCC("uuid"))
            {
                boxSize += 16 * 8; // usertype
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class VideoMediaHeaderBox
        extends FullBox('vmhd', version = 0, 1) {
        template unsigned int(16)		graphicsmode = 0;	// copy, see below
        template unsigned int(16)[3]	opcolor = {0, 0, 0};
    }
    */
    public class VideoMediaHeaderBox : FullBox
    {
        public const string FourCC = "vmhd";

        protected ushort graphicsmode = 0;  //  copy, see below
        public ushort Graphicsmode { get { return this.graphicsmode; } set { this.graphicsmode = value; } }

        protected ushort[] opcolor = { 0, 0, 0 };
        public ushort[] Opcolor { get { return this.opcolor; } set { this.opcolor = value; } }

        public VideoMediaHeaderBox() : base("vmhd", 0, 1)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.graphicsmode); // copy, see below
            boxSize += stream.ReadUInt16Array(3, out this.opcolor);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.graphicsmode); // copy, see below
            boxSize += stream.WriteUInt16Array(3, this.opcolor);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // graphicsmode
            boxSize += 3 * 16; // opcolor
            return boxSize;
        }
    }


    /*
    aligned(8) class XMLBox
        extends FullBox('xml ', version = 0, 0) {
        utfstring xml;
    }
    */
    public class XMLBox : FullBox
    {
        public const string FourCC = "xml ";

        protected string xml;
        public string Xml { get { return this.xml; } set { this.xml = value; } }

        public XMLBox() : base("xml ", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadString(out this.xml);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteString(this.xml);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)xml.Length * 8; // xml
            return boxSize;
        }
    }


    /*
    class AmbientViewingEnvironmentBox extends Box('amve'){
        unsigned int(32) ambient_illuminance; 
        unsigned int(16) ambient_light_x;
        unsigned int(16) ambient_light_y;
    }
    */
    public class AmbientViewingEnvironmentBox : Box
    {
        public const string FourCC = "amve";

        protected uint ambient_illuminance;
        public uint AmbientIlluminance { get { return this.ambient_illuminance; } set { this.ambient_illuminance = value; } }

        protected ushort ambient_light_x;
        public ushort AmbientLightx { get { return this.ambient_light_x; } set { this.ambient_light_x = value; } }

        protected ushort ambient_light_y;
        public ushort AmbientLighty { get { return this.ambient_light_y; } set { this.ambient_light_y = value; } }

        public AmbientViewingEnvironmentBox() : base("amve")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.ambient_illuminance);
            boxSize += stream.ReadUInt16(out this.ambient_light_x);
            boxSize += stream.ReadUInt16(out this.ambient_light_y);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.ambient_illuminance);
            boxSize += stream.WriteUInt16(this.ambient_light_x);
            boxSize += stream.WriteUInt16(this.ambient_light_y);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // ambient_illuminance
            boxSize += 16; // ambient_light_x
            boxSize += 16; // ambient_light_y
            return boxSize;
        }
    }


    /*
    class MetaDataKeyTableBox extends Box('keys') { 
        MetaDataKeyBox[];
    }
    */
    public class MetaDataKeyTableBox : Box
    {
        public const string FourCC = "keys";

        protected MetaDataKeyBox[] MetaDataKeyBox;
        public MetaDataKeyBox[] _MetaDataKeyBox { get { return this.MetaDataKeyBox; } set { this.MetaDataKeyBox = value; } }

        public MetaDataKeyTableBox() : base("keys")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.MetaDataKeyBox);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.MetaDataKeyBox);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(MetaDataKeyBox); // MetaDataKeyBox
            return boxSize;
        }
    }


    /*
    class URIBox extends FullBox('uri ', version = 0, 0) {
        utf8string theURI;
    }
    */
    public class URIBox : FullBox
    {
        public const string FourCC = "uri ";

        protected string theURI;
        public string TheURI { get { return this.theURI; } set { this.theURI = value; } }

        public URIBox() : base("uri ", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadString(out this.theURI);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteString(this.theURI);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)theURI.Length * 8; // theURI
            return boxSize;
        }
    }


    /*
    class IroiInfoBox extends Box('iroi'){
        unsigned int(2) iroi_type;
        bit(6) reserved = 0;
        if(iroi_type == 0) { 
            unsigned int(8) grid_roi_mb_width;
            unsigned int(8) grid_roi_mb_height;
        }
        else if(iroi_type == 1){
            unsigned int(24) num_roi;
            for(i=1; i<= num_roi; i++) {
                unsigned int(32) top_left_mb;
                unsigned int(8) roi_mb_width;
                unsigned int(8) roi_mb_height;
            }
        }
    }
    */
    public class IroiInfoBox : Box
    {
        public const string FourCC = "iroi";

        protected byte iroi_type;
        public byte IroiType { get { return this.iroi_type; } set { this.iroi_type = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte grid_roi_mb_width;
        public byte GridRoiMbWidth { get { return this.grid_roi_mb_width; } set { this.grid_roi_mb_width = value; } }

        protected byte grid_roi_mb_height;
        public byte GridRoiMbHeight { get { return this.grid_roi_mb_height; } set { this.grid_roi_mb_height = value; } }

        protected uint num_roi;
        public uint NumRoi { get { return this.num_roi; } set { this.num_roi = value; } }

        protected uint top_left_mb;
        public uint TopLeftMb { get { return this.top_left_mb; } set { this.top_left_mb = value; } }

        protected byte roi_mb_width;
        public byte RoiMbWidth { get { return this.roi_mb_width; } set { this.roi_mb_width = value; } }

        protected byte roi_mb_height;
        public byte RoiMbHeight { get { return this.roi_mb_height; } set { this.roi_mb_height = value; } }

        public IroiInfoBox() : base("iroi")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(2, out this.iroi_type);
            boxSize += stream.ReadBits(6, out this.reserved);

            if (iroi_type == 0)
            {
                boxSize += stream.ReadUInt8(out this.grid_roi_mb_width);
                boxSize += stream.ReadUInt8(out this.grid_roi_mb_height);
            }

            else if (iroi_type == 1)
            {
                boxSize += stream.ReadUInt24(out this.num_roi);

                for (int i = 1; i <= num_roi; i++)
                {
                    boxSize += stream.ReadUInt32(out this.top_left_mb);
                    boxSize += stream.ReadUInt8(out this.roi_mb_width);
                    boxSize += stream.ReadUInt8(out this.roi_mb_height);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(2, this.iroi_type);
            boxSize += stream.WriteBits(6, this.reserved);

            if (iroi_type == 0)
            {
                boxSize += stream.WriteUInt8(this.grid_roi_mb_width);
                boxSize += stream.WriteUInt8(this.grid_roi_mb_height);
            }

            else if (iroi_type == 1)
            {
                boxSize += stream.WriteUInt24(this.num_roi);

                for (int i = 1; i <= num_roi; i++)
                {
                    boxSize += stream.WriteUInt32(this.top_left_mb);
                    boxSize += stream.WriteUInt8(this.roi_mb_width);
                    boxSize += stream.WriteUInt8(this.roi_mb_height);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 2; // iroi_type
            boxSize += 6; // reserved

            if (iroi_type == 0)
            {
                boxSize += 8; // grid_roi_mb_width
                boxSize += 8; // grid_roi_mb_height
            }

            else if (iroi_type == 1)
            {
                boxSize += 24; // num_roi

                for (int i = 1; i <= num_roi; i++)
                {
                    boxSize += 32; // top_left_mb
                    boxSize += 8; // roi_mb_width
                    boxSize += 8; // roi_mb_height
                }
            }
            return boxSize;
        }
    }


    /*
    class TierDependencyBox extends Box('ldep'){
        unsigned int(16) entry_count; 
        for (i=0; i < entry_count; i++)
            unsigned int(16) dependencyTierId;
    }
    */
    public class TierDependencyBox : Box
    {
        public const string FourCC = "ldep";

        protected ushort entry_count;
        public ushort EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected ushort dependencyTierId;
        public ushort DependencyTierId { get { return this.dependencyTierId; } set { this.dependencyTierId = value; } }

        public TierDependencyBox() : base("ldep")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.entry_count);

            for (int i = 0; i < entry_count; i++)
            {
                boxSize += stream.ReadUInt16(out this.dependencyTierId);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.entry_count);

            for (int i = 0; i < entry_count; i++)
            {
                boxSize += stream.WriteUInt16(this.dependencyTierId);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // entry_count

            for (int i = 0; i < entry_count; i++)
            {
                boxSize += 16; // dependencyTierId
            }
            return boxSize;
        }
    }


    /*
    class SVCDependencyRangeBox extends Box('svdr') {
        unsigned int(3) min_dependency_id;
        unsigned int(3) min_temporal_id;
        bit(6) reserved = 0;
        unsigned int(4) min_quality_id;
        unsigned int(3) max_dependency_id;
        unsigned int(3) max_temporal_id;
        bit(6) reserved = 0;
        unsigned int(4) max_quality_id;
    }
    */
    public class SVCDependencyRangeBox : Box
    {
        public const string FourCC = "svdr";

        protected byte min_dependency_id;
        public byte MinDependencyId { get { return this.min_dependency_id; } set { this.min_dependency_id = value; } }

        protected byte min_temporal_id;
        public byte MinTemporalId { get { return this.min_temporal_id; } set { this.min_temporal_id = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte min_quality_id;
        public byte MinQualityId { get { return this.min_quality_id; } set { this.min_quality_id = value; } }

        protected byte max_dependency_id;
        public byte MaxDependencyId { get { return this.max_dependency_id; } set { this.max_dependency_id = value; } }

        protected byte max_temporal_id;
        public byte MaxTemporalId { get { return this.max_temporal_id; } set { this.max_temporal_id = value; } }

        protected byte reserved0 = 0;
        public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected byte max_quality_id;
        public byte MaxQualityId { get { return this.max_quality_id; } set { this.max_quality_id = value; } }

        public SVCDependencyRangeBox() : base("svdr")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(3, out this.min_dependency_id);
            boxSize += stream.ReadBits(3, out this.min_temporal_id);
            boxSize += stream.ReadBits(6, out this.reserved);
            boxSize += stream.ReadBits(4, out this.min_quality_id);
            boxSize += stream.ReadBits(3, out this.max_dependency_id);
            boxSize += stream.ReadBits(3, out this.max_temporal_id);
            boxSize += stream.ReadBits(6, out this.reserved0);
            boxSize += stream.ReadBits(4, out this.max_quality_id);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(3, this.min_dependency_id);
            boxSize += stream.WriteBits(3, this.min_temporal_id);
            boxSize += stream.WriteBits(6, this.reserved);
            boxSize += stream.WriteBits(4, this.min_quality_id);
            boxSize += stream.WriteBits(3, this.max_dependency_id);
            boxSize += stream.WriteBits(3, this.max_temporal_id);
            boxSize += stream.WriteBits(6, this.reserved0);
            boxSize += stream.WriteBits(4, this.max_quality_id);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 3; // min_dependency_id
            boxSize += 3; // min_temporal_id
            boxSize += 6; // reserved
            boxSize += 4; // min_quality_id
            boxSize += 3; // max_dependency_id
            boxSize += 3; // max_temporal_id
            boxSize += 6; // reserved0
            boxSize += 4; // max_quality_id
            return boxSize;
        }
    }


    /*
    class InitialParameterSetBox extends Box ('svip') {
        unsigned int(8) sps_id_count;
        for (i=0; i< sps_id_count; i++)
            unsigned int(8) SPS_index;
        unsigned int(8) pps_id_count;
        for (i=0; i< pps_id_count; i++)
            unsigned int(8) PPS_index;
    }
    */
    public class InitialParameterSetBox : Box
    {
        public const string FourCC = "svip";

        protected byte sps_id_count;
        public byte SpsIdCount { get { return this.sps_id_count; } set { this.sps_id_count = value; } }

        protected byte SPS_index;
        public byte SPSIndex { get { return this.SPS_index; } set { this.SPS_index = value; } }

        protected byte pps_id_count;
        public byte PpsIdCount { get { return this.pps_id_count; } set { this.pps_id_count = value; } }

        protected byte PPS_index;
        public byte PPSIndex { get { return this.PPS_index; } set { this.PPS_index = value; } }

        public InitialParameterSetBox() : base("svip")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.sps_id_count);

            for (int i = 0; i < sps_id_count; i++)
            {
                boxSize += stream.ReadUInt8(out this.SPS_index);
            }
            boxSize += stream.ReadUInt8(out this.pps_id_count);

            for (int i = 0; i < pps_id_count; i++)
            {
                boxSize += stream.ReadUInt8(out this.PPS_index);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.sps_id_count);

            for (int i = 0; i < sps_id_count; i++)
            {
                boxSize += stream.WriteUInt8(this.SPS_index);
            }
            boxSize += stream.WriteUInt8(this.pps_id_count);

            for (int i = 0; i < pps_id_count; i++)
            {
                boxSize += stream.WriteUInt8(this.PPS_index);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // sps_id_count

            for (int i = 0; i < sps_id_count; i++)
            {
                boxSize += 8; // SPS_index
            }
            boxSize += 8; // pps_id_count

            for (int i = 0; i < pps_id_count; i++)
            {
                boxSize += 8; // PPS_index
            }
            return boxSize;
        }
    }


    /*
    class PriorityRangeBox extends Box('svpr') {
        bit(2) reserved1 = 0;
        unsigned int(6) min_priorityId;
        bit(2) reserved2 = 0;
        unsigned int(6) max_priorityId;
    }
    */
    public class PriorityRangeBox : Box
    {
        public const string FourCC = "svpr";

        protected byte reserved1 = 0;
        public byte Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

        protected byte min_priorityId;
        public byte MinPriorityId { get { return this.min_priorityId; } set { this.min_priorityId = value; } }

        protected byte reserved2 = 0;
        public byte Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

        protected byte max_priorityId;
        public byte MaxPriorityId { get { return this.max_priorityId; } set { this.max_priorityId = value; } }

        public PriorityRangeBox() : base("svpr")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(2, out this.reserved1);
            boxSize += stream.ReadBits(6, out this.min_priorityId);
            boxSize += stream.ReadBits(2, out this.reserved2);
            boxSize += stream.ReadBits(6, out this.max_priorityId);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(2, this.reserved1);
            boxSize += stream.WriteBits(6, this.min_priorityId);
            boxSize += stream.WriteBits(2, this.reserved2);
            boxSize += stream.WriteBits(6, this.max_priorityId);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 2; // reserved1
            boxSize += 6; // min_priorityId
            boxSize += 2; // reserved2
            boxSize += 6; // max_priorityId
            return boxSize;
        }
    }


    /*
    class TranscodingInfoBox extends Box('tran'){
        bit(4) reserved = 0;
        unsigned int(2) conversion_idc;
        unsigned int(1) cavlc_info_present_flag;
        unsigned int(1) cabac_info_present_flag;
        if(cavlc_info_present_flag){
            unsigned int(24) cavlc_profile_level_idc;
            unsigned int(32) cavlc_max_bitrate;
            unsigned int(32) cavlc_avg_bitrate;
        }
        if(cabac_info_present_flag){
            unsigned int(24) cabac_profile_level_idc;
            unsigned int(32) cabac_max_bitrate;
            unsigned int(32) cabac_avg_bitrate;
        }
    }
    */
    public class TranscodingInfoBox : Box
    {
        public const string FourCC = "tran";

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte conversion_idc;
        public byte ConversionIdc { get { return this.conversion_idc; } set { this.conversion_idc = value; } }

        protected bool cavlc_info_present_flag;
        public bool CavlcInfoPresentFlag { get { return this.cavlc_info_present_flag; } set { this.cavlc_info_present_flag = value; } }

        protected bool cabac_info_present_flag;
        public bool CabacInfoPresentFlag { get { return this.cabac_info_present_flag; } set { this.cabac_info_present_flag = value; } }

        protected uint cavlc_profile_level_idc;
        public uint CavlcProfileLevelIdc { get { return this.cavlc_profile_level_idc; } set { this.cavlc_profile_level_idc = value; } }

        protected uint cavlc_max_bitrate;
        public uint CavlcMaxBitrate { get { return this.cavlc_max_bitrate; } set { this.cavlc_max_bitrate = value; } }

        protected uint cavlc_avg_bitrate;
        public uint CavlcAvgBitrate { get { return this.cavlc_avg_bitrate; } set { this.cavlc_avg_bitrate = value; } }

        protected uint cabac_profile_level_idc;
        public uint CabacProfileLevelIdc { get { return this.cabac_profile_level_idc; } set { this.cabac_profile_level_idc = value; } }

        protected uint cabac_max_bitrate;
        public uint CabacMaxBitrate { get { return this.cabac_max_bitrate; } set { this.cabac_max_bitrate = value; } }

        protected uint cabac_avg_bitrate;
        public uint CabacAvgBitrate { get { return this.cabac_avg_bitrate; } set { this.cabac_avg_bitrate = value; } }

        public TranscodingInfoBox() : base("tran")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(4, out this.reserved);
            boxSize += stream.ReadBits(2, out this.conversion_idc);
            boxSize += stream.ReadBit(out this.cavlc_info_present_flag);
            boxSize += stream.ReadBit(out this.cabac_info_present_flag);

            if (cavlc_info_present_flag)
            {
                boxSize += stream.ReadUInt24(out this.cavlc_profile_level_idc);
                boxSize += stream.ReadUInt32(out this.cavlc_max_bitrate);
                boxSize += stream.ReadUInt32(out this.cavlc_avg_bitrate);
            }

            if (cabac_info_present_flag)
            {
                boxSize += stream.ReadUInt24(out this.cabac_profile_level_idc);
                boxSize += stream.ReadUInt32(out this.cabac_max_bitrate);
                boxSize += stream.ReadUInt32(out this.cabac_avg_bitrate);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(4, this.reserved);
            boxSize += stream.WriteBits(2, this.conversion_idc);
            boxSize += stream.WriteBit(this.cavlc_info_present_flag);
            boxSize += stream.WriteBit(this.cabac_info_present_flag);

            if (cavlc_info_present_flag)
            {
                boxSize += stream.WriteUInt24(this.cavlc_profile_level_idc);
                boxSize += stream.WriteUInt32(this.cavlc_max_bitrate);
                boxSize += stream.WriteUInt32(this.cavlc_avg_bitrate);
            }

            if (cabac_info_present_flag)
            {
                boxSize += stream.WriteUInt24(this.cabac_profile_level_idc);
                boxSize += stream.WriteUInt32(this.cabac_max_bitrate);
                boxSize += stream.WriteUInt32(this.cabac_avg_bitrate);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 4; // reserved
            boxSize += 2; // conversion_idc
            boxSize += 1; // cavlc_info_present_flag
            boxSize += 1; // cabac_info_present_flag

            if (cavlc_info_present_flag)
            {
                boxSize += 24; // cavlc_profile_level_idc
                boxSize += 32; // cavlc_max_bitrate
                boxSize += 32; // cavlc_avg_bitrate
            }

            if (cabac_info_present_flag)
            {
                boxSize += 24; // cabac_profile_level_idc
                boxSize += 32; // cabac_max_bitrate
                boxSize += 32; // cabac_avg_bitrate
            }
            return boxSize;
        }
    }


    /*
    class RectRegionBox extends Box('rrgn'){
        unsigned int(16) base_region_tierID;
        unsigned int(1) dynamic_rect;
        bit(7) reserved = 0;
        if(dynamic_rect == 0) { 
            unsigned int(16) horizontal_offset;
            unsigned int(16) vertical_offset;
            unsigned int(16) region_width;
            unsigned int(16) region_height;
        }
    }
    */
    public class RectRegionBox : Box
    {
        public const string FourCC = "rrgn";

        protected ushort base_region_tierID;
        public ushort BaseRegionTierID { get { return this.base_region_tierID; } set { this.base_region_tierID = value; } }

        protected bool dynamic_rect;
        public bool DynamicRect { get { return this.dynamic_rect; } set { this.dynamic_rect = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected ushort horizontal_offset;
        public ushort HorizontalOffset { get { return this.horizontal_offset; } set { this.horizontal_offset = value; } }

        protected ushort vertical_offset;
        public ushort VerticalOffset { get { return this.vertical_offset; } set { this.vertical_offset = value; } }

        protected ushort region_width;
        public ushort RegionWidth { get { return this.region_width; } set { this.region_width = value; } }

        protected ushort region_height;
        public ushort RegionHeight { get { return this.region_height; } set { this.region_height = value; } }

        public RectRegionBox() : base("rrgn")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.base_region_tierID);
            boxSize += stream.ReadBit(out this.dynamic_rect);
            boxSize += stream.ReadBits(7, out this.reserved);

            if (dynamic_rect == false)
            {
                boxSize += stream.ReadUInt16(out this.horizontal_offset);
                boxSize += stream.ReadUInt16(out this.vertical_offset);
                boxSize += stream.ReadUInt16(out this.region_width);
                boxSize += stream.ReadUInt16(out this.region_height);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.base_region_tierID);
            boxSize += stream.WriteBit(this.dynamic_rect);
            boxSize += stream.WriteBits(7, this.reserved);

            if (dynamic_rect == false)
            {
                boxSize += stream.WriteUInt16(this.horizontal_offset);
                boxSize += stream.WriteUInt16(this.vertical_offset);
                boxSize += stream.WriteUInt16(this.region_width);
                boxSize += stream.WriteUInt16(this.region_height);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // base_region_tierID
            boxSize += 1; // dynamic_rect
            boxSize += 7; // reserved

            if (dynamic_rect == false)
            {
                boxSize += 16; // horizontal_offset
                boxSize += 16; // vertical_offset
                boxSize += 16; // region_width
                boxSize += 16; // region_height
            }
            return boxSize;
        }
    }


    /*
    class BufferingBox extends Box('buff'){
        unsigned int(16) 		operating_point_count
    ;	for (i = 0; i < operating_point_count; i++){
            unsigned int (32) 	byte_rate;
            unsigned int (32) 	cpb_size;
            unsigned int (32) 	dpb_size;
            unsigned int (32)		init_cpb_delay;
            unsigned int (32) 	init_dpb_delay;
        }
    }
    */
    public class BufferingBox : Box
    {
        public const string FourCC = "buff";

        protected ushort operating_point_count;
        public ushort OperatingPointCount { get { return this.operating_point_count; } set { this.operating_point_count = value; } }

        protected uint byte_rate;
        public uint ByteRate { get { return this.byte_rate; } set { this.byte_rate = value; } }

        protected uint cpb_size;
        public uint CpbSize { get { return this.cpb_size; } set { this.cpb_size = value; } }

        protected uint dpb_size;
        public uint DpbSize { get { return this.dpb_size; } set { this.dpb_size = value; } }

        protected uint init_cpb_delay;
        public uint InitCpbDelay { get { return this.init_cpb_delay; } set { this.init_cpb_delay = value; } }

        protected uint init_dpb_delay;
        public uint InitDpbDelay { get { return this.init_dpb_delay; } set { this.init_dpb_delay = value; } }

        public BufferingBox() : base("buff")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.operating_point_count);

            for (int i = 0; i < operating_point_count; i++)
            {
                boxSize += stream.ReadUInt32(out this.byte_rate);
                boxSize += stream.ReadUInt32(out this.cpb_size);
                boxSize += stream.ReadUInt32(out this.dpb_size);
                boxSize += stream.ReadUInt32(out this.init_cpb_delay);
                boxSize += stream.ReadUInt32(out this.init_dpb_delay);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.operating_point_count);

            for (int i = 0; i < operating_point_count; i++)
            {
                boxSize += stream.WriteUInt32(this.byte_rate);
                boxSize += stream.WriteUInt32(this.cpb_size);
                boxSize += stream.WriteUInt32(this.dpb_size);
                boxSize += stream.WriteUInt32(this.init_cpb_delay);
                boxSize += stream.WriteUInt32(this.init_dpb_delay);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // operating_point_count

            for (int i = 0; i < operating_point_count; i++)
            {
                boxSize += 32; // byte_rate
                boxSize += 32; // cpb_size
                boxSize += 32; // dpb_size
                boxSize += 32; // init_cpb_delay
                boxSize += 32; // init_dpb_delay
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class MVCSubTrackViewBox
        extends FullBox('mstv', 0, 0) {
        unsigned int(16) item_count;
        for(i = 0; i< item_count; i++) {
            unsigned int(10)	view_id;
            unsigned int(4)	temporal_id;
            unsigned int(2)	reserved;
        }
    }
    */
    public class MVCSubTrackViewBox : FullBox
    {
        public const string FourCC = "mstv";

        protected ushort item_count;
        public ushort ItemCount { get { return this.item_count; } set { this.item_count = value; } }

        protected ushort view_id;
        public ushort ViewId { get { return this.view_id; } set { this.view_id = value; } }

        protected byte temporal_id;
        public byte TemporalId { get { return this.temporal_id; } set { this.temporal_id = value; } }

        protected byte reserved;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        public MVCSubTrackViewBox() : base("mstv", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += stream.ReadBits(10, out this.view_id);
                boxSize += stream.ReadBits(4, out this.temporal_id);
                boxSize += stream.ReadBits(2, out this.reserved);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += stream.WriteBits(10, this.view_id);
                boxSize += stream.WriteBits(4, this.temporal_id);
                boxSize += stream.WriteBits(2, this.reserved);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // item_count

            for (int i = 0; i < item_count; i++)
            {
                boxSize += 10; // view_id
                boxSize += 4; // temporal_id
                boxSize += 2; // reserved
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class MultiviewGroupBox extends FullBox('mvcg', version = 0, flags) {
        unsigned int(32) multiview_group_id;
        unsigned int(16) num_entries;
        bit(8) reserved = 0;
        for(i=0; i<num_entries; i++) {
            unsigned int(8) entry_type;
            if (entry_type == 0)
                unsigned int(32) track_id;
            else if (entry_type == 1) {
                unsigned int(32) track_id;
                unsigned int(16) tier_id;
            }
            else if (entry_type == 2) {
                bit(6) reserved1 = 0;
                unsigned int(10) output_view_id;
            }
            else if (entry_type == 3) {
                bit(6) reserved2 = 0;
                unsigned int(10) start_view_id;
                unsigned int(16) view_count;
            }
        }
        TierInfoBox subset_stream_info; 			// optional
        MultiviewRelationAttributeBox relation_attributes; // optional
        TierBitRateBox subset_stream_bit_rate; // optional
        BufferingBox subset_stream_buffering; 	// optional
        MultiviewSceneInfoBox multiview_scene_info; 			// optional
    }
    */
    public class MultiviewGroupBox : FullBox
    {
        public const string FourCC = "mvcg";

        protected uint multiview_group_id;
        public uint MultiviewGroupId { get { return this.multiview_group_id; } set { this.multiview_group_id = value; } }

        protected ushort num_entries;
        public ushort NumEntries { get { return this.num_entries; } set { this.num_entries = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte entry_type;
        public byte EntryType { get { return this.entry_type; } set { this.entry_type = value; } }

        protected uint track_id;
        public uint TrackId { get { return this.track_id; } set { this.track_id = value; } }

        protected uint track_id0;
        public uint TrackId0 { get { return this.track_id0; } set { this.track_id0 = value; } }

        protected ushort tier_id;
        public ushort TierId { get { return this.tier_id; } set { this.tier_id = value; } }

        protected byte reserved1 = 0;
        public byte Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

        protected ushort output_view_id;
        public ushort OutputViewId { get { return this.output_view_id; } set { this.output_view_id = value; } }

        protected byte reserved2 = 0;
        public byte Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

        protected ushort start_view_id;
        public ushort StartViewId { get { return this.start_view_id; } set { this.start_view_id = value; } }

        protected ushort view_count;
        public ushort ViewCount { get { return this.view_count; } set { this.view_count = value; } }

        protected TierInfoBox subset_stream_info;  //  optional
        public TierInfoBox SubsetStreamInfo { get { return this.subset_stream_info; } set { this.subset_stream_info = value; } }

        protected MultiviewRelationAttributeBox relation_attributes;  //  optional
        public MultiviewRelationAttributeBox RelationAttributes { get { return this.relation_attributes; } set { this.relation_attributes = value; } }

        protected TierBitRateBox subset_stream_bit_rate;  //  optional
        public TierBitRateBox SubsetStreamBitRate { get { return this.subset_stream_bit_rate; } set { this.subset_stream_bit_rate = value; } }

        protected BufferingBox subset_stream_buffering;  //  optional
        public BufferingBox SubsetStreamBuffering { get { return this.subset_stream_buffering; } set { this.subset_stream_buffering = value; } }

        protected MultiviewSceneInfoBox multiview_scene_info;  //  optional
        public MultiviewSceneInfoBox MultiviewSceneInfo { get { return this.multiview_scene_info; } set { this.multiview_scene_info = value; } }

        public MultiviewGroupBox(uint flags = 0) : base("mvcg", 0, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.multiview_group_id);
            boxSize += stream.ReadUInt16(out this.num_entries);
            boxSize += stream.ReadUInt8(out this.reserved);

            for (int i = 0; i < num_entries; i++)
            {
                boxSize += stream.ReadUInt8(out this.entry_type);

                if (entry_type == 0)
                {
                    boxSize += stream.ReadUInt32(out this.track_id);
                }

                else if (entry_type == 1)
                {
                    boxSize += stream.ReadUInt32(out this.track_id0);
                    boxSize += stream.ReadUInt16(out this.tier_id);
                }

                else if (entry_type == 2)
                {
                    boxSize += stream.ReadBits(6, out this.reserved1);
                    boxSize += stream.ReadBits(10, out this.output_view_id);
                }

                else if (entry_type == 3)
                {
                    boxSize += stream.ReadBits(6, out this.reserved2);
                    boxSize += stream.ReadBits(10, out this.start_view_id);
                    boxSize += stream.ReadUInt16(out this.view_count);
                }
            }
            if (boxSize < size) boxSize += stream.ReadBox(out this.subset_stream_info); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.relation_attributes); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.subset_stream_bit_rate); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.subset_stream_buffering); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.multiview_scene_info); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.multiview_group_id);
            boxSize += stream.WriteUInt16(this.num_entries);
            boxSize += stream.WriteUInt8(this.reserved);

            for (int i = 0; i < num_entries; i++)
            {
                boxSize += stream.WriteUInt8(this.entry_type);

                if (entry_type == 0)
                {
                    boxSize += stream.WriteUInt32(this.track_id);
                }

                else if (entry_type == 1)
                {
                    boxSize += stream.WriteUInt32(this.track_id0);
                    boxSize += stream.WriteUInt16(this.tier_id);
                }

                else if (entry_type == 2)
                {
                    boxSize += stream.WriteBits(6, this.reserved1);
                    boxSize += stream.WriteBits(10, this.output_view_id);
                }

                else if (entry_type == 3)
                {
                    boxSize += stream.WriteBits(6, this.reserved2);
                    boxSize += stream.WriteBits(10, this.start_view_id);
                    boxSize += stream.WriteUInt16(this.view_count);
                }
            }
            if (this.subset_stream_info != null) boxSize += stream.WriteBox(this.subset_stream_info); // optional
            if (this.relation_attributes != null) boxSize += stream.WriteBox(this.relation_attributes); // optional
            if (this.subset_stream_bit_rate != null) boxSize += stream.WriteBox(this.subset_stream_bit_rate); // optional
            if (this.subset_stream_buffering != null) boxSize += stream.WriteBox(this.subset_stream_buffering); // optional
            if (this.multiview_scene_info != null) boxSize += stream.WriteBox(this.multiview_scene_info); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // multiview_group_id
            boxSize += 16; // num_entries
            boxSize += 8; // reserved

            for (int i = 0; i < num_entries; i++)
            {
                boxSize += 8; // entry_type

                if (entry_type == 0)
                {
                    boxSize += 32; // track_id
                }

                else if (entry_type == 1)
                {
                    boxSize += 32; // track_id0
                    boxSize += 16; // tier_id
                }

                else if (entry_type == 2)
                {
                    boxSize += 6; // reserved1
                    boxSize += 10; // output_view_id
                }

                else if (entry_type == 3)
                {
                    boxSize += 6; // reserved2
                    boxSize += 10; // start_view_id
                    boxSize += 16; // view_count
                }
            }
            if (this.subset_stream_info != null) boxSize += IsoStream.CalculateSize(subset_stream_info); // subset_stream_info
            if (this.relation_attributes != null) boxSize += IsoStream.CalculateSize(relation_attributes); // relation_attributes
            if (this.subset_stream_bit_rate != null) boxSize += IsoStream.CalculateSize(subset_stream_bit_rate); // subset_stream_bit_rate
            if (this.subset_stream_buffering != null) boxSize += IsoStream.CalculateSize(subset_stream_buffering); // subset_stream_buffering
            if (this.multiview_scene_info != null) boxSize += IsoStream.CalculateSize(multiview_scene_info); // multiview_scene_info
            return boxSize;
        }
    }


    /*
    aligned(8) class MultiviewInformationBox
        extends FullBox('mvci', version = 0, flags) {
    }
    */
    public class MultiviewInformationBox : FullBox
    {
        public const string FourCC = "mvci";

        public MultiviewInformationBox(uint flags = 0) : base("mvci", 0, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    class MVDDepthResolutionBox extends Box('3dpr')
    {
        unsigned int(16) depth_width;
        unsigned int(16) depth_height;
    /* The following 5 fields are collectively optional; they are either all present or all absent. When grid_pos_num_views is not present, the for loop is not present, equivalent to grid_pos_num_views equal to 0. These fields may be present or absent whenever the box is present (e.g., in MVCDConfigurationBox or A3DConfigurationBox). *//*
        unsigned int(16) depth_hor_mult_minus1; // optional
        unsigned int(16) depth_ver_mult_minus1; // optional
        unsigned int(4) depth_hor_rsh; // optional
        unsigned int(4) depth_ver_rsh; // optional
        unsigned int(16) grid_pos_num_views; // optional
        for(i = 0; i < grid_pos_num_views; i++) {
            bit(6) reserved=0;
            unsigned int(10) grid_pos_view_id[i];
            signed int(16) grid_pos_x[grid_pos_view_id[i]];
            signed int(16) grid_pos_y[grid_pos_view_id[i]];
        }
    }
    */
    public class MVDDepthResolutionBox : Box
    {
        public const string FourCC = "3dpr";

        protected ushort depth_width;
        public ushort DepthWidth { get { return this.depth_width; } set { this.depth_width = value; } }

        protected ushort depth_height;
        public ushort DepthHeight { get { return this.depth_height; } set { this.depth_height = value; } }

        protected ushort depth_hor_mult_minus1;  //  optional
        public ushort DepthHorMultMinus1 { get { return this.depth_hor_mult_minus1; } set { this.depth_hor_mult_minus1 = value; } }

        protected ushort depth_ver_mult_minus1;  //  optional
        public ushort DepthVerMultMinus1 { get { return this.depth_ver_mult_minus1; } set { this.depth_ver_mult_minus1 = value; } }

        protected byte depth_hor_rsh;  //  optional
        public byte DepthHorRsh { get { return this.depth_hor_rsh; } set { this.depth_hor_rsh = value; } }

        protected byte depth_ver_rsh;  //  optional
        public byte DepthVerRsh { get { return this.depth_ver_rsh; } set { this.depth_ver_rsh = value; } }

        protected ushort grid_pos_num_views;  //  optional
        public ushort GridPosNumViews { get { return this.grid_pos_num_views; } set { this.grid_pos_num_views = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected ushort[] grid_pos_view_id;
        public ushort[] GridPosViewId { get { return this.grid_pos_view_id; } set { this.grid_pos_view_id = value; } }

        protected short[] grid_pos_x;
        public short[] GridPosx { get { return this.grid_pos_x; } set { this.grid_pos_x = value; } }

        protected short[] grid_pos_y;
        public short[] GridPosy { get { return this.grid_pos_y; } set { this.grid_pos_y = value; } }

        public MVDDepthResolutionBox() : base("3dpr")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.depth_width);
            boxSize += stream.ReadUInt16(out this.depth_height);
            /*  The following 5 fields are collectively optional; they are either all present or all absent. When grid_pos_num_views is not present, the for loop is not present, equivalent to grid_pos_num_views equal to 0. These fields may be present or absent whenever the box is present (e.g., in MVCDConfigurationBox or A3DConfigurationBox).  */
            if (boxSize < size) boxSize += stream.ReadUInt16(out this.depth_hor_mult_minus1); // optional
            if (boxSize < size) boxSize += stream.ReadUInt16(out this.depth_ver_mult_minus1); // optional
            if (boxSize < size) boxSize += stream.ReadBits(4, out this.depth_hor_rsh); // optional
            if (boxSize < size) boxSize += stream.ReadBits(4, out this.depth_ver_rsh); // optional
            if (boxSize < size) boxSize += stream.ReadUInt16(out this.grid_pos_num_views); // optional

            for (int i = 0; i < grid_pos_num_views; i++)
            {
                boxSize += stream.ReadBits(6, out this.reserved);
                boxSize += stream.ReadBits(10, out this.grid_pos_view_id[i]);
                boxSize += stream.ReadInt16(out this.grid_pos_x[grid_pos_view_id[i]]);
                boxSize += stream.ReadInt16(out this.grid_pos_y[grid_pos_view_id[i]]);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.depth_width);
            boxSize += stream.WriteUInt16(this.depth_height);
            /*  The following 5 fields are collectively optional; they are either all present or all absent. When grid_pos_num_views is not present, the for loop is not present, equivalent to grid_pos_num_views equal to 0. These fields may be present or absent whenever the box is present (e.g., in MVCDConfigurationBox or A3DConfigurationBox).  */
            if (this.depth_hor_mult_minus1 != null) boxSize += stream.WriteUInt16(this.depth_hor_mult_minus1); // optional
            if (this.depth_ver_mult_minus1 != null) boxSize += stream.WriteUInt16(this.depth_ver_mult_minus1); // optional
            if (this.depth_hor_rsh != null) boxSize += stream.WriteBits(4, this.depth_hor_rsh); // optional
            if (this.depth_ver_rsh != null) boxSize += stream.WriteBits(4, this.depth_ver_rsh); // optional
            if (this.grid_pos_num_views != null) boxSize += stream.WriteUInt16(this.grid_pos_num_views); // optional

            for (int i = 0; i < grid_pos_num_views; i++)
            {
                boxSize += stream.WriteBits(6, this.reserved);
                boxSize += stream.WriteBits(10, this.grid_pos_view_id[i]);
                boxSize += stream.WriteInt16(this.grid_pos_x[grid_pos_view_id[i]]);
                boxSize += stream.WriteInt16(this.grid_pos_y[grid_pos_view_id[i]]);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // depth_width
            boxSize += 16; // depth_height
            /*  The following 5 fields are collectively optional; they are either all present or all absent. When grid_pos_num_views is not present, the for loop is not present, equivalent to grid_pos_num_views equal to 0. These fields may be present or absent whenever the box is present (e.g., in MVCDConfigurationBox or A3DConfigurationBox).  */
            if (this.depth_hor_mult_minus1 != null) boxSize += 16; // depth_hor_mult_minus1
            if (this.depth_ver_mult_minus1 != null) boxSize += 16; // depth_ver_mult_minus1
            if (this.depth_hor_rsh != null) boxSize += 4; // depth_hor_rsh
            if (this.depth_ver_rsh != null) boxSize += 4; // depth_ver_rsh
            if (this.grid_pos_num_views != null) boxSize += 16; // grid_pos_num_views

            for (int i = 0; i < grid_pos_num_views; i++)
            {
                boxSize += 6; // reserved
                boxSize += 10; // grid_pos_view_id
                boxSize += 16; // grid_pos_x
                boxSize += 16; // grid_pos_y
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class MultiviewRelationAttributeBox
        extends FullBox('mvra', version = 0, flags) {
        bit(16) reserved1 = 0;
        unsigned int(16) num_common_attributes;
        for (i=0; i<num_common_attributes; i++) {
            unsigned int(32) common_attribute; 
            unsigned int(32) common_value;
        }
        bit(16) reserved2 = 0;
        unsigned int(16) num_differentiating_attributes;
        for (i=0; i<num_differentiating_attributes; i++)
            unsigned int(32) differentiating_attribute;
    }
    */
    public class MultiviewRelationAttributeBox : FullBox
    {
        public const string FourCC = "mvra";

        protected ushort reserved1 = 0;
        public ushort Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

        protected ushort num_common_attributes;
        public ushort NumCommonAttributes { get { return this.num_common_attributes; } set { this.num_common_attributes = value; } }

        protected uint common_attribute;
        public uint CommonAttribute { get { return this.common_attribute; } set { this.common_attribute = value; } }

        protected uint common_value;
        public uint CommonValue { get { return this.common_value; } set { this.common_value = value; } }

        protected ushort reserved2 = 0;
        public ushort Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

        protected ushort num_differentiating_attributes;
        public ushort NumDifferentiatingAttributes { get { return this.num_differentiating_attributes; } set { this.num_differentiating_attributes = value; } }

        protected uint differentiating_attribute;
        public uint DifferentiatingAttribute { get { return this.differentiating_attribute; } set { this.differentiating_attribute = value; } }

        public MultiviewRelationAttributeBox(uint flags = 0) : base("mvra", 0, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.reserved1);
            boxSize += stream.ReadUInt16(out this.num_common_attributes);

            for (int i = 0; i < num_common_attributes; i++)
            {
                boxSize += stream.ReadUInt32(out this.common_attribute);
                boxSize += stream.ReadUInt32(out this.common_value);
            }
            boxSize += stream.ReadUInt16(out this.reserved2);
            boxSize += stream.ReadUInt16(out this.num_differentiating_attributes);

            for (int i = 0; i < num_differentiating_attributes; i++)
            {
                boxSize += stream.ReadUInt32(out this.differentiating_attribute);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.reserved1);
            boxSize += stream.WriteUInt16(this.num_common_attributes);

            for (int i = 0; i < num_common_attributes; i++)
            {
                boxSize += stream.WriteUInt32(this.common_attribute);
                boxSize += stream.WriteUInt32(this.common_value);
            }
            boxSize += stream.WriteUInt16(this.reserved2);
            boxSize += stream.WriteUInt16(this.num_differentiating_attributes);

            for (int i = 0; i < num_differentiating_attributes; i++)
            {
                boxSize += stream.WriteUInt32(this.differentiating_attribute);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // reserved1
            boxSize += 16; // num_common_attributes

            for (int i = 0; i < num_common_attributes; i++)
            {
                boxSize += 32; // common_attribute
                boxSize += 32; // common_value
            }
            boxSize += 16; // reserved2
            boxSize += 16; // num_differentiating_attributes

            for (int i = 0; i < num_differentiating_attributes; i++)
            {
                boxSize += 32; // differentiating_attribute
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SampleDependencyBox 
        extends FullBox('sdep', version = 0, 0) {
        for (i=0; i < sample_count; i++){
            unsigned int(16) dependency_count;
            for (k=0; k < dependency_count; k++) {
                signed int(16) relative_sample_number;
            }
        }
    }
    */
    public class SampleDependencyBox : FullBox
    {
        public const string FourCC = "sdep";

        protected ushort dependency_count;
        public ushort DependencyCount { get { return this.dependency_count; } set { this.dependency_count = value; } }

        protected short relative_sample_number;
        public short RelativeSampleNumber { get { return this.relative_sample_number; } set { this.relative_sample_number = value; } }

        public SampleDependencyBox() : base("sdep", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            int sample_count = 0; // TODO: taken from the stsz sample_count


            for (int i = 0; i < sample_count; i++)
            {
                boxSize += stream.ReadUInt16(out this.dependency_count);

                for (int k = 0; k < dependency_count; k++)
                {
                    boxSize += stream.ReadInt16(out this.relative_sample_number);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            int sample_count = 0; // TODO: taken from the stsz sample_count


            for (int i = 0; i < sample_count; i++)
            {
                boxSize += stream.WriteUInt16(this.dependency_count);

                for (int k = 0; k < dependency_count; k++)
                {
                    boxSize += stream.WriteInt16(this.relative_sample_number);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            int sample_count = 0; // TODO: taken from the stsz sample_count


            for (int i = 0; i < sample_count; i++)
            {
                boxSize += 16; // dependency_count

                for (int k = 0; k < dependency_count; k++)
                {
                    boxSize += 16; // relative_sample_number
                }
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SeiInformationBox extends Box('seii') {
        unsigned int(16) numRequiredSEIs;
        for (i = 0; i < numRequiredSEIs; i++) {
        unsigned int(16) requiredSEI_ID;
        }
        unsigned int(16) numNotRequiredSEIs;
        for (i = 0; i < numNotRequiredSEIs; i++) {
        unsigned int(16) notrequiredSEI_ID;
        }
    }
    */
    public class SeiInformationBox : Box
    {
        public const string FourCC = "seii";

        protected ushort numRequiredSEIs;
        public ushort NumRequiredSEIs { get { return this.numRequiredSEIs; } set { this.numRequiredSEIs = value; } }

        protected ushort requiredSEI_ID;
        public ushort RequiredSEIID { get { return this.requiredSEI_ID; } set { this.requiredSEI_ID = value; } }

        protected ushort numNotRequiredSEIs;
        public ushort NumNotRequiredSEIs { get { return this.numNotRequiredSEIs; } set { this.numNotRequiredSEIs = value; } }

        protected ushort notrequiredSEI_ID;
        public ushort NotrequiredSEIID { get { return this.notrequiredSEI_ID; } set { this.notrequiredSEI_ID = value; } }

        public SeiInformationBox() : base("seii")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.numRequiredSEIs);

            for (int i = 0; i < numRequiredSEIs; i++)
            {
                boxSize += stream.ReadUInt16(out this.requiredSEI_ID);
            }
            boxSize += stream.ReadUInt16(out this.numNotRequiredSEIs);

            for (int i = 0; i < numNotRequiredSEIs; i++)
            {
                boxSize += stream.ReadUInt16(out this.notrequiredSEI_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.numRequiredSEIs);

            for (int i = 0; i < numRequiredSEIs; i++)
            {
                boxSize += stream.WriteUInt16(this.requiredSEI_ID);
            }
            boxSize += stream.WriteUInt16(this.numNotRequiredSEIs);

            for (int i = 0; i < numNotRequiredSEIs; i++)
            {
                boxSize += stream.WriteUInt16(this.notrequiredSEI_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // numRequiredSEIs

            for (int i = 0; i < numRequiredSEIs; i++)
            {
                boxSize += 16; // requiredSEI_ID
            }
            boxSize += 16; // numNotRequiredSEIs

            for (int i = 0; i < numNotRequiredSEIs; i++)
            {
                boxSize += 16; // notrequiredSEI_ID
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SVCSubTrackLayerBox
        extends FullBox('sstl', 0, 0) {
        unsigned int(16) item_count;
        for(i = 0; i< item_count; i++) {
            unsigned int(3)	dependency_id;
            unsigned int(4)	quality_id;
            unsigned int(3)	temporal_id;
            unsigned int(6)	priority_id;
            unsigned int(2)	dependency_id_range;
            unsigned int(2) 	quality_id_range;
            unsigned int(2)	temporal_id_range;
            unsigned int(2)	priority_id_range;
        }
    }
    */
    public class SVCSubTrackLayerBox : FullBox
    {
        public const string FourCC = "sstl";

        protected ushort item_count;
        public ushort ItemCount { get { return this.item_count; } set { this.item_count = value; } }

        protected byte dependency_id;
        public byte DependencyId { get { return this.dependency_id; } set { this.dependency_id = value; } }

        protected byte quality_id;
        public byte QualityId { get { return this.quality_id; } set { this.quality_id = value; } }

        protected byte temporal_id;
        public byte TemporalId { get { return this.temporal_id; } set { this.temporal_id = value; } }

        protected byte priority_id;
        public byte PriorityId { get { return this.priority_id; } set { this.priority_id = value; } }

        protected byte dependency_id_range;
        public byte DependencyIdRange { get { return this.dependency_id_range; } set { this.dependency_id_range = value; } }

        protected byte quality_id_range;
        public byte QualityIdRange { get { return this.quality_id_range; } set { this.quality_id_range = value; } }

        protected byte temporal_id_range;
        public byte TemporalIdRange { get { return this.temporal_id_range; } set { this.temporal_id_range = value; } }

        protected byte priority_id_range;
        public byte PriorityIdRange { get { return this.priority_id_range; } set { this.priority_id_range = value; } }

        public SVCSubTrackLayerBox() : base("sstl", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += stream.ReadBits(3, out this.dependency_id);
                boxSize += stream.ReadBits(4, out this.quality_id);
                boxSize += stream.ReadBits(3, out this.temporal_id);
                boxSize += stream.ReadBits(6, out this.priority_id);
                boxSize += stream.ReadBits(2, out this.dependency_id_range);
                boxSize += stream.ReadBits(2, out this.quality_id_range);
                boxSize += stream.ReadBits(2, out this.temporal_id_range);
                boxSize += stream.ReadBits(2, out this.priority_id_range);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += stream.WriteBits(3, this.dependency_id);
                boxSize += stream.WriteBits(4, this.quality_id);
                boxSize += stream.WriteBits(3, this.temporal_id);
                boxSize += stream.WriteBits(6, this.priority_id);
                boxSize += stream.WriteBits(2, this.dependency_id_range);
                boxSize += stream.WriteBits(2, this.quality_id_range);
                boxSize += stream.WriteBits(2, this.temporal_id_range);
                boxSize += stream.WriteBits(2, this.priority_id_range);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // item_count

            for (int i = 0; i < item_count; i++)
            {
                boxSize += 3; // dependency_id
                boxSize += 4; // quality_id
                boxSize += 3; // temporal_id
                boxSize += 6; // priority_id
                boxSize += 2; // dependency_id_range
                boxSize += 2; // quality_id_range
                boxSize += 2; // temporal_id_range
                boxSize += 2; // priority_id_range
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class MVCSubTrackMultiviewGroupBox
        extends FullBox('stmg', 0, 0) {
        unsigned int(16) item_count;
        for(i = 0; i< item_count; i++) {
            unsigned int(32)	MultiviewGroupId;
        }
    }
    */
    public class MVCSubTrackMultiviewGroupBox : FullBox
    {
        public const string FourCC = "stmg";

        protected ushort item_count;
        public ushort ItemCount { get { return this.item_count; } set { this.item_count = value; } }

        protected uint MultiviewGroupId;
        public uint _MultiviewGroupId { get { return this.MultiviewGroupId; } set { this.MultiviewGroupId = value; } }

        public MVCSubTrackMultiviewGroupBox() : base("stmg", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += stream.ReadUInt32(out this.MultiviewGroupId);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += stream.WriteUInt32(this.MultiviewGroupId);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // item_count

            for (int i = 0; i < item_count; i++)
            {
                boxSize += 32; // MultiviewGroupId
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SubTrackTierBox
        extends FullBox('stti', 0, 0) {
        unsigned int(16) item_count;
        for(i = 0; i< item_count; i++) {
            unsigned int(16)	tierID;
        }
    }
    */
    public class SubTrackTierBox : FullBox
    {
        public const string FourCC = "stti";

        protected ushort item_count;
        public ushort ItemCount { get { return this.item_count; } set { this.item_count = value; } }

        protected ushort tierID;
        public ushort TierID { get { return this.tierID; } set { this.tierID = value; } }

        public SubTrackTierBox() : base("stti", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += stream.ReadUInt16(out this.tierID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += stream.WriteUInt16(this.tierID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // item_count

            for (int i = 0; i < item_count; i++)
            {
                boxSize += 16; // tierID
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class MultiviewGroupRelationBox() extends FullBox('swtc', version = 0, flags) {
        unsigned int(32) num_entries;
        for (i=0; i<num_entries; i++)
            unsigned int(32) multiview_group_id;
        MultiviewRelationAttributeBox relation_attributes;
    }
    */
    public class MultiviewGroupRelationBox : FullBox
    {
        public const string FourCC = "swtc";

        protected uint num_entries;
        public uint NumEntries { get { return this.num_entries; } set { this.num_entries = value; } }

        protected uint multiview_group_id;
        public uint MultiviewGroupId { get { return this.multiview_group_id; } set { this.multiview_group_id = value; } }

        protected MultiviewRelationAttributeBox relation_attributes;
        public MultiviewRelationAttributeBox RelationAttributes { get { return this.relation_attributes; } set { this.relation_attributes = value; } }

        public MultiviewGroupRelationBox(uint flags = 0) : base("swtc", 0, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.num_entries);

            for (int i = 0; i < num_entries; i++)
            {
                boxSize += stream.ReadUInt32(out this.multiview_group_id);
            }
            boxSize += stream.ReadBox(out this.relation_attributes);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.num_entries);

            for (int i = 0; i < num_entries; i++)
            {
                boxSize += stream.WriteUInt32(this.multiview_group_id);
            }
            boxSize += stream.WriteBox(this.relation_attributes);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // num_entries

            for (int i = 0; i < num_entries; i++)
            {
                boxSize += 32; // multiview_group_id
            }
            boxSize += IsoStream.CalculateSize(relation_attributes); // relation_attributes
            return boxSize;
        }
    }


    /*
    class TierBitRateBox extends Box('tibr'){ 
        unsigned int(32) baseBitRate;
        unsigned int(32) maxBitRate;
        unsigned int(32) avgBitRate;

        unsigned int(32) tierBaseBitRate;
        unsigned int(32) tierMaxBitRate;
        unsigned int(32) tierAvgBitRate;
    }
    */
    public class TierBitRateBox : Box
    {
        public const string FourCC = "tibr";

        protected uint baseBitRate;
        public uint BaseBitRate { get { return this.baseBitRate; } set { this.baseBitRate = value; } }

        protected uint maxBitRate;
        public uint MaxBitRate { get { return this.maxBitRate; } set { this.maxBitRate = value; } }

        protected uint avgBitRate;
        public uint AvgBitRate { get { return this.avgBitRate; } set { this.avgBitRate = value; } }

        protected uint tierBaseBitRate;
        public uint TierBaseBitRate { get { return this.tierBaseBitRate; } set { this.tierBaseBitRate = value; } }

        protected uint tierMaxBitRate;
        public uint TierMaxBitRate { get { return this.tierMaxBitRate; } set { this.tierMaxBitRate = value; } }

        protected uint tierAvgBitRate;
        public uint TierAvgBitRate { get { return this.tierAvgBitRate; } set { this.tierAvgBitRate = value; } }

        public TierBitRateBox() : base("tibr")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.baseBitRate);
            boxSize += stream.ReadUInt32(out this.maxBitRate);
            boxSize += stream.ReadUInt32(out this.avgBitRate);
            boxSize += stream.ReadUInt32(out this.tierBaseBitRate);
            boxSize += stream.ReadUInt32(out this.tierMaxBitRate);
            boxSize += stream.ReadUInt32(out this.tierAvgBitRate);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.baseBitRate);
            boxSize += stream.WriteUInt32(this.maxBitRate);
            boxSize += stream.WriteUInt32(this.avgBitRate);
            boxSize += stream.WriteUInt32(this.tierBaseBitRate);
            boxSize += stream.WriteUInt32(this.tierMaxBitRate);
            boxSize += stream.WriteUInt32(this.tierAvgBitRate);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // baseBitRate
            boxSize += 32; // maxBitRate
            boxSize += 32; // avgBitRate
            boxSize += 32; // tierBaseBitRate
            boxSize += 32; // tierMaxBitRate
            boxSize += 32; // tierAvgBitRate
            return boxSize;
        }
    }


    /*
    class TierInfoBox extends Box('tiri'){ //Mandatory Box
        unsigned int(16) tierID;
        unsigned int(8) profileIndication;
        unsigned int(8) profile_compatibility;
        unsigned int(8) levelIndication;
        bit(8) reserved = 0;

        unsigned int(16) visualWidth;
        unsigned int(16) visualHeight;

        unsigned int(2) discardable;
        unsigned int(2) constantFrameRate;
        bit(4) reserved = 0;
        unsigned int(16) frameRate;
    }
    */
    public class TierInfoBox : Box
    {
        public const string FourCC = "tiri";

        protected ushort tierID;
        public ushort TierID { get { return this.tierID; } set { this.tierID = value; } }

        protected byte profileIndication;
        public byte ProfileIndication { get { return this.profileIndication; } set { this.profileIndication = value; } }

        protected byte profile_compatibility;
        public byte ProfileCompatibility { get { return this.profile_compatibility; } set { this.profile_compatibility = value; } }

        protected byte levelIndication;
        public byte LevelIndication { get { return this.levelIndication; } set { this.levelIndication = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected ushort visualWidth;
        public ushort VisualWidth { get { return this.visualWidth; } set { this.visualWidth = value; } }

        protected ushort visualHeight;
        public ushort VisualHeight { get { return this.visualHeight; } set { this.visualHeight = value; } }

        protected byte discardable;
        public byte Discardable { get { return this.discardable; } set { this.discardable = value; } }

        protected byte constantFrameRate;
        public byte ConstantFrameRate { get { return this.constantFrameRate; } set { this.constantFrameRate = value; } }

        protected byte reserved0 = 0;
        public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected ushort frameRate;
        public ushort FrameRate { get { return this.frameRate; } set { this.frameRate = value; } }

        public TierInfoBox() : base("tiri")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            /* Mandatory Box */
            boxSize += stream.ReadUInt16(out this.tierID);
            boxSize += stream.ReadUInt8(out this.profileIndication);
            boxSize += stream.ReadUInt8(out this.profile_compatibility);
            boxSize += stream.ReadUInt8(out this.levelIndication);
            boxSize += stream.ReadUInt8(out this.reserved);
            boxSize += stream.ReadUInt16(out this.visualWidth);
            boxSize += stream.ReadUInt16(out this.visualHeight);
            boxSize += stream.ReadBits(2, out this.discardable);
            boxSize += stream.ReadBits(2, out this.constantFrameRate);
            boxSize += stream.ReadBits(4, out this.reserved0);
            boxSize += stream.ReadUInt16(out this.frameRate);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            /* Mandatory Box */
            boxSize += stream.WriteUInt16(this.tierID);
            boxSize += stream.WriteUInt8(this.profileIndication);
            boxSize += stream.WriteUInt8(this.profile_compatibility);
            boxSize += stream.WriteUInt8(this.levelIndication);
            boxSize += stream.WriteUInt8(this.reserved);
            boxSize += stream.WriteUInt16(this.visualWidth);
            boxSize += stream.WriteUInt16(this.visualHeight);
            boxSize += stream.WriteBits(2, this.discardable);
            boxSize += stream.WriteBits(2, this.constantFrameRate);
            boxSize += stream.WriteBits(4, this.reserved0);
            boxSize += stream.WriteUInt16(this.frameRate);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            /* Mandatory Box */
            boxSize += 16; // tierID
            boxSize += 8; // profileIndication
            boxSize += 8; // profile_compatibility
            boxSize += 8; // levelIndication
            boxSize += 8; // reserved
            boxSize += 16; // visualWidth
            boxSize += 16; // visualHeight
            boxSize += 2; // discardable
            boxSize += 2; // constantFrameRate
            boxSize += 4; // reserved0
            boxSize += 16; // frameRate
            return boxSize;
        }
    }


    /*
    aligned(8) class TileSubTrackGroupBox extends FullBox('tstb', 0, 0) {
        unsigned int(16) item_count;
        for(i = 0; i< item_count; i++) {
            unsigned int(16) tileGroupID;
        }
    }
    */
    public class TileSubTrackGroupBox : FullBox
    {
        public const string FourCC = "tstb";

        protected ushort item_count;
        public ushort ItemCount { get { return this.item_count; } set { this.item_count = value; } }

        protected ushort tileGroupID;
        public ushort TileGroupID { get { return this.tileGroupID; } set { this.tileGroupID = value; } }

        public TileSubTrackGroupBox() : base("tstb", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += stream.ReadUInt16(out this.tileGroupID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.item_count);

            for (int i = 0; i < item_count; i++)
            {
                boxSize += stream.WriteUInt16(this.tileGroupID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // item_count

            for (int i = 0; i < item_count; i++)
            {
                boxSize += 16; // tileGroupID
            }
            return boxSize;
        }
    }


    /*
    class MultiviewSceneInfoBox extends Box ('vwdi') 
    {
        unsigned int(8) 	max_disparity;
    }
    */
    public class MultiviewSceneInfoBox : Box
    {
        public const string FourCC = "vwdi";

        protected byte max_disparity;
        public byte MaxDisparity { get { return this.max_disparity; } set { this.max_disparity = value; } }

        public MultiviewSceneInfoBox() : base("vwdi")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.max_disparity);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.max_disparity);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // max_disparity
            return boxSize;
        }
    }


    /*
    class MVCDConfigurationBox extends Box('mvdC') {
        MVDDecoderConfigurationRecord MVDConfig;
        MVDDepthResolutionBox mvdDepthRes;	//Optional
    }
    */
    public class MVCDConfigurationBox : Box
    {
        public const string FourCC = "mvdC";

        protected MVDDecoderConfigurationRecord MVDConfig;
        public MVDDecoderConfigurationRecord _MVDConfig { get { return this.MVDConfig; } set { this.MVDConfig = value; } }

        protected MVDDepthResolutionBox mvdDepthRes;  // Optional
        public MVDDepthResolutionBox MvdDepthRes { get { return this.mvdDepthRes; } set { this.mvdDepthRes = value; } }

        public MVCDConfigurationBox() : base("mvdC")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadClass(out this.MVDConfig);
            boxSize += stream.ReadBox(out this.mvdDepthRes); //Optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteClass(this.MVDConfig);
            boxSize += stream.WriteBox(this.mvdDepthRes); //Optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateClassSize(MVDConfig); // MVDConfig
            boxSize += IsoStream.CalculateSize(mvdDepthRes); // mvdDepthRes
            return boxSize;
        }
    }


    /*
    class A3DConfigurationBox extends Box('a3dC') {
        MVDDecoderConfigurationRecord MVDConfig;
        MVDDepthResolutionBox mvdDepthRes;	//Optional
    }
    */
    public class A3DConfigurationBox : Box
    {
        public const string FourCC = "a3dC";

        protected MVDDecoderConfigurationRecord MVDConfig;
        public MVDDecoderConfigurationRecord _MVDConfig { get { return this.MVDConfig; } set { this.MVDConfig = value; } }

        protected MVDDepthResolutionBox mvdDepthRes;  // Optional
        public MVDDepthResolutionBox MvdDepthRes { get { return this.mvdDepthRes; } set { this.mvdDepthRes = value; } }

        public A3DConfigurationBox() : base("a3dC")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadClass(out this.MVDConfig);
            boxSize += stream.ReadBox(out this.mvdDepthRes); //Optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteClass(this.MVDConfig);
            boxSize += stream.WriteBox(this.mvdDepthRes); //Optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateClassSize(MVDConfig); // MVDConfig
            boxSize += IsoStream.CalculateSize(mvdDepthRes); // mvdDepthRes
            return boxSize;
        }
    }


    /*
    class ViewIdentifierBox extends FullBox ('vwid', version=0, flags) 
    {
        unsigned int(2) 	reserved6 = 0;
        unsigned int(3) 	min_temporal_id;
        unsigned int(3) 	max_temporal_id;
        unsigned int(16)	num_views;
        for (i=0; i<num_views; i++) {
            unsigned int(6) 	reserved1 = 0;
            unsigned int(10) 	view_id[i];
            unsigned int(6) 	reserved2 = 0;
            unsigned int(10) 	view_order_index;
            unsigned int(1)	texture_in_stream[i];
            unsigned int(1)	texture_in_track[i];
            unsigned int(1)	depth_in_stream[i];
            unsigned int(1)	depth_in_track[i];
            unsigned int(2) 	base_view_type;
            unsigned int(10) 	num_ref_views;
            for (j = 0; j < num_ref_views; j++) {
                unsigned int(4) 	reserved5 = 0;
                unsigned int(2) 	dependent_component_idc[i][j];
                unsigned int(10) 	ref_view_id[i][j];
            }
        }
    }
    */
    public class ViewIdentifierBox : FullBox
    {
        public const string FourCC = "vwid";

        protected byte reserved6 = 0;
        public byte Reserved6 { get { return this.reserved6; } set { this.reserved6 = value; } }

        protected byte min_temporal_id;
        public byte MinTemporalId { get { return this.min_temporal_id; } set { this.min_temporal_id = value; } }

        protected byte max_temporal_id;
        public byte MaxTemporalId { get { return this.max_temporal_id; } set { this.max_temporal_id = value; } }

        protected ushort num_views;
        public ushort NumViews { get { return this.num_views; } set { this.num_views = value; } }

        protected byte reserved1 = 0;
        public byte Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

        protected ushort[] view_id;
        public ushort[] ViewId { get { return this.view_id; } set { this.view_id = value; } }

        protected byte reserved2 = 0;
        public byte Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

        protected ushort view_order_index;
        public ushort ViewOrderIndex { get { return this.view_order_index; } set { this.view_order_index = value; } }

        protected bool[] texture_in_stream;
        public bool[] TextureInStream { get { return this.texture_in_stream; } set { this.texture_in_stream = value; } }

        protected bool[] texture_in_track;
        public bool[] TextureInTrack { get { return this.texture_in_track; } set { this.texture_in_track = value; } }

        protected bool[] depth_in_stream;
        public bool[] DepthInStream { get { return this.depth_in_stream; } set { this.depth_in_stream = value; } }

        protected bool[] depth_in_track;
        public bool[] DepthInTrack { get { return this.depth_in_track; } set { this.depth_in_track = value; } }

        protected byte base_view_type;
        public byte BaseViewType { get { return this.base_view_type; } set { this.base_view_type = value; } }

        protected ushort num_ref_views;
        public ushort NumRefViews { get { return this.num_ref_views; } set { this.num_ref_views = value; } }

        protected byte reserved5 = 0;
        public byte Reserved5 { get { return this.reserved5; } set { this.reserved5 = value; } }

        protected byte[][] dependent_component_idc;
        public byte[][] DependentComponentIdc { get { return this.dependent_component_idc; } set { this.dependent_component_idc = value; } }

        protected ushort[][] ref_view_id;
        public ushort[][] RefViewId { get { return this.ref_view_id; } set { this.ref_view_id = value; } }

        public ViewIdentifierBox(uint flags = 0) : base("vwid", 0, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(2, out this.reserved6);
            boxSize += stream.ReadBits(3, out this.min_temporal_id);
            boxSize += stream.ReadBits(3, out this.max_temporal_id);
            boxSize += stream.ReadUInt16(out this.num_views);

            for (int i = 0; i < num_views; i++)
            {
                boxSize += stream.ReadBits(6, out this.reserved1);
                boxSize += stream.ReadBits(10, out this.view_id[i]);
                boxSize += stream.ReadBits(6, out this.reserved2);
                boxSize += stream.ReadBits(10, out this.view_order_index);
                boxSize += stream.ReadBit(out this.texture_in_stream[i]);
                boxSize += stream.ReadBit(out this.texture_in_track[i]);
                boxSize += stream.ReadBit(out this.depth_in_stream[i]);
                boxSize += stream.ReadBit(out this.depth_in_track[i]);
                boxSize += stream.ReadBits(2, out this.base_view_type);
                boxSize += stream.ReadBits(10, out this.num_ref_views);

                for (int j = 0; j < num_ref_views; j++)
                {
                    boxSize += stream.ReadBits(4, out this.reserved5);
                    boxSize += stream.ReadBits(2, out this.dependent_component_idc[i][j]);
                    boxSize += stream.ReadBits(10, out this.ref_view_id[i][j]);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(2, this.reserved6);
            boxSize += stream.WriteBits(3, this.min_temporal_id);
            boxSize += stream.WriteBits(3, this.max_temporal_id);
            boxSize += stream.WriteUInt16(this.num_views);

            for (int i = 0; i < num_views; i++)
            {
                boxSize += stream.WriteBits(6, this.reserved1);
                boxSize += stream.WriteBits(10, this.view_id[i]);
                boxSize += stream.WriteBits(6, this.reserved2);
                boxSize += stream.WriteBits(10, this.view_order_index);
                boxSize += stream.WriteBit(this.texture_in_stream[i]);
                boxSize += stream.WriteBit(this.texture_in_track[i]);
                boxSize += stream.WriteBit(this.depth_in_stream[i]);
                boxSize += stream.WriteBit(this.depth_in_track[i]);
                boxSize += stream.WriteBits(2, this.base_view_type);
                boxSize += stream.WriteBits(10, this.num_ref_views);

                for (int j = 0; j < num_ref_views; j++)
                {
                    boxSize += stream.WriteBits(4, this.reserved5);
                    boxSize += stream.WriteBits(2, this.dependent_component_idc[i][j]);
                    boxSize += stream.WriteBits(10, this.ref_view_id[i][j]);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 2; // reserved6
            boxSize += 3; // min_temporal_id
            boxSize += 3; // max_temporal_id
            boxSize += 16; // num_views

            for (int i = 0; i < num_views; i++)
            {
                boxSize += 6; // reserved1
                boxSize += 10; // view_id
                boxSize += 6; // reserved2
                boxSize += 10; // view_order_index
                boxSize += 1; // texture_in_stream
                boxSize += 1; // texture_in_track
                boxSize += 1; // depth_in_stream
                boxSize += 1; // depth_in_track
                boxSize += 2; // base_view_type
                boxSize += 10; // num_ref_views

                for (int j = 0; j < num_ref_views; j++)
                {
                    boxSize += 4; // reserved5
                    boxSize += 2; // dependent_component_idc
                    boxSize += 10; // ref_view_id
                }
            }
            return boxSize;
        }
    }


    /*
    class MVCConfigurationBox extends Box('mvcC') {
        MVCDecoderConfigurationRecord() MVCConfig;
    }
    */
    public class MVCConfigurationBox : Box
    {
        public const string FourCC = "mvcC";

        protected MVCDecoderConfigurationRecord MVCConfig;
        public MVCDecoderConfigurationRecord _MVCConfig { get { return this.MVCConfig; } set { this.MVCConfig = value; } }

        public MVCConfigurationBox() : base("mvcC")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadClass(out this.MVCConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteClass(this.MVCConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateClassSize(MVCConfig); // MVCConfig
            return boxSize;
        }
    }


    /*
    class AVCConfigurationBox extends Box('avcC') {
        AVCDecoderConfigurationRecord() AVCConfig;
    }
    */
    public class AVCConfigurationBox : Box
    {
        public const string FourCC = "avcC";

        protected AVCDecoderConfigurationRecord AVCConfig;
        public AVCDecoderConfigurationRecord _AVCConfig { get { return this.AVCConfig; } set { this.AVCConfig = value; } }

        public AVCConfigurationBox() : base("avcC")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadClass(out this.AVCConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteClass(this.AVCConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateClassSize(AVCConfig); // AVCConfig
            return boxSize;
        }
    }


    /*
    class HEVCConfigurationBox extends Box('hvcC') {
        HEVCDecoderConfigurationRecord() HEVCConfig;
    }
    */
    public class HEVCConfigurationBox : Box
    {
        public const string FourCC = "hvcC";

        protected HEVCDecoderConfigurationRecord HEVCConfig;
        public HEVCDecoderConfigurationRecord _HEVCConfig { get { return this.HEVCConfig; } set { this.HEVCConfig = value; } }

        public HEVCConfigurationBox() : base("hvcC")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadClass(out this.HEVCConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteClass(this.HEVCConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateClassSize(HEVCConfig); // HEVCConfig
            return boxSize;
        }
    }


    /*
    class LHEVCConfigurationBox extends Box('lhvC') {
        LHEVCDecoderConfigurationRecord() LHEVCConfig;
    }
    */
    public class LHEVCConfigurationBox : Box
    {
        public const string FourCC = "lhvC";

        protected LHEVCDecoderConfigurationRecord LHEVCConfig;
        public LHEVCDecoderConfigurationRecord _LHEVCConfig { get { return this.LHEVCConfig; } set { this.LHEVCConfig = value; } }

        public LHEVCConfigurationBox() : base("lhvC")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadClass(out this.LHEVCConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteClass(this.LHEVCConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateClassSize(LHEVCConfig); // LHEVCConfig
            return boxSize;
        }
    }


    /*
    class MPEG4ExtensionDescriptorsBox extends Box('m4ds') {
        Descriptor Descr[0 .. 255];
    }
    */
    public class MPEG4ExtensionDescriptorsBox : Box
    {
        public const string FourCC = "m4ds";

        protected Descriptor[] Descr;
        public Descriptor[] _Descr { get { return this.Descr; } set { this.Descr = value; } }

        public MPEG4ExtensionDescriptorsBox() : base("m4ds")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadClass(out this.Descr);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteClass(this.Descr);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateClassSize(Descr); // Descr
            return boxSize;
        }
    }


    /*
    class SVCConfigurationBox extends Box('svcC') {
        SVCDecoderConfigurationRecord() SVCConfig;
    }
    */
    public class SVCConfigurationBox : Box
    {
        public const string FourCC = "svcC";

        protected SVCDecoderConfigurationRecord SVCConfig;
        public SVCDecoderConfigurationRecord _SVCConfig { get { return this.SVCConfig; } set { this.SVCConfig = value; } }

        public SVCConfigurationBox() : base("svcC")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadClass(out this.SVCConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteClass(this.SVCConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateClassSize(SVCConfig); // SVCConfig
            return boxSize;
        }
    }


    /*
    class ScalabilityInformationSEIBox extends Box('seib', size)
    {
        unsigned int(8*size-64)	scalinfosei; 
    }
    */
    public class ScalabilityInformationSEIBox : Box
    {
        public const string FourCC = "seib";

        protected byte[] scalinfosei;
        public byte[] Scalinfosei { get { return this.scalinfosei; } set { this.scalinfosei = value; } }

        public ScalabilityInformationSEIBox(ulong size = 0) : base("seib", size)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBytes(size - 64, out this.scalinfosei);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBytes(size - 64, this.scalinfosei);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)(size - 64) * 8; // scalinfosei
            return boxSize;
        }
    }


    /*
    class SVCPriorityAssignmentBox extends Box('svcP')
    {
        unsigned int(8)	method_count;
        string PriorityAssignmentURI[method_count]; 
    }
    */
    public class SVCPriorityAssignmentBox : Box
    {
        public const string FourCC = "svcP";

        protected byte method_count;
        public byte MethodCount { get { return this.method_count; } set { this.method_count = value; } }

        protected string[] PriorityAssignmentURI;
        public string[] _PriorityAssignmentURI { get { return this.PriorityAssignmentURI; } set { this.PriorityAssignmentURI = value; } }

        public SVCPriorityAssignmentBox() : base("svcP")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.method_count);
            boxSize += stream.ReadStringArray(method_count, out this.PriorityAssignmentURI);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.method_count);
            boxSize += stream.WriteStringArray(method_count, this.PriorityAssignmentURI);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // method_count
            boxSize += IsoStream.CalculateSize(PriorityAssignmentURI); // PriorityAssignmentURI
            return boxSize;
        }
    }


    /*
    class ViewScalabilityInformationSEIBox extends Box('vsib', size)
    {
        unsigned int(8*size-64)	mvcscalinfosei; 
    }
    */
    public class ViewScalabilityInformationSEIBox : Box
    {
        public const string FourCC = "vsib";

        protected byte[] mvcscalinfosei;
        public byte[] Mvcscalinfosei { get { return this.mvcscalinfosei; } set { this.mvcscalinfosei = value; } }

        public ViewScalabilityInformationSEIBox(ulong size = 0) : base("vsib", size)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBytes(size - 64, out this.mvcscalinfosei);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBytes(size - 64, this.mvcscalinfosei);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)(size - 64) * 8; // mvcscalinfosei
            return boxSize;
        }
    }


    /*
    class MVDScalabilityInformationSEIBox extends Box('3sib', size)
    {
        unsigned int(8*size-64)	mvdscalinfosei;
    }
    */
    public class MVDScalabilityInformationSEIBox : Box
    {
        public const string FourCC = "3sib";

        protected byte[] mvdscalinfosei;
        public byte[] Mvdscalinfosei { get { return this.mvdscalinfosei; } set { this.mvdscalinfosei = value; } }

        public MVDScalabilityInformationSEIBox(ulong size = 0) : base("3sib", size)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBytes(size - 64, out this.mvdscalinfosei);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBytes(size - 64, this.mvdscalinfosei);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)(size - 64) * 8; // mvdscalinfosei
            return boxSize;
        }
    }


    /*
    class MVCViewPriorityAssignmentBox extends Box('mvcP')
    {
        unsigned int(8)	method_count;
        string PriorityAssignmentURI[method_count]; 
    }
    */
    public class MVCViewPriorityAssignmentBox : Box
    {
        public const string FourCC = "mvcP";

        protected byte method_count;
        public byte MethodCount { get { return this.method_count; } set { this.method_count = value; } }

        protected string[] PriorityAssignmentURI;
        public string[] _PriorityAssignmentURI { get { return this.PriorityAssignmentURI; } set { this.PriorityAssignmentURI = value; } }

        public MVCViewPriorityAssignmentBox() : base("mvcP")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.method_count);
            boxSize += stream.ReadStringArray(method_count, out this.PriorityAssignmentURI);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.method_count);
            boxSize += stream.WriteStringArray(method_count, this.PriorityAssignmentURI);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // method_count
            boxSize += IsoStream.CalculateSize(PriorityAssignmentURI); // PriorityAssignmentURI
            return boxSize;
        }
    }


    /*
    class HEVCTileConfigurationBox extends Box('hvtC') {
        HEVCTileTierLevelConfigurationRecord() HEVCTileTierLevelConfig;
    }
    */
    public class HEVCTileConfigurationBox : Box
    {
        public const string FourCC = "hvtC";

        protected HEVCTileTierLevelConfigurationRecord HEVCTileTierLevelConfig;
        public HEVCTileTierLevelConfigurationRecord _HEVCTileTierLevelConfig { get { return this.HEVCTileTierLevelConfig; } set { this.HEVCTileTierLevelConfig = value; } }

        public HEVCTileConfigurationBox() : base("hvtC")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadClass(out this.HEVCTileTierLevelConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteClass(this.HEVCTileTierLevelConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateClassSize(HEVCTileTierLevelConfig); // HEVCTileTierLevelConfig
            return boxSize;
        }
    }


    /*
    class EVCConfigurationBox extends Box('evcC') {
        EVCDecoderConfigurationRecord() EVCConfig;
    }
    */
    public class EVCConfigurationBox : Box
    {
        public const string FourCC = "evcC";

        protected EVCDecoderConfigurationRecord EVCConfig;
        public EVCDecoderConfigurationRecord _EVCConfig { get { return this.EVCConfig; } set { this.EVCConfig = value; } }

        public EVCConfigurationBox() : base("evcC")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadClass(out this.EVCConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteClass(this.EVCConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateClassSize(EVCConfig); // EVCConfig
            return boxSize;
        }
    }


    /*
    class SVCPriorityLayerInfoBox extends Box('qlif'){
        unsigned int(8) pr_layer_num;
        for(j=0; j< pr_layer_num; j++){
            unsigned int(8) pr_layer;
            unsigned int(24) profile_level_idc;
            unsigned int(32) max_bitrate;
            unsigned int(32) avg_bitrate;
        }
    }
    */
    public class SVCPriorityLayerInfoBox : Box
    {
        public const string FourCC = "qlif";

        protected byte pr_layer_num;
        public byte PrLayerNum { get { return this.pr_layer_num; } set { this.pr_layer_num = value; } }

        protected byte pr_layer;
        public byte PrLayer { get { return this.pr_layer; } set { this.pr_layer = value; } }

        protected uint profile_level_idc;
        public uint ProfileLevelIdc { get { return this.profile_level_idc; } set { this.profile_level_idc = value; } }

        protected uint max_bitrate;
        public uint MaxBitrate { get { return this.max_bitrate; } set { this.max_bitrate = value; } }

        protected uint avg_bitrate;
        public uint AvgBitrate { get { return this.avg_bitrate; } set { this.avg_bitrate = value; } }

        public SVCPriorityLayerInfoBox() : base("qlif")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.pr_layer_num);

            for (int j = 0; j < pr_layer_num; j++)
            {
                boxSize += stream.ReadUInt8(out this.pr_layer);
                boxSize += stream.ReadUInt24(out this.profile_level_idc);
                boxSize += stream.ReadUInt32(out this.max_bitrate);
                boxSize += stream.ReadUInt32(out this.avg_bitrate);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.pr_layer_num);

            for (int j = 0; j < pr_layer_num; j++)
            {
                boxSize += stream.WriteUInt8(this.pr_layer);
                boxSize += stream.WriteUInt24(this.profile_level_idc);
                boxSize += stream.WriteUInt32(this.max_bitrate);
                boxSize += stream.WriteUInt32(this.avg_bitrate);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // pr_layer_num

            for (int j = 0; j < pr_layer_num; j++)
            {
                boxSize += 8; // pr_layer
                boxSize += 24; // profile_level_idc
                boxSize += 32; // max_bitrate
                boxSize += 32; // avg_bitrate
            }
            return boxSize;
        }
    }


    /*
    class VvcConfigurationBox extends FullBox('vvcC',version=0,flags) {
        VvcDecoderConfigurationRecord() VvcConfig;
    }
    */
    public class VvcConfigurationBox : FullBox
    {
        public const string FourCC = "vvcC";

        protected VvcDecoderConfigurationRecord VvcConfig;
        public VvcDecoderConfigurationRecord _VvcConfig { get { return this.VvcConfig; } set { this.VvcConfig = value; } }

        public VvcConfigurationBox(uint flags = 0) : base("vvcC", 0, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadClass(out this.VvcConfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteClass(this.VvcConfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateClassSize(VvcConfig); // VvcConfig
            return boxSize;
        }
    }


    /*
    class VvcNALUConfigBox extends FullBox('vvnC',version=0,flags) {
        unsigned int(6) reserved=0;
        unsigned int(2) LengthSizeMinusOne;
    }
    */
    public class VvcNALUConfigBox : FullBox
    {
        public const string FourCC = "vvnC";

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte LengthSizeMinusOne;
        public byte _LengthSizeMinusOne { get { return this.LengthSizeMinusOne; } set { this.LengthSizeMinusOne = value; } }

        public VvcNALUConfigBox(uint flags = 0) : base("vvnC", 0, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(6, out this.reserved);
            boxSize += stream.ReadBits(2, out this.LengthSizeMinusOne);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(6, this.reserved);
            boxSize += stream.WriteBits(2, this.LengthSizeMinusOne);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 6; // reserved
            boxSize += 2; // LengthSizeMinusOne
            return boxSize;
        }
    }


    /*
    class DefaultHevcExtractorConstructorBox extends FullBox('dhec'){
        unsigned int(32) num_entries;
        for (i=1; i<= num_entries; i++) { 
            unsigned int(8) constructor_type;
            unsigned int(8) flags; 
            if( constructor_type == 0 ) 
                SampleConstructor();
            else if( constructor_type == 2 ) 
                InlineConstructor();
            else if( constructor_type == 3 ) 
                SampleConstructorFromTrackGroup();
            else if( constructor_type == 6 ) 
                NALUStartInlineConstructor ();
        }
    }
    */
    public class DefaultHevcExtractorConstructorBox : FullBox
    {
        public const string FourCC = "dhec";

        protected uint num_entries;
        public uint NumEntries { get { return this.num_entries; } set { this.num_entries = value; } }

        protected byte constructor_type;
        public byte ConstructorType { get { return this.constructor_type; } set { this.constructor_type = value; } }

        protected byte flags;
        public byte Flags { get { return this.flags; } set { this.flags = value; } }

        protected SampleConstructor SampleConstructor;
        public SampleConstructor _SampleConstructor { get { return this.SampleConstructor; } set { this.SampleConstructor = value; } }

        protected InlineConstructor InlineConstructor;
        public InlineConstructor _InlineConstructor { get { return this.InlineConstructor; } set { this.InlineConstructor = value; } }

        protected SampleConstructorFromTrackGroup SampleConstructorFromTrackGroup;
        public SampleConstructorFromTrackGroup _SampleConstructorFromTrackGroup { get { return this.SampleConstructorFromTrackGroup; } set { this.SampleConstructorFromTrackGroup = value; } }

        protected NALUStartInlineConstructor NALUStartInlineConstructor;
        public NALUStartInlineConstructor _NALUStartInlineConstructor { get { return this.NALUStartInlineConstructor; } set { this.NALUStartInlineConstructor = value; } }

        public DefaultHevcExtractorConstructorBox() : base("dhec")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.num_entries);

            for (int i = 1; i <= num_entries; i++)
            {
                boxSize += stream.ReadUInt8(out this.constructor_type);
                boxSize += stream.ReadUInt8(out this.flags);

                if (constructor_type == 0)
                {
                    boxSize += stream.ReadBox(out this.SampleConstructor);
                }

                else if (constructor_type == 2)
                {
                    boxSize += stream.ReadBox(out this.InlineConstructor);
                }

                else if (constructor_type == 3)
                {
                    boxSize += stream.ReadBox(out this.SampleConstructorFromTrackGroup);
                }

                else if (constructor_type == 6)
                {
                    boxSize += stream.ReadBox(out this.NALUStartInlineConstructor);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.num_entries);

            for (int i = 1; i <= num_entries; i++)
            {
                boxSize += stream.WriteUInt8(this.constructor_type);
                boxSize += stream.WriteUInt8(this.flags);

                if (constructor_type == 0)
                {
                    boxSize += stream.WriteBox(this.SampleConstructor);
                }

                else if (constructor_type == 2)
                {
                    boxSize += stream.WriteBox(this.InlineConstructor);
                }

                else if (constructor_type == 3)
                {
                    boxSize += stream.WriteBox(this.SampleConstructorFromTrackGroup);
                }

                else if (constructor_type == 6)
                {
                    boxSize += stream.WriteBox(this.NALUStartInlineConstructor);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // num_entries

            for (int i = 1; i <= num_entries; i++)
            {
                boxSize += 8; // constructor_type
                boxSize += 8; // flags

                if (constructor_type == 0)
                {
                    boxSize += IsoStream.CalculateSize(SampleConstructor); // SampleConstructor
                }

                else if (constructor_type == 2)
                {
                    boxSize += IsoStream.CalculateSize(InlineConstructor); // InlineConstructor
                }

                else if (constructor_type == 3)
                {
                    boxSize += IsoStream.CalculateSize(SampleConstructorFromTrackGroup); // SampleConstructorFromTrackGroup
                }

                else if (constructor_type == 6)
                {
                    boxSize += IsoStream.CalculateSize(NALUStartInlineConstructor); // NALUStartInlineConstructor
                }
            }
            return boxSize;
        }
    }


    /*
    class SVCMetadataSampleConfigBox extends FullBox('svmC')
    {
        int i;		// local variable, not a field
        unsigned int(8) sample_statement_type;	/* normally group, or seq *//*
        unsigned int(8) default_statement_type;
        unsigned int(8) default_statement_length;
        unsigned int(8) entry_count;
        for (i=1; i<=entry_count; i++) {
            unsigned int(8) statement_type;	// from the user extension ranges
            string statement_namespace;
        }
    }
    */
    public class SVCMetadataSampleConfigBox : FullBox
    {
        public const string FourCC = "svmC";

        protected byte sample_statement_type;
        public byte SampleStatementType { get { return this.sample_statement_type; } set { this.sample_statement_type = value; } }

        protected byte default_statement_type;
        public byte DefaultStatementType { get { return this.default_statement_type; } set { this.default_statement_type = value; } }

        protected byte default_statement_length;
        public byte DefaultStatementLength { get { return this.default_statement_length; } set { this.default_statement_length = value; } }

        protected byte entry_count;
        public byte EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected byte statement_type;  //  from the user extension ranges
        public byte StatementType { get { return this.statement_type; } set { this.statement_type = value; } }

        protected string statement_namespace;
        public string StatementNamespace { get { return this.statement_namespace; } set { this.statement_namespace = value; } }

        public SVCMetadataSampleConfigBox() : base("svmC")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            boxSize += stream.ReadUInt8(out this.sample_statement_type);
            /*  normally group, or seq  */
            boxSize += stream.ReadUInt8(out this.default_statement_type);
            boxSize += stream.ReadUInt8(out this.default_statement_length);
            boxSize += stream.ReadUInt8(out this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.ReadUInt8(out this.statement_type); // from the user extension ranges
                boxSize += stream.ReadString(out this.statement_namespace);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            boxSize += stream.WriteUInt8(this.sample_statement_type);
            /*  normally group, or seq  */
            boxSize += stream.WriteUInt8(this.default_statement_type);
            boxSize += stream.WriteUInt8(this.default_statement_length);
            boxSize += stream.WriteUInt8(this.entry_count);

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += stream.WriteUInt8(this.statement_type); // from the user extension ranges
                boxSize += stream.WriteString(this.statement_namespace);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            boxSize += 8; // sample_statement_type
            /*  normally group, or seq  */
            boxSize += 8; // default_statement_type
            boxSize += 8; // default_statement_length
            boxSize += 8; // entry_count

            for (int i = 1; i <= entry_count; i++)
            {
                boxSize += 8; // statement_type
                boxSize += (ulong)statement_namespace.Length * 8; // statement_namespace
            }
            return boxSize;
        }
    }


    /*
    class EVCSliceComponentTrackConfigurationBox extends Box('evsC') {
        EVCSliceComponentTrackConfigurationRecord() config;
    }
    */
    public class EVCSliceComponentTrackConfigurationBox : Box
    {
        public const string FourCC = "evsC";

        protected EVCSliceComponentTrackConfigurationRecord config;
        public EVCSliceComponentTrackConfigurationRecord Config { get { return this.config; } set { this.config = value; } }

        public EVCSliceComponentTrackConfigurationBox() : base("evsC")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadClass(out this.config);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteClass(this.config);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateClassSize(config); // config
            return boxSize;
        }
    }


    /*
    class WebVTTConfigurationBox extends Box('vttC') {
        boxstring	config;
    }
    */
    public class WebVTTConfigurationBox : Box
    {
        public const string FourCC = "vttC";

        protected string config;
        public string Config { get { return this.config; } set { this.config = value; } }

        public WebVTTConfigurationBox() : base("vttC")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadString(out this.config);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteString(this.config);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)config.Length * 8; // config
            return boxSize;
        }
    }


    /*
    class WebVTTSourceLabelBox extends Box('vlab') {
        boxstring	source_label;
    }
    */
    public class WebVTTSourceLabelBox : Box
    {
        public const string FourCC = "vlab";

        protected string source_label;
        public string SourceLabel { get { return this.source_label; } set { this.source_label = value; } }

        public WebVTTSourceLabelBox() : base("vlab")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadString(out this.source_label);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteString(this.source_label);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)source_label.Length * 8; // source_label
            return boxSize;
        }
    }


    /*
    class WVTTSampleEntry() extends PlainTextSampleEntry ('wvtt'){
        WebVTTConfigurationBox	config;
        WebVTTSourceLabelBox		label;	// recommended
        BitRateBox (); 					// optional
    }
    */
    public class WVTTSampleEntry : PlainTextSampleEntry
    {
        public const string FourCC = "wvtt";

        protected WebVTTConfigurationBox config;
        public WebVTTConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        protected WebVTTSourceLabelBox label;  //  recommended
        public WebVTTSourceLabelBox Label { get { return this.label; } set { this.label = value; } }

        protected BitRateBox BitRateBox;  //  optional
        public BitRateBox _BitRateBox { get { return this.BitRateBox; } set { this.BitRateBox = value; } }

        public WVTTSampleEntry() : base("wvtt")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            boxSize += stream.ReadBox(out this.label); // recommended
            if (boxSize < size) boxSize += stream.ReadBox(out this.BitRateBox); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            boxSize += stream.WriteBox(this.label); // recommended
            if (this.BitRateBox != null) boxSize += stream.WriteBox(this.BitRateBox); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            boxSize += IsoStream.CalculateSize(label); // label
            if (this.BitRateBox != null) boxSize += IsoStream.CalculateSize(BitRateBox); // BitRateBox
            return boxSize;
        }
    }


    /*
    aligned(8) class AuxiliaryTypeInfoBox extends FullBox ('auxi', 0, 0)
    {
        string aux_track_type;
    }
    */
    public class AuxiliaryTypeInfoBox : FullBox
    {
        public const string FourCC = "auxi";

        protected string aux_track_type;
        public string AuxTrackType { get { return this.aux_track_type; } set { this.aux_track_type = value; } }

        public AuxiliaryTypeInfoBox() : base("auxi", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadString(out this.aux_track_type);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteString(this.aux_track_type);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)aux_track_type.Length * 8; // aux_track_type
            return boxSize;
        }
    }


    /*
    class CodingConstraintsBox extends FullBox('ccst', version = 0, flags = 0){
        unsigned int(1) all_ref_pics_intra;
        unsigned int(1) intra_pred_used;
        unsigned int(4) max_ref_per_pic;
        unsigned int(26) reserved;
    }

    */
    public class CodingConstraintsBox : FullBox
    {
        public const string FourCC = "ccst";

        protected bool all_ref_pics_intra;
        public bool AllRefPicsIntra { get { return this.all_ref_pics_intra; } set { this.all_ref_pics_intra = value; } }

        protected bool intra_pred_used;
        public bool IntraPredUsed { get { return this.intra_pred_used; } set { this.intra_pred_used = value; } }

        protected byte max_ref_per_pic;
        public byte MaxRefPerPic { get { return this.max_ref_per_pic; } set { this.max_ref_per_pic = value; } }

        protected uint reserved;
        public uint Reserved { get { return this.reserved; } set { this.reserved = value; } }

        public CodingConstraintsBox() : base("ccst", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBit(out this.all_ref_pics_intra);
            boxSize += stream.ReadBit(out this.intra_pred_used);
            boxSize += stream.ReadBits(4, out this.max_ref_per_pic);
            boxSize += stream.ReadBits(26, out this.reserved);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBit(this.all_ref_pics_intra);
            boxSize += stream.WriteBit(this.intra_pred_used);
            boxSize += stream.WriteBits(4, this.max_ref_per_pic);
            boxSize += stream.WriteBits(26, this.reserved);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // all_ref_pics_intra
            boxSize += 1; // intra_pred_used
            boxSize += 4; // max_ref_per_pic
            boxSize += 26; // reserved
            return boxSize;
        }
    }


    /*
    aligned(8) class MD5IntegrityBox()
    extends FullBox('md5i', version = 0, flags) {
        unsigned int(8)[16] input_MD5;
        unsigned int(32) input_4cc;
        if (input_4cc == 'sgpd') {
            unsigned int(32) grouping_type;
            if (flags&1)
                unsigned int(32) grouping_type_parameter;
            unsigned int(32) num_entries;
            for(i=0; i<num_entries; i++) {
                unsigned int(32) group_description_index[i];
            }
        }
    }
    */
    public class MD5IntegrityBox : FullBox
    {
        public const string FourCC = "md5i";

        protected byte[] input_MD5;
        public byte[] InputMD5 { get { return this.input_MD5; } set { this.input_MD5 = value; } }

        protected uint input_4cc;
        public uint Input4cc { get { return this.input_4cc; } set { this.input_4cc = value; } }

        protected uint grouping_type;
        public uint GroupingType { get { return this.grouping_type; } set { this.grouping_type = value; } }

        protected uint grouping_type_parameter;
        public uint GroupingTypeParameter { get { return this.grouping_type_parameter; } set { this.grouping_type_parameter = value; } }

        protected uint num_entries;
        public uint NumEntries { get { return this.num_entries; } set { this.num_entries = value; } }

        protected uint[] group_description_index;
        public uint[] GroupDescriptionIndex { get { return this.group_description_index; } set { this.group_description_index = value; } }

        public MD5IntegrityBox(uint flags = 0) : base("md5i", 0, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBytes(16, out this.input_MD5);
            boxSize += stream.ReadUInt32(out this.input_4cc);

            if (input_4cc == IsoStream.FromFourCC("sgpd"))
            {
                boxSize += stream.ReadUInt32(out this.grouping_type);

                if ((flags & 1) == 1)
                {
                    boxSize += stream.ReadUInt32(out this.grouping_type_parameter);
                }
                boxSize += stream.ReadUInt32(out this.num_entries);

                for (int i = 0; i < num_entries; i++)
                {
                    boxSize += stream.ReadUInt32(out this.group_description_index[i]);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBytes(16, this.input_MD5);
            boxSize += stream.WriteUInt32(this.input_4cc);

            if (input_4cc == IsoStream.FromFourCC("sgpd"))
            {
                boxSize += stream.WriteUInt32(this.grouping_type);

                if ((flags & 1) == 1)
                {
                    boxSize += stream.WriteUInt32(this.grouping_type_parameter);
                }
                boxSize += stream.WriteUInt32(this.num_entries);

                for (int i = 0; i < num_entries; i++)
                {
                    boxSize += stream.WriteUInt32(this.group_description_index[i]);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16 * 8; // input_MD5
            boxSize += 32; // input_4cc

            if (input_4cc == IsoStream.FromFourCC("sgpd"))
            {
                boxSize += 32; // grouping_type

                if ((flags & 1) == 1)
                {
                    boxSize += 32; // grouping_type_parameter
                }
                boxSize += 32; // num_entries

                for (int i = 0; i < num_entries; i++)
                {
                    boxSize += 32; // group_description_index
                }
            }
            return boxSize;
        }
    }


    /*
    class AudioSampleEntry(codingname) extends SampleEntry (codingname){
        const unsigned int(32)[2] reserved = 0;
        unsigned int(16) channelcount;
        template unsigned int(16) samplesize = 16;
        unsigned int(16) pre_defined = 0;
        const unsigned int(16) reserved = 0 ;
        template unsigned int(32) samplerate = { default samplerate of media}<<16;
        // optional boxes follow
        Box ();		// further boxes as needed
        ChannelLayout();
        DownMixInstructions() [];
        DRCCoefficientsBasic() [];
        DRCInstructionsBasic() [];
        DRCCoefficientsUniDRC() [];
        DRCInstructionsUniDRC() [];
        // we permit only one DRC Extension box:
        UniDrcConfigExtension();
        // optional boxes follow
        SamplingRateBox();
        ChannelLayout();
    }


    */
    public class AudioSampleEntry : SampleEntry
    {


        protected uint[] reserved = [];
        public uint[] Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected ushort channelcount;
        public ushort Channelcount { get { return this.channelcount; } set { this.channelcount = value; } }

        protected ushort samplesize = 16;
        public ushort Samplesize { get { return this.samplesize; } set { this.samplesize = value; } }

        protected ushort pre_defined = 0;
        public ushort PreDefined { get { return this.pre_defined; } set { this.pre_defined = value; } }

        protected ushort reserved0 = 0;
        public ushort Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected uint samplerate = 0; // = {if track_is_audio 0x0100 else 0}; //  optional boxes follow
        public uint Samplerate { get { return this.samplerate; } set { this.samplerate = value; } }

        protected Box Box;  //  further boxes as needed
        public Box _Box { get { return this.Box; } set { this.Box = value; } }

        protected ChannelLayout ChannelLayout;
        public ChannelLayout _ChannelLayout { get { return this.ChannelLayout; } set { this.ChannelLayout = value; } }

        protected DownMixInstructions[] DownMixInstructions;
        public DownMixInstructions[] _DownMixInstructions { get { return this.DownMixInstructions; } set { this.DownMixInstructions = value; } }

        protected DRCCoefficientsBasic[] DRCCoefficientsBasic;
        public DRCCoefficientsBasic[] _DRCCoefficientsBasic { get { return this.DRCCoefficientsBasic; } set { this.DRCCoefficientsBasic = value; } }

        protected DRCInstructionsBasic[] DRCInstructionsBasic;
        public DRCInstructionsBasic[] _DRCInstructionsBasic { get { return this.DRCInstructionsBasic; } set { this.DRCInstructionsBasic = value; } }

        protected DRCCoefficientsUniDRC[] DRCCoefficientsUniDRC;
        public DRCCoefficientsUniDRC[] _DRCCoefficientsUniDRC { get { return this.DRCCoefficientsUniDRC; } set { this.DRCCoefficientsUniDRC = value; } }

        protected DRCInstructionsUniDRC[] DRCInstructionsUniDRC;  //  we permit only one DRC Extension box:
        public DRCInstructionsUniDRC[] _DRCInstructionsUniDRC { get { return this.DRCInstructionsUniDRC; } set { this.DRCInstructionsUniDRC = value; } }

        protected UniDrcConfigExtension UniDrcConfigExtension;  //  optional boxes follow
        public UniDrcConfigExtension _UniDrcConfigExtension { get { return this.UniDrcConfigExtension; } set { this.UniDrcConfigExtension = value; } }

        protected SamplingRateBox SamplingRateBox;
        public SamplingRateBox _SamplingRateBox { get { return this.SamplingRateBox; } set { this.SamplingRateBox = value; } }

        protected ChannelLayout ChannelLayout0;
        public ChannelLayout _ChannelLayout0 { get { return this.ChannelLayout0; } set { this.ChannelLayout0 = value; } }

        public AudioSampleEntry(string codingname = "") : base(codingname)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32Array(2, out this.reserved);
            boxSize += stream.ReadUInt16(out this.channelcount);
            boxSize += stream.ReadUInt16(out this.samplesize);
            boxSize += stream.ReadUInt16(out this.pre_defined);
            boxSize += stream.ReadUInt16(out this.reserved0);
            boxSize += stream.ReadUInt32(out this.samplerate); // optional boxes follow
            boxSize += stream.ReadBox(out this.Box); // further boxes as needed
            boxSize += stream.ReadBox(out this.ChannelLayout);
            boxSize += stream.ReadBox(out this.DownMixInstructions);
            boxSize += stream.ReadClass(out this.DRCCoefficientsBasic);
            boxSize += stream.ReadClass(out this.DRCInstructionsBasic);
            boxSize += stream.ReadClass(out this.DRCCoefficientsUniDRC);
            boxSize += stream.ReadClass(out this.DRCInstructionsUniDRC); // we permit only one DRC Extension box:
            boxSize += stream.ReadBox(out this.UniDrcConfigExtension); // optional boxes follow
            boxSize += stream.ReadBox(out this.SamplingRateBox);
            boxSize += stream.ReadBox(out this.ChannelLayout0);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32Array(2, this.reserved);
            boxSize += stream.WriteUInt16(this.channelcount);
            boxSize += stream.WriteUInt16(this.samplesize);
            boxSize += stream.WriteUInt16(this.pre_defined);
            boxSize += stream.WriteUInt16(this.reserved0);
            boxSize += stream.WriteUInt32(this.samplerate); // optional boxes follow
            boxSize += stream.WriteBox(this.Box); // further boxes as needed
            boxSize += stream.WriteBox(this.ChannelLayout);
            boxSize += stream.WriteBox(this.DownMixInstructions);
            boxSize += stream.WriteClass(this.DRCCoefficientsBasic);
            boxSize += stream.WriteClass(this.DRCInstructionsBasic);
            boxSize += stream.WriteClass(this.DRCCoefficientsUniDRC);
            boxSize += stream.WriteClass(this.DRCInstructionsUniDRC); // we permit only one DRC Extension box:
            boxSize += stream.WriteBox(this.UniDrcConfigExtension); // optional boxes follow
            boxSize += stream.WriteBox(this.SamplingRateBox);
            boxSize += stream.WriteBox(this.ChannelLayout0);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 2 * 32; // reserved
            boxSize += 16; // channelcount
            boxSize += 16; // samplesize
            boxSize += 16; // pre_defined
            boxSize += 16; // reserved0
            boxSize += 32; // samplerate
            boxSize += IsoStream.CalculateSize(Box); // Box
            boxSize += IsoStream.CalculateSize(ChannelLayout); // ChannelLayout
            boxSize += IsoStream.CalculateSize(DownMixInstructions); // DownMixInstructions
            boxSize += IsoStream.CalculateClassSize(DRCCoefficientsBasic); // DRCCoefficientsBasic
            boxSize += IsoStream.CalculateClassSize(DRCInstructionsBasic); // DRCInstructionsBasic
            boxSize += IsoStream.CalculateClassSize(DRCCoefficientsUniDRC); // DRCCoefficientsUniDRC
            boxSize += IsoStream.CalculateClassSize(DRCInstructionsUniDRC); // DRCInstructionsUniDRC
            boxSize += IsoStream.CalculateSize(UniDrcConfigExtension); // UniDrcConfigExtension
            boxSize += IsoStream.CalculateSize(SamplingRateBox); // SamplingRateBox
            boxSize += IsoStream.CalculateSize(ChannelLayout0); // ChannelLayout0
            return boxSize;
        }
    }


    /*
    class AudioSampleEntryV1(codingname) extends SampleEntry (codingname){
        unsigned int(16) entry_version;	// shall be 1, 
        // and shall be in an stsd with version ==1
        const unsigned int(16)[3] reserved = 0;
        template unsigned int(16) channelcount;	// shall be correct
        template unsigned int(16) samplesize = 16;
        unsigned int(16) pre_defined = 0;
        const unsigned int(16) reserved = 0 ;
        template unsigned int(32) samplerate = 1<<16;
        // optional boxes follow
        SamplingRateBox();
        Box ();		// further boxes as needed
        ChannelLayout();
        DownMixInstructions() [];
        DRCCoefficientsBasic() [];
        DRCInstructionsBasic() [];
        DRCCoefficientsUniDRC() [];
        DRCInstructionsUniDRC() [];
        // we permit only one DRC Extension box:
        UniDrcConfigExtension();
        // optional boxes follow
        ChannelLayout();
    }
    */
    public class AudioSampleEntryV1 : SampleEntry
    {


        protected ushort entry_version;  //  shall be 1, 
        public ushort EntryVersion { get { return this.entry_version; } set { this.entry_version = value; } }

        protected ushort[] reserved = [];
        public ushort[] Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected ushort channelcount;  //  shall be correct
        public ushort Channelcount { get { return this.channelcount; } set { this.channelcount = value; } }

        protected ushort samplesize = 16;
        public ushort Samplesize { get { return this.samplesize; } set { this.samplesize = value; } }

        protected ushort pre_defined = 0;
        public ushort PreDefined { get { return this.pre_defined; } set { this.pre_defined = value; } }

        protected ushort reserved0 = 0;
        public ushort Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected uint samplerate = 1 << 16;  //  optional boxes follow
        public uint Samplerate { get { return this.samplerate; } set { this.samplerate = value; } }

        protected SamplingRateBox SamplingRateBox;
        public SamplingRateBox _SamplingRateBox { get { return this.SamplingRateBox; } set { this.SamplingRateBox = value; } }

        protected Box Box;  //  further boxes as needed
        public Box _Box { get { return this.Box; } set { this.Box = value; } }

        protected ChannelLayout ChannelLayout;
        public ChannelLayout _ChannelLayout { get { return this.ChannelLayout; } set { this.ChannelLayout = value; } }

        protected DownMixInstructions[] DownMixInstructions;
        public DownMixInstructions[] _DownMixInstructions { get { return this.DownMixInstructions; } set { this.DownMixInstructions = value; } }

        protected DRCCoefficientsBasic[] DRCCoefficientsBasic;
        public DRCCoefficientsBasic[] _DRCCoefficientsBasic { get { return this.DRCCoefficientsBasic; } set { this.DRCCoefficientsBasic = value; } }

        protected DRCInstructionsBasic[] DRCInstructionsBasic;
        public DRCInstructionsBasic[] _DRCInstructionsBasic { get { return this.DRCInstructionsBasic; } set { this.DRCInstructionsBasic = value; } }

        protected DRCCoefficientsUniDRC[] DRCCoefficientsUniDRC;
        public DRCCoefficientsUniDRC[] _DRCCoefficientsUniDRC { get { return this.DRCCoefficientsUniDRC; } set { this.DRCCoefficientsUniDRC = value; } }

        protected DRCInstructionsUniDRC[] DRCInstructionsUniDRC;  //  we permit only one DRC Extension box:
        public DRCInstructionsUniDRC[] _DRCInstructionsUniDRC { get { return this.DRCInstructionsUniDRC; } set { this.DRCInstructionsUniDRC = value; } }

        protected UniDrcConfigExtension UniDrcConfigExtension;  //  optional boxes follow
        public UniDrcConfigExtension _UniDrcConfigExtension { get { return this.UniDrcConfigExtension; } set { this.UniDrcConfigExtension = value; } }

        protected ChannelLayout ChannelLayout0;
        public ChannelLayout _ChannelLayout0 { get { return this.ChannelLayout0; } set { this.ChannelLayout0 = value; } }

        public AudioSampleEntryV1(string codingname = "") : base(codingname)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.entry_version); // shall be 1, 
            /*  and shall be in an stsd with version ==1 */
            boxSize += stream.ReadUInt16Array(3, out this.reserved);
            boxSize += stream.ReadUInt16(out this.channelcount); // shall be correct
            boxSize += stream.ReadUInt16(out this.samplesize);
            boxSize += stream.ReadUInt16(out this.pre_defined);
            boxSize += stream.ReadUInt16(out this.reserved0);
            boxSize += stream.ReadUInt32(out this.samplerate); // optional boxes follow
            boxSize += stream.ReadBox(out this.SamplingRateBox);
            boxSize += stream.ReadBox(out this.Box); // further boxes as needed
            boxSize += stream.ReadBox(out this.ChannelLayout);
            boxSize += stream.ReadBox(out this.DownMixInstructions);
            boxSize += stream.ReadClass(out this.DRCCoefficientsBasic);
            boxSize += stream.ReadClass(out this.DRCInstructionsBasic);
            boxSize += stream.ReadClass(out this.DRCCoefficientsUniDRC);
            boxSize += stream.ReadClass(out this.DRCInstructionsUniDRC); // we permit only one DRC Extension box:
            boxSize += stream.ReadBox(out this.UniDrcConfigExtension); // optional boxes follow
            boxSize += stream.ReadBox(out this.ChannelLayout0);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.entry_version); // shall be 1, 
            /*  and shall be in an stsd with version ==1 */
            boxSize += stream.WriteUInt16Array(3, this.reserved);
            boxSize += stream.WriteUInt16(this.channelcount); // shall be correct
            boxSize += stream.WriteUInt16(this.samplesize);
            boxSize += stream.WriteUInt16(this.pre_defined);
            boxSize += stream.WriteUInt16(this.reserved0);
            boxSize += stream.WriteUInt32(this.samplerate); // optional boxes follow
            boxSize += stream.WriteBox(this.SamplingRateBox);
            boxSize += stream.WriteBox(this.Box); // further boxes as needed
            boxSize += stream.WriteBox(this.ChannelLayout);
            boxSize += stream.WriteBox(this.DownMixInstructions);
            boxSize += stream.WriteClass(this.DRCCoefficientsBasic);
            boxSize += stream.WriteClass(this.DRCInstructionsBasic);
            boxSize += stream.WriteClass(this.DRCCoefficientsUniDRC);
            boxSize += stream.WriteClass(this.DRCInstructionsUniDRC); // we permit only one DRC Extension box:
            boxSize += stream.WriteBox(this.UniDrcConfigExtension); // optional boxes follow
            boxSize += stream.WriteBox(this.ChannelLayout0);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // entry_version
            /*  and shall be in an stsd with version ==1 */
            boxSize += 3 * 16; // reserved
            boxSize += 16; // channelcount
            boxSize += 16; // samplesize
            boxSize += 16; // pre_defined
            boxSize += 16; // reserved0
            boxSize += 32; // samplerate
            boxSize += IsoStream.CalculateSize(SamplingRateBox); // SamplingRateBox
            boxSize += IsoStream.CalculateSize(Box); // Box
            boxSize += IsoStream.CalculateSize(ChannelLayout); // ChannelLayout
            boxSize += IsoStream.CalculateSize(DownMixInstructions); // DownMixInstructions
            boxSize += IsoStream.CalculateClassSize(DRCCoefficientsBasic); // DRCCoefficientsBasic
            boxSize += IsoStream.CalculateClassSize(DRCInstructionsBasic); // DRCInstructionsBasic
            boxSize += IsoStream.CalculateClassSize(DRCCoefficientsUniDRC); // DRCCoefficientsUniDRC
            boxSize += IsoStream.CalculateClassSize(DRCInstructionsUniDRC); // DRCInstructionsUniDRC
            boxSize += IsoStream.CalculateSize(UniDrcConfigExtension); // UniDrcConfigExtension
            boxSize += IsoStream.CalculateSize(ChannelLayout0); // ChannelLayout0
            return boxSize;
        }
    }


    /*
    class FontSampleEntry(codingname) extends SampleEntry (codingname){
        //other boxes from derived specifications
    }
    */
    public class FontSampleEntry : SampleEntry
    {


        public FontSampleEntry(string codingname = "") : base(codingname)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            /* other boxes from derived specifications */
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            /* other boxes from derived specifications */
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            /* other boxes from derived specifications */
            return boxSize;
        }
    }


    /*
    class MetaDataSampleEntry(codingname) extends SampleEntry (codingname) {
    }
    */
    public class MetaDataSampleEntry : SampleEntry
    {


        public MetaDataSampleEntry(string codingname = "") : base(codingname)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    class GenericSampleEntry extends Box('encv') {
        // ProtectionSchemeInfoBox {
            // OriginalFormatBox;	// data_format is 'resv'
            // SchemeTypeBox;
            // SchemeInformationBox;
        // }
    // tRestrictedSchemeInfoBox {
            // OriginalFormatBox; // data_format indicates a codec, e.g. 'avc1'
            // SchemeTypeBox;
            // SchemeInformationBox;
        // }
        // Boxes specific to the untransformed sample entry type
        // For 'avc1', these would include AVCConfigurationBox
    }
    */
    public class GenericSampleEntry : Box
    {
        public const string FourCC = "encv";

        public GenericSampleEntry() : base("encv")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            /*  ProtectionSchemeInfoBox { */
            /*  OriginalFormatBox;	// data_format is 'resv' */
            /*  SchemeTypeBox; */
            /*  SchemeInformationBox; */
            /*  } */
            /*  tRestrictedSchemeInfoBox { */
            /*  OriginalFormatBox; // data_format indicates a codec, e.g. 'avc1' */
            /*  SchemeTypeBox; */
            /*  SchemeInformationBox; */
            /*  } */
            /*  Boxes specific to the untransformed sample entry type */
            /*  For 'avc1', these would include AVCConfigurationBox */
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            /*  ProtectionSchemeInfoBox { */
            /*  OriginalFormatBox;	// data_format is 'resv' */
            /*  SchemeTypeBox; */
            /*  SchemeInformationBox; */
            /*  } */
            /*  tRestrictedSchemeInfoBox { */
            /*  OriginalFormatBox; // data_format indicates a codec, e.g. 'avc1' */
            /*  SchemeTypeBox; */
            /*  SchemeInformationBox; */
            /*  } */
            /*  Boxes specific to the untransformed sample entry type */
            /*  For 'avc1', these would include AVCConfigurationBox */
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            /*  ProtectionSchemeInfoBox { */
            /*  OriginalFormatBox;	// data_format is 'resv' */
            /*  SchemeTypeBox; */
            /*  SchemeInformationBox; */
            /*  } */
            /*  tRestrictedSchemeInfoBox { */
            /*  OriginalFormatBox; // data_format indicates a codec, e.g. 'avc1' */
            /*  SchemeTypeBox; */
            /*  SchemeInformationBox; */
            /*  } */
            /*  Boxes specific to the untransformed sample entry type */
            /*  For 'avc1', these would include AVCConfigurationBox */
            return boxSize;
        }
    }


    /*
    class XMLMetaDataSampleEntry() extends MetaDataSampleEntry ('metx') {
        utf8string content_encoding; // optional
        utf8list namespace;
        utf8list schema_location; // optional
    }
    */
    public class XMLMetaDataSampleEntry : MetaDataSampleEntry
    {
        public const string FourCC = "metx";

        protected string content_encoding;  //  optional
        public string ContentEncoding { get { return this.content_encoding; } set { this.content_encoding = value; } }

        protected string ns;
        public string Ns { get { return this.ns; } set { this.ns = value; } }

        protected string schema_location;  //  optional
        public string SchemaLocation { get { return this.schema_location; } set { this.schema_location = value; } }

        public XMLMetaDataSampleEntry() : base("metx")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += stream.ReadString(out this.content_encoding); // optional
            boxSize += stream.ReadString(out this.ns);
            if (boxSize < size) boxSize += stream.ReadString(out this.schema_location); // optional
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.content_encoding != null) boxSize += stream.WriteString(this.content_encoding); // optional
            boxSize += stream.WriteString(this.ns);
            if (this.schema_location != null) boxSize += stream.WriteString(this.schema_location); // optional
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.content_encoding != null) boxSize += (ulong)content_encoding.Length * 8; // content_encoding
            boxSize += (ulong)ns.Length * 8; // ns
            if (this.schema_location != null) boxSize += (ulong)schema_location.Length * 8; // schema_location
            return boxSize;
        }
    }


    /*
    class TextMetaDataSampleEntry() extends MetaDataSampleEntry ('mett') {
        utf8string content_encoding; // optional
        utf8string mime_format;
        TextConfigBox (); // optional
    }
    */
    public class TextMetaDataSampleEntry : MetaDataSampleEntry
    {
        public const string FourCC = "mett";

        protected string content_encoding;  //  optional
        public string ContentEncoding { get { return this.content_encoding; } set { this.content_encoding = value; } }

        protected string mime_format;
        public string MimeFormat { get { return this.mime_format; } set { this.mime_format = value; } }

        protected TextConfigBox TextConfigBox;  //  optional
        public TextConfigBox _TextConfigBox { get { return this.TextConfigBox; } set { this.TextConfigBox = value; } }

        public TextMetaDataSampleEntry() : base("mett")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += stream.ReadString(out this.content_encoding); // optional
            boxSize += stream.ReadString(out this.mime_format);
            if (boxSize < size) boxSize += stream.ReadBox(out this.TextConfigBox); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.content_encoding != null) boxSize += stream.WriteString(this.content_encoding); // optional
            boxSize += stream.WriteString(this.mime_format);
            if (this.TextConfigBox != null) boxSize += stream.WriteBox(this.TextConfigBox); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.content_encoding != null) boxSize += (ulong)content_encoding.Length * 8; // content_encoding
            boxSize += (ulong)mime_format.Length * 8; // mime_format
            if (this.TextConfigBox != null) boxSize += IsoStream.CalculateSize(TextConfigBox); // TextConfigBox
            return boxSize;
        }
    }


    /*
    class URIMetaSampleEntry() extends MetaDataSampleEntry ('urim') {
        URIBox			the_label;
        URIInitBox		init;		// optional
    }
    */
    public class URIMetaSampleEntry : MetaDataSampleEntry
    {
        public const string FourCC = "urim";

        protected URIBox the_label;
        public URIBox TheLabel { get { return this.the_label; } set { this.the_label = value; } }

        protected URIInitBox init;  //  optional
        public URIInitBox Init { get { return this.init; } set { this.init = value; } }

        public URIMetaSampleEntry() : base("urim")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.the_label);
            if (boxSize < size) boxSize += stream.ReadBox(out this.init); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.the_label);
            if (this.init != null) boxSize += stream.WriteBox(this.init); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(the_label); // the_label
            if (this.init != null) boxSize += IsoStream.CalculateSize(init); // init
            return boxSize;
        }
    }


    /*
    aligned(8) class BoxedMetaDataSampleEntry 
        extends MetaDataSampleEntry ('mebx') {
        MetaDataKeyTableBox();				// mandatory
        BitRateBox ();							// optional
    }
    */
    public class BoxedMetaDataSampleEntry : MetaDataSampleEntry
    {
        public const string FourCC = "mebx";

        protected MetaDataKeyTableBox MetaDataKeyTableBox;  //  mandatory
        public MetaDataKeyTableBox _MetaDataKeyTableBox { get { return this.MetaDataKeyTableBox; } set { this.MetaDataKeyTableBox = value; } }

        protected BitRateBox BitRateBox;  //  optional
        public BitRateBox _BitRateBox { get { return this.BitRateBox; } set { this.BitRateBox = value; } }

        public BoxedMetaDataSampleEntry() : base("mebx")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.MetaDataKeyTableBox); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.BitRateBox); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.MetaDataKeyTableBox); // mandatory
            if (this.BitRateBox != null) boxSize += stream.WriteBox(this.BitRateBox); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(MetaDataKeyTableBox); // MetaDataKeyTableBox
            if (this.BitRateBox != null) boxSize += IsoStream.CalculateSize(BitRateBox); // BitRateBox
            return boxSize;
        }
    }


    /*
    class FDHintSampleEntry() extends HintSampleEntry ('fdp ') {
        unsigned int(16)	hinttrackversion = 1;
        unsigned int(16)	highestcompatibleversion = 1;
        unsigned int(16)	partition_entry_ID;
        unsigned int(16)	FEC_overhead;
    }
    */
    public class FDHintSampleEntry : HintSampleEntry
    {
        public const string FourCC = "fdp ";

        protected ushort hinttrackversion = 1;
        public ushort Hinttrackversion { get { return this.hinttrackversion; } set { this.hinttrackversion = value; } }

        protected ushort highestcompatibleversion = 1;
        public ushort Highestcompatibleversion { get { return this.highestcompatibleversion; } set { this.highestcompatibleversion = value; } }

        protected ushort partition_entry_ID;
        public ushort PartitionEntryID { get { return this.partition_entry_ID; } set { this.partition_entry_ID = value; } }

        protected ushort FEC_overhead;
        public ushort FECOverhead { get { return this.FEC_overhead; } set { this.FEC_overhead = value; } }

        public FDHintSampleEntry() : base("fdp ")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.hinttrackversion);
            boxSize += stream.ReadUInt16(out this.highestcompatibleversion);
            boxSize += stream.ReadUInt16(out this.partition_entry_ID);
            boxSize += stream.ReadUInt16(out this.FEC_overhead);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.hinttrackversion);
            boxSize += stream.WriteUInt16(this.highestcompatibleversion);
            boxSize += stream.WriteUInt16(this.partition_entry_ID);
            boxSize += stream.WriteUInt16(this.FEC_overhead);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // hinttrackversion
            boxSize += 16; // highestcompatibleversion
            boxSize += 16; // partition_entry_ID
            boxSize += 16; // FEC_overhead
            return boxSize;
        }
    }


    /*
    class IncompleteAVCSampleEntry() extends VisualSampleEntry ('icpv'){
        CompleteTrackInfoBox();
        AVCConfigurationBox config;
    }
    */
    public class IncompleteAVCSampleEntry : VisualSampleEntry
    {
        public const string FourCC = "icpv";

        protected CompleteTrackInfoBox CompleteTrackInfoBox;
        public CompleteTrackInfoBox _CompleteTrackInfoBox { get { return this.CompleteTrackInfoBox; } set { this.CompleteTrackInfoBox = value; } }

        protected AVCConfigurationBox config;
        public AVCConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        public IncompleteAVCSampleEntry() : base("icpv")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.CompleteTrackInfoBox);
            boxSize += stream.ReadBox(out this.config);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.CompleteTrackInfoBox);
            boxSize += stream.WriteBox(this.config);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(CompleteTrackInfoBox); // CompleteTrackInfoBox
            boxSize += IsoStream.CalculateSize(config); // config
            return boxSize;
        }
    }


    /*
    class ProtectedMPEG2TransportStreamSampleEntry
        extends MPEG2TSSampleEntry('pm2t') {
        ProtectionSchemeInfoBox		SchemeInformation;
    }
    */
    public class ProtectedMPEG2TransportStreamSampleEntry : MPEG2TSSampleEntry
    {
        public const string FourCC = "pm2t";

        protected ProtectionSchemeInfoBox SchemeInformation;
        public ProtectionSchemeInfoBox _SchemeInformation { get { return this.SchemeInformation; } set { this.SchemeInformation = value; } }

        public ProtectedMPEG2TransportStreamSampleEntry() : base("pm2t")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.SchemeInformation);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.SchemeInformation);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(SchemeInformation); // SchemeInformation
            return boxSize;
        }
    }


    /*
    class ProtectedRtpReceptionHintSampleEntry
        extends RtpReceptionHintSampleEntry ('prtp') {
        ProtectionSchemeInfoBox		SchemeInformation;
    }
    */
    public class ProtectedRtpReceptionHintSampleEntry : RtpReceptionHintSampleEntry
    {
        public const string FourCC = "prtp";

        protected ProtectionSchemeInfoBox SchemeInformation;
        public ProtectionSchemeInfoBox _SchemeInformation { get { return this.SchemeInformation; } set { this.SchemeInformation = value; } }

        public ProtectedRtpReceptionHintSampleEntry() : base("prtp")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.SchemeInformation);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.SchemeInformation);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(SchemeInformation); // SchemeInformation
            return boxSize;
        }
    }


    /*
    class MPEG2TSReceptionSampleEntry extends MPEG2TSSampleEntry('rm2t') {}
    */
    public class MPEG2TSReceptionSampleEntry : MPEG2TSSampleEntry
    {
        public const string FourCC = "rm2t";

        public MPEG2TSReceptionSampleEntry() : base("rm2t")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    class ReceivedRtpHintSampleEntry() extends HintSampleEntry ('rrtp') {
        uint(16)		hinttrackversion = 1;
        uint(16)		highestcompatibleversion = 1;
        uint(32)		maxpacketsize;
    }
    */
    public class ReceivedRtpHintSampleEntry : HintSampleEntry
    {
        public const string FourCC = "rrtp";

        protected ushort hinttrackversion = 1;
        public ushort Hinttrackversion { get { return this.hinttrackversion; } set { this.hinttrackversion = value; } }

        protected ushort highestcompatibleversion = 1;
        public ushort Highestcompatibleversion { get { return this.highestcompatibleversion; } set { this.highestcompatibleversion = value; } }

        protected uint maxpacketsize;
        public uint Maxpacketsize { get { return this.maxpacketsize; } set { this.maxpacketsize = value; } }

        public ReceivedRtpHintSampleEntry() : base("rrtp")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.hinttrackversion);
            boxSize += stream.ReadUInt16(out this.highestcompatibleversion);
            boxSize += stream.ReadUInt32(out this.maxpacketsize);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.hinttrackversion);
            boxSize += stream.WriteUInt16(this.highestcompatibleversion);
            boxSize += stream.WriteUInt32(this.maxpacketsize);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // hinttrackversion
            boxSize += 16; // highestcompatibleversion
            boxSize += 32; // maxpacketsize
            return boxSize;
        }
    }


    /*
    class ReceivedSrtpHintSampleEntry() extends HintSampleEntry ('rsrp') {
        uint(16)		hinttrackversion = 1;
        uint(16)		highestcompatibleversion = 1;
        uint(32)		maxpacketsize;
    }
    */
    public class ReceivedSrtpHintSampleEntry : HintSampleEntry
    {
        public const string FourCC = "rsrp";

        protected ushort hinttrackversion = 1;
        public ushort Hinttrackversion { get { return this.hinttrackversion; } set { this.hinttrackversion = value; } }

        protected ushort highestcompatibleversion = 1;
        public ushort Highestcompatibleversion { get { return this.highestcompatibleversion; } set { this.highestcompatibleversion = value; } }

        protected uint maxpacketsize;
        public uint Maxpacketsize { get { return this.maxpacketsize; } set { this.maxpacketsize = value; } }

        public ReceivedSrtpHintSampleEntry() : base("rsrp")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.hinttrackversion);
            boxSize += stream.ReadUInt16(out this.highestcompatibleversion);
            boxSize += stream.ReadUInt32(out this.maxpacketsize);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.hinttrackversion);
            boxSize += stream.WriteUInt16(this.highestcompatibleversion);
            boxSize += stream.WriteUInt32(this.maxpacketsize);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // hinttrackversion
            boxSize += 16; // highestcompatibleversion
            boxSize += 32; // maxpacketsize
            return boxSize;
        }
    }


    /*
    class MPEG2TSServerSampleEntry extends MPEG2TSSampleEntry('sm2t') {}
    */
    public class MPEG2TSServerSampleEntry : MPEG2TSSampleEntry
    {
        public const string FourCC = "sm2t";

        public MPEG2TSServerSampleEntry() : base("sm2t")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    class SrtpHintSampleEntry() extends HintSampleEntry ('srtp') {
        uint(16)		hinttrackversion = 1;
        uint(16)		highestcompatibleversion = 1;
        uint(32)		maxpacketsize;
    }
    */
    public class SrtpHintSampleEntry : HintSampleEntry
    {
        public const string FourCC = "srtp";

        protected ushort hinttrackversion = 1;
        public ushort Hinttrackversion { get { return this.hinttrackversion; } set { this.hinttrackversion = value; } }

        protected ushort highestcompatibleversion = 1;
        public ushort Highestcompatibleversion { get { return this.highestcompatibleversion; } set { this.highestcompatibleversion = value; } }

        protected uint maxpacketsize;
        public uint Maxpacketsize { get { return this.maxpacketsize; } set { this.maxpacketsize = value; } }

        public SrtpHintSampleEntry() : base("srtp")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.hinttrackversion);
            boxSize += stream.ReadUInt16(out this.highestcompatibleversion);
            boxSize += stream.ReadUInt32(out this.maxpacketsize);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.hinttrackversion);
            boxSize += stream.WriteUInt16(this.highestcompatibleversion);
            boxSize += stream.WriteUInt32(this.maxpacketsize);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // hinttrackversion
            boxSize += 16; // highestcompatibleversion
            boxSize += 32; // maxpacketsize
            return boxSize;
        }
    }


    /*
    aligned(8) class HapticSampleEntry(codingname)
        extends SampleEntry(codingname) {
        Box()[]	otherboxes;
    }
    */
    public class HapticSampleEntry : SampleEntry
    {


        protected Box[] otherboxes;
        public Box[] Otherboxes { get { return this.otherboxes; } set { this.otherboxes = value; } }

        public HapticSampleEntry(string codingname = "") : base(codingname)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.otherboxes);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.otherboxes);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(otherboxes); // otherboxes
            return boxSize;
        }
    }


    /*
    class VolumetricVisualSampleEntry(codingname) 
        extends SampleEntry (codingname){
        unsigned int(8)[32] compressorname;
        // other boxes from derived specifications
    }
    */
    public class VolumetricVisualSampleEntry : SampleEntry
    {


        protected byte[] compressorname;  //  other boxes from derived specifications
        public byte[] Compressorname { get { return this.compressorname; } set { this.compressorname = value; } }

        public VolumetricVisualSampleEntry(string codingname = "") : base(codingname)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBytes(32, out this.compressorname); // other boxes from derived specifications
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBytes(32, this.compressorname); // other boxes from derived specifications
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32 * 8; // compressorname
            return boxSize;
        }
    }


    /*
    class VisualSampleEntry('resv') extends SampleEntry ('resv'){
        unsigned int(16) pre_defined = 0;
        const unsigned int(16) reserved = 0;
        unsigned int(32)[3]	pre_defined = 0;
        unsigned int(16)	width;
        unsigned int(16)	height;
        template unsigned int(32)	horizresolution = 0x00480000;	// 72 dpi
        template unsigned int(32)	vertresolution  = 0x00480000;	// 72 dpi
        const unsigned int(32)	reserved = 0;
        template unsigned int(16)	frame_count = 1;
        uint(8)[32]	compressorname;
        template unsigned int(16)	depth = 0x0018;
        int(16)	pre_defined = -1;
        // other boxes from derived specifications
        CleanApertureBox			clap;		// optional
        PixelAspectRatioBox		pasp;		// optional
    }

    */
    public class VisualSampleEntry : SampleEntry
    {
        public const string FourCC = "resv";

        protected ushort pre_defined = 0;
        public ushort PreDefined { get { return this.pre_defined; } set { this.pre_defined = value; } }

        protected ushort reserved = 0;
        public ushort Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected uint[] pre_defined0 = [];
        public uint[] PreDefined0 { get { return this.pre_defined0; } set { this.pre_defined0 = value; } }

        protected ushort width;
        public ushort Width { get { return this.width; } set { this.width = value; } }

        protected ushort height;
        public ushort Height { get { return this.height; } set { this.height = value; } }

        protected uint horizresolution = 0x00480000;  //  72 dpi
        public uint Horizresolution { get { return this.horizresolution; } set { this.horizresolution = value; } }

        protected uint vertresolution = 0x00480000;  //  72 dpi
        public uint Vertresolution { get { return this.vertresolution; } set { this.vertresolution = value; } }

        protected uint reserved0 = 0;
        public uint Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected ushort frame_count = 1;
        public ushort FrameCount { get { return this.frame_count; } set { this.frame_count = value; } }

        protected byte[] compressorname;
        public byte[] Compressorname { get { return this.compressorname; } set { this.compressorname = value; } }

        protected ushort depth = 0x0018;
        public ushort Depth { get { return this.depth; } set { this.depth = value; } }

        protected short pre_defined1 = -1;  //  other boxes from derived specifications
        public short PreDefined1 { get { return this.pre_defined1; } set { this.pre_defined1 = value; } }

        protected CleanApertureBox clap;  //  optional
        public CleanApertureBox Clap { get { return this.clap; } set { this.clap = value; } }

        protected PixelAspectRatioBox pasp;  //  optional
        public PixelAspectRatioBox Pasp { get { return this.pasp; } set { this.pasp = value; } }

        public VisualSampleEntry(string boxtype = "resv") : base("resv")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.pre_defined);
            boxSize += stream.ReadUInt16(out this.reserved);
            boxSize += stream.ReadUInt32Array(3, out this.pre_defined0);
            boxSize += stream.ReadUInt16(out this.width);
            boxSize += stream.ReadUInt16(out this.height);
            boxSize += stream.ReadUInt32(out this.horizresolution); // 72 dpi
            boxSize += stream.ReadUInt32(out this.vertresolution); // 72 dpi
            boxSize += stream.ReadUInt32(out this.reserved0);
            boxSize += stream.ReadUInt16(out this.frame_count);
            boxSize += stream.ReadBytes(32, out this.compressorname);
            boxSize += stream.ReadUInt16(out this.depth);
            boxSize += stream.ReadInt16(out this.pre_defined1); // other boxes from derived specifications
            if (boxSize < size) boxSize += stream.ReadBox(out this.clap); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.pasp); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.pre_defined);
            boxSize += stream.WriteUInt16(this.reserved);
            boxSize += stream.WriteUInt32Array(3, this.pre_defined0);
            boxSize += stream.WriteUInt16(this.width);
            boxSize += stream.WriteUInt16(this.height);
            boxSize += stream.WriteUInt32(this.horizresolution); // 72 dpi
            boxSize += stream.WriteUInt32(this.vertresolution); // 72 dpi
            boxSize += stream.WriteUInt32(this.reserved0);
            boxSize += stream.WriteUInt16(this.frame_count);
            boxSize += stream.WriteBytes(32, this.compressorname);
            boxSize += stream.WriteUInt16(this.depth);
            boxSize += stream.WriteInt16(this.pre_defined1); // other boxes from derived specifications
            if (this.clap != null) boxSize += stream.WriteBox(this.clap); // optional
            if (this.pasp != null) boxSize += stream.WriteBox(this.pasp); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // pre_defined
            boxSize += 16; // reserved
            boxSize += 3 * 32; // pre_defined0
            boxSize += 16; // width
            boxSize += 16; // height
            boxSize += 32; // horizresolution
            boxSize += 32; // vertresolution
            boxSize += 32; // reserved0
            boxSize += 16; // frame_count
            boxSize += 32 * 8; // compressorname
            boxSize += 16; // depth
            boxSize += 16; // pre_defined1
            if (this.clap != null) boxSize += IsoStream.CalculateSize(clap); // clap
            if (this.pasp != null) boxSize += IsoStream.CalculateSize(pasp); // pasp
            return boxSize;
        }
    }


    /*
    class RtpHintSampleEntry() extends HintSampleEntry ('rtp ') {
        uint(16)		hinttrackversion = 1;
        uint(16)		highestcompatibleversion = 1;
        uint(32)		maxpacketsize;
    }
    */
    public class RtpHintSampleEntry : HintSampleEntry
    {
        public const string FourCC = "rtp ";

        protected ushort hinttrackversion = 1;
        public ushort Hinttrackversion { get { return this.hinttrackversion; } set { this.hinttrackversion = value; } }

        protected ushort highestcompatibleversion = 1;
        public ushort Highestcompatibleversion { get { return this.highestcompatibleversion; } set { this.highestcompatibleversion = value; } }

        protected uint maxpacketsize;
        public uint Maxpacketsize { get { return this.maxpacketsize; } set { this.maxpacketsize = value; } }

        public RtpHintSampleEntry() : base("rtp ")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.hinttrackversion);
            boxSize += stream.ReadUInt16(out this.highestcompatibleversion);
            boxSize += stream.ReadUInt32(out this.maxpacketsize);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.hinttrackversion);
            boxSize += stream.WriteUInt16(this.highestcompatibleversion);
            boxSize += stream.WriteUInt32(this.maxpacketsize);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // hinttrackversion
            boxSize += 16; // highestcompatibleversion
            boxSize += 32; // maxpacketsize
            return boxSize;
        }
    }


    /*
    aligned(8) class EntityToGroupBox(grouping_type, version, flags)
    extends FullBox(grouping_type, version, flags) {
        unsigned int(32) group_id;
        unsigned int(32) num_entities_in_group;
        for(i=0; i<num_entities_in_group; i++)
            unsigned int(32) entity_id;
    // the remaining data may be specified for a particular grouping_type
    }
    */
    public class EntityToGroupBox : FullBox
    {


        protected uint group_id;
        public uint GroupId { get { return this.group_id; } set { this.group_id = value; } }

        protected uint num_entities_in_group;
        public uint NumEntitiesInGroup { get { return this.num_entities_in_group; } set { this.num_entities_in_group = value; } }

        protected uint entity_id;  //  the remaining data may be specified for a particular grouping_type
        public uint EntityId { get { return this.entity_id; } set { this.entity_id = value; } }

        public EntityToGroupBox(string grouping_type, byte version, uint flags) : base(grouping_type, version, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.group_id);
            boxSize += stream.ReadUInt32(out this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += stream.ReadUInt32(out this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.group_id);
            boxSize += stream.WriteUInt32(this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += stream.WriteUInt32(this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // group_id
            boxSize += 32; // num_entities_in_group

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // entity_id
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class BrandProperty extends GeneralTypeBox ('brnd') 
    { }
    */
    public class BrandProperty : GeneralTypeBox
    {
        public const string FourCC = "brnd";

        public BrandProperty() : base("brnd")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    aligned(8) class SingleItemTypeReferenceBox(referenceType) extends Box(referenceType) {
        unsigned int(16) from_item_ID;
        unsigned int(16) reference_count;
        for (j=0; j<reference_count; j++) {
            unsigned int(16) to_item_ID;
        }
    }



    */
    public class SingleItemTypeReferenceBox : Box
    {


        protected ushort from_item_ID;
        public ushort FromItemID { get { return this.from_item_ID; } set { this.from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return this.reference_count; } set { this.reference_count = value; } }

        protected ushort to_item_ID;
        public ushort ToItemID { get { return this.to_item_ID; } set { this.to_item_ID = value; } }

        public SingleItemTypeReferenceBox(string referenceType) : base(referenceType)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.from_item_ID);
            boxSize += stream.ReadUInt16(out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += stream.ReadUInt16(out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.from_item_ID);
            boxSize += stream.WriteUInt16(this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += stream.WriteUInt16(this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 16; // to_item_ID
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SingleItemTypeReferenceBoxLarge(referenceType) extends Box(referenceType) {
        unsigned int(32) from_item_ID;
        unsigned int(16) reference_count;
        for (j=0; j<reference_count; j++) {
            unsigned int(32) to_item_ID;
        }
    }
    */
    public class SingleItemTypeReferenceBoxLarge : Box
    {


        protected uint from_item_ID;
        public uint FromItemID { get { return this.from_item_ID; } set { this.from_item_ID = value; } }

        protected ushort reference_count;
        public ushort ReferenceCount { get { return this.reference_count; } set { this.reference_count = value; } }

        protected uint to_item_ID;
        public uint ToItemID { get { return this.to_item_ID; } set { this.to_item_ID = value; } }

        public SingleItemTypeReferenceBoxLarge(string referenceType) : base(referenceType)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.from_item_ID);
            boxSize += stream.ReadUInt16(out this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += stream.ReadUInt32(out this.to_item_ID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.from_item_ID);
            boxSize += stream.WriteUInt16(this.reference_count);

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += stream.WriteUInt32(this.to_item_ID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // from_item_ID
            boxSize += 16; // reference_count

            for (int j = 0; j < reference_count; j++)
            {
                boxSize += 32; // to_item_ID
            }
            return boxSize;
        }
    }


    /*
    class AlternativeStartupEntry() extends VisualSampleGroupEntry ('alst')
    {
        unsigned int(16) roll_count;
        unsigned int(16) first_output_sample;
        for (i=1; i <= roll_count; i++)
            unsigned int(32) sample_offset[i];
        j=1;
        do { // optional, until the end of the structure
            unsigned int(16) num_output_samples[j];
            unsigned int(16) num_total_samples[j];
            j++;
        }
    }
    */
    public class AlternativeStartupEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "alst";

        protected ushort roll_count;
        public ushort RollCount { get { return this.roll_count; } set { this.roll_count = value; } }

        protected ushort first_output_sample;
        public ushort FirstOutputSample { get { return this.first_output_sample; } set { this.first_output_sample = value; } }

        protected uint[] sample_offset;
        public uint[] SampleOffset { get { return this.sample_offset; } set { this.sample_offset = value; } }

        protected ushort[] num_output_samples;
        public ushort[] NumOutputSamples { get { return this.num_output_samples; } set { this.num_output_samples = value; } }

        protected ushort[] num_total_samples;
        public ushort[] NumTotalSamples { get { return this.num_total_samples; } set { this.num_total_samples = value; } }

        public AlternativeStartupEntry() : base("alst")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.roll_count);
            boxSize += stream.ReadUInt16(out this.first_output_sample);

            for (int i = 1; i <= roll_count; i++)
            {
                boxSize += stream.ReadUInt32(out this.sample_offset[i]);
            }
            int j = 1;

            while (true)
            {
                /*  optional, until the end of the structure */
                boxSize += stream.ReadUInt16(out this.num_output_samples[j]);
                boxSize += stream.ReadUInt16(out this.num_total_samples[j]);
                j++;
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.roll_count);
            boxSize += stream.WriteUInt16(this.first_output_sample);

            for (int i = 1; i <= roll_count; i++)
            {
                boxSize += stream.WriteUInt32(this.sample_offset[i]);
            }
            int j = 1;

            while (true)
            {
                /*  optional, until the end of the structure */
                boxSize += stream.WriteUInt16(this.num_output_samples[j]);
                boxSize += stream.WriteUInt16(this.num_total_samples[j]);
                j++;
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // roll_count
            boxSize += 16; // first_output_sample

            for (int i = 1; i <= roll_count; i++)
            {
                boxSize += 32; // sample_offset
            }
            int j = 1;

            while (true)
            {
                /*  optional, until the end of the structure */
                boxSize += 16; // num_output_samples
                boxSize += 16; // num_total_samples
                j++;
            }
            return boxSize;
        }
    }


    /*
    class VisualDRAPEntry() 
    extends VisualSampleGroupEntry('drap') {
        unsigned int(3) DRAP_type;
        unsigned int(29) reserved = 0;
    }
    */
    public class VisualDRAPEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "drap";

        protected byte DRAP_type;
        public byte DRAPType { get { return this.DRAP_type; } set { this.DRAP_type = value; } }

        protected uint reserved = 0;
        public uint Reserved { get { return this.reserved; } set { this.reserved = value; } }

        public VisualDRAPEntry() : base("drap")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(3, out this.DRAP_type);
            boxSize += stream.ReadBits(29, out this.reserved);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(3, this.DRAP_type);
            boxSize += stream.WriteBits(29, this.reserved);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 3; // DRAP_type
            boxSize += 29; // reserved
            return boxSize;
        }
    }


    /*
    class AudioPreRollEntry() extends AudioSampleGroupEntry ('prol')
    {
        signed int(16) roll_distance;
    }
    */
    public class AudioPreRollEntry : AudioSampleGroupEntry
    {
        public const string FourCC = "prol";

        protected short roll_distance;
        public short RollDistance { get { return this.roll_distance; } set { this.roll_distance = value; } }

        public AudioPreRollEntry() : base("prol")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadInt16(out this.roll_distance);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteInt16(this.roll_distance);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // roll_distance
            return boxSize;
        }
    }


    /*
    class VisualRandomAccessEntry() extends VisualSampleGroupEntry ('rap ')
    {
        unsigned int(1) num_leading_samples_known;
        unsigned int(7) num_leading_samples;
    }
    */
    public class VisualRandomAccessEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "rap ";

        protected bool num_leading_samples_known;
        public bool NumLeadingSamplesKnown { get { return this.num_leading_samples_known; } set { this.num_leading_samples_known = value; } }

        protected byte num_leading_samples;
        public byte NumLeadingSamples { get { return this.num_leading_samples; } set { this.num_leading_samples = value; } }

        public VisualRandomAccessEntry() : base("rap ")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBit(out this.num_leading_samples_known);
            boxSize += stream.ReadBits(7, out this.num_leading_samples);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBit(this.num_leading_samples_known);
            boxSize += stream.WriteBits(7, this.num_leading_samples);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // num_leading_samples_known
            boxSize += 7; // num_leading_samples
            return boxSize;
        }
    }


    /*
    class RateShareEntry() extends SampleGroupDescriptionEntry('rash') {
        unsigned int(16)	operation_point_count;
        if (operation_point_count == 1) {
            unsigned int(16)		target_rate_share;
        }
        else {
            for (i=0; i < operation_point_count; i++) {
                unsigned int(32)	available_bitrate;
                unsigned int(16)	target_rate_share;
            }
        }
        unsigned int(32)	maximum_bitrate;
        unsigned int(32)	minimum_bitrate;
        unsigned int(8)	discard_priority;
    }
    */
    public class RateShareEntry : SampleGroupDescriptionEntry
    {
        public const string FourCC = "rash";

        protected ushort operation_point_count;
        public ushort OperationPointCount { get { return this.operation_point_count; } set { this.operation_point_count = value; } }

        protected ushort target_rate_share;
        public ushort TargetRateShare { get { return this.target_rate_share; } set { this.target_rate_share = value; } }

        protected uint available_bitrate;
        public uint AvailableBitrate { get { return this.available_bitrate; } set { this.available_bitrate = value; } }

        protected ushort target_rate_share0;
        public ushort TargetRateShare0 { get { return this.target_rate_share0; } set { this.target_rate_share0 = value; } }

        protected uint maximum_bitrate;
        public uint MaximumBitrate { get { return this.maximum_bitrate; } set { this.maximum_bitrate = value; } }

        protected uint minimum_bitrate;
        public uint MinimumBitrate { get { return this.minimum_bitrate; } set { this.minimum_bitrate = value; } }

        protected byte discard_priority;
        public byte DiscardPriority { get { return this.discard_priority; } set { this.discard_priority = value; } }

        public RateShareEntry() : base("rash")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.operation_point_count);

            if (operation_point_count == 1)
            {
                boxSize += stream.ReadUInt16(out this.target_rate_share);
            }

            else
            {

                for (int i = 0; i < operation_point_count; i++)
                {
                    boxSize += stream.ReadUInt32(out this.available_bitrate);
                    boxSize += stream.ReadUInt16(out this.target_rate_share0);
                }
            }
            boxSize += stream.ReadUInt32(out this.maximum_bitrate);
            boxSize += stream.ReadUInt32(out this.minimum_bitrate);
            boxSize += stream.ReadUInt8(out this.discard_priority);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.operation_point_count);

            if (operation_point_count == 1)
            {
                boxSize += stream.WriteUInt16(this.target_rate_share);
            }

            else
            {

                for (int i = 0; i < operation_point_count; i++)
                {
                    boxSize += stream.WriteUInt32(this.available_bitrate);
                    boxSize += stream.WriteUInt16(this.target_rate_share0);
                }
            }
            boxSize += stream.WriteUInt32(this.maximum_bitrate);
            boxSize += stream.WriteUInt32(this.minimum_bitrate);
            boxSize += stream.WriteUInt8(this.discard_priority);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // operation_point_count

            if (operation_point_count == 1)
            {
                boxSize += 16; // target_rate_share
            }

            else
            {

                for (int i = 0; i < operation_point_count; i++)
                {
                    boxSize += 32; // available_bitrate
                    boxSize += 16; // target_rate_share0
                }
            }
            boxSize += 32; // maximum_bitrate
            boxSize += 32; // minimum_bitrate
            boxSize += 8; // discard_priority
            return boxSize;
        }
    }


    /*
    class AudioRollRecoveryEntry() extends AudioSampleGroupEntry ('roll')
    {
        signed int(16) roll_distance;
    }
    */
    public class AudioRollRecoveryEntry : AudioSampleGroupEntry
    {
        public const string FourCC = "roll";

        protected short roll_distance;
        public short RollDistance { get { return this.roll_distance; } set { this.roll_distance = value; } }

        public AudioRollRecoveryEntry() : base("roll")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadInt16(out this.roll_distance);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteInt16(this.roll_distance);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // roll_distance
            return boxSize;
        }
    }


    /*
    class SAPEntry() extends  SampleGroupDescriptionEntry('sap ')
    {
        unsigned int(1) dependent_flag;
        unsigned int(3) reserved;
        unsigned int(4) SAP_type;
    }
    */
    public class SAPEntry : SampleGroupDescriptionEntry
    {
        public const string FourCC = "sap ";

        protected bool dependent_flag;
        public bool DependentFlag { get { return this.dependent_flag; } set { this.dependent_flag = value; } }

        protected byte reserved;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte SAP_type;
        public byte SAPType { get { return this.SAP_type; } set { this.SAP_type = value; } }

        public SAPEntry() : base("sap ")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBit(out this.dependent_flag);
            boxSize += stream.ReadBits(3, out this.reserved);
            boxSize += stream.ReadBits(4, out this.SAP_type);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBit(this.dependent_flag);
            boxSize += stream.WriteBits(3, this.reserved);
            boxSize += stream.WriteBits(4, this.SAP_type);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // dependent_flag
            boxSize += 3; // reserved
            boxSize += 4; // SAP_type
            return boxSize;
        }
    }


    /*
    class SampleToMetadataItemEntry() 
    extends SampleGroupDescriptionEntry('stmi') {
        unsigned int(32) meta_box_handler_type;
        unsigned int(32) num_items;
        for(i = 0; i < num_items; i++) {
            unsigned int(32) item_id[i];
        }
    }
    */
    public class SampleToMetadataItemEntry : SampleGroupDescriptionEntry
    {
        public const string FourCC = "stmi";

        protected uint meta_box_handler_type;
        public uint MetaBoxHandlerType { get { return this.meta_box_handler_type; } set { this.meta_box_handler_type = value; } }

        protected uint num_items;
        public uint NumItems { get { return this.num_items; } set { this.num_items = value; } }

        protected uint[] item_id;
        public uint[] ItemId { get { return this.item_id; } set { this.item_id = value; } }

        public SampleToMetadataItemEntry() : base("stmi")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.meta_box_handler_type);
            boxSize += stream.ReadUInt32(out this.num_items);

            for (int i = 0; i < num_items; i++)
            {
                boxSize += stream.ReadUInt32(out this.item_id[i]);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.meta_box_handler_type);
            boxSize += stream.WriteUInt32(this.num_items);

            for (int i = 0; i < num_items; i++)
            {
                boxSize += stream.WriteUInt32(this.item_id[i]);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // meta_box_handler_type
            boxSize += 32; // num_items

            for (int i = 0; i < num_items; i++)
            {
                boxSize += 32; // item_id
            }
            return boxSize;
        }
    }


    /*
    class TemporalLevelEntry() extends VisualSampleGroupEntry('tele')
    {
        bit(1)	level_independently_decodable;
        bit(7)	reserved=0;
    }
    */
    public class TemporalLevelEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "tele";

        protected bool level_independently_decodable;
        public bool LevelIndependentlyDecodable { get { return this.level_independently_decodable; } set { this.level_independently_decodable = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        public TemporalLevelEntry() : base("tele")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBit(out this.level_independently_decodable);
            boxSize += stream.ReadBits(7, out this.reserved);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBit(this.level_independently_decodable);
            boxSize += stream.WriteBits(7, this.reserved);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // level_independently_decodable
            boxSize += 7; // reserved
            return boxSize;
        }
    }


    /*
    class PixelAspectRatioEntry() extends VisualSampleGroupEntry ('pasr'){
        unsigned int(32) hSpacing;
        unsigned int(32) vSpacing;
    }
    */
    public class PixelAspectRatioEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "pasr";

        protected uint hSpacing;
        public uint HSpacing { get { return this.hSpacing; } set { this.hSpacing = value; } }

        protected uint vSpacing;
        public uint VSpacing { get { return this.vSpacing; } set { this.vSpacing = value; } }

        public PixelAspectRatioEntry() : base("pasr")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.hSpacing);
            boxSize += stream.ReadUInt32(out this.vSpacing);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.hSpacing);
            boxSize += stream.WriteUInt32(this.vSpacing);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // hSpacing
            boxSize += 32; // vSpacing
            return boxSize;
        }
    }


    /*
    class CleanApertureEntry() extends VisualSampleGroupEntry ('casg'){
        unsigned int(32) cleanApertureWidthN;
        unsigned int(32) cleanApertureWidthD;

        unsigned int(32) cleanApertureHeightN;
        unsigned int(32) cleanApertureHeightD;


        unsigned int(32) horizOffN;
        unsigned int(32) horizOffD;


        unsigned int(32) vertOffN;
        unsigned int(32) vertOffD;

    }
    */
    public class CleanApertureEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "casg";

        protected uint cleanApertureWidthN;
        public uint CleanApertureWidthN { get { return this.cleanApertureWidthN; } set { this.cleanApertureWidthN = value; } }

        protected uint cleanApertureWidthD;
        public uint CleanApertureWidthD { get { return this.cleanApertureWidthD; } set { this.cleanApertureWidthD = value; } }

        protected uint cleanApertureHeightN;
        public uint CleanApertureHeightN { get { return this.cleanApertureHeightN; } set { this.cleanApertureHeightN = value; } }

        protected uint cleanApertureHeightD;
        public uint CleanApertureHeightD { get { return this.cleanApertureHeightD; } set { this.cleanApertureHeightD = value; } }

        protected uint horizOffN;
        public uint HorizOffN { get { return this.horizOffN; } set { this.horizOffN = value; } }

        protected uint horizOffD;
        public uint HorizOffD { get { return this.horizOffD; } set { this.horizOffD = value; } }

        protected uint vertOffN;
        public uint VertOffN { get { return this.vertOffN; } set { this.vertOffN = value; } }

        protected uint vertOffD;
        public uint VertOffD { get { return this.vertOffD; } set { this.vertOffD = value; } }

        public CleanApertureEntry() : base("casg")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.cleanApertureWidthN);
            boxSize += stream.ReadUInt32(out this.cleanApertureWidthD);
            boxSize += stream.ReadUInt32(out this.cleanApertureHeightN);
            boxSize += stream.ReadUInt32(out this.cleanApertureHeightD);
            boxSize += stream.ReadUInt32(out this.horizOffN);
            boxSize += stream.ReadUInt32(out this.horizOffD);
            boxSize += stream.ReadUInt32(out this.vertOffN);
            boxSize += stream.ReadUInt32(out this.vertOffD);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.cleanApertureWidthN);
            boxSize += stream.WriteUInt32(this.cleanApertureWidthD);
            boxSize += stream.WriteUInt32(this.cleanApertureHeightN);
            boxSize += stream.WriteUInt32(this.cleanApertureHeightD);
            boxSize += stream.WriteUInt32(this.horizOffN);
            boxSize += stream.WriteUInt32(this.horizOffD);
            boxSize += stream.WriteUInt32(this.vertOffN);
            boxSize += stream.WriteUInt32(this.vertOffD);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // cleanApertureWidthN
            boxSize += 32; // cleanApertureWidthD
            boxSize += 32; // cleanApertureHeightN
            boxSize += 32; // cleanApertureHeightD
            boxSize += 32; // horizOffN
            boxSize += 32; // horizOffD
            boxSize += 32; // vertOffN
            boxSize += 32; // vertOffD
            return boxSize;
        }
    }


    /*
    aligned(8) class TrackGroupTypeBox('msrc') extends FullBox('msrc', version = 0, flags = 0)
    {
        unsigned int(32) track_group_id;
        // the remaining data may be specified 
        //  for a particular track_group_type
    }
    */
    public class TrackGroupTypeBox : FullBox
    {
        public const string FourCC = "msrc";

        protected uint track_group_id;  //  the remaining data may be specified 
        public uint TrackGroupId { get { return this.track_group_id; } set { this.track_group_id = value; } }

        public TrackGroupTypeBox(string boxtype = "msrc") : base("msrc", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.track_group_id); // the remaining data may be specified 
            /*   for a particular track_group_type */
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.track_group_id); // the remaining data may be specified 
            /*   for a particular track_group_type */
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_group_id
            /*   for a particular track_group_type */
            return boxSize;
        }
    }


    /*
    aligned(8) class StereoVideoGroupBox extends TrackGroupTypeBox('ster') 
    {
        unsigned int(1) left_view_flag;
        bit(31) reserved;
    }
    */
    public class StereoVideoGroupBox : TrackGroupTypeBox
    {
        public const string FourCC = "ster";

        protected bool left_view_flag;
        public bool LeftViewFlag { get { return this.left_view_flag; } set { this.left_view_flag = value; } }

        protected uint reserved;
        public uint Reserved { get { return this.reserved; } set { this.reserved = value; } }

        public StereoVideoGroupBox() : base("ster")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBit(out this.left_view_flag);
            boxSize += stream.ReadBits(31, out this.reserved);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBit(this.left_view_flag);
            boxSize += stream.WriteBits(31, this.reserved);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // left_view_flag
            boxSize += 31; // reserved
            return boxSize;
        }
    }


    /*
    aligned(8) class TrackReferenceTypeBox (unsigned int(32) reference_type) extends Box(reference_type) {
        unsigned int(32) track_IDs[];
    }
    */
    public class TrackReferenceTypeBox : Box
    {


        protected uint[] track_IDs;
        public uint[] TrackIDs { get { return this.track_IDs; } set { this.track_IDs = value; } }

        public TrackReferenceTypeBox(string reference_type) : base(reference_type)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32Array(out this.track_IDs);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32Array(this.track_IDs);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_IDs
            return boxSize;
        }
    }


    /*
    class HEVCSampleEntry() extends VisualSampleEntry ('hvc1'){
        HEVCConfigurationBox	config;
        MPEG4ExtensionDescriptorsBox () descr;	// optional
    }
    */
    public class HEVCSampleEntry : VisualSampleEntry
    {
        public const string FourCC = "hvc1";

        protected HEVCConfigurationBox config;
        public HEVCConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        public HEVCSampleEntry() : base("hvc1")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            return boxSize;
        }
    }


    /*
    class HEVCLHVCSampleEntry() extends HEVCSampleEntry() {
        LHEVCConfigurationBox		lhvcconfig;
    }
    */
    public class HEVCLHVCSampleEntry : HEVCSampleEntry
    {


        protected LHEVCConfigurationBox lhvcconfig;
        public LHEVCConfigurationBox Lhvcconfig { get { return this.lhvcconfig; } set { this.lhvcconfig = value; } }

        public HEVCLHVCSampleEntry() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.lhvcconfig);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.lhvcconfig);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(lhvcconfig); // lhvcconfig
            return boxSize;
        }
    }


    /*
    class HEVCSampleEntry() extends VisualSampleEntry ('hvc2'){
        HEVCConfigurationBox	config;
        MPEG4ExtensionDescriptorsBox () descr;	// optional
    }
    */
    public class HEVCSampleEntry_hvc2 : VisualSampleEntry
    {
        public const string FourCC = "hvc2";

        protected HEVCConfigurationBox config;
        public HEVCConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        public HEVCSampleEntry_hvc2() : base("hvc2")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            return boxSize;
        }
    }


    /*
    class HEVCSampleEntry() extends VisualSampleEntry ('hvc3'){
        HEVCConfigurationBox	config;
        MPEG4ExtensionDescriptorsBox () descr;	// optional
    }
    */
    public class HEVCSampleEntry_hvc3 : VisualSampleEntry
    {
        public const string FourCC = "hvc3";

        protected HEVCConfigurationBox config;
        public HEVCConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        public HEVCSampleEntry_hvc3() : base("hvc3")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            return boxSize;
        }
    }


    /*
    class LHEVCSampleEntry() extends VisualSampleEntry ('lhv1') {
        LHEVCConfigurationBox		lhvcconfig;
        MPEG4ExtensionDescriptorsBox () descr;	// optional
    }
    */
    public class LHEVCSampleEntry : VisualSampleEntry
    {
        public const string FourCC = "lhv1";

        protected LHEVCConfigurationBox lhvcconfig;
        public LHEVCConfigurationBox Lhvcconfig { get { return this.lhvcconfig; } set { this.lhvcconfig = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        public LHEVCSampleEntry() : base("lhv1")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.lhvcconfig);
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.lhvcconfig);
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(lhvcconfig); // lhvcconfig
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            return boxSize;
        }
    }


    /*
    class LHEVCSampleEntry() extends VisualSampleEntry ('lhe1') {
        LHEVCConfigurationBox		lhvcconfig;
        MPEG4ExtensionDescriptorsBox () descr;	// optional
    }
    */
    public class LHEVCSampleEntry_lhe1 : VisualSampleEntry
    {
        public const string FourCC = "lhe1";

        protected LHEVCConfigurationBox lhvcconfig;
        public LHEVCConfigurationBox Lhvcconfig { get { return this.lhvcconfig; } set { this.lhvcconfig = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        public LHEVCSampleEntry_lhe1() : base("lhe1")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.lhvcconfig);
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.lhvcconfig);
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(lhvcconfig); // lhvcconfig
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            return boxSize;
        }
    }


    /*
    class HEVCSampleEntry() extends VisualSampleEntry ('hev1'){
        HEVCConfigurationBox	config;
        MPEG4ExtensionDescriptorsBox () descr;	// optional
    }
    */
    public class HEVCSampleEntry_hev1 : VisualSampleEntry
    {
        public const string FourCC = "hev1";

        protected HEVCConfigurationBox config;
        public HEVCConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        public HEVCSampleEntry_hev1() : base("hev1")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            return boxSize;
        }
    }


    /*
    class HEVCSampleEntry() extends VisualSampleEntry ('hev2'){
        HEVCConfigurationBox	config;
        MPEG4ExtensionDescriptorsBox () descr;	// optional
    }
    */
    public class HEVCSampleEntry_hev2 : VisualSampleEntry
    {
        public const string FourCC = "hev2";

        protected HEVCConfigurationBox config;
        public HEVCConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        public HEVCSampleEntry_hev2() : base("hev2")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            return boxSize;
        }
    }


    /*
    class HEVCSampleEntry() extends VisualSampleEntry ('hev3'){
        HEVCConfigurationBox	config;
        MPEG4ExtensionDescriptorsBox () descr;	// optional
    }
    */
    public class HEVCSampleEntry_hev3 : VisualSampleEntry
    {
        public const string FourCC = "hev3";

        protected HEVCConfigurationBox config;
        public HEVCConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        public HEVCSampleEntry_hev3() : base("hev3")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            return boxSize;
        }
    }


    /*
    class AVCParameterSampleEntry() extends VisualSampleEntry ('avcp'){
        AVCConfigurationBox	config;
    }
    */
    public class AVCParameterSampleEntry : VisualSampleEntry
    {
        public const string FourCC = "avcp";

        protected AVCConfigurationBox config;
        public AVCConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        public AVCParameterSampleEntry() : base("avcp")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            return boxSize;
        }
    }


    /*
    class AVCSampleEntry() extends VisualSampleEntry (type) {
        AVCConfigurationBox	config;
        MPEG4ExtensionDescriptorsBox () descr;	// optional
    }
    */
    public class AVCSampleEntry : VisualSampleEntry
    {


        protected AVCConfigurationBox config;
        public AVCConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        public AVCSampleEntry(string type) : base(type)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            return boxSize;
        }
    }


    /*
    class AVCMVCSampleEntry() extends AVCSampleEntry ('avc1') {
        ViewScalabilityInformationSEIBox	scalability;	// optional
        ViewIdentifierBox		view_identifiers;	// optional
        MVCConfigurationBox	mvcconfig;		// optional
        MVCViewPriorityAssignmentBox	view_priority_method;	// optional
        IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
        ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
        MVCDConfigurationBox	mvcdconfig;	// optional
        MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
        A3DConfigurationBox	a3dconfig;	// optional
    }
    */
    public class AVCMVCSampleEntry : AVCSampleEntry
    {
        public const string FourCC = "avc1";

        protected ViewScalabilityInformationSEIBox scalability;  //  optional
        public ViewScalabilityInformationSEIBox Scalability { get { return this.scalability; } set { this.scalability = value; } }

        protected ViewIdentifierBox view_identifiers;  //  optional
        public ViewIdentifierBox ViewIdentifiers { get { return this.view_identifiers; } set { this.view_identifiers = value; } }

        protected MVCConfigurationBox mvcconfig;  //  optional
        public MVCConfigurationBox Mvcconfig { get { return this.mvcconfig; } set { this.mvcconfig = value; } }

        protected MVCViewPriorityAssignmentBox view_priority_method;  //  optional
        public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return this.view_priority_method; } set { this.view_priority_method = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.intrinsic_camera_params; } set { this.intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.extrinsic_camera_params; } set { this.extrinsic_camera_params = value; } }

        protected MVCDConfigurationBox mvcdconfig;  //  optional
        public MVCDConfigurationBox Mvcdconfig { get { return this.mvcdconfig; } set { this.mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.mvdscalinfosei; } set { this.mvdscalinfosei = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return this.a3dconfig; } set { this.a3dconfig = value; } }

        public AVCMVCSampleEntry() : base("avc1")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += stream.ReadBox(out this.scalability); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.view_identifiers); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvcconfig); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.view_priority_method); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvcdconfig); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvdscalinfosei); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.a3dconfig); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.scalability != null) boxSize += stream.WriteBox(this.scalability); // optional
            if (this.view_identifiers != null) boxSize += stream.WriteBox(this.view_identifiers); // optional
            if (this.mvcconfig != null) boxSize += stream.WriteBox(this.mvcconfig); // optional
            if (this.view_priority_method != null) boxSize += stream.WriteBox(this.view_priority_method); // optional
            if (this.intrinsic_camera_params != null) boxSize += stream.WriteBox(this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += stream.WriteBox(this.extrinsic_camera_params); // optional
            if (this.mvcdconfig != null) boxSize += stream.WriteBox(this.mvcdconfig); // optional
            if (this.mvdscalinfosei != null) boxSize += stream.WriteBox(this.mvdscalinfosei); // optional
            if (this.a3dconfig != null) boxSize += stream.WriteBox(this.a3dconfig); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.scalability != null) boxSize += IsoStream.CalculateSize(scalability); // scalability
            if (this.view_identifiers != null) boxSize += IsoStream.CalculateSize(view_identifiers); // view_identifiers
            if (this.mvcconfig != null) boxSize += IsoStream.CalculateSize(mvcconfig); // mvcconfig
            if (this.view_priority_method != null) boxSize += IsoStream.CalculateSize(view_priority_method); // view_priority_method
            if (this.intrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.mvcdconfig != null) boxSize += IsoStream.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoStream.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            if (this.a3dconfig != null) boxSize += IsoStream.CalculateSize(a3dconfig); // a3dconfig
            return boxSize;
        }
    }


    /*
    class AVCMVCSampleEntry() extends AVCSampleEntry ('avc3') {
        ViewScalabilityInformationSEIBox	scalability;	// optional
        ViewIdentifierBox		view_identifiers;	// optional
        MVCConfigurationBox	mvcconfig;		// optional
        MVCViewPriorityAssignmentBox	view_priority_method;	// optional
        IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
        ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
        MVCDConfigurationBox	mvcdconfig;	// optional
        MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
        A3DConfigurationBox	a3dconfig;	// optional
    }
    */
    public class AVCMVCSampleEntry_avc3 : AVCSampleEntry
    {
        public const string FourCC = "avc3";

        protected ViewScalabilityInformationSEIBox scalability;  //  optional
        public ViewScalabilityInformationSEIBox Scalability { get { return this.scalability; } set { this.scalability = value; } }

        protected ViewIdentifierBox view_identifiers;  //  optional
        public ViewIdentifierBox ViewIdentifiers { get { return this.view_identifiers; } set { this.view_identifiers = value; } }

        protected MVCConfigurationBox mvcconfig;  //  optional
        public MVCConfigurationBox Mvcconfig { get { return this.mvcconfig; } set { this.mvcconfig = value; } }

        protected MVCViewPriorityAssignmentBox view_priority_method;  //  optional
        public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return this.view_priority_method; } set { this.view_priority_method = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.intrinsic_camera_params; } set { this.intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.extrinsic_camera_params; } set { this.extrinsic_camera_params = value; } }

        protected MVCDConfigurationBox mvcdconfig;  //  optional
        public MVCDConfigurationBox Mvcdconfig { get { return this.mvcdconfig; } set { this.mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.mvdscalinfosei; } set { this.mvdscalinfosei = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return this.a3dconfig; } set { this.a3dconfig = value; } }

        public AVCMVCSampleEntry_avc3() : base("avc3")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += stream.ReadBox(out this.scalability); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.view_identifiers); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvcconfig); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.view_priority_method); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvcdconfig); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvdscalinfosei); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.a3dconfig); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.scalability != null) boxSize += stream.WriteBox(this.scalability); // optional
            if (this.view_identifiers != null) boxSize += stream.WriteBox(this.view_identifiers); // optional
            if (this.mvcconfig != null) boxSize += stream.WriteBox(this.mvcconfig); // optional
            if (this.view_priority_method != null) boxSize += stream.WriteBox(this.view_priority_method); // optional
            if (this.intrinsic_camera_params != null) boxSize += stream.WriteBox(this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += stream.WriteBox(this.extrinsic_camera_params); // optional
            if (this.mvcdconfig != null) boxSize += stream.WriteBox(this.mvcdconfig); // optional
            if (this.mvdscalinfosei != null) boxSize += stream.WriteBox(this.mvdscalinfosei); // optional
            if (this.a3dconfig != null) boxSize += stream.WriteBox(this.a3dconfig); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.scalability != null) boxSize += IsoStream.CalculateSize(scalability); // scalability
            if (this.view_identifiers != null) boxSize += IsoStream.CalculateSize(view_identifiers); // view_identifiers
            if (this.mvcconfig != null) boxSize += IsoStream.CalculateSize(mvcconfig); // mvcconfig
            if (this.view_priority_method != null) boxSize += IsoStream.CalculateSize(view_priority_method); // view_priority_method
            if (this.intrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.mvcdconfig != null) boxSize += IsoStream.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoStream.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            if (this.a3dconfig != null) boxSize += IsoStream.CalculateSize(a3dconfig); // a3dconfig
            return boxSize;
        }
    }


    /*
    class AVC2SampleEntry() extends VisualSampleEntry (type) {
        AVCConfigurationBox	config;
        MPEG4ExtensionDescriptorsBox () descr;	// optional
    }
    */
    public class AVC2SampleEntry : VisualSampleEntry
    {


        protected AVCConfigurationBox config;
        public AVCConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        public AVC2SampleEntry(string type) : base(type)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            return boxSize;
        }
    }


    /*
    class AVC2MVCSampleEntry() extends AVC2SampleEntry ('avc2') {
        ViewScalabilityInformationSEIBox	scalability;	// optional
        ViewIdentifierBox		view_identifiers;	// optional
        MVCConfigurationBox	mvcconfig;		// optional
        MVCViewPriorityAssignmentBox	view_priority_method;	// optional
        IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
        ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
        MVCDConfigurationBox	mvcdconfig;	// optional
        MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
        A3DConfigurationBox	a3dconfig;	// optional
    }
    */
    public class AVC2MVCSampleEntry : AVC2SampleEntry
    {
        public const string FourCC = "avc2";

        protected ViewScalabilityInformationSEIBox scalability;  //  optional
        public ViewScalabilityInformationSEIBox Scalability { get { return this.scalability; } set { this.scalability = value; } }

        protected ViewIdentifierBox view_identifiers;  //  optional
        public ViewIdentifierBox ViewIdentifiers { get { return this.view_identifiers; } set { this.view_identifiers = value; } }

        protected MVCConfigurationBox mvcconfig;  //  optional
        public MVCConfigurationBox Mvcconfig { get { return this.mvcconfig; } set { this.mvcconfig = value; } }

        protected MVCViewPriorityAssignmentBox view_priority_method;  //  optional
        public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return this.view_priority_method; } set { this.view_priority_method = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.intrinsic_camera_params; } set { this.intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.extrinsic_camera_params; } set { this.extrinsic_camera_params = value; } }

        protected MVCDConfigurationBox mvcdconfig;  //  optional
        public MVCDConfigurationBox Mvcdconfig { get { return this.mvcdconfig; } set { this.mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.mvdscalinfosei; } set { this.mvdscalinfosei = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return this.a3dconfig; } set { this.a3dconfig = value; } }

        public AVC2MVCSampleEntry() : base("avc2")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += stream.ReadBox(out this.scalability); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.view_identifiers); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvcconfig); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.view_priority_method); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvcdconfig); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvdscalinfosei); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.a3dconfig); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.scalability != null) boxSize += stream.WriteBox(this.scalability); // optional
            if (this.view_identifiers != null) boxSize += stream.WriteBox(this.view_identifiers); // optional
            if (this.mvcconfig != null) boxSize += stream.WriteBox(this.mvcconfig); // optional
            if (this.view_priority_method != null) boxSize += stream.WriteBox(this.view_priority_method); // optional
            if (this.intrinsic_camera_params != null) boxSize += stream.WriteBox(this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += stream.WriteBox(this.extrinsic_camera_params); // optional
            if (this.mvcdconfig != null) boxSize += stream.WriteBox(this.mvcdconfig); // optional
            if (this.mvdscalinfosei != null) boxSize += stream.WriteBox(this.mvdscalinfosei); // optional
            if (this.a3dconfig != null) boxSize += stream.WriteBox(this.a3dconfig); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.scalability != null) boxSize += IsoStream.CalculateSize(scalability); // scalability
            if (this.view_identifiers != null) boxSize += IsoStream.CalculateSize(view_identifiers); // view_identifiers
            if (this.mvcconfig != null) boxSize += IsoStream.CalculateSize(mvcconfig); // mvcconfig
            if (this.view_priority_method != null) boxSize += IsoStream.CalculateSize(view_priority_method); // view_priority_method
            if (this.intrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.mvcdconfig != null) boxSize += IsoStream.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoStream.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            if (this.a3dconfig != null) boxSize += IsoStream.CalculateSize(a3dconfig); // a3dconfig
            return boxSize;
        }
    }


    /*
    class AVC2MVCSampleEntry() extends AVC2SampleEntry ('avc4') {
        ViewScalabilityInformationSEIBox	scalability;	// optional
        ViewIdentifierBox		view_identifiers;	// optional
        MVCConfigurationBox	mvcconfig;		// optional
        MVCViewPriorityAssignmentBox	view_priority_method;	// optional
        IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
        ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
        MVCDConfigurationBox	mvcdconfig;	// optional
        MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
        A3DConfigurationBox	a3dconfig;	// optional
    }
    */
    public class AVC2MVCSampleEntry_avc4 : AVC2SampleEntry
    {
        public const string FourCC = "avc4";

        protected ViewScalabilityInformationSEIBox scalability;  //  optional
        public ViewScalabilityInformationSEIBox Scalability { get { return this.scalability; } set { this.scalability = value; } }

        protected ViewIdentifierBox view_identifiers;  //  optional
        public ViewIdentifierBox ViewIdentifiers { get { return this.view_identifiers; } set { this.view_identifiers = value; } }

        protected MVCConfigurationBox mvcconfig;  //  optional
        public MVCConfigurationBox Mvcconfig { get { return this.mvcconfig; } set { this.mvcconfig = value; } }

        protected MVCViewPriorityAssignmentBox view_priority_method;  //  optional
        public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return this.view_priority_method; } set { this.view_priority_method = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.intrinsic_camera_params; } set { this.intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.extrinsic_camera_params; } set { this.extrinsic_camera_params = value; } }

        protected MVCDConfigurationBox mvcdconfig;  //  optional
        public MVCDConfigurationBox Mvcdconfig { get { return this.mvcdconfig; } set { this.mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.mvdscalinfosei; } set { this.mvdscalinfosei = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return this.a3dconfig; } set { this.a3dconfig = value; } }

        public AVC2MVCSampleEntry_avc4() : base("avc4")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += stream.ReadBox(out this.scalability); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.view_identifiers); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvcconfig); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.view_priority_method); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvcdconfig); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvdscalinfosei); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.a3dconfig); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.scalability != null) boxSize += stream.WriteBox(this.scalability); // optional
            if (this.view_identifiers != null) boxSize += stream.WriteBox(this.view_identifiers); // optional
            if (this.mvcconfig != null) boxSize += stream.WriteBox(this.mvcconfig); // optional
            if (this.view_priority_method != null) boxSize += stream.WriteBox(this.view_priority_method); // optional
            if (this.intrinsic_camera_params != null) boxSize += stream.WriteBox(this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += stream.WriteBox(this.extrinsic_camera_params); // optional
            if (this.mvcdconfig != null) boxSize += stream.WriteBox(this.mvcdconfig); // optional
            if (this.mvdscalinfosei != null) boxSize += stream.WriteBox(this.mvdscalinfosei); // optional
            if (this.a3dconfig != null) boxSize += stream.WriteBox(this.a3dconfig); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.scalability != null) boxSize += IsoStream.CalculateSize(scalability); // scalability
            if (this.view_identifiers != null) boxSize += IsoStream.CalculateSize(view_identifiers); // view_identifiers
            if (this.mvcconfig != null) boxSize += IsoStream.CalculateSize(mvcconfig); // mvcconfig
            if (this.view_priority_method != null) boxSize += IsoStream.CalculateSize(view_priority_method); // view_priority_method
            if (this.intrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.mvcdconfig != null) boxSize += IsoStream.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoStream.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            if (this.a3dconfig != null) boxSize += IsoStream.CalculateSize(a3dconfig); // a3dconfig
            return boxSize;
        }
    }


    /*
    class MVCSampleEntry() extends VisualSampleEntry ('mvc1') {
        MVCConfigurationBox	mvcconfig; 			// mandatory
        ViewScalabilityInformationSEIBox	scalability;	// optional
        ViewIdentifierBox	view_identifiers;		// mandatory
        MPEG4ExtensionDescriptorsBox descr;		// optional
        MVCViewPriorityAssignmentBox	view_priority_method;	// optional
        IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
        ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
        MVCDConfigurationBox	mvcdconfig;	// optional
        MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
        A3DConfigurationBox	a3dconfig;	// optional
    }
    */
    public class MVCSampleEntry : VisualSampleEntry
    {
        public const string FourCC = "mvc1";

        protected MVCConfigurationBox mvcconfig;  //  mandatory
        public MVCConfigurationBox Mvcconfig { get { return this.mvcconfig; } set { this.mvcconfig = value; } }

        protected ViewScalabilityInformationSEIBox scalability;  //  optional
        public ViewScalabilityInformationSEIBox Scalability { get { return this.scalability; } set { this.scalability = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return this.view_identifiers; } set { this.view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        protected MVCViewPriorityAssignmentBox view_priority_method;  //  optional
        public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return this.view_priority_method; } set { this.view_priority_method = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.intrinsic_camera_params; } set { this.intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.extrinsic_camera_params; } set { this.extrinsic_camera_params = value; } }

        protected MVCDConfigurationBox mvcdconfig;  //  optional
        public MVCDConfigurationBox Mvcdconfig { get { return this.mvcdconfig; } set { this.mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.mvdscalinfosei; } set { this.mvdscalinfosei = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return this.a3dconfig; } set { this.a3dconfig = value; } }

        public MVCSampleEntry() : base("mvc1")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.mvcconfig); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.scalability); // optional
            boxSize += stream.ReadBox(out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.view_priority_method); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvcdconfig); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvdscalinfosei); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.a3dconfig); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.mvcconfig); // mandatory
            if (this.scalability != null) boxSize += stream.WriteBox(this.scalability); // optional
            boxSize += stream.WriteBox(this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            if (this.view_priority_method != null) boxSize += stream.WriteBox(this.view_priority_method); // optional
            if (this.intrinsic_camera_params != null) boxSize += stream.WriteBox(this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += stream.WriteBox(this.extrinsic_camera_params); // optional
            if (this.mvcdconfig != null) boxSize += stream.WriteBox(this.mvcdconfig); // optional
            if (this.mvdscalinfosei != null) boxSize += stream.WriteBox(this.mvdscalinfosei); // optional
            if (this.a3dconfig != null) boxSize += stream.WriteBox(this.a3dconfig); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(mvcconfig); // mvcconfig
            if (this.scalability != null) boxSize += IsoStream.CalculateSize(scalability); // scalability
            boxSize += IsoStream.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            if (this.view_priority_method != null) boxSize += IsoStream.CalculateSize(view_priority_method); // view_priority_method
            if (this.intrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.mvcdconfig != null) boxSize += IsoStream.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoStream.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            if (this.a3dconfig != null) boxSize += IsoStream.CalculateSize(a3dconfig); // a3dconfig
            return boxSize;
        }
    }


    /*
    class MVCSampleEntry() extends VisualSampleEntry ('mvc2') {
        MVCConfigurationBox	mvcconfig; 			// mandatory
        ViewScalabilityInformationSEIBox	scalability;	// optional
        ViewIdentifierBox	view_identifiers;		// mandatory
        MPEG4ExtensionDescriptorsBox descr;		// optional
        MVCViewPriorityAssignmentBox	view_priority_method;	// optional
        IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
        ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
        MVCDConfigurationBox	mvcdconfig;	// optional
        MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
        A3DConfigurationBox	a3dconfig;	// optional
    }
    */
    public class MVCSampleEntry_mvc2 : VisualSampleEntry
    {
        public const string FourCC = "mvc2";

        protected MVCConfigurationBox mvcconfig;  //  mandatory
        public MVCConfigurationBox Mvcconfig { get { return this.mvcconfig; } set { this.mvcconfig = value; } }

        protected ViewScalabilityInformationSEIBox scalability;  //  optional
        public ViewScalabilityInformationSEIBox Scalability { get { return this.scalability; } set { this.scalability = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return this.view_identifiers; } set { this.view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        protected MVCViewPriorityAssignmentBox view_priority_method;  //  optional
        public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return this.view_priority_method; } set { this.view_priority_method = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.intrinsic_camera_params; } set { this.intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.extrinsic_camera_params; } set { this.extrinsic_camera_params = value; } }

        protected MVCDConfigurationBox mvcdconfig;  //  optional
        public MVCDConfigurationBox Mvcdconfig { get { return this.mvcdconfig; } set { this.mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.mvdscalinfosei; } set { this.mvdscalinfosei = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return this.a3dconfig; } set { this.a3dconfig = value; } }

        public MVCSampleEntry_mvc2() : base("mvc2")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.mvcconfig); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.scalability); // optional
            boxSize += stream.ReadBox(out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.view_priority_method); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvcdconfig); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvdscalinfosei); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.a3dconfig); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.mvcconfig); // mandatory
            if (this.scalability != null) boxSize += stream.WriteBox(this.scalability); // optional
            boxSize += stream.WriteBox(this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            if (this.view_priority_method != null) boxSize += stream.WriteBox(this.view_priority_method); // optional
            if (this.intrinsic_camera_params != null) boxSize += stream.WriteBox(this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += stream.WriteBox(this.extrinsic_camera_params); // optional
            if (this.mvcdconfig != null) boxSize += stream.WriteBox(this.mvcdconfig); // optional
            if (this.mvdscalinfosei != null) boxSize += stream.WriteBox(this.mvdscalinfosei); // optional
            if (this.a3dconfig != null) boxSize += stream.WriteBox(this.a3dconfig); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(mvcconfig); // mvcconfig
            if (this.scalability != null) boxSize += IsoStream.CalculateSize(scalability); // scalability
            boxSize += IsoStream.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            if (this.view_priority_method != null) boxSize += IsoStream.CalculateSize(view_priority_method); // view_priority_method
            if (this.intrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.mvcdconfig != null) boxSize += IsoStream.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoStream.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            if (this.a3dconfig != null) boxSize += IsoStream.CalculateSize(a3dconfig); // a3dconfig
            return boxSize;
        }
    }


    /*
    class MVCSampleEntry() extends VisualSampleEntry ('mvc3') {
        MVCConfigurationBox	mvcconfig; 			// mandatory
        ViewScalabilityInformationSEIBox	scalability;	// optional
        ViewIdentifierBox	view_identifiers;		// mandatory
        MPEG4ExtensionDescriptorsBox descr;		// optional
        MVCViewPriorityAssignmentBox	view_priority_method;	// optional
        IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
        ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
        MVCDConfigurationBox	mvcdconfig;	// optional
        MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
        A3DConfigurationBox	a3dconfig;	// optional
    }
    */
    public class MVCSampleEntry_mvc3 : VisualSampleEntry
    {
        public const string FourCC = "mvc3";

        protected MVCConfigurationBox mvcconfig;  //  mandatory
        public MVCConfigurationBox Mvcconfig { get { return this.mvcconfig; } set { this.mvcconfig = value; } }

        protected ViewScalabilityInformationSEIBox scalability;  //  optional
        public ViewScalabilityInformationSEIBox Scalability { get { return this.scalability; } set { this.scalability = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return this.view_identifiers; } set { this.view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        protected MVCViewPriorityAssignmentBox view_priority_method;  //  optional
        public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return this.view_priority_method; } set { this.view_priority_method = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.intrinsic_camera_params; } set { this.intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.extrinsic_camera_params; } set { this.extrinsic_camera_params = value; } }

        protected MVCDConfigurationBox mvcdconfig;  //  optional
        public MVCDConfigurationBox Mvcdconfig { get { return this.mvcdconfig; } set { this.mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.mvdscalinfosei; } set { this.mvdscalinfosei = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return this.a3dconfig; } set { this.a3dconfig = value; } }

        public MVCSampleEntry_mvc3() : base("mvc3")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.mvcconfig); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.scalability); // optional
            boxSize += stream.ReadBox(out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.view_priority_method); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvcdconfig); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvdscalinfosei); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.a3dconfig); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.mvcconfig); // mandatory
            if (this.scalability != null) boxSize += stream.WriteBox(this.scalability); // optional
            boxSize += stream.WriteBox(this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            if (this.view_priority_method != null) boxSize += stream.WriteBox(this.view_priority_method); // optional
            if (this.intrinsic_camera_params != null) boxSize += stream.WriteBox(this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += stream.WriteBox(this.extrinsic_camera_params); // optional
            if (this.mvcdconfig != null) boxSize += stream.WriteBox(this.mvcdconfig); // optional
            if (this.mvdscalinfosei != null) boxSize += stream.WriteBox(this.mvdscalinfosei); // optional
            if (this.a3dconfig != null) boxSize += stream.WriteBox(this.a3dconfig); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(mvcconfig); // mvcconfig
            if (this.scalability != null) boxSize += IsoStream.CalculateSize(scalability); // scalability
            boxSize += IsoStream.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            if (this.view_priority_method != null) boxSize += IsoStream.CalculateSize(view_priority_method); // view_priority_method
            if (this.intrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.mvcdconfig != null) boxSize += IsoStream.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoStream.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            if (this.a3dconfig != null) boxSize += IsoStream.CalculateSize(a3dconfig); // a3dconfig
            return boxSize;
        }
    }


    /*
    class MVCSampleEntry() extends VisualSampleEntry ('mvc4') {
        MVCConfigurationBox	mvcconfig; 			// mandatory
        ViewScalabilityInformationSEIBox	scalability;	// optional
        ViewIdentifierBox	view_identifiers;		// mandatory
        MPEG4ExtensionDescriptorsBox descr;		// optional
        MVCViewPriorityAssignmentBox	view_priority_method;	// optional
        IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
        ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
        MVCDConfigurationBox	mvcdconfig;	// optional
        MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
        A3DConfigurationBox	a3dconfig;	// optional
    }
    */
    public class MVCSampleEntry_mvc4 : VisualSampleEntry
    {
        public const string FourCC = "mvc4";

        protected MVCConfigurationBox mvcconfig;  //  mandatory
        public MVCConfigurationBox Mvcconfig { get { return this.mvcconfig; } set { this.mvcconfig = value; } }

        protected ViewScalabilityInformationSEIBox scalability;  //  optional
        public ViewScalabilityInformationSEIBox Scalability { get { return this.scalability; } set { this.scalability = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return this.view_identifiers; } set { this.view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        protected MVCViewPriorityAssignmentBox view_priority_method;  //  optional
        public MVCViewPriorityAssignmentBox ViewPriorityMethod { get { return this.view_priority_method; } set { this.view_priority_method = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.intrinsic_camera_params; } set { this.intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.extrinsic_camera_params; } set { this.extrinsic_camera_params = value; } }

        protected MVCDConfigurationBox mvcdconfig;  //  optional
        public MVCDConfigurationBox Mvcdconfig { get { return this.mvcdconfig; } set { this.mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.mvdscalinfosei; } set { this.mvdscalinfosei = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return this.a3dconfig; } set { this.a3dconfig = value; } }

        public MVCSampleEntry_mvc4() : base("mvc4")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.mvcconfig); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.scalability); // optional
            boxSize += stream.ReadBox(out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.view_priority_method); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvcdconfig); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvdscalinfosei); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.a3dconfig); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.mvcconfig); // mandatory
            if (this.scalability != null) boxSize += stream.WriteBox(this.scalability); // optional
            boxSize += stream.WriteBox(this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            if (this.view_priority_method != null) boxSize += stream.WriteBox(this.view_priority_method); // optional
            if (this.intrinsic_camera_params != null) boxSize += stream.WriteBox(this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += stream.WriteBox(this.extrinsic_camera_params); // optional
            if (this.mvcdconfig != null) boxSize += stream.WriteBox(this.mvcdconfig); // optional
            if (this.mvdscalinfosei != null) boxSize += stream.WriteBox(this.mvdscalinfosei); // optional
            if (this.a3dconfig != null) boxSize += stream.WriteBox(this.a3dconfig); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(mvcconfig); // mvcconfig
            if (this.scalability != null) boxSize += IsoStream.CalculateSize(scalability); // scalability
            boxSize += IsoStream.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            if (this.view_priority_method != null) boxSize += IsoStream.CalculateSize(view_priority_method); // view_priority_method
            if (this.intrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.mvcdconfig != null) boxSize += IsoStream.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoStream.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            if (this.a3dconfig != null) boxSize += IsoStream.CalculateSize(a3dconfig); // a3dconfig
            return boxSize;
        }
    }


    /*
    class MVCDSampleEntry() extends VisualSampleEntry ('mvd1') {
        MVCDConfigurationBox	mvcdconfig;		// mandatory
        MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
        ViewIdentifierBox	view_identifiers;		// mandatory
        MPEG4ExtensionDescriptorsBox descr;		// optional
        IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
        ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
        A3DConfigurationBox	a3dconfig;	// optional
    }

    */
    public class MVCDSampleEntry : VisualSampleEntry
    {
        public const string FourCC = "mvd1";

        protected MVCDConfigurationBox mvcdconfig;  //  mandatory
        public MVCDConfigurationBox Mvcdconfig { get { return this.mvcdconfig; } set { this.mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.mvdscalinfosei; } set { this.mvdscalinfosei = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return this.view_identifiers; } set { this.view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.intrinsic_camera_params; } set { this.intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.extrinsic_camera_params; } set { this.extrinsic_camera_params = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return this.a3dconfig; } set { this.a3dconfig = value; } }

        public MVCDSampleEntry() : base("mvd1")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.mvcdconfig); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvdscalinfosei); // optional
            boxSize += stream.ReadBox(out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.a3dconfig); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.mvcdconfig); // mandatory
            if (this.mvdscalinfosei != null) boxSize += stream.WriteBox(this.mvdscalinfosei); // optional
            boxSize += stream.WriteBox(this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            if (this.intrinsic_camera_params != null) boxSize += stream.WriteBox(this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += stream.WriteBox(this.extrinsic_camera_params); // optional
            if (this.a3dconfig != null) boxSize += stream.WriteBox(this.a3dconfig); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoStream.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            boxSize += IsoStream.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            if (this.intrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.a3dconfig != null) boxSize += IsoStream.CalculateSize(a3dconfig); // a3dconfig
            return boxSize;
        }
    }


    /*
    class MVCDSampleEntry() extends VisualSampleEntry ('mvd2') {
        MVCDConfigurationBox	mvcdconfig;		// mandatory
        MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
        ViewIdentifierBox	view_identifiers;		// mandatory
        MPEG4ExtensionDescriptorsBox descr;		// optional
        IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
        ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
        A3DConfigurationBox	a3dconfig;	// optional
    }

    */
    public class MVCDSampleEntry_mvd2 : VisualSampleEntry
    {
        public const string FourCC = "mvd2";

        protected MVCDConfigurationBox mvcdconfig;  //  mandatory
        public MVCDConfigurationBox Mvcdconfig { get { return this.mvcdconfig; } set { this.mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.mvdscalinfosei; } set { this.mvdscalinfosei = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return this.view_identifiers; } set { this.view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.intrinsic_camera_params; } set { this.intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.extrinsic_camera_params; } set { this.extrinsic_camera_params = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return this.a3dconfig; } set { this.a3dconfig = value; } }

        public MVCDSampleEntry_mvd2() : base("mvd2")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.mvcdconfig); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvdscalinfosei); // optional
            boxSize += stream.ReadBox(out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.a3dconfig); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.mvcdconfig); // mandatory
            if (this.mvdscalinfosei != null) boxSize += stream.WriteBox(this.mvdscalinfosei); // optional
            boxSize += stream.WriteBox(this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            if (this.intrinsic_camera_params != null) boxSize += stream.WriteBox(this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += stream.WriteBox(this.extrinsic_camera_params); // optional
            if (this.a3dconfig != null) boxSize += stream.WriteBox(this.a3dconfig); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoStream.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            boxSize += IsoStream.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            if (this.intrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.a3dconfig != null) boxSize += IsoStream.CalculateSize(a3dconfig); // a3dconfig
            return boxSize;
        }
    }


    /*
    class MVCDSampleEntry() extends VisualSampleEntry ('mvd3') {
        MVCDConfigurationBox	mvcdconfig;		// mandatory
        MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
        ViewIdentifierBox	view_identifiers;		// mandatory
        MPEG4ExtensionDescriptorsBox descr;		// optional
        IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
        ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
        A3DConfigurationBox	a3dconfig;	// optional
    }

    */
    public class MVCDSampleEntry_mvd3 : VisualSampleEntry
    {
        public const string FourCC = "mvd3";

        protected MVCDConfigurationBox mvcdconfig;  //  mandatory
        public MVCDConfigurationBox Mvcdconfig { get { return this.mvcdconfig; } set { this.mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.mvdscalinfosei; } set { this.mvdscalinfosei = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return this.view_identifiers; } set { this.view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.intrinsic_camera_params; } set { this.intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.extrinsic_camera_params; } set { this.extrinsic_camera_params = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return this.a3dconfig; } set { this.a3dconfig = value; } }

        public MVCDSampleEntry_mvd3() : base("mvd3")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.mvcdconfig); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvdscalinfosei); // optional
            boxSize += stream.ReadBox(out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.a3dconfig); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.mvcdconfig); // mandatory
            if (this.mvdscalinfosei != null) boxSize += stream.WriteBox(this.mvdscalinfosei); // optional
            boxSize += stream.WriteBox(this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            if (this.intrinsic_camera_params != null) boxSize += stream.WriteBox(this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += stream.WriteBox(this.extrinsic_camera_params); // optional
            if (this.a3dconfig != null) boxSize += stream.WriteBox(this.a3dconfig); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoStream.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            boxSize += IsoStream.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            if (this.intrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.a3dconfig != null) boxSize += IsoStream.CalculateSize(a3dconfig); // a3dconfig
            return boxSize;
        }
    }


    /*
    class MVCDSampleEntry() extends VisualSampleEntry ('mvd4') {
        MVCDConfigurationBox	mvcdconfig;		// mandatory
        MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
        ViewIdentifierBox	view_identifiers;		// mandatory
        MPEG4ExtensionDescriptorsBox descr;		// optional
        IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
        ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
        A3DConfigurationBox	a3dconfig;	// optional
    }

    */
    public class MVCDSampleEntry_mvd4 : VisualSampleEntry
    {
        public const string FourCC = "mvd4";

        protected MVCDConfigurationBox mvcdconfig;  //  mandatory
        public MVCDConfigurationBox Mvcdconfig { get { return this.mvcdconfig; } set { this.mvcdconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.mvdscalinfosei; } set { this.mvdscalinfosei = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return this.view_identifiers; } set { this.view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.intrinsic_camera_params; } set { this.intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.extrinsic_camera_params; } set { this.extrinsic_camera_params = value; } }

        protected A3DConfigurationBox a3dconfig;  //  optional
        public A3DConfigurationBox A3dconfig { get { return this.a3dconfig; } set { this.a3dconfig = value; } }

        public MVCDSampleEntry_mvd4() : base("mvd4")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.mvcdconfig); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvdscalinfosei); // optional
            boxSize += stream.ReadBox(out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.extrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.a3dconfig); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.mvcdconfig); // mandatory
            if (this.mvdscalinfosei != null) boxSize += stream.WriteBox(this.mvdscalinfosei); // optional
            boxSize += stream.WriteBox(this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            if (this.intrinsic_camera_params != null) boxSize += stream.WriteBox(this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += stream.WriteBox(this.extrinsic_camera_params); // optional
            if (this.a3dconfig != null) boxSize += stream.WriteBox(this.a3dconfig); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(mvcdconfig); // mvcdconfig
            if (this.mvdscalinfosei != null) boxSize += IsoStream.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            boxSize += IsoStream.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            if (this.intrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            if (this.a3dconfig != null) boxSize += IsoStream.CalculateSize(a3dconfig); // a3dconfig
            return boxSize;
        }
    }


    /*
    class A3DSampleEntry() extends VisualSampleEntry ('a3d1') {
        A3DConfigurationBox	a3dconfig;		// mandatory
        MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
        ViewIdentifierBox	view_identifiers;		// mandatory
        MPEG4ExtensionDescriptorsBox descr;		// optional
        IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
        ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
    }
    */
    public class A3DSampleEntry : VisualSampleEntry
    {
        public const string FourCC = "a3d1";

        protected A3DConfigurationBox a3dconfig;  //  mandatory
        public A3DConfigurationBox A3dconfig { get { return this.a3dconfig; } set { this.a3dconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.mvdscalinfosei; } set { this.mvdscalinfosei = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return this.view_identifiers; } set { this.view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.intrinsic_camera_params; } set { this.intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.extrinsic_camera_params; } set { this.extrinsic_camera_params = value; } }

        public A3DSampleEntry() : base("a3d1")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.a3dconfig); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvdscalinfosei); // optional
            boxSize += stream.ReadBox(out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.extrinsic_camera_params); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.a3dconfig); // mandatory
            if (this.mvdscalinfosei != null) boxSize += stream.WriteBox(this.mvdscalinfosei); // optional
            boxSize += stream.WriteBox(this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            if (this.intrinsic_camera_params != null) boxSize += stream.WriteBox(this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += stream.WriteBox(this.extrinsic_camera_params); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(a3dconfig); // a3dconfig
            if (this.mvdscalinfosei != null) boxSize += IsoStream.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            boxSize += IsoStream.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            if (this.intrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            return boxSize;
        }
    }


    /*
    class A3DSampleEntry() extends VisualSampleEntry ('a3d2') {
        A3DConfigurationBox	a3dconfig;		// mandatory
        MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
        ViewIdentifierBox	view_identifiers;		// mandatory
        MPEG4ExtensionDescriptorsBox descr;		// optional
        IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
        ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
    }
    */
    public class A3DSampleEntry_a3d2 : VisualSampleEntry
    {
        public const string FourCC = "a3d2";

        protected A3DConfigurationBox a3dconfig;  //  mandatory
        public A3DConfigurationBox A3dconfig { get { return this.a3dconfig; } set { this.a3dconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.mvdscalinfosei; } set { this.mvdscalinfosei = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return this.view_identifiers; } set { this.view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.intrinsic_camera_params; } set { this.intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.extrinsic_camera_params; } set { this.extrinsic_camera_params = value; } }

        public A3DSampleEntry_a3d2() : base("a3d2")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.a3dconfig); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvdscalinfosei); // optional
            boxSize += stream.ReadBox(out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.extrinsic_camera_params); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.a3dconfig); // mandatory
            if (this.mvdscalinfosei != null) boxSize += stream.WriteBox(this.mvdscalinfosei); // optional
            boxSize += stream.WriteBox(this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            if (this.intrinsic_camera_params != null) boxSize += stream.WriteBox(this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += stream.WriteBox(this.extrinsic_camera_params); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(a3dconfig); // a3dconfig
            if (this.mvdscalinfosei != null) boxSize += IsoStream.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            boxSize += IsoStream.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            if (this.intrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            return boxSize;
        }
    }


    /*
    class A3DSampleEntry() extends VisualSampleEntry ('a3d3') {
        A3DConfigurationBox	a3dconfig;		// mandatory
        MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
        ViewIdentifierBox	view_identifiers;		// mandatory
        MPEG4ExtensionDescriptorsBox descr;		// optional
        IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
        ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
    }
    */
    public class A3DSampleEntry_a3d3 : VisualSampleEntry
    {
        public const string FourCC = "a3d3";

        protected A3DConfigurationBox a3dconfig;  //  mandatory
        public A3DConfigurationBox A3dconfig { get { return this.a3dconfig; } set { this.a3dconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.mvdscalinfosei; } set { this.mvdscalinfosei = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return this.view_identifiers; } set { this.view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.intrinsic_camera_params; } set { this.intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.extrinsic_camera_params; } set { this.extrinsic_camera_params = value; } }

        public A3DSampleEntry_a3d3() : base("a3d3")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.a3dconfig); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvdscalinfosei); // optional
            boxSize += stream.ReadBox(out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.extrinsic_camera_params); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.a3dconfig); // mandatory
            if (this.mvdscalinfosei != null) boxSize += stream.WriteBox(this.mvdscalinfosei); // optional
            boxSize += stream.WriteBox(this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            if (this.intrinsic_camera_params != null) boxSize += stream.WriteBox(this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += stream.WriteBox(this.extrinsic_camera_params); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(a3dconfig); // a3dconfig
            if (this.mvdscalinfosei != null) boxSize += IsoStream.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            boxSize += IsoStream.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            if (this.intrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            return boxSize;
        }
    }


    /*
    class A3DSampleEntry() extends VisualSampleEntry ('a3d4') {
        A3DConfigurationBox	a3dconfig;		// mandatory
        MVDScalabilityInformationSEIBox	mvdscalinfosei;	// optional
        ViewIdentifierBox	view_identifiers;		// mandatory
        MPEG4ExtensionDescriptorsBox descr;		// optional
        IntrinsicCameraParametersBox	intrinsic_camera_params;	// optional
        ExtrinsicCameraParametersBox	extrinsic_camera_params;	// optional
    }
    */
    public class A3DSampleEntry_a3d4 : VisualSampleEntry
    {
        public const string FourCC = "a3d4";

        protected A3DConfigurationBox a3dconfig;  //  mandatory
        public A3DConfigurationBox A3dconfig { get { return this.a3dconfig; } set { this.a3dconfig = value; } }

        protected MVDScalabilityInformationSEIBox mvdscalinfosei;  //  optional
        public MVDScalabilityInformationSEIBox Mvdscalinfosei { get { return this.mvdscalinfosei; } set { this.mvdscalinfosei = value; } }

        protected ViewIdentifierBox view_identifiers;  //  mandatory
        public ViewIdentifierBox ViewIdentifiers { get { return this.view_identifiers; } set { this.view_identifiers = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        protected IntrinsicCameraParametersBox intrinsic_camera_params;  //  optional
        public IntrinsicCameraParametersBox IntrinsicCameraParams { get { return this.intrinsic_camera_params; } set { this.intrinsic_camera_params = value; } }

        protected ExtrinsicCameraParametersBox extrinsic_camera_params;  //  optional
        public ExtrinsicCameraParametersBox ExtrinsicCameraParams { get { return this.extrinsic_camera_params; } set { this.extrinsic_camera_params = value; } }

        public A3DSampleEntry_a3d4() : base("a3d4")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.a3dconfig); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.mvdscalinfosei); // optional
            boxSize += stream.ReadBox(out this.view_identifiers); // mandatory
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.intrinsic_camera_params); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.extrinsic_camera_params); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.a3dconfig); // mandatory
            if (this.mvdscalinfosei != null) boxSize += stream.WriteBox(this.mvdscalinfosei); // optional
            boxSize += stream.WriteBox(this.view_identifiers); // mandatory
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            if (this.intrinsic_camera_params != null) boxSize += stream.WriteBox(this.intrinsic_camera_params); // optional
            if (this.extrinsic_camera_params != null) boxSize += stream.WriteBox(this.extrinsic_camera_params); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(a3dconfig); // a3dconfig
            if (this.mvdscalinfosei != null) boxSize += IsoStream.CalculateSize(mvdscalinfosei); // mvdscalinfosei
            boxSize += IsoStream.CalculateSize(view_identifiers); // view_identifiers
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            if (this.intrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(intrinsic_camera_params); // intrinsic_camera_params
            if (this.extrinsic_camera_params != null) boxSize += IsoStream.CalculateSize(extrinsic_camera_params); // extrinsic_camera_params
            return boxSize;
        }
    }


    /*
    class AVCSVCSampleEntry() extends AVCSampleEntry ('avc1' or 'avc3') {
        SVCConfigurationBox	svcconfig;			// optional
        ScalabilityInformationSEIBox	scalability;	// optional
        SVCPriorityAssignmentBox	method;			// optional
    }
    */
    public class AVCSVCSampleEntry : AVCSampleEntry
    {
        public const string FourCC = "avc1";

        protected SVCConfigurationBox svcconfig;  //  optional
        public SVCConfigurationBox Svcconfig { get { return this.svcconfig; } set { this.svcconfig = value; } }

        protected ScalabilityInformationSEIBox scalability;  //  optional
        public ScalabilityInformationSEIBox Scalability { get { return this.scalability; } set { this.scalability = value; } }

        protected SVCPriorityAssignmentBox method;  //  optional
        public SVCPriorityAssignmentBox Method { get { return this.method; } set { this.method = value; } }

        public AVCSVCSampleEntry() : base("avc1")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += stream.ReadBox(out this.svcconfig); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.scalability); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.method); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.svcconfig != null) boxSize += stream.WriteBox(this.svcconfig); // optional
            if (this.scalability != null) boxSize += stream.WriteBox(this.scalability); // optional
            if (this.method != null) boxSize += stream.WriteBox(this.method); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.svcconfig != null) boxSize += IsoStream.CalculateSize(svcconfig); // svcconfig
            if (this.scalability != null) boxSize += IsoStream.CalculateSize(scalability); // scalability
            if (this.method != null) boxSize += IsoStream.CalculateSize(method); // method
            return boxSize;
        }
    }


    /*

    */
    public class AVCSVCSampleEntry_avc3 : AVCSampleEntry
    {
        public const string FourCC = "avc3";

        protected SVCConfigurationBox svcconfig;  //  optional
        public SVCConfigurationBox Svcconfig { get { return this.svcconfig; } set { this.svcconfig = value; } }

        protected ScalabilityInformationSEIBox scalability;  //  optional
        public ScalabilityInformationSEIBox Scalability { get { return this.scalability; } set { this.scalability = value; } }

        protected SVCPriorityAssignmentBox method;  //  optional
        public SVCPriorityAssignmentBox Method { get { return this.method; } set { this.method = value; } }

        public AVCSVCSampleEntry_avc3() : base("avc3")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += stream.ReadBox(out this.svcconfig); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.scalability); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.method); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.svcconfig != null) boxSize += stream.WriteBox(this.svcconfig); // optional
            if (this.scalability != null) boxSize += stream.WriteBox(this.scalability); // optional
            if (this.method != null) boxSize += stream.WriteBox(this.method); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.svcconfig != null) boxSize += IsoStream.CalculateSize(svcconfig); // svcconfig
            if (this.scalability != null) boxSize += IsoStream.CalculateSize(scalability); // scalability
            if (this.method != null) boxSize += IsoStream.CalculateSize(method); // method
            return boxSize;
        }
    }


    /*
    class AVC2SVCSampleEntry() extends AVC2SampleEntry('avc2' or 'avc4') {
        SVCConfigurationBox	svcconfig;			// optional
        ScalabilityInformationSEIBox	scalability;	// optional
        SVCPriorityAssignmentBox	method;			// optional
    }
    */
    public class AVC2SVCSampleEntry : AVC2SampleEntry
    {
        public const string FourCC = "avc2";

        protected SVCConfigurationBox svcconfig;  //  optional
        public SVCConfigurationBox Svcconfig { get { return this.svcconfig; } set { this.svcconfig = value; } }

        protected ScalabilityInformationSEIBox scalability;  //  optional
        public ScalabilityInformationSEIBox Scalability { get { return this.scalability; } set { this.scalability = value; } }

        protected SVCPriorityAssignmentBox method;  //  optional
        public SVCPriorityAssignmentBox Method { get { return this.method; } set { this.method = value; } }

        public AVC2SVCSampleEntry() : base("avc2")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += stream.ReadBox(out this.svcconfig); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.scalability); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.method); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.svcconfig != null) boxSize += stream.WriteBox(this.svcconfig); // optional
            if (this.scalability != null) boxSize += stream.WriteBox(this.scalability); // optional
            if (this.method != null) boxSize += stream.WriteBox(this.method); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.svcconfig != null) boxSize += IsoStream.CalculateSize(svcconfig); // svcconfig
            if (this.scalability != null) boxSize += IsoStream.CalculateSize(scalability); // scalability
            if (this.method != null) boxSize += IsoStream.CalculateSize(method); // method
            return boxSize;
        }
    }


    /*

    */
    public class AVC2SVCSampleEntry_avc4 : AVC2SampleEntry
    {
        public const string FourCC = "avc4";

        protected SVCConfigurationBox svcconfig;  //  optional
        public SVCConfigurationBox Svcconfig { get { return this.svcconfig; } set { this.svcconfig = value; } }

        protected ScalabilityInformationSEIBox scalability;  //  optional
        public ScalabilityInformationSEIBox Scalability { get { return this.scalability; } set { this.scalability = value; } }

        protected SVCPriorityAssignmentBox method;  //  optional
        public SVCPriorityAssignmentBox Method { get { return this.method; } set { this.method = value; } }

        public AVC2SVCSampleEntry_avc4() : base("avc4")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += stream.ReadBox(out this.svcconfig); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.scalability); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.method); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.svcconfig != null) boxSize += stream.WriteBox(this.svcconfig); // optional
            if (this.scalability != null) boxSize += stream.WriteBox(this.scalability); // optional
            if (this.method != null) boxSize += stream.WriteBox(this.method); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.svcconfig != null) boxSize += IsoStream.CalculateSize(svcconfig); // svcconfig
            if (this.scalability != null) boxSize += IsoStream.CalculateSize(scalability); // scalability
            if (this.method != null) boxSize += IsoStream.CalculateSize(method); // method
            return boxSize;
        }
    }


    /*
    // Use this if the track is NOT AVC compatible
    class SVCSampleEntry() extends VisualSampleEntry ('svc1' or 'svc2') {
        SVCConfigurationBox		svcconfig;
        MPEG4ExtensionDescriptorsBox descr;	// optional
        ScalabilityInformationSEIBox	scalability;	// optional
        SVCPriorityAssignmentBox	method;			// optional
    }
    */
    public class SVCSampleEntry : VisualSampleEntry
    {
        public const string FourCC = "svc1";

        protected SVCConfigurationBox svcconfig;
        public SVCConfigurationBox Svcconfig { get { return this.svcconfig; } set { this.svcconfig = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        protected ScalabilityInformationSEIBox scalability;  //  optional
        public ScalabilityInformationSEIBox Scalability { get { return this.scalability; } set { this.scalability = value; } }

        protected SVCPriorityAssignmentBox method;  //  optional
        public SVCPriorityAssignmentBox Method { get { return this.method; } set { this.method = value; } }

        public SVCSampleEntry() : base("svc1")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.svcconfig);
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.scalability); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.method); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.svcconfig);
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            if (this.scalability != null) boxSize += stream.WriteBox(this.scalability); // optional
            if (this.method != null) boxSize += stream.WriteBox(this.method); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(svcconfig); // svcconfig
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            if (this.scalability != null) boxSize += IsoStream.CalculateSize(scalability); // scalability
            if (this.method != null) boxSize += IsoStream.CalculateSize(method); // method
            return boxSize;
        }
    }


    /*

    */
    public class SVCSampleEntry_svc2 : VisualSampleEntry
    {
        public const string FourCC = "svc2";

        protected SVCConfigurationBox svcconfig;
        public SVCConfigurationBox Svcconfig { get { return this.svcconfig; } set { this.svcconfig = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        protected ScalabilityInformationSEIBox scalability;  //  optional
        public ScalabilityInformationSEIBox Scalability { get { return this.scalability; } set { this.scalability = value; } }

        protected SVCPriorityAssignmentBox method;  //  optional
        public SVCPriorityAssignmentBox Method { get { return this.method; } set { this.method = value; } }

        public SVCSampleEntry_svc2() : base("svc2")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.svcconfig);
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.scalability); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.method); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.svcconfig);
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            if (this.scalability != null) boxSize += stream.WriteBox(this.scalability); // optional
            if (this.method != null) boxSize += stream.WriteBox(this.method); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(svcconfig); // svcconfig
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            if (this.scalability != null) boxSize += IsoStream.CalculateSize(scalability); // scalability
            if (this.method != null) boxSize += IsoStream.CalculateSize(method); // method
            return boxSize;
        }
    }


    /*
    class HEVCTileSampleEntry() extends VisualSampleEntry ('hvt1'){
        HEVCTileConfigurationBox	config(); // optional
    }
    */
    public class HEVCTileSampleEntry : VisualSampleEntry
    {
        public const string FourCC = "hvt1";

        protected HEVCTileConfigurationBox config;  //  optional
        public HEVCTileConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        public HEVCTileSampleEntry() : base("hvt1")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += stream.ReadBox(out this.config); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.config != null) boxSize += stream.WriteBox(this.config); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.config != null) boxSize += IsoStream.CalculateSize(config); // config
            return boxSize;
        }
    }


    /*
    class LHEVCTileSampleEntry() extends VisualSampleEntry ('lht1'){
    }
    */
    public class LHEVCTileSampleEntry : VisualSampleEntry
    {
        public const string FourCC = "lht1";

        public LHEVCTileSampleEntry() : base("lht1")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    class HEVCTileSSHInfoSampleEntry() extends VisualSampleEntry ('hvt3'){
        HEVCTileConfigurationBox config(); // optional 
    }
    */
    public class HEVCTileSSHInfoSampleEntry : VisualSampleEntry
    {
        public const string FourCC = "hvt3";

        protected HEVCTileConfigurationBox config;  //  optional 
        public HEVCTileConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        public HEVCTileSSHInfoSampleEntry() : base("hvt3")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += stream.ReadBox(out this.config); // optional 
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.config != null) boxSize += stream.WriteBox(this.config); // optional 
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.config != null) boxSize += IsoStream.CalculateSize(config); // config
            return boxSize;
        }
    }


    /*
    class HEVCSliceSegmentDataSampleEntry() extends VisualSampleEntry ('hvt2'){
        HEVCTileConfigurationBox	config(); // optional
    }
    */
    public class HEVCSliceSegmentDataSampleEntry : VisualSampleEntry
    {
        public const string FourCC = "hvt2";

        protected HEVCTileConfigurationBox config;  //  optional
        public HEVCTileConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        public HEVCSliceSegmentDataSampleEntry() : base("hvt2")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            if (boxSize < size) boxSize += stream.ReadBox(out this.config); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            if (this.config != null) boxSize += stream.WriteBox(this.config); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            if (this.config != null) boxSize += IsoStream.CalculateSize(config); // config
            return boxSize;
        }
    }


    /*
    class VvcSampleEntry() extends VisualSampleEntry ('vvc1' or 'vvi1') {
        VvcConfigurationBox	config;
        MPEG4ExtensionDescriptorsBox () descr;	// optional
    }
    */
    public class VvcSampleEntry : VisualSampleEntry
    {
        public const string FourCC = "vvc1";

        protected VvcConfigurationBox config;
        public VvcConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        public VvcSampleEntry() : base("vvc1")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            return boxSize;
        }
    }


    /*

    */
    public class VvcSampleEntry_vvi1 : VisualSampleEntry
    {
        public const string FourCC = "vvi1";

        protected VvcConfigurationBox config;
        public VvcConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        public VvcSampleEntry_vvi1() : base("vvi1")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            return boxSize;
        }
    }


    /*
    class VvcSubpicSampleEntry() extends VisualSampleEntry ('vvs1') {
        VvcNALUConfigBox config;
    }
    */
    public class VvcSubpicSampleEntry : VisualSampleEntry
    {
        public const string FourCC = "vvs1";

        protected VvcNALUConfigBox config;
        public VvcNALUConfigBox Config { get { return this.config; } set { this.config = value; } }

        public VvcSubpicSampleEntry() : base("vvs1")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            return boxSize;
        }
    }


    /*
    class VvcNonVCLSampleEntry() extends VisualSampleEntry ('vvcN') {
        VvcNALUConfigBox config;
    }
    */
    public class VvcNonVCLSampleEntry : VisualSampleEntry
    {
        public const string FourCC = "vvcN";

        protected VvcNALUConfigBox config;
        public VvcNALUConfigBox Config { get { return this.config; } set { this.config = value; } }

        public VvcNonVCLSampleEntry() : base("vvcN")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            return boxSize;
        }
    }


    /*
    class EVCSampleEntry() extends VisualSampleEntry('evc1'){
        EVCConfigurationBox	config;
        MPEG4ExtensionDescriptorsBox() descr;	// optional
    }
    */
    public class EVCSampleEntry : VisualSampleEntry
    {
        public const string FourCC = "evc1";

        protected EVCConfigurationBox config;
        public EVCConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        protected MPEG4ExtensionDescriptorsBox descr;  //  optional
        public MPEG4ExtensionDescriptorsBox Descr { get { return this.descr; } set { this.descr = value; } }

        public EVCSampleEntry() : base("evc1")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            if (boxSize < size) boxSize += stream.ReadBox(out this.descr); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            if (this.descr != null) boxSize += stream.WriteBox(this.descr); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            if (this.descr != null) boxSize += IsoStream.CalculateSize(descr); // descr
            return boxSize;
        }
    }


    /*
    class SVCMetaDataSampleEntry () extends MetaDataSampleEntry('svcM')
    {
        SVCMetadataSampleConfigBox	config;
        SVCPriorityAssignmentBox	methods;		// optional
        SVCPriorityLayerInfoBox		priorities;	// optional
    }
    */
    public class SVCMetaDataSampleEntry : MetaDataSampleEntry
    {
        public const string FourCC = "svcM";

        protected SVCMetadataSampleConfigBox config;
        public SVCMetadataSampleConfigBox Config { get { return this.config; } set { this.config = value; } }

        protected SVCPriorityAssignmentBox methods;  //  optional
        public SVCPriorityAssignmentBox Methods { get { return this.methods; } set { this.methods = value; } }

        protected SVCPriorityLayerInfoBox priorities;  //  optional
        public SVCPriorityLayerInfoBox Priorities { get { return this.priorities; } set { this.priorities = value; } }

        public SVCMetaDataSampleEntry() : base("svcM")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            if (boxSize < size) boxSize += stream.ReadBox(out this.methods); // optional
            if (boxSize < size) boxSize += stream.ReadBox(out this.priorities); // optional
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            if (this.methods != null) boxSize += stream.WriteBox(this.methods); // optional
            if (this.priorities != null) boxSize += stream.WriteBox(this.priorities); // optional
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            if (this.methods != null) boxSize += IsoStream.CalculateSize(methods); // methods
            if (this.priorities != null) boxSize += IsoStream.CalculateSize(priorities); // priorities
            return boxSize;
        }
    }


    /*
    class EVCSliceComponentTrackSampleEntry() 
          extends VisualSampleEntry ('evs1' or 'evs2'){
        EVCSliceComponentTrackConfigurationBox	config;
    }
    */
    public class EVCSliceComponentTrackSampleEntry : VisualSampleEntry
    {
        public const string FourCC = "evs1";

        protected EVCSliceComponentTrackConfigurationBox config;
        public EVCSliceComponentTrackConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        public EVCSliceComponentTrackSampleEntry() : base("evs1")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            return boxSize;
        }
    }


    /*

    */
    public class EVCSliceComponentTrackSampleEntry_evs2 : VisualSampleEntry
    {
        public const string FourCC = "evs2";

        protected EVCSliceComponentTrackConfigurationBox config;
        public EVCSliceComponentTrackConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        public EVCSliceComponentTrackSampleEntry_evs2() : base("evs2")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            return boxSize;
        }
    }


    /*
    aligned(8) class SubpicCommonGroupBox extends EntityToGroupBox('acgl',0,0)
    {	unsigned int(1) level_is_present_flag;
        unsigned int(1) level_is_static_flag;
        bit(6) reserved = 0;
        if( level_is_present_flag )
            unsigned int(8) level_idc;
        if( level_is_static_flag == 0 )
            unsigned_int(32) level_info_entity_idx;
        unsigned int(16) num_active_tracks;
    }
    */
    public class SubpicCommonGroupBox : EntityToGroupBox
    {
        public const string FourCC = "acgl";

        protected bool level_is_present_flag;
        public bool LevelIsPresentFlag { get { return this.level_is_present_flag; } set { this.level_is_present_flag = value; } }

        protected bool level_is_static_flag;
        public bool LevelIsStaticFlag { get { return this.level_is_static_flag; } set { this.level_is_static_flag = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte level_idc;
        public byte LevelIdc { get { return this.level_idc; } set { this.level_idc = value; } }

        protected uint level_info_entity_idx;
        public uint LevelInfoEntityIdx { get { return this.level_info_entity_idx; } set { this.level_info_entity_idx = value; } }

        protected ushort num_active_tracks;
        public ushort NumActiveTracks { get { return this.num_active_tracks; } set { this.num_active_tracks = value; } }

        public SubpicCommonGroupBox() : base("acgl", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBit(out this.level_is_present_flag);
            boxSize += stream.ReadBit(out this.level_is_static_flag);
            boxSize += stream.ReadBits(6, out this.reserved);

            if (level_is_present_flag)
            {
                boxSize += stream.ReadUInt8(out this.level_idc);
            }

            if (level_is_static_flag == false)
            {
                boxSize += stream.ReadUInt32(out this.level_info_entity_idx);
            }
            boxSize += stream.ReadUInt16(out this.num_active_tracks);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBit(this.level_is_present_flag);
            boxSize += stream.WriteBit(this.level_is_static_flag);
            boxSize += stream.WriteBits(6, this.reserved);

            if (level_is_present_flag)
            {
                boxSize += stream.WriteUInt8(this.level_idc);
            }

            if (level_is_static_flag == false)
            {
                boxSize += stream.WriteUInt32(this.level_info_entity_idx);
            }
            boxSize += stream.WriteUInt16(this.num_active_tracks);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // level_is_present_flag
            boxSize += 1; // level_is_static_flag
            boxSize += 6; // reserved

            if (level_is_present_flag)
            {
                boxSize += 8; // level_idc
            }

            if (level_is_static_flag == false)
            {
                boxSize += 32; // level_info_entity_idx
            }
            boxSize += 16; // num_active_tracks
            return boxSize;
        }
    }


    /*
    aligned(8) class SubpicMultipleGroupsBox extends EntityToGroupBox('amgl',0,0)
    {
        unsigned int(1) level_is_present_flag;
        unsigned int(1) level_is_static_flag;
        bit(7) reserved = 0;
        if( level_is_present_flag )
            unsigned int(8) level_idc;
        if( level_is_static_flag == 0 )
            unsigned_int(32) level_info_entity_idx;
        unsigned int(16) num_subgroup_ids;
        subgroupIdLen = (num_subgroup_ids >= (1 << 8)) ? 16 : 8;
        for (i = 0; i < num_entities_in_group; i++)
            unsigned int(subgroupIdLen) track_subgroup_id[i];
        for (i = 0; i < num_subgroup_ids; i++)
            unsigned int(16) num_active_tracks[i];
    }
    */
    public class SubpicMultipleGroupsBox : EntityToGroupBox
    {
        public const string FourCC = "amgl";

        protected bool level_is_present_flag;
        public bool LevelIsPresentFlag { get { return this.level_is_present_flag; } set { this.level_is_present_flag = value; } }

        protected bool level_is_static_flag;
        public bool LevelIsStaticFlag { get { return this.level_is_static_flag; } set { this.level_is_static_flag = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte level_idc;
        public byte LevelIdc { get { return this.level_idc; } set { this.level_idc = value; } }

        protected uint level_info_entity_idx;
        public uint LevelInfoEntityIdx { get { return this.level_info_entity_idx; } set { this.level_info_entity_idx = value; } }

        protected ushort num_subgroup_ids;
        public ushort NumSubgroupIds { get { return this.num_subgroup_ids; } set { this.num_subgroup_ids = value; } }

        protected uint[] track_subgroup_id;
        public uint[] TrackSubgroupId { get { return this.track_subgroup_id; } set { this.track_subgroup_id = value; } }

        protected ushort[] num_active_tracks;
        public ushort[] NumActiveTracks { get { return this.num_active_tracks; } set { this.num_active_tracks = value; } }

        public SubpicMultipleGroupsBox() : base("amgl", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBit(out this.level_is_present_flag);
            boxSize += stream.ReadBit(out this.level_is_static_flag);
            boxSize += stream.ReadBits(7, out this.reserved);

            if (level_is_present_flag)
            {
                boxSize += stream.ReadUInt8(out this.level_idc);
            }

            if (level_is_static_flag == false)
            {
                boxSize += stream.ReadUInt32(out this.level_info_entity_idx);
            }
            boxSize += stream.ReadUInt16(out this.num_subgroup_ids);
            ulong subgroupIdLen = (ulong)((num_subgroup_ids >= (1 << 8)) ? 16 : 8);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += stream.ReadUInt32(out this.track_subgroup_id[i]);
            }

            for (int i = 0; i < num_subgroup_ids; i++)
            {
                boxSize += stream.ReadUInt16(out this.num_active_tracks[i]);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBit(this.level_is_present_flag);
            boxSize += stream.WriteBit(this.level_is_static_flag);
            boxSize += stream.WriteBits(7, this.reserved);

            if (level_is_present_flag)
            {
                boxSize += stream.WriteUInt8(this.level_idc);
            }

            if (level_is_static_flag == false)
            {
                boxSize += stream.WriteUInt32(this.level_info_entity_idx);
            }
            boxSize += stream.WriteUInt16(this.num_subgroup_ids);
            ulong subgroupIdLen = (ulong)((num_subgroup_ids >= (1 << 8)) ? 16 : 8);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += stream.WriteUInt32(this.track_subgroup_id[i]);
            }

            for (int i = 0; i < num_subgroup_ids; i++)
            {
                boxSize += stream.WriteUInt16(this.num_active_tracks[i]);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // level_is_present_flag
            boxSize += 1; // level_is_static_flag
            boxSize += 7; // reserved

            if (level_is_present_flag)
            {
                boxSize += 8; // level_idc
            }

            if (level_is_static_flag == false)
            {
                boxSize += 32; // level_info_entity_idx
            }
            boxSize += 16; // num_subgroup_ids
            ulong subgroupIdLen = (ulong)((num_subgroup_ids >= (1 << 8)) ? 16 : 8);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // track_subgroup_id
            }

            for (int i = 0; i < num_subgroup_ids; i++)
            {
                boxSize += 16; // num_active_tracks
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class OperatingPointGroupBox extends EntityToGroupBox('opeg',0,0)
    {
        unsigned int(8) num_profile_tier_level_minus1;
        for (i=0; i<=num_profile_tier_level_minus1; i++)
            VvcPTLRecord(0) opeg_ptl[i];
        bit(6) reserved = 0;
        unsigned int(1) incomplete_operating_points_flag;
        unsigned int(9) num_olss;
        for (i=0; i<num_olss; i++) {
            unsigned int(8) ptl_idx[i];
            unsigned int(9) ols_idx[i];
            unsigned int(6) layer_count[i];
            bit(1) reserved = 0;
            unsigned int(1) layer_info_present_flag[i];
            if (layer_info_present_flag[i]) {
                for (j=0; j<layer_count[i]; j++) {
                    unsigned int(6) layer_id[i][j];
                    unsigned int(1) is_output_layer[i][j];
                    bit(1) reserved = 0;
                }
            }
        }
        bit(4) reserved = 0;
        unsigned int(12) num_operating_points;
        for (i=0; i<num_operating_points; i++) {
            unsigned int(9) ols_loop_entry_idx;
            unsigned int(3) max_temporal_id;
            unsigned int(1) frame_rate_info_flag;
            unsigned int(1) bit_rate_info_flag;
            if (incomplete_operating_points_flag) {
                unsigned int(2) op_availability_idc;
            }
            else
                bit(2) reserved = 0;
            bit(3) reserved = 0;
            unsigned int(2) chroma_format_idc;
            unsigned int(3) bit_depth_minus8;
            unsigned_int(16) max_picture_width;
            unsigned_int(16) max_picture_height;
            if (frame_rate_info_flag) {
                unsigned int(16) avg_frame_rate;
                bit(6) reserved = 0;
                unsigned int(2) constant_frame_rate;
            }
            if (bit_rate_info_flag) {
                unsigned int(32) max_bit_rate;
                unsigned int(32) avg_bit_rate;
            }
            unsigned int(8) entity_count;
            for (j=0; j<entity_count; j++)
                unsigned int(8) entity_idx;
        }
    }
    */
    public class OperatingPointGroupBox : EntityToGroupBox
    {
        public const string FourCC = "opeg";

        protected byte num_profile_tier_level_minus1;
        public byte NumProfileTierLevelMinus1 { get { return this.num_profile_tier_level_minus1; } set { this.num_profile_tier_level_minus1 = value; } }

        protected VvcPTLRecord[] opeg_ptl;
        public VvcPTLRecord[] OpegPtl { get { return this.opeg_ptl; } set { this.opeg_ptl = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected bool incomplete_operating_points_flag;
        public bool IncompleteOperatingPointsFlag { get { return this.incomplete_operating_points_flag; } set { this.incomplete_operating_points_flag = value; } }

        protected ushort num_olss;
        public ushort NumOlss { get { return this.num_olss; } set { this.num_olss = value; } }

        protected byte[] ptl_idx;
        public byte[] PtlIdx { get { return this.ptl_idx; } set { this.ptl_idx = value; } }

        protected ushort[] ols_idx;
        public ushort[] OlsIdx { get { return this.ols_idx; } set { this.ols_idx = value; } }

        protected byte[] layer_count;
        public byte[] LayerCount { get { return this.layer_count; } set { this.layer_count = value; } }

        protected bool reserved0 = false;
        public bool Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected bool[] layer_info_present_flag;
        public bool[] LayerInfoPresentFlag { get { return this.layer_info_present_flag; } set { this.layer_info_present_flag = value; } }

        protected byte[][] layer_id;
        public byte[][] LayerId { get { return this.layer_id; } set { this.layer_id = value; } }

        protected byte[][] is_output_layer;
        public byte[][] IsOutputLayer { get { return this.is_output_layer; } set { this.is_output_layer = value; } }

        protected bool reserved00 = false;
        public bool Reserved00 { get { return this.reserved00; } set { this.reserved00 = value; } }

        protected byte reserved1 = 0;
        public byte Reserved1 { get { return this.reserved1; } set { this.reserved1 = value; } }

        protected ushort num_operating_points;
        public ushort NumOperatingPoints { get { return this.num_operating_points; } set { this.num_operating_points = value; } }

        protected ushort ols_loop_entry_idx;
        public ushort OlsLoopEntryIdx { get { return this.ols_loop_entry_idx; } set { this.ols_loop_entry_idx = value; } }

        protected byte max_temporal_id;
        public byte MaxTemporalId { get { return this.max_temporal_id; } set { this.max_temporal_id = value; } }

        protected bool frame_rate_info_flag;
        public bool FrameRateInfoFlag { get { return this.frame_rate_info_flag; } set { this.frame_rate_info_flag = value; } }

        protected bool bit_rate_info_flag;
        public bool BitRateInfoFlag { get { return this.bit_rate_info_flag; } set { this.bit_rate_info_flag = value; } }

        protected byte op_availability_idc;
        public byte OpAvailabilityIdc { get { return this.op_availability_idc; } set { this.op_availability_idc = value; } }

        protected byte reserved2 = 0;
        public byte Reserved2 { get { return this.reserved2; } set { this.reserved2 = value; } }

        protected byte reserved01 = 0;
        public byte Reserved01 { get { return this.reserved01; } set { this.reserved01 = value; } }

        protected byte chroma_format_idc;
        public byte ChromaFormatIdc { get { return this.chroma_format_idc; } set { this.chroma_format_idc = value; } }

        protected byte bit_depth_minus8;
        public byte BitDepthMinus8 { get { return this.bit_depth_minus8; } set { this.bit_depth_minus8 = value; } }

        protected ushort max_picture_width;
        public ushort MaxPictureWidth { get { return this.max_picture_width; } set { this.max_picture_width = value; } }

        protected ushort max_picture_height;
        public ushort MaxPictureHeight { get { return this.max_picture_height; } set { this.max_picture_height = value; } }

        protected ushort avg_frame_rate;
        public ushort AvgFrameRate { get { return this.avg_frame_rate; } set { this.avg_frame_rate = value; } }

        protected byte reserved10 = 0;
        public byte Reserved10 { get { return this.reserved10; } set { this.reserved10 = value; } }

        protected byte constant_frame_rate;
        public byte ConstantFrameRate { get { return this.constant_frame_rate; } set { this.constant_frame_rate = value; } }

        protected uint max_bit_rate;
        public uint MaxBitRate { get { return this.max_bit_rate; } set { this.max_bit_rate = value; } }

        protected uint avg_bit_rate;
        public uint AvgBitRate { get { return this.avg_bit_rate; } set { this.avg_bit_rate = value; } }

        protected byte entity_count;
        public byte EntityCount { get { return this.entity_count; } set { this.entity_count = value; } }

        protected byte entity_idx;
        public byte EntityIdx { get { return this.entity_idx; } set { this.entity_idx = value; } }

        public OperatingPointGroupBox() : base("opeg", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.num_profile_tier_level_minus1);

            for (int i = 0; i <= num_profile_tier_level_minus1; i++)
            {
                boxSize += stream.ReadClass(out this.opeg_ptl[i]);
            }
            boxSize += stream.ReadBits(6, out this.reserved);
            boxSize += stream.ReadBit(out this.incomplete_operating_points_flag);
            boxSize += stream.ReadBits(9, out this.num_olss);

            for (int i = 0; i < num_olss; i++)
            {
                boxSize += stream.ReadUInt8(out this.ptl_idx[i]);
                boxSize += stream.ReadBits(9, out this.ols_idx[i]);
                boxSize += stream.ReadBits(6, out this.layer_count[i]);
                boxSize += stream.ReadBit(out this.reserved0);
                boxSize += stream.ReadBit(out this.layer_info_present_flag[i]);

                if (layer_info_present_flag[i])
                {

                    for (int j = 0; j < layer_count[i]; j++)
                    {
                        boxSize += stream.ReadBits(6, out this.layer_id[i][j]);
                        boxSize += stream.ReadBits(1, out this.is_output_layer[i][j]);
                        boxSize += stream.ReadBit(out this.reserved00);
                    }
                }
            }
            boxSize += stream.ReadBits(4, out this.reserved1);
            boxSize += stream.ReadBits(12, out this.num_operating_points);

            for (int i = 0; i < num_operating_points; i++)
            {
                boxSize += stream.ReadBits(9, out this.ols_loop_entry_idx);
                boxSize += stream.ReadBits(3, out this.max_temporal_id);
                boxSize += stream.ReadBit(out this.frame_rate_info_flag);
                boxSize += stream.ReadBit(out this.bit_rate_info_flag);

                if (incomplete_operating_points_flag)
                {
                    boxSize += stream.ReadBits(2, out this.op_availability_idc);
                }

                else
                {
                    boxSize += stream.ReadBits(2, out this.reserved2);
                }
                boxSize += stream.ReadBits(3, out this.reserved01);
                boxSize += stream.ReadBits(2, out this.chroma_format_idc);
                boxSize += stream.ReadBits(3, out this.bit_depth_minus8);
                boxSize += stream.ReadUInt16(out this.max_picture_width);
                boxSize += stream.ReadUInt16(out this.max_picture_height);

                if (frame_rate_info_flag)
                {
                    boxSize += stream.ReadUInt16(out this.avg_frame_rate);
                    boxSize += stream.ReadBits(6, out this.reserved10);
                    boxSize += stream.ReadBits(2, out this.constant_frame_rate);
                }

                if (bit_rate_info_flag)
                {
                    boxSize += stream.ReadUInt32(out this.max_bit_rate);
                    boxSize += stream.ReadUInt32(out this.avg_bit_rate);
                }
                boxSize += stream.ReadUInt8(out this.entity_count);

                for (int j = 0; j < entity_count; j++)
                {
                    boxSize += stream.ReadUInt8(out this.entity_idx);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.num_profile_tier_level_minus1);

            for (int i = 0; i <= num_profile_tier_level_minus1; i++)
            {
                boxSize += stream.WriteClass(this.opeg_ptl[i]);
            }
            boxSize += stream.WriteBits(6, this.reserved);
            boxSize += stream.WriteBit(this.incomplete_operating_points_flag);
            boxSize += stream.WriteBits(9, this.num_olss);

            for (int i = 0; i < num_olss; i++)
            {
                boxSize += stream.WriteUInt8(this.ptl_idx[i]);
                boxSize += stream.WriteBits(9, this.ols_idx[i]);
                boxSize += stream.WriteBits(6, this.layer_count[i]);
                boxSize += stream.WriteBit(this.reserved0);
                boxSize += stream.WriteBit(this.layer_info_present_flag[i]);

                if (layer_info_present_flag[i])
                {

                    for (int j = 0; j < layer_count[i]; j++)
                    {
                        boxSize += stream.WriteBits(6, this.layer_id[i][j]);
                        boxSize += stream.WriteBits(1, this.is_output_layer[i][j]);
                        boxSize += stream.WriteBit(this.reserved00);
                    }
                }
            }
            boxSize += stream.WriteBits(4, this.reserved1);
            boxSize += stream.WriteBits(12, this.num_operating_points);

            for (int i = 0; i < num_operating_points; i++)
            {
                boxSize += stream.WriteBits(9, this.ols_loop_entry_idx);
                boxSize += stream.WriteBits(3, this.max_temporal_id);
                boxSize += stream.WriteBit(this.frame_rate_info_flag);
                boxSize += stream.WriteBit(this.bit_rate_info_flag);

                if (incomplete_operating_points_flag)
                {
                    boxSize += stream.WriteBits(2, this.op_availability_idc);
                }

                else
                {
                    boxSize += stream.WriteBits(2, this.reserved2);
                }
                boxSize += stream.WriteBits(3, this.reserved01);
                boxSize += stream.WriteBits(2, this.chroma_format_idc);
                boxSize += stream.WriteBits(3, this.bit_depth_minus8);
                boxSize += stream.WriteUInt16(this.max_picture_width);
                boxSize += stream.WriteUInt16(this.max_picture_height);

                if (frame_rate_info_flag)
                {
                    boxSize += stream.WriteUInt16(this.avg_frame_rate);
                    boxSize += stream.WriteBits(6, this.reserved10);
                    boxSize += stream.WriteBits(2, this.constant_frame_rate);
                }

                if (bit_rate_info_flag)
                {
                    boxSize += stream.WriteUInt32(this.max_bit_rate);
                    boxSize += stream.WriteUInt32(this.avg_bit_rate);
                }
                boxSize += stream.WriteUInt8(this.entity_count);

                for (int j = 0; j < entity_count; j++)
                {
                    boxSize += stream.WriteUInt8(this.entity_idx);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // num_profile_tier_level_minus1

            for (int i = 0; i <= num_profile_tier_level_minus1; i++)
            {
                boxSize += IsoStream.CalculateClassSize(opeg_ptl); // opeg_ptl
            }
            boxSize += 6; // reserved
            boxSize += 1; // incomplete_operating_points_flag
            boxSize += 9; // num_olss

            for (int i = 0; i < num_olss; i++)
            {
                boxSize += 8; // ptl_idx
                boxSize += 9; // ols_idx
                boxSize += 6; // layer_count
                boxSize += 1; // reserved0
                boxSize += 1; // layer_info_present_flag

                if (layer_info_present_flag[i])
                {

                    for (int j = 0; j < layer_count[i]; j++)
                    {
                        boxSize += 6; // layer_id
                        boxSize += 1; // is_output_layer
                        boxSize += 1; // reserved00
                    }
                }
            }
            boxSize += 4; // reserved1
            boxSize += 12; // num_operating_points

            for (int i = 0; i < num_operating_points; i++)
            {
                boxSize += 9; // ols_loop_entry_idx
                boxSize += 3; // max_temporal_id
                boxSize += 1; // frame_rate_info_flag
                boxSize += 1; // bit_rate_info_flag

                if (incomplete_operating_points_flag)
                {
                    boxSize += 2; // op_availability_idc
                }

                else
                {
                    boxSize += 2; // reserved2
                }
                boxSize += 3; // reserved01
                boxSize += 2; // chroma_format_idc
                boxSize += 3; // bit_depth_minus8
                boxSize += 16; // max_picture_width
                boxSize += 16; // max_picture_height

                if (frame_rate_info_flag)
                {
                    boxSize += 16; // avg_frame_rate
                    boxSize += 6; // reserved10
                    boxSize += 2; // constant_frame_rate
                }

                if (bit_rate_info_flag)
                {
                    boxSize += 32; // max_bit_rate
                    boxSize += 32; // avg_bit_rate
                }
                boxSize += 8; // entity_count

                for (int j = 0; j < entity_count; j++)
                {
                    boxSize += 8; // entity_idx
                }
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SwitchableTracks extends EntityToGroupBox('swtk',0,0)
    {
        for (i = 0; i < num_entities_in_group; i++)
            unsigned int(16) track_switch_hierarchy_id[i];
    }
    */
    public class SwitchableTracks : EntityToGroupBox
    {
        public const string FourCC = "swtk";

        protected ushort[] track_switch_hierarchy_id;
        public ushort[] TrackSwitchHierarchyId { get { return this.track_switch_hierarchy_id; } set { this.track_switch_hierarchy_id = value; } }

        public SwitchableTracks() : base("swtk", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += stream.ReadUInt16(out this.track_switch_hierarchy_id[i]);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += stream.WriteUInt16(this.track_switch_hierarchy_id[i]);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 16; // track_switch_hierarchy_id
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class EntityToGroupBox('vvcb', version, flags)
    extends FullBox('vvcb', version, flags) {
        unsigned int(32) group_id;
        unsigned int(32) num_entities_in_group;
        for(i=0; i<num_entities_in_group; i++)
            unsigned int(32) entity_id;
    // the remaining data may be specified for a particular grouping_type
    }
    */
    public class EntityToGroupBox_vvcb : FullBox
    {
        public const string FourCC = "vvcb";

        protected uint group_id;
        public uint GroupId { get { return this.group_id; } set { this.group_id = value; } }

        protected uint num_entities_in_group;
        public uint NumEntitiesInGroup { get { return this.num_entities_in_group; } set { this.num_entities_in_group = value; } }

        protected uint entity_id;  //  the remaining data may be specified for a particular grouping_type
        public uint EntityId { get { return this.entity_id; } set { this.entity_id = value; } }

        public EntityToGroupBox_vvcb(byte version = 0, uint flags = 0) : base("vvcb", version, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.group_id);
            boxSize += stream.ReadUInt32(out this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += stream.ReadUInt32(out this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.group_id);
            boxSize += stream.WriteUInt32(this.num_entities_in_group);

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += stream.WriteUInt32(this.entity_id); // the remaining data may be specified for a particular grouping_type
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // group_id
            boxSize += 32; // num_entities_in_group

            for (int i = 0; i < num_entities_in_group; i++)
            {
                boxSize += 32; // entity_id
            }
            return boxSize;
        }
    }


    /*
    class AUDSampleEntry() extends VisualSampleGroupEntry ('aud ')
    {
        bit(24) audNalUnit;
    }
    */
    public class AUDSampleEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "aud ";

        protected uint audNalUnit;
        public uint AudNalUnit { get { return this.audNalUnit; } set { this.audNalUnit = value; } }

        public AUDSampleEntry() : base("aud ")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(24, out this.audNalUnit);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(24, this.audNalUnit);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 24; // audNalUnit
            return boxSize;
        }
    }


    /*
    class AVCLayerEntry() extends VisualSampleGroupEntry ('avll')
    {
        unsigned int(8)  layerNumber;
        unsigned int(7)  reserved = 0;
        unsigned int(1)  accurateStatisticsFlag;
        unsigned int(16) avgBitRate;
        unsigned int(16) avgFrameRate;
    }
    */
    public class AVCLayerEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "avll";

        protected byte layerNumber;
        public byte LayerNumber { get { return this.layerNumber; } set { this.layerNumber = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected bool accurateStatisticsFlag;
        public bool AccurateStatisticsFlag { get { return this.accurateStatisticsFlag; } set { this.accurateStatisticsFlag = value; } }

        protected ushort avgBitRate;
        public ushort AvgBitRate { get { return this.avgBitRate; } set { this.avgBitRate = value; } }

        protected ushort avgFrameRate;
        public ushort AvgFrameRate { get { return this.avgFrameRate; } set { this.avgFrameRate = value; } }

        public AVCLayerEntry() : base("avll")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.layerNumber);
            boxSize += stream.ReadBits(7, out this.reserved);
            boxSize += stream.ReadBit(out this.accurateStatisticsFlag);
            boxSize += stream.ReadUInt16(out this.avgBitRate);
            boxSize += stream.ReadUInt16(out this.avgFrameRate);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.layerNumber);
            boxSize += stream.WriteBits(7, this.reserved);
            boxSize += stream.WriteBit(this.accurateStatisticsFlag);
            boxSize += stream.WriteUInt16(this.avgBitRate);
            boxSize += stream.WriteUInt16(this.avgFrameRate);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // layerNumber
            boxSize += 7; // reserved
            boxSize += 1; // accurateStatisticsFlag
            boxSize += 16; // avgBitRate
            boxSize += 16; // avgFrameRate
            return boxSize;
        }
    }


    /*
    class DecodingCapabilityInformation extends VisualSampleGroupEntry ('dcfi') {
        unsigned int(16) dci_nal_unit_length;
        bit(8*dci_nal_unit_length) dci_nal_unit;
    }
    */
    public class DecodingCapabilityInformation : VisualSampleGroupEntry
    {
        public const string FourCC = "dcfi";

        protected ushort dci_nal_unit_length;
        public ushort DciNalUnitLength { get { return this.dci_nal_unit_length; } set { this.dci_nal_unit_length = value; } }

        protected byte[] dci_nal_unit;
        public byte[] DciNalUnit { get { return this.dci_nal_unit; } set { this.dci_nal_unit = value; } }

        public DecodingCapabilityInformation() : base("dcfi")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.dci_nal_unit_length);
            boxSize += stream.ReadBytes(dci_nal_unit_length, out this.dci_nal_unit);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.dci_nal_unit_length);
            boxSize += stream.WriteBytes(dci_nal_unit_length, this.dci_nal_unit);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // dci_nal_unit_length
            boxSize += (ulong)dci_nal_unit_length * 8; // dci_nal_unit
            return boxSize;
        }
    }


    /*
    class DecodeRetimingEntry() extends VisualSampleGroupEntry ('dtrt') { 
        unsigned int(8) tierCount;
        for (i=1; i<=tierCount; i++) {
            unsigned int(16) tierID;
            signed int(16) delta;
        }
    }
    */
    public class DecodeRetimingEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "dtrt";

        protected byte tierCount;
        public byte TierCount { get { return this.tierCount; } set { this.tierCount = value; } }

        protected ushort tierID;
        public ushort TierID { get { return this.tierID; } set { this.tierID = value; } }

        protected short delta;
        public short Delta { get { return this.delta; } set { this.delta = value; } }

        public DecodeRetimingEntry() : base("dtrt")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.tierCount);

            for (int i = 1; i <= tierCount; i++)
            {
                boxSize += stream.ReadUInt16(out this.tierID);
                boxSize += stream.ReadInt16(out this.delta);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.tierCount);

            for (int i = 1; i <= tierCount; i++)
            {
                boxSize += stream.WriteUInt16(this.tierID);
                boxSize += stream.WriteInt16(this.delta);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // tierCount

            for (int i = 1; i <= tierCount; i++)
            {
                boxSize += 16; // tierID
                boxSize += 16; // delta
            }
            return boxSize;
        }
    }


    /*
    class EndOfBitstreamSampleEntry() extends VisualSampleGroupEntry ('eob ')
    {
        bit(16) eobNalUnit;
    }
    */
    public class EndOfBitstreamSampleEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "eob ";

        protected ushort eobNalUnit;
        public ushort EobNalUnit { get { return this.eobNalUnit; } set { this.eobNalUnit = value; } }

        public EndOfBitstreamSampleEntry() : base("eob ")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.eobNalUnit);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.eobNalUnit);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // eobNalUnit
            return boxSize;
        }
    }


    /*
    class EndOfSequenceSampleEntry() extends VisualSampleGroupEntry ('eos ')
    {
        unsigned int(8) num_eos_nal_unit_minus1;
        for (i=0; i <= num_eos_nal_unit_minus1; i++)
            bit(16) eosNalUnit[i];
    }
    */
    public class EndOfSequenceSampleEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "eos ";

        protected byte num_eos_nal_unit_minus1;
        public byte NumEosNalUnitMinus1 { get { return this.num_eos_nal_unit_minus1; } set { this.num_eos_nal_unit_minus1 = value; } }

        protected ushort[] eosNalUnit;
        public ushort[] EosNalUnit { get { return this.eosNalUnit; } set { this.eosNalUnit = value; } }

        public EndOfSequenceSampleEntry() : base("eos ")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.num_eos_nal_unit_minus1);

            for (int i = 0; i <= num_eos_nal_unit_minus1; i++)
            {
                boxSize += stream.ReadUInt16(out this.eosNalUnit[i]);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.num_eos_nal_unit_minus1);

            for (int i = 0; i <= num_eos_nal_unit_minus1; i++)
            {
                boxSize += stream.WriteUInt16(this.eosNalUnit[i]);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // num_eos_nal_unit_minus1

            for (int i = 0; i <= num_eos_nal_unit_minus1; i++)
            {
                boxSize += 16; // eosNalUnit
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class LhvcExternalBaseLayerInfo() extends VisualSampleGroupEntry('lbli')
    {
        bit(1) reserved = 1;
        unsigned int(1) bl_irap_pic_flag;
        unsigned int(6) bl_irap_nal_unit_type;
        signed   int(8) sample_offset;
    }
    */
    public class LhvcExternalBaseLayerInfo : VisualSampleGroupEntry
    {
        public const string FourCC = "lbli";

        protected bool reserved = true;
        public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected bool bl_irap_pic_flag;
        public bool BlIrapPicFlag { get { return this.bl_irap_pic_flag; } set { this.bl_irap_pic_flag = value; } }

        protected byte bl_irap_nal_unit_type;
        public byte BlIrapNalUnitType { get { return this.bl_irap_nal_unit_type; } set { this.bl_irap_nal_unit_type = value; } }

        protected sbyte sample_offset;
        public sbyte SampleOffset { get { return this.sample_offset; } set { this.sample_offset = value; } }

        public LhvcExternalBaseLayerInfo() : base("lbli")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBit(out this.reserved);
            boxSize += stream.ReadBit(out this.bl_irap_pic_flag);
            boxSize += stream.ReadBits(6, out this.bl_irap_nal_unit_type);
            boxSize += stream.ReadInt8(out this.sample_offset);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBit(this.reserved);
            boxSize += stream.WriteBit(this.bl_irap_pic_flag);
            boxSize += stream.WriteBits(6, this.bl_irap_nal_unit_type);
            boxSize += stream.WriteInt8(this.sample_offset);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // reserved
            boxSize += 1; // bl_irap_pic_flag
            boxSize += 6; // bl_irap_nal_unit_type
            boxSize += 8; // sample_offset
            return boxSize;
        }
    }


    /*
    class LayerInfoGroupEntry extends VisualSampleGroupEntry ('linf') {
        bit(2) reserved = 0;
        unsigned int(6) num_layers_in_track;
        for (i=0; i<num_layers_in_track; i++) {
            bit(2) reserved = 0;
            unsigned int(1) irap_gdr_pics_in_layer_only_flag;
            unsigned int(1) completeness_flag;
            unsigned int(6) layer_id;
            unsigned int(3) min_TemporalId;
            unsigned int(3) max_TemporalId;
            bit(1) reserved = 0;
            unsigned int(7) sub_layer_presence_flags;
        }
    }
    */
    public class LayerInfoGroupEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "linf";

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte num_layers_in_track;
        public byte NumLayersInTrack { get { return this.num_layers_in_track; } set { this.num_layers_in_track = value; } }

        protected byte reserved0 = 0;
        public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected bool irap_gdr_pics_in_layer_only_flag;
        public bool IrapGdrPicsInLayerOnlyFlag { get { return this.irap_gdr_pics_in_layer_only_flag; } set { this.irap_gdr_pics_in_layer_only_flag = value; } }

        protected bool completeness_flag;
        public bool CompletenessFlag { get { return this.completeness_flag; } set { this.completeness_flag = value; } }

        protected byte layer_id;
        public byte LayerId { get { return this.layer_id; } set { this.layer_id = value; } }

        protected byte min_TemporalId;
        public byte MinTemporalId { get { return this.min_TemporalId; } set { this.min_TemporalId = value; } }

        protected byte max_TemporalId;
        public byte MaxTemporalId { get { return this.max_TemporalId; } set { this.max_TemporalId = value; } }

        protected bool reserved00 = false;
        public bool Reserved00 { get { return this.reserved00; } set { this.reserved00 = value; } }

        protected byte sub_layer_presence_flags;
        public byte SubLayerPresenceFlags { get { return this.sub_layer_presence_flags; } set { this.sub_layer_presence_flags = value; } }

        public LayerInfoGroupEntry() : base("linf")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(2, out this.reserved);
            boxSize += stream.ReadBits(6, out this.num_layers_in_track);

            for (int i = 0; i < num_layers_in_track; i++)
            {
                boxSize += stream.ReadBits(2, out this.reserved0);
                boxSize += stream.ReadBit(out this.irap_gdr_pics_in_layer_only_flag);
                boxSize += stream.ReadBit(out this.completeness_flag);
                boxSize += stream.ReadBits(6, out this.layer_id);
                boxSize += stream.ReadBits(3, out this.min_TemporalId);
                boxSize += stream.ReadBits(3, out this.max_TemporalId);
                boxSize += stream.ReadBit(out this.reserved00);
                boxSize += stream.ReadBits(7, out this.sub_layer_presence_flags);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(2, this.reserved);
            boxSize += stream.WriteBits(6, this.num_layers_in_track);

            for (int i = 0; i < num_layers_in_track; i++)
            {
                boxSize += stream.WriteBits(2, this.reserved0);
                boxSize += stream.WriteBit(this.irap_gdr_pics_in_layer_only_flag);
                boxSize += stream.WriteBit(this.completeness_flag);
                boxSize += stream.WriteBits(6, this.layer_id);
                boxSize += stream.WriteBits(3, this.min_TemporalId);
                boxSize += stream.WriteBits(3, this.max_TemporalId);
                boxSize += stream.WriteBit(this.reserved00);
                boxSize += stream.WriteBits(7, this.sub_layer_presence_flags);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 2; // reserved
            boxSize += 6; // num_layers_in_track

            for (int i = 0; i < num_layers_in_track; i++)
            {
                boxSize += 2; // reserved0
                boxSize += 1; // irap_gdr_pics_in_layer_only_flag
                boxSize += 1; // completeness_flag
                boxSize += 6; // layer_id
                boxSize += 3; // min_TemporalId
                boxSize += 3; // max_TemporalId
                boxSize += 1; // reserved00
                boxSize += 7; // sub_layer_presence_flags
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class VvcMixedNALUnitTypePicEntry() extends VisualSampleGroupEntry('minp')
    {
        unsigned int(16) num_mix_nalu_pic_idx;
        for (i = 0; i < num_mix_nalu_pic_idx; i++){
            unsigned int(16) mix_subp_track_idx1[i];
            unsigned int(16) mix_subp_track_idx2[i];
        }
        unsigned int(10) pps_mix_nalu_types_in_pic_bit_pos;
        unsigned int(6) pps_id;
    }
    */
    public class VvcMixedNALUnitTypePicEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "minp";

        protected ushort num_mix_nalu_pic_idx;
        public ushort NumMixNaluPicIdx { get { return this.num_mix_nalu_pic_idx; } set { this.num_mix_nalu_pic_idx = value; } }

        protected ushort[] mix_subp_track_idx1;
        public ushort[] MixSubpTrackIdx1 { get { return this.mix_subp_track_idx1; } set { this.mix_subp_track_idx1 = value; } }

        protected ushort[] mix_subp_track_idx2;
        public ushort[] MixSubpTrackIdx2 { get { return this.mix_subp_track_idx2; } set { this.mix_subp_track_idx2 = value; } }

        protected ushort pps_mix_nalu_types_in_pic_bit_pos;
        public ushort PpsMixNaluTypesInPicBitPos { get { return this.pps_mix_nalu_types_in_pic_bit_pos; } set { this.pps_mix_nalu_types_in_pic_bit_pos = value; } }

        protected byte pps_id;
        public byte PpsId { get { return this.pps_id; } set { this.pps_id = value; } }

        public VvcMixedNALUnitTypePicEntry() : base("minp")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.num_mix_nalu_pic_idx);

            for (int i = 0; i < num_mix_nalu_pic_idx; i++)
            {
                boxSize += stream.ReadUInt16(out this.mix_subp_track_idx1[i]);
                boxSize += stream.ReadUInt16(out this.mix_subp_track_idx2[i]);
            }
            boxSize += stream.ReadBits(10, out this.pps_mix_nalu_types_in_pic_bit_pos);
            boxSize += stream.ReadBits(6, out this.pps_id);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.num_mix_nalu_pic_idx);

            for (int i = 0; i < num_mix_nalu_pic_idx; i++)
            {
                boxSize += stream.WriteUInt16(this.mix_subp_track_idx1[i]);
                boxSize += stream.WriteUInt16(this.mix_subp_track_idx2[i]);
            }
            boxSize += stream.WriteBits(10, this.pps_mix_nalu_types_in_pic_bit_pos);
            boxSize += stream.WriteBits(6, this.pps_id);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // num_mix_nalu_pic_idx

            for (int i = 0; i < num_mix_nalu_pic_idx; i++)
            {
                boxSize += 16; // mix_subp_track_idx1
                boxSize += 16; // mix_subp_track_idx2
            }
            boxSize += 10; // pps_mix_nalu_types_in_pic_bit_pos
            boxSize += 6; // pps_id
            return boxSize;
        }
    }


    /*
    class MultiviewGroupEntry() extends VisualSampleGroupEntry ('mvif') { 
        unsigned int(8) groupID;
        unsigned int(8) primary_groupID;
        bit(4) reserved = 0;
        unsigned int(1) is_tl_switching_point;
        bit(3) reserved = 0;
        unsigned int(8) tl_switching_distance;

        if (groupID == primary_groupID)	// primary definition of tier
        {
            ViewIdentifierBox();			// Mandatory
            TierInfoBox(); 				// Mandatory
            TierDependencyBox(); 		// Mandatory
            PriorityRangeBox();			// Mandatory

            //Optional Boxes or fields may follow when defined later
            TierBitRateBox();						// optional
            BufferingBox();						// optional
            InitialParameterSetBox();			// optional
            ProtectionSchemeInfoBox();			// optional
            ViewPriorityBox();					// optional
        }
    }
    */
    public class MultiviewGroupEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "mvif";

        protected byte groupID;
        public byte GroupID { get { return this.groupID; } set { this.groupID = value; } }

        protected byte primary_groupID;
        public byte PrimaryGroupID { get { return this.primary_groupID; } set { this.primary_groupID = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected bool is_tl_switching_point;
        public bool IsTlSwitchingPoint { get { return this.is_tl_switching_point; } set { this.is_tl_switching_point = value; } }

        protected byte reserved0 = 0;
        public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected byte tl_switching_distance;
        public byte TlSwitchingDistance { get { return this.tl_switching_distance; } set { this.tl_switching_distance = value; } }

        protected ViewIdentifierBox ViewIdentifierBox;  //  Mandatory
        public ViewIdentifierBox _ViewIdentifierBox { get { return this.ViewIdentifierBox; } set { this.ViewIdentifierBox = value; } }

        protected TierInfoBox TierInfoBox;  //  Mandatory
        public TierInfoBox _TierInfoBox { get { return this.TierInfoBox; } set { this.TierInfoBox = value; } }

        protected TierDependencyBox TierDependencyBox;  //  Mandatory
        public TierDependencyBox _TierDependencyBox { get { return this.TierDependencyBox; } set { this.TierDependencyBox = value; } }

        protected PriorityRangeBox PriorityRangeBox;  //  Mandatory
        public PriorityRangeBox _PriorityRangeBox { get { return this.PriorityRangeBox; } set { this.PriorityRangeBox = value; } }

        protected TierBitRateBox TierBitRateBox;  //  optional
        public TierBitRateBox _TierBitRateBox { get { return this.TierBitRateBox; } set { this.TierBitRateBox = value; } }

        protected BufferingBox BufferingBox;  //  optional
        public BufferingBox _BufferingBox { get { return this.BufferingBox; } set { this.BufferingBox = value; } }

        protected InitialParameterSetBox InitialParameterSetBox;  //  optional
        public InitialParameterSetBox _InitialParameterSetBox { get { return this.InitialParameterSetBox; } set { this.InitialParameterSetBox = value; } }

        protected ProtectionSchemeInfoBox ProtectionSchemeInfoBox;  //  optional
        public ProtectionSchemeInfoBox _ProtectionSchemeInfoBox { get { return this.ProtectionSchemeInfoBox; } set { this.ProtectionSchemeInfoBox = value; } }

        protected ViewPriorityBox ViewPriorityBox;  //  optional
        public ViewPriorityBox _ViewPriorityBox { get { return this.ViewPriorityBox; } set { this.ViewPriorityBox = value; } }

        public MultiviewGroupEntry() : base("mvif")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.groupID);
            boxSize += stream.ReadUInt8(out this.primary_groupID);
            boxSize += stream.ReadBits(4, out this.reserved);
            boxSize += stream.ReadBit(out this.is_tl_switching_point);
            boxSize += stream.ReadBits(3, out this.reserved0);
            boxSize += stream.ReadUInt8(out this.tl_switching_distance);

            if (groupID == primary_groupID)
            {
                boxSize += stream.ReadBox(out this.ViewIdentifierBox); // Mandatory
                boxSize += stream.ReadBox(out this.TierInfoBox); // Mandatory
                boxSize += stream.ReadBox(out this.TierDependencyBox); // Mandatory
                boxSize += stream.ReadBox(out this.PriorityRangeBox); // Mandatory
                /* Optional Boxes or fields may follow when defined later */
                if (boxSize < size) boxSize += stream.ReadBox(out this.TierBitRateBox); // optional
                if (boxSize < size) boxSize += stream.ReadBox(out this.BufferingBox); // optional
                if (boxSize < size) boxSize += stream.ReadBox(out this.InitialParameterSetBox); // optional
                if (boxSize < size) boxSize += stream.ReadBox(out this.ProtectionSchemeInfoBox); // optional
                if (boxSize < size) boxSize += stream.ReadBox(out this.ViewPriorityBox); // optional
            }
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.groupID);
            boxSize += stream.WriteUInt8(this.primary_groupID);
            boxSize += stream.WriteBits(4, this.reserved);
            boxSize += stream.WriteBit(this.is_tl_switching_point);
            boxSize += stream.WriteBits(3, this.reserved0);
            boxSize += stream.WriteUInt8(this.tl_switching_distance);

            if (groupID == primary_groupID)
            {
                boxSize += stream.WriteBox(this.ViewIdentifierBox); // Mandatory
                boxSize += stream.WriteBox(this.TierInfoBox); // Mandatory
                boxSize += stream.WriteBox(this.TierDependencyBox); // Mandatory
                boxSize += stream.WriteBox(this.PriorityRangeBox); // Mandatory
                /* Optional Boxes or fields may follow when defined later */
                if (this.TierBitRateBox != null) boxSize += stream.WriteBox(this.TierBitRateBox); // optional
                if (this.BufferingBox != null) boxSize += stream.WriteBox(this.BufferingBox); // optional
                if (this.InitialParameterSetBox != null) boxSize += stream.WriteBox(this.InitialParameterSetBox); // optional
                if (this.ProtectionSchemeInfoBox != null) boxSize += stream.WriteBox(this.ProtectionSchemeInfoBox); // optional
                if (this.ViewPriorityBox != null) boxSize += stream.WriteBox(this.ViewPriorityBox); // optional
            }
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // groupID
            boxSize += 8; // primary_groupID
            boxSize += 4; // reserved
            boxSize += 1; // is_tl_switching_point
            boxSize += 3; // reserved0
            boxSize += 8; // tl_switching_distance

            if (groupID == primary_groupID)
            {
                boxSize += IsoStream.CalculateSize(ViewIdentifierBox); // ViewIdentifierBox
                boxSize += IsoStream.CalculateSize(TierInfoBox); // TierInfoBox
                boxSize += IsoStream.CalculateSize(TierDependencyBox); // TierDependencyBox
                boxSize += IsoStream.CalculateSize(PriorityRangeBox); // PriorityRangeBox
                /* Optional Boxes or fields may follow when defined later */
                if (this.TierBitRateBox != null) boxSize += IsoStream.CalculateSize(TierBitRateBox); // TierBitRateBox
                if (this.BufferingBox != null) boxSize += IsoStream.CalculateSize(BufferingBox); // BufferingBox
                if (this.InitialParameterSetBox != null) boxSize += IsoStream.CalculateSize(InitialParameterSetBox); // InitialParameterSetBox
                if (this.ProtectionSchemeInfoBox != null) boxSize += IsoStream.CalculateSize(ProtectionSchemeInfoBox); // ProtectionSchemeInfoBox
                if (this.ViewPriorityBox != null) boxSize += IsoStream.CalculateSize(ViewPriorityBox); // ViewPriorityBox
            }
            return boxSize;
        }
    }


    /*
    class NALUMapEntry() extends VisualSampleGroupEntry ('nalm') {
        bit(6) reserved = 0;
        unsigned int(1) large_size;
        unsigned int(1) rle;
        if (large_size) {
            unsigned int(16) entry_count;
        } else {
            unsigned int(8) entry_count;
        }
        for (i=1; i<= entry_count; i++) {
            if (rle) {
                if (large_size) {
                    unsigned int(16) NALU_start_number;
                } else {
                    unsigned int(8) NALU_start_number;
                }
            }
            unsigned int(16) groupID;
        }
    }
    */
    public class NALUMapEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "nalm";

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected bool large_size;
        public bool LargeSize { get { return this.large_size; } set { this.large_size = value; } }

        protected bool rle;
        public bool Rle { get { return this.rle; } set { this.rle = value; } }

        protected ushort entry_count;
        public ushort EntryCount { get { return this.entry_count; } set { this.entry_count = value; } }

        protected byte entry_count0;
        public byte EntryCount0 { get { return this.entry_count0; } set { this.entry_count0 = value; } }

        protected ushort NALU_start_number;
        public ushort NALUStartNumber { get { return this.NALU_start_number; } set { this.NALU_start_number = value; } }

        protected byte NALU_start_number0;
        public byte NALUStartNumber0 { get { return this.NALU_start_number0; } set { this.NALU_start_number0 = value; } }

        protected ushort groupID;
        public ushort GroupID { get { return this.groupID; } set { this.groupID = value; } }

        public NALUMapEntry() : base("nalm")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(6, out this.reserved);
            boxSize += stream.ReadBit(out this.large_size);
            boxSize += stream.ReadBit(out this.rle);

            if (large_size)
            {
                boxSize += stream.ReadUInt16(out this.entry_count);
            }

            else
            {
                boxSize += stream.ReadUInt8(out this.entry_count0);
            }

            for (int i = 1; i <= entry_count; i++)
            {

                if (rle)
                {

                    if (large_size)
                    {
                        boxSize += stream.ReadUInt16(out this.NALU_start_number);
                    }

                    else
                    {
                        boxSize += stream.ReadUInt8(out this.NALU_start_number0);
                    }
                }
                boxSize += stream.ReadUInt16(out this.groupID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(6, this.reserved);
            boxSize += stream.WriteBit(this.large_size);
            boxSize += stream.WriteBit(this.rle);

            if (large_size)
            {
                boxSize += stream.WriteUInt16(this.entry_count);
            }

            else
            {
                boxSize += stream.WriteUInt8(this.entry_count0);
            }

            for (int i = 1; i <= entry_count; i++)
            {

                if (rle)
                {

                    if (large_size)
                    {
                        boxSize += stream.WriteUInt16(this.NALU_start_number);
                    }

                    else
                    {
                        boxSize += stream.WriteUInt8(this.NALU_start_number0);
                    }
                }
                boxSize += stream.WriteUInt16(this.groupID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 6; // reserved
            boxSize += 1; // large_size
            boxSize += 1; // rle

            if (large_size)
            {
                boxSize += 16; // entry_count
            }

            else
            {
                boxSize += 8; // entry_count0
            }

            for (int i = 1; i <= entry_count; i++)
            {

                if (rle)
                {

                    if (large_size)
                    {
                        boxSize += 16; // NALU_start_number
                    }

                    else
                    {
                        boxSize += 8; // NALU_start_number0
                    }
                }
                boxSize += 16; // groupID
            }
            return boxSize;
        }
    }


    /*
    class OperatingPointsInformation extends VisualSampleGroupEntry ('oinf') {
        OperatingPointsRecord oinf;
    }
    */
    public class OperatingPointsInformation : VisualSampleGroupEntry
    {
        public const string FourCC = "oinf";

        protected OperatingPointsRecord oinf;
        public OperatingPointsRecord Oinf { get { return this.oinf; } set { this.oinf = value; } }

        public OperatingPointsInformation() : base("oinf")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadClass(out this.oinf);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteClass(this.oinf);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateClassSize(oinf); // oinf
            return boxSize;
        }
    }


    /*
    class OperatingPointDecodeTimeHint()
    extends VisualSampleGroupEntry ('opth')
    {
        signed int(32) delta_time;
    }

    */
    public class OperatingPointDecodeTimeHint : VisualSampleGroupEntry
    {
        public const string FourCC = "opth";

        protected int delta_time;
        public int DeltaTime { get { return this.delta_time; } set { this.delta_time = value; } }

        public OperatingPointDecodeTimeHint() : base("opth")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadInt32(out this.delta_time);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteInt32(this.delta_time);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // delta_time
            return boxSize;
        }
    }


    /*
    class ParameterSetNALUEntry() extends VisualSampleGroupEntry ('pase')
    {
        unsigned int(16) ps_nalu_length;
        bit(8* ps_nalu_length) ps_nal_unit;
    }
    */
    public class ParameterSetNALUEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "pase";

        protected ushort ps_nalu_length;
        public ushort PsNaluLength { get { return this.ps_nalu_length; } set { this.ps_nalu_length = value; } }

        protected byte[] ps_nal_unit;
        public byte[] PsNalUnit { get { return this.ps_nal_unit; } set { this.ps_nal_unit = value; } }

        public ParameterSetNALUEntry() : base("pase")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.ps_nalu_length);
            boxSize += stream.ReadBytes(ps_nalu_length, out this.ps_nal_unit);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.ps_nalu_length);
            boxSize += stream.WriteBytes(ps_nalu_length, this.ps_nal_unit);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // ps_nalu_length
            boxSize += (ulong)ps_nalu_length * 8; // ps_nal_unit
            return boxSize;
        }
    }


    /*
    class PSSampleGroupEntry() extends VisualSampleGroupEntry ('pss1')
    {
        unsigned int(1) sps_present;
        unsigned int(1) pps_present;
        unsigned int(1) aps_present;
        bit(5) reserved = 0;
    }
    */
    public class PSSampleGroupEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "pss1";

        protected bool sps_present;
        public bool SpsPresent { get { return this.sps_present; } set { this.sps_present = value; } }

        protected bool pps_present;
        public bool PpsPresent { get { return this.pps_present; } set { this.pps_present = value; } }

        protected bool aps_present;
        public bool ApsPresent { get { return this.aps_present; } set { this.aps_present = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        public PSSampleGroupEntry() : base("pss1")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBit(out this.sps_present);
            boxSize += stream.ReadBit(out this.pps_present);
            boxSize += stream.ReadBit(out this.aps_present);
            boxSize += stream.ReadBits(5, out this.reserved);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBit(this.sps_present);
            boxSize += stream.WriteBit(this.pps_present);
            boxSize += stream.WriteBit(this.aps_present);
            boxSize += stream.WriteBits(5, this.reserved);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // sps_present
            boxSize += 1; // pps_present
            boxSize += 1; // aps_present
            boxSize += 5; // reserved
            return boxSize;
        }
    }


    /*
    aligned(8) class VvcRectRegionOrderEntry () extends VisualSampleGroupEntry('rror')
    {
        unsigned int(1) subpic_id_info_flag;
        bit(7) reserved = 0;
        unsigned int(16) num_alternate_region_set;
        for (i = 0; i < num_alternate_region_set; i++) {
            unsigned int(16) num_regions_in_set[i];
            unsigned int(16) alternate_region_set_id[i];
            for (j = 0; j < num_regions_in_set[i]; j++)
                unsigned int(16) groupID[i][j];
        }
        unsigned int(16) num_regions_minus1;
        for (i = 0; i < num_regions_minus1; i++)
            unsigned int(16) region_id[i];
        if (subpic_id_info_flag)
            VVCSubpicIDRewritingInfomationStruct() subpic_id_rewriting_info;
    }
    */
    public class VvcRectRegionOrderEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "rror";

        protected bool subpic_id_info_flag;
        public bool SubpicIdInfoFlag { get { return this.subpic_id_info_flag; } set { this.subpic_id_info_flag = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected ushort num_alternate_region_set;
        public ushort NumAlternateRegionSet { get { return this.num_alternate_region_set; } set { this.num_alternate_region_set = value; } }

        protected ushort[] num_regions_in_set;
        public ushort[] NumRegionsInSet { get { return this.num_regions_in_set; } set { this.num_regions_in_set = value; } }

        protected ushort[] alternate_region_set_id;
        public ushort[] AlternateRegionSetId { get { return this.alternate_region_set_id; } set { this.alternate_region_set_id = value; } }

        protected ushort[][] groupID;
        public ushort[][] GroupID { get { return this.groupID; } set { this.groupID = value; } }

        protected ushort num_regions_minus1;
        public ushort NumRegionsMinus1 { get { return this.num_regions_minus1; } set { this.num_regions_minus1 = value; } }

        protected ushort[] region_id;
        public ushort[] RegionId { get { return this.region_id; } set { this.region_id = value; } }

        protected VVCSubpicIDRewritingInfomationStruct subpic_id_rewriting_info;
        public VVCSubpicIDRewritingInfomationStruct SubpicIdRewritingInfo { get { return this.subpic_id_rewriting_info; } set { this.subpic_id_rewriting_info = value; } }

        public VvcRectRegionOrderEntry() : base("rror")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBit(out this.subpic_id_info_flag);
            boxSize += stream.ReadBits(7, out this.reserved);
            boxSize += stream.ReadUInt16(out this.num_alternate_region_set);

            for (int i = 0; i < num_alternate_region_set; i++)
            {
                boxSize += stream.ReadUInt16(out this.num_regions_in_set[i]);
                boxSize += stream.ReadUInt16(out this.alternate_region_set_id[i]);

                for (int j = 0; j < num_regions_in_set[i]; j++)
                {
                    boxSize += stream.ReadUInt16(out this.groupID[i][j]);
                }
            }
            boxSize += stream.ReadUInt16(out this.num_regions_minus1);

            for (int i = 0; i < num_regions_minus1; i++)
            {
                boxSize += stream.ReadUInt16(out this.region_id[i]);
            }

            if (subpic_id_info_flag)
            {
                boxSize += stream.ReadClass(out this.subpic_id_rewriting_info);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBit(this.subpic_id_info_flag);
            boxSize += stream.WriteBits(7, this.reserved);
            boxSize += stream.WriteUInt16(this.num_alternate_region_set);

            for (int i = 0; i < num_alternate_region_set; i++)
            {
                boxSize += stream.WriteUInt16(this.num_regions_in_set[i]);
                boxSize += stream.WriteUInt16(this.alternate_region_set_id[i]);

                for (int j = 0; j < num_regions_in_set[i]; j++)
                {
                    boxSize += stream.WriteUInt16(this.groupID[i][j]);
                }
            }
            boxSize += stream.WriteUInt16(this.num_regions_minus1);

            for (int i = 0; i < num_regions_minus1; i++)
            {
                boxSize += stream.WriteUInt16(this.region_id[i]);
            }

            if (subpic_id_info_flag)
            {
                boxSize += stream.WriteClass(this.subpic_id_rewriting_info);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // subpic_id_info_flag
            boxSize += 7; // reserved
            boxSize += 16; // num_alternate_region_set

            for (int i = 0; i < num_alternate_region_set; i++)
            {
                boxSize += 16; // num_regions_in_set
                boxSize += 16; // alternate_region_set_id

                for (int j = 0; j < num_regions_in_set[i]; j++)
                {
                    boxSize += 16; // groupID
                }
            }
            boxSize += 16; // num_regions_minus1

            for (int i = 0; i < num_regions_minus1; i++)
            {
                boxSize += 16; // region_id
            }

            if (subpic_id_info_flag)
            {
                boxSize += IsoStream.CalculateClassSize(subpic_id_rewriting_info); // subpic_id_rewriting_info
            }
            return boxSize;
        }
    }


    /*
    class ScalableGroupEntry() extends VisualSampleGroupEntry ('scif') { 
        unsigned int(8) groupID;
        unsigned int(8) primary_groupID;
        unsigned int(1) is_tier_IDR;
        unsigned int(1) noInterLayerPredFlag; 
        unsigned int(1) useRefBasePicFlag;
        unsigned int(1) storeBaseRepFlag; 
        unsigned int(1) is_tl_switching_point;
        bit(3) reserved = 0;
        unsigned int(8) tl_switching_distance;

        if (groupID == primary_groupID)	// primary definition of tier
        {
            TierInfoBox(); 				// Mandatory
            SVCDependencyRangeBox();	// Mandatory
            PriorityRangeBox();			// Mandatory

            //Optional Boxes or fields may follow when defined later
            TierBitRateBox();						// optional
            RectRegionBox();						// optional
            BufferingBox();						// optional
            TierDependencyBox(); 				// optional
            InitialParameterSetBox();			// optional
            IroiInfoBox();							// optional
            ProtectionSchemeInfoBox();			// optional
            TranscodingInfoBox();				// optional
        }
    }
    */
    public class ScalableGroupEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "scif";

        protected byte groupID;
        public byte GroupID { get { return this.groupID; } set { this.groupID = value; } }

        protected byte primary_groupID;
        public byte PrimaryGroupID { get { return this.primary_groupID; } set { this.primary_groupID = value; } }

        protected bool is_tier_IDR;
        public bool IsTierIDR { get { return this.is_tier_IDR; } set { this.is_tier_IDR = value; } }

        protected bool noInterLayerPredFlag;
        public bool NoInterLayerPredFlag { get { return this.noInterLayerPredFlag; } set { this.noInterLayerPredFlag = value; } }

        protected bool useRefBasePicFlag;
        public bool UseRefBasePicFlag { get { return this.useRefBasePicFlag; } set { this.useRefBasePicFlag = value; } }

        protected bool storeBaseRepFlag;
        public bool StoreBaseRepFlag { get { return this.storeBaseRepFlag; } set { this.storeBaseRepFlag = value; } }

        protected bool is_tl_switching_point;
        public bool IsTlSwitchingPoint { get { return this.is_tl_switching_point; } set { this.is_tl_switching_point = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte tl_switching_distance;
        public byte TlSwitchingDistance { get { return this.tl_switching_distance; } set { this.tl_switching_distance = value; } }

        protected TierInfoBox TierInfoBox;  //  Mandatory
        public TierInfoBox _TierInfoBox { get { return this.TierInfoBox; } set { this.TierInfoBox = value; } }

        protected SVCDependencyRangeBox SVCDependencyRangeBox;  //  Mandatory
        public SVCDependencyRangeBox _SVCDependencyRangeBox { get { return this.SVCDependencyRangeBox; } set { this.SVCDependencyRangeBox = value; } }

        protected PriorityRangeBox PriorityRangeBox;  //  Mandatory
        public PriorityRangeBox _PriorityRangeBox { get { return this.PriorityRangeBox; } set { this.PriorityRangeBox = value; } }

        protected TierBitRateBox TierBitRateBox;  //  optional
        public TierBitRateBox _TierBitRateBox { get { return this.TierBitRateBox; } set { this.TierBitRateBox = value; } }

        protected RectRegionBox RectRegionBox;  //  optional
        public RectRegionBox _RectRegionBox { get { return this.RectRegionBox; } set { this.RectRegionBox = value; } }

        protected BufferingBox BufferingBox;  //  optional
        public BufferingBox _BufferingBox { get { return this.BufferingBox; } set { this.BufferingBox = value; } }

        protected TierDependencyBox TierDependencyBox;  //  optional
        public TierDependencyBox _TierDependencyBox { get { return this.TierDependencyBox; } set { this.TierDependencyBox = value; } }

        protected InitialParameterSetBox InitialParameterSetBox;  //  optional
        public InitialParameterSetBox _InitialParameterSetBox { get { return this.InitialParameterSetBox; } set { this.InitialParameterSetBox = value; } }

        protected IroiInfoBox IroiInfoBox;  //  optional
        public IroiInfoBox _IroiInfoBox { get { return this.IroiInfoBox; } set { this.IroiInfoBox = value; } }

        protected ProtectionSchemeInfoBox ProtectionSchemeInfoBox;  //  optional
        public ProtectionSchemeInfoBox _ProtectionSchemeInfoBox { get { return this.ProtectionSchemeInfoBox; } set { this.ProtectionSchemeInfoBox = value; } }

        protected TranscodingInfoBox TranscodingInfoBox;  //  optional
        public TranscodingInfoBox _TranscodingInfoBox { get { return this.TranscodingInfoBox; } set { this.TranscodingInfoBox = value; } }

        public ScalableGroupEntry() : base("scif")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.groupID);
            boxSize += stream.ReadUInt8(out this.primary_groupID);
            boxSize += stream.ReadBit(out this.is_tier_IDR);
            boxSize += stream.ReadBit(out this.noInterLayerPredFlag);
            boxSize += stream.ReadBit(out this.useRefBasePicFlag);
            boxSize += stream.ReadBit(out this.storeBaseRepFlag);
            boxSize += stream.ReadBit(out this.is_tl_switching_point);
            boxSize += stream.ReadBits(3, out this.reserved);
            boxSize += stream.ReadUInt8(out this.tl_switching_distance);

            if (groupID == primary_groupID)
            {
                boxSize += stream.ReadBox(out this.TierInfoBox); // Mandatory
                boxSize += stream.ReadBox(out this.SVCDependencyRangeBox); // Mandatory
                boxSize += stream.ReadBox(out this.PriorityRangeBox); // Mandatory
                /* Optional Boxes or fields may follow when defined later */
                if (boxSize < size) boxSize += stream.ReadBox(out this.TierBitRateBox); // optional
                if (boxSize < size) boxSize += stream.ReadBox(out this.RectRegionBox); // optional
                if (boxSize < size) boxSize += stream.ReadBox(out this.BufferingBox); // optional
                if (boxSize < size) boxSize += stream.ReadBox(out this.TierDependencyBox); // optional
                if (boxSize < size) boxSize += stream.ReadBox(out this.InitialParameterSetBox); // optional
                if (boxSize < size) boxSize += stream.ReadBox(out this.IroiInfoBox); // optional
                if (boxSize < size) boxSize += stream.ReadBox(out this.ProtectionSchemeInfoBox); // optional
                if (boxSize < size) boxSize += stream.ReadBox(out this.TranscodingInfoBox); // optional
            }
            boxSize += stream.ReadBoxChildren(boxSize, this);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.groupID);
            boxSize += stream.WriteUInt8(this.primary_groupID);
            boxSize += stream.WriteBit(this.is_tier_IDR);
            boxSize += stream.WriteBit(this.noInterLayerPredFlag);
            boxSize += stream.WriteBit(this.useRefBasePicFlag);
            boxSize += stream.WriteBit(this.storeBaseRepFlag);
            boxSize += stream.WriteBit(this.is_tl_switching_point);
            boxSize += stream.WriteBits(3, this.reserved);
            boxSize += stream.WriteUInt8(this.tl_switching_distance);

            if (groupID == primary_groupID)
            {
                boxSize += stream.WriteBox(this.TierInfoBox); // Mandatory
                boxSize += stream.WriteBox(this.SVCDependencyRangeBox); // Mandatory
                boxSize += stream.WriteBox(this.PriorityRangeBox); // Mandatory
                /* Optional Boxes or fields may follow when defined later */
                if (this.TierBitRateBox != null) boxSize += stream.WriteBox(this.TierBitRateBox); // optional
                if (this.RectRegionBox != null) boxSize += stream.WriteBox(this.RectRegionBox); // optional
                if (this.BufferingBox != null) boxSize += stream.WriteBox(this.BufferingBox); // optional
                if (this.TierDependencyBox != null) boxSize += stream.WriteBox(this.TierDependencyBox); // optional
                if (this.InitialParameterSetBox != null) boxSize += stream.WriteBox(this.InitialParameterSetBox); // optional
                if (this.IroiInfoBox != null) boxSize += stream.WriteBox(this.IroiInfoBox); // optional
                if (this.ProtectionSchemeInfoBox != null) boxSize += stream.WriteBox(this.ProtectionSchemeInfoBox); // optional
                if (this.TranscodingInfoBox != null) boxSize += stream.WriteBox(this.TranscodingInfoBox); // optional
            }
            boxSize += stream.WriteBoxChildren(this);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // groupID
            boxSize += 8; // primary_groupID
            boxSize += 1; // is_tier_IDR
            boxSize += 1; // noInterLayerPredFlag
            boxSize += 1; // useRefBasePicFlag
            boxSize += 1; // storeBaseRepFlag
            boxSize += 1; // is_tl_switching_point
            boxSize += 3; // reserved
            boxSize += 8; // tl_switching_distance

            if (groupID == primary_groupID)
            {
                boxSize += IsoStream.CalculateSize(TierInfoBox); // TierInfoBox
                boxSize += IsoStream.CalculateSize(SVCDependencyRangeBox); // SVCDependencyRangeBox
                boxSize += IsoStream.CalculateSize(PriorityRangeBox); // PriorityRangeBox
                /* Optional Boxes or fields may follow when defined later */
                if (this.TierBitRateBox != null) boxSize += IsoStream.CalculateSize(TierBitRateBox); // TierBitRateBox
                if (this.RectRegionBox != null) boxSize += IsoStream.CalculateSize(RectRegionBox); // RectRegionBox
                if (this.BufferingBox != null) boxSize += IsoStream.CalculateSize(BufferingBox); // BufferingBox
                if (this.TierDependencyBox != null) boxSize += IsoStream.CalculateSize(TierDependencyBox); // TierDependencyBox
                if (this.InitialParameterSetBox != null) boxSize += IsoStream.CalculateSize(InitialParameterSetBox); // InitialParameterSetBox
                if (this.IroiInfoBox != null) boxSize += IsoStream.CalculateSize(IroiInfoBox); // IroiInfoBox
                if (this.ProtectionSchemeInfoBox != null) boxSize += IsoStream.CalculateSize(ProtectionSchemeInfoBox); // ProtectionSchemeInfoBox
                if (this.TranscodingInfoBox != null) boxSize += IsoStream.CalculateSize(TranscodingInfoBox); // TranscodingInfoBox
            }
            return boxSize;
        }
    }


    /*
    class ScalableNALUMapEntry() extends VisualSampleGroupEntry ('scnm') { 
        bit(8) reserved = 0;
        unsigned int(8) NALU_count;
        for (i=1; i<= NALU_count; i++)
            unsigned int(8) groupID;
        }

    */
    public class ScalableNALUMapEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "scnm";

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte NALU_count;
        public byte NALUCount { get { return this.NALU_count; } set { this.NALU_count = value; } }

        protected byte groupID;
        public byte GroupID { get { return this.groupID; } set { this.groupID = value; } }

        public ScalableNALUMapEntry() : base("scnm")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.reserved);
            boxSize += stream.ReadUInt8(out this.NALU_count);

            for (int i = 1; i <= NALU_count; i++)
            {
                boxSize += stream.ReadUInt8(out this.groupID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.reserved);
            boxSize += stream.WriteUInt8(this.NALU_count);

            for (int i = 1; i <= NALU_count; i++)
            {
                boxSize += stream.WriteUInt8(this.groupID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // reserved
            boxSize += 8; // NALU_count

            for (int i = 1; i <= NALU_count; i++)
            {
                boxSize += 8; // groupID
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class VvcSubpicIDEntry() extends VisualSampleGroupEntry('spid')
    {
        unsigned int(1) rect_region_flag;
        bit(2) reserved = 0;
        unsigned int(1) continuous_id_flag;
        unsigned int(12) num_subpics_minus1;
        for (i = 0; i <= num_subpics_minus1; i++) {
            if ((continuous_id_flag && i == 0) || !continuous_id_flag)
                unsigned int(16) subpic_id[i];
            if (rect_region_flag)
                unsigned int(16) groupID[i];
        }
    }
    */
    public class VvcSubpicIDEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "spid";

        protected bool rect_region_flag;
        public bool RectRegionFlag { get { return this.rect_region_flag; } set { this.rect_region_flag = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected bool continuous_id_flag;
        public bool ContinuousIdFlag { get { return this.continuous_id_flag; } set { this.continuous_id_flag = value; } }

        protected ushort num_subpics_minus1;
        public ushort NumSubpicsMinus1 { get { return this.num_subpics_minus1; } set { this.num_subpics_minus1 = value; } }

        protected ushort[] subpic_id;
        public ushort[] SubpicId { get { return this.subpic_id; } set { this.subpic_id = value; } }

        protected ushort[] groupID;
        public ushort[] GroupID { get { return this.groupID; } set { this.groupID = value; } }

        public VvcSubpicIDEntry() : base("spid")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBit(out this.rect_region_flag);
            boxSize += stream.ReadBits(2, out this.reserved);
            boxSize += stream.ReadBit(out this.continuous_id_flag);
            boxSize += stream.ReadBits(12, out this.num_subpics_minus1);

            for (int i = 0; i <= num_subpics_minus1; i++)
            {

                if ((continuous_id_flag && i == 0) || !continuous_id_flag)
                {
                    boxSize += stream.ReadUInt16(out this.subpic_id[i]);
                }

                if (rect_region_flag)
                {
                    boxSize += stream.ReadUInt16(out this.groupID[i]);
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBit(this.rect_region_flag);
            boxSize += stream.WriteBits(2, this.reserved);
            boxSize += stream.WriteBit(this.continuous_id_flag);
            boxSize += stream.WriteBits(12, this.num_subpics_minus1);

            for (int i = 0; i <= num_subpics_minus1; i++)
            {

                if ((continuous_id_flag && i == 0) || !continuous_id_flag)
                {
                    boxSize += stream.WriteUInt16(this.subpic_id[i]);
                }

                if (rect_region_flag)
                {
                    boxSize += stream.WriteUInt16(this.groupID[i]);
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // rect_region_flag
            boxSize += 2; // reserved
            boxSize += 1; // continuous_id_flag
            boxSize += 12; // num_subpics_minus1

            for (int i = 0; i <= num_subpics_minus1; i++)
            {

                if ((continuous_id_flag && i == 0) || !continuous_id_flag)
                {
                    boxSize += 16; // subpic_id
                }

                if (rect_region_flag)
                {
                    boxSize += 16; // groupID
                }
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class SubpicLevelInfoEntry() extends VisualSampleGroupEntry('spli')
    {
        unsigned int(8) level_idc;
    }
    */
    public class SubpicLevelInfoEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "spli";

        protected byte level_idc;
        public byte LevelIdc { get { return this.level_idc; } set { this.level_idc = value; } }

        public SubpicLevelInfoEntry() : base("spli")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.level_idc);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.level_idc);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // level_idc
            return boxSize;
        }
    }


    /*
    aligned(8) class VvcSubpicOrderEntry() extends VisualSampleGroupEntry('spor')
    {
        unsigned int(1) subpic_id_info_flag;
        unsigned int(15) num_subpic_ref_idx;
        for (i = 0; i < num_subpic_ref_idx; i++)
            unsigned int(16) subp_track_ref_idx[i];
        if (subpic_id_info_flag)
            VVCSubpicIDRewritingInfomationStruct() subpic_id_rewriting_info;
    }
    */
    public class VvcSubpicOrderEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "spor";

        protected bool subpic_id_info_flag;
        public bool SubpicIdInfoFlag { get { return this.subpic_id_info_flag; } set { this.subpic_id_info_flag = value; } }

        protected ushort num_subpic_ref_idx;
        public ushort NumSubpicRefIdx { get { return this.num_subpic_ref_idx; } set { this.num_subpic_ref_idx = value; } }

        protected ushort[] subp_track_ref_idx;
        public ushort[] SubpTrackRefIdx { get { return this.subp_track_ref_idx; } set { this.subp_track_ref_idx = value; } }

        protected VVCSubpicIDRewritingInfomationStruct subpic_id_rewriting_info;
        public VVCSubpicIDRewritingInfomationStruct SubpicIdRewritingInfo { get { return this.subpic_id_rewriting_info; } set { this.subpic_id_rewriting_info = value; } }

        public VvcSubpicOrderEntry() : base("spor")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBit(out this.subpic_id_info_flag);
            boxSize += stream.ReadBits(15, out this.num_subpic_ref_idx);

            for (int i = 0; i < num_subpic_ref_idx; i++)
            {
                boxSize += stream.ReadUInt16(out this.subp_track_ref_idx[i]);
            }

            if (subpic_id_info_flag)
            {
                boxSize += stream.ReadClass(out this.subpic_id_rewriting_info);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBit(this.subpic_id_info_flag);
            boxSize += stream.WriteBits(15, this.num_subpic_ref_idx);

            for (int i = 0; i < num_subpic_ref_idx; i++)
            {
                boxSize += stream.WriteUInt16(this.subp_track_ref_idx[i]);
            }

            if (subpic_id_info_flag)
            {
                boxSize += stream.WriteClass(this.subpic_id_rewriting_info);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // subpic_id_info_flag
            boxSize += 15; // num_subpic_ref_idx

            for (int i = 0; i < num_subpic_ref_idx; i++)
            {
                boxSize += 16; // subp_track_ref_idx
            }

            if (subpic_id_info_flag)
            {
                boxSize += IsoStream.CalculateClassSize(subpic_id_rewriting_info); // subpic_id_rewriting_info
            }
            return boxSize;
        }
    }


    /*
    class StepwiseTemporalLayerEntry() extends VisualSampleGroupEntry ('stsa')
    {
    }
    */
    public class StepwiseTemporalLayerEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "stsa";

        public StepwiseTemporalLayerEntry() : base("stsa")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    class VvcSubpicLayoutMapEntry() extends VisualSampleGroupEntry ('sulm') {
        unsigned int(32) groupID_info_4cc;
        unsigned int(16) entry_count_minus1;
        for(i=0; i <= entry_count_minus1; i++)
            unsigned int(16) groupID;
    }
    */
    public class VvcSubpicLayoutMapEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "sulm";

        protected uint groupID_info_4cc;
        public uint GroupIDInfo4cc { get { return this.groupID_info_4cc; } set { this.groupID_info_4cc = value; } }

        protected ushort entry_count_minus1;
        public ushort EntryCountMinus1 { get { return this.entry_count_minus1; } set { this.entry_count_minus1 = value; } }

        protected ushort groupID;
        public ushort GroupID { get { return this.groupID; } set { this.groupID = value; } }

        public VvcSubpicLayoutMapEntry() : base("sulm")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.groupID_info_4cc);
            boxSize += stream.ReadUInt16(out this.entry_count_minus1);

            for (int i = 0; i <= entry_count_minus1; i++)
            {
                boxSize += stream.ReadUInt16(out this.groupID);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.groupID_info_4cc);
            boxSize += stream.WriteUInt16(this.entry_count_minus1);

            for (int i = 0; i <= entry_count_minus1; i++)
            {
                boxSize += stream.WriteUInt16(this.groupID);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // groupID_info_4cc
            boxSize += 16; // entry_count_minus1

            for (int i = 0; i <= entry_count_minus1; i++)
            {
                boxSize += 16; // groupID
            }
            return boxSize;
        }
    }


    /*
    class SyncSampleEntry() extends VisualSampleGroupEntry ('sync')
    {
            bit(2) reserved = 0;
            unsigned int(6) NAL_unit_type;
    }
    */
    public class SyncSampleEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "sync";

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte NAL_unit_type;
        public byte NALUnitType { get { return this.NAL_unit_type; } set { this.NAL_unit_type = value; } }

        public SyncSampleEntry() : base("sync")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(2, out this.reserved);
            boxSize += stream.ReadBits(6, out this.NAL_unit_type);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(2, this.reserved);
            boxSize += stream.WriteBits(6, this.NAL_unit_type);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 2; // reserved
            boxSize += 6; // NAL_unit_type
            return boxSize;
        }
    }


    /*
    class RectangularRegionGroupEntry() extends VisualSampleGroupEntry ('trif')
    {
        unsigned int(16) groupID;
        unsigned int(1) rect_region_flag;
        if (!rect_region_flag)
            bit(7)  reserved = 0;
        else {
            unsigned int(2) independent_idc;
            unsigned int(1) full_picture;
            unsigned int(1) filtering_disabled;
            unsigned int(1) has_dependency_list;
            bit(2)  reserved = 0;
            if (!full_picture) {
                unsigned int(16) horizontal_offset;
                unsigned int(16) vertical_offset;
            }
            unsigned int(16) region_width;
            unsigned int(16) region_height;
            if (has_dependency_list) {
                unsigned int(16) dependency_rect_region_count;
                for (i=1; i<= dependency_rect_region_count; i++)
                    unsigned int(16) dependencyRectRegionGroupID;
        }
    }
    }
    */
    public class RectangularRegionGroupEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "trif";

        protected ushort groupID;
        public ushort GroupID { get { return this.groupID; } set { this.groupID = value; } }

        protected bool rect_region_flag;
        public bool RectRegionFlag { get { return this.rect_region_flag; } set { this.rect_region_flag = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte independent_idc;
        public byte IndependentIdc { get { return this.independent_idc; } set { this.independent_idc = value; } }

        protected bool full_picture;
        public bool FullPicture { get { return this.full_picture; } set { this.full_picture = value; } }

        protected bool filtering_disabled;
        public bool FilteringDisabled { get { return this.filtering_disabled; } set { this.filtering_disabled = value; } }

        protected bool has_dependency_list;
        public bool HasDependencyList { get { return this.has_dependency_list; } set { this.has_dependency_list = value; } }

        protected byte reserved0 = 0;
        public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected ushort horizontal_offset;
        public ushort HorizontalOffset { get { return this.horizontal_offset; } set { this.horizontal_offset = value; } }

        protected ushort vertical_offset;
        public ushort VerticalOffset { get { return this.vertical_offset; } set { this.vertical_offset = value; } }

        protected ushort region_width;
        public ushort RegionWidth { get { return this.region_width; } set { this.region_width = value; } }

        protected ushort region_height;
        public ushort RegionHeight { get { return this.region_height; } set { this.region_height = value; } }

        protected ushort dependency_rect_region_count;
        public ushort DependencyRectRegionCount { get { return this.dependency_rect_region_count; } set { this.dependency_rect_region_count = value; } }

        protected ushort dependencyRectRegionGroupID;
        public ushort DependencyRectRegionGroupID { get { return this.dependencyRectRegionGroupID; } set { this.dependencyRectRegionGroupID = value; } }

        public RectangularRegionGroupEntry() : base("trif")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.groupID);
            boxSize += stream.ReadBit(out this.rect_region_flag);

            if (!rect_region_flag)
            {
                boxSize += stream.ReadBits(7, out this.reserved);
            }

            else
            {
                boxSize += stream.ReadBits(2, out this.independent_idc);
                boxSize += stream.ReadBit(out this.full_picture);
                boxSize += stream.ReadBit(out this.filtering_disabled);
                boxSize += stream.ReadBit(out this.has_dependency_list);
                boxSize += stream.ReadBits(2, out this.reserved0);

                if (!full_picture)
                {
                    boxSize += stream.ReadUInt16(out this.horizontal_offset);
                    boxSize += stream.ReadUInt16(out this.vertical_offset);
                }
                boxSize += stream.ReadUInt16(out this.region_width);
                boxSize += stream.ReadUInt16(out this.region_height);

                if (has_dependency_list)
                {
                    boxSize += stream.ReadUInt16(out this.dependency_rect_region_count);

                    for (int i = 1; i <= dependency_rect_region_count; i++)
                    {
                        boxSize += stream.ReadUInt16(out this.dependencyRectRegionGroupID);
                    }
                }
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.groupID);
            boxSize += stream.WriteBit(this.rect_region_flag);

            if (!rect_region_flag)
            {
                boxSize += stream.WriteBits(7, this.reserved);
            }

            else
            {
                boxSize += stream.WriteBits(2, this.independent_idc);
                boxSize += stream.WriteBit(this.full_picture);
                boxSize += stream.WriteBit(this.filtering_disabled);
                boxSize += stream.WriteBit(this.has_dependency_list);
                boxSize += stream.WriteBits(2, this.reserved0);

                if (!full_picture)
                {
                    boxSize += stream.WriteUInt16(this.horizontal_offset);
                    boxSize += stream.WriteUInt16(this.vertical_offset);
                }
                boxSize += stream.WriteUInt16(this.region_width);
                boxSize += stream.WriteUInt16(this.region_height);

                if (has_dependency_list)
                {
                    boxSize += stream.WriteUInt16(this.dependency_rect_region_count);

                    for (int i = 1; i <= dependency_rect_region_count; i++)
                    {
                        boxSize += stream.WriteUInt16(this.dependencyRectRegionGroupID);
                    }
                }
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // groupID
            boxSize += 1; // rect_region_flag

            if (!rect_region_flag)
            {
                boxSize += 7; // reserved
            }

            else
            {
                boxSize += 2; // independent_idc
                boxSize += 1; // full_picture
                boxSize += 1; // filtering_disabled
                boxSize += 1; // has_dependency_list
                boxSize += 2; // reserved0

                if (!full_picture)
                {
                    boxSize += 16; // horizontal_offset
                    boxSize += 16; // vertical_offset
                }
                boxSize += 16; // region_width
                boxSize += 16; // region_height

                if (has_dependency_list)
                {
                    boxSize += 16; // dependency_rect_region_count

                    for (int i = 1; i <= dependency_rect_region_count; i++)
                    {
                        boxSize += 16; // dependencyRectRegionGroupID
                    }
                }
            }
            return boxSize;
        }
    }


    /*
    class TemporalSubLayerEntry() extends VisualSampleGroupEntry ('tsas')
    {
    }
    */
    public class TemporalSubLayerEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "tsas";

        public TemporalSubLayerEntry() : base("tsas")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    class TemporalLayerEntry() extends VisualSampleGroupEntry ('tscl')
    {
        unsigned int(8)  temporalLayerId;
        unsigned int(2)  tlprofile_space;
        unsigned int(1)  tltier_flag;
        unsigned int(5)  tlprofile_idc;
        unsigned int(32) tlprofile_compatibility_flags;
        unsigned int(48) tlconstraint_indicator_flags;
        unsigned int(8)  tllevel_idc;
        unsigned int(16) tlMaxBitRate;
        unsigned int(16) tlAvgBitRate;
        unsigned int(8)  tlConstantFrameRate;
        unsigned int(16) tlAvgFrameRate;
    }
    */
    public class TemporalLayerEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "tscl";

        protected byte temporalLayerId;
        public byte TemporalLayerId { get { return this.temporalLayerId; } set { this.temporalLayerId = value; } }

        protected byte tlprofile_space;
        public byte TlprofileSpace { get { return this.tlprofile_space; } set { this.tlprofile_space = value; } }

        protected bool tltier_flag;
        public bool TltierFlag { get { return this.tltier_flag; } set { this.tltier_flag = value; } }

        protected byte tlprofile_idc;
        public byte TlprofileIdc { get { return this.tlprofile_idc; } set { this.tlprofile_idc = value; } }

        protected uint tlprofile_compatibility_flags;
        public uint TlprofileCompatibilityFlags { get { return this.tlprofile_compatibility_flags; } set { this.tlprofile_compatibility_flags = value; } }

        protected ulong tlconstraint_indicator_flags;
        public ulong TlconstraintIndicatorFlags { get { return this.tlconstraint_indicator_flags; } set { this.tlconstraint_indicator_flags = value; } }

        protected byte tllevel_idc;
        public byte TllevelIdc { get { return this.tllevel_idc; } set { this.tllevel_idc = value; } }

        protected ushort tlMaxBitRate;
        public ushort TlMaxBitRate { get { return this.tlMaxBitRate; } set { this.tlMaxBitRate = value; } }

        protected ushort tlAvgBitRate;
        public ushort TlAvgBitRate { get { return this.tlAvgBitRate; } set { this.tlAvgBitRate = value; } }

        protected byte tlConstantFrameRate;
        public byte TlConstantFrameRate { get { return this.tlConstantFrameRate; } set { this.tlConstantFrameRate = value; } }

        protected ushort tlAvgFrameRate;
        public ushort TlAvgFrameRate { get { return this.tlAvgFrameRate; } set { this.tlAvgFrameRate = value; } }

        public TemporalLayerEntry() : base("tscl")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.temporalLayerId);
            boxSize += stream.ReadBits(2, out this.tlprofile_space);
            boxSize += stream.ReadBit(out this.tltier_flag);
            boxSize += stream.ReadBits(5, out this.tlprofile_idc);
            boxSize += stream.ReadUInt32(out this.tlprofile_compatibility_flags);
            boxSize += stream.ReadUInt48(out this.tlconstraint_indicator_flags);
            boxSize += stream.ReadUInt8(out this.tllevel_idc);
            boxSize += stream.ReadUInt16(out this.tlMaxBitRate);
            boxSize += stream.ReadUInt16(out this.tlAvgBitRate);
            boxSize += stream.ReadUInt8(out this.tlConstantFrameRate);
            boxSize += stream.ReadUInt16(out this.tlAvgFrameRate);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.temporalLayerId);
            boxSize += stream.WriteBits(2, this.tlprofile_space);
            boxSize += stream.WriteBit(this.tltier_flag);
            boxSize += stream.WriteBits(5, this.tlprofile_idc);
            boxSize += stream.WriteUInt32(this.tlprofile_compatibility_flags);
            boxSize += stream.WriteUInt48(this.tlconstraint_indicator_flags);
            boxSize += stream.WriteUInt8(this.tllevel_idc);
            boxSize += stream.WriteUInt16(this.tlMaxBitRate);
            boxSize += stream.WriteUInt16(this.tlAvgBitRate);
            boxSize += stream.WriteUInt8(this.tlConstantFrameRate);
            boxSize += stream.WriteUInt16(this.tlAvgFrameRate);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // temporalLayerId
            boxSize += 2; // tlprofile_space
            boxSize += 1; // tltier_flag
            boxSize += 5; // tlprofile_idc
            boxSize += 32; // tlprofile_compatibility_flags
            boxSize += 48; // tlconstraint_indicator_flags
            boxSize += 8; // tllevel_idc
            boxSize += 16; // tlMaxBitRate
            boxSize += 16; // tlAvgBitRate
            boxSize += 8; // tlConstantFrameRate
            boxSize += 16; // tlAvgFrameRate
            return boxSize;
        }
    }


    /*
    class ViewPriorityEntry() extends VisualSampleGroupEntry ('vipr')
    {
        ViewPriorityBox();
    }
    */
    public class ViewPriorityEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "vipr";

        protected ViewPriorityBox ViewPriorityBox;
        public ViewPriorityBox _ViewPriorityBox { get { return this.ViewPriorityBox; } set { this.ViewPriorityBox = value; } }

        public ViewPriorityEntry() : base("vipr")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.ViewPriorityBox);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.ViewPriorityBox);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(ViewPriorityBox); // ViewPriorityBox
            return boxSize;
        }
    }


    /*
    class VvcOperatingPointsInformation extends VisualSampleGroupEntry ('vopi') {
        VvcOperatingPointsRecord oinf;
    }
    */
    public class VvcOperatingPointsInformation : VisualSampleGroupEntry
    {
        public const string FourCC = "vopi";

        protected VvcOperatingPointsRecord oinf;
        public VvcOperatingPointsRecord Oinf { get { return this.oinf; } set { this.oinf = value; } }

        public VvcOperatingPointsInformation() : base("vopi")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadClass(out this.oinf);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteClass(this.oinf);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateClassSize(oinf); // oinf
            return boxSize;
        }
    }


    /*
    aligned(8) class TrackGroupTypeBox('alte') extends FullBox('alte', version = 0, flags = 0)
    {
        unsigned int(32) track_group_id;
        // the remaining data may be specified 
        //  for a particular track_group_type
    }
    */
    public class TrackGroupTypeBox_alte : FullBox
    {
        public const string FourCC = "alte";

        protected uint track_group_id;  //  the remaining data may be specified 
        public uint TrackGroupId { get { return this.track_group_id; } set { this.track_group_id = value; } }

        public TrackGroupTypeBox_alte(string boxtype = "alte") : base("alte", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.track_group_id); // the remaining data may be specified 
            /*   for a particular track_group_type */
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.track_group_id); // the remaining data may be specified 
            /*   for a particular track_group_type */
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_group_id
            /*   for a particular track_group_type */
            return boxSize;
        }
    }


    /*
    aligned(8) class TrackGroupTypeBox('cstg') extends FullBox('cstg', version = 0, flags = 0)
    {
        unsigned int(32) track_group_id;
        // the remaining data may be specified 
        //  for a particular track_group_type
    }
    */
    public class TrackGroupTypeBox_cstg : FullBox
    {
        public const string FourCC = "cstg";

        protected uint track_group_id;  //  the remaining data may be specified 
        public uint TrackGroupId { get { return this.track_group_id; } set { this.track_group_id = value; } }

        public TrackGroupTypeBox_cstg(string boxtype = "cstg") : base("cstg", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.track_group_id); // the remaining data may be specified 
            /*   for a particular track_group_type */
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.track_group_id); // the remaining data may be specified 
            /*   for a particular track_group_type */
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_group_id
            /*   for a particular track_group_type */
            return boxSize;
        }
    }


    /*
    aligned(8) class TrackGroupTypeBox('snut') extends FullBox('snut', version = 0, flags = 0)
    {
        unsigned int(32) track_group_id;
        // the remaining data may be specified 
        //  for a particular track_group_type
    }
    */
    public class TrackGroupTypeBox_snut : FullBox
    {
        public const string FourCC = "snut";

        protected uint track_group_id;  //  the remaining data may be specified 
        public uint TrackGroupId { get { return this.track_group_id; } set { this.track_group_id = value; } }

        public TrackGroupTypeBox_snut(string boxtype = "snut") : base("snut", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.track_group_id); // the remaining data may be specified 
            /*   for a particular track_group_type */
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.track_group_id); // the remaining data may be specified 
            /*   for a particular track_group_type */
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // track_group_id
            /*   for a particular track_group_type */
            return boxSize;
        }
    }


    /*
    aligned(8) class AuxiliaryTypeProperty
    extends ItemFullProperty('auxC', version = 0, flags) {
        string aux_type;
        template unsigned int(8) aux_subtype[];
            // until the end of the box, the semantics depend on the aux_type value
    }
    */
    public class AuxiliaryTypeProperty : ItemFullProperty
    {
        public const string FourCC = "auxC";

        protected string aux_type;
        public string AuxType { get { return this.aux_type; } set { this.aux_type = value; } }

        protected byte[] aux_subtype;  //  until the end of the box, the semantics depend on the aux_type value
        public byte[] AuxSubtype { get { return this.aux_subtype; } set { this.aux_subtype = value; } }

        public AuxiliaryTypeProperty(uint flags = 0) : base("auxC", 0, flags)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadString(out this.aux_type);
            boxSize += stream.ReadUInt8Array(out this.aux_subtype); // until the end of the box, the semantics depend on the aux_type value
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteString(this.aux_type);
            boxSize += stream.WriteUInt8Array(this.aux_subtype); // until the end of the box, the semantics depend on the aux_type value
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)aux_type.Length * 8; // aux_type
            boxSize += (ulong)aux_subtype.Length * 8; // aux_subtype
            return boxSize;
        }
    }


    /*
    aligned(8) class ImageMirror
    extends ItemProperty('imir') {
        unsigned int(7) reserved = 0;
        unsigned int(1) axis;
    }
    */
    public class ImageMirror : ItemProperty
    {
        public const string FourCC = "imir";

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected bool axis;
        public bool Axis { get { return this.axis; } set { this.axis = value; } }

        public ImageMirror() : base("imir")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(7, out this.reserved);
            boxSize += stream.ReadBit(out this.axis);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(7, this.reserved);
            boxSize += stream.WriteBit(this.axis);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 7; // reserved
            boxSize += 1; // axis
            return boxSize;
        }
    }


    /*
    aligned(8) class ImageRotation
    extends ItemProperty('irot') {
        unsigned int(6) reserved = 0;
        unsigned int(2) angle;
    }
    */
    public class ImageRotation : ItemProperty
    {
        public const string FourCC = "irot";

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected byte angle;
        public byte Angle { get { return this.angle; } set { this.angle = value; } }

        public ImageRotation() : base("irot")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(6, out this.reserved);
            boxSize += stream.ReadBits(2, out this.angle);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(6, this.reserved);
            boxSize += stream.WriteBits(2, this.angle);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 6; // reserved
            boxSize += 2; // angle
            return boxSize;
        }
    }


    /*
    aligned(8) class ImageSpatialExtentsProperty
    extends ItemFullProperty('ispe', version = 0, flags = 0) {
        unsigned int(32) image_width;
        unsigned int(32) image_height;
    }

    */
    public class ImageSpatialExtentsProperty : ItemFullProperty
    {
        public const string FourCC = "ispe";

        protected uint image_width;
        public uint ImageWidth { get { return this.image_width; } set { this.image_width = value; } }

        protected uint image_height;
        public uint ImageHeight { get { return this.image_height; } set { this.image_height = value; } }

        public ImageSpatialExtentsProperty() : base("ispe", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.image_width);
            boxSize += stream.ReadUInt32(out this.image_height);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.image_width);
            boxSize += stream.WriteUInt32(this.image_height);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // image_width
            boxSize += 32; // image_height
            return boxSize;
        }
    }


    /*
    class JPEGConfigurationBox extends Box('jpgC') {
        unsigned int(8) JPEGprefix[];
    }
    */
    public class JPEGConfigurationBox : Box
    {
        public const string FourCC = "jpgC";

        protected byte[] JPEGprefix;
        public byte[] _JPEGprefix { get { return this.JPEGprefix; } set { this.JPEGprefix = value; } }

        public JPEGConfigurationBox() : base("jpgC")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8Array(out this.JPEGprefix);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8Array(this.JPEGprefix);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)JPEGprefix.Length * 8; // JPEGprefix
            return boxSize;
        }
    }


    /*
    aligned(8) class LayerSelectorProperty
    extends ItemProperty('lsel') {
        unsigned int(16) layer_id;
    }
    */
    public class LayerSelectorProperty : ItemProperty
    {
        public const string FourCC = "lsel";

        protected ushort layer_id;
        public ushort LayerId { get { return this.layer_id; } set { this.layer_id = value; } }

        public LayerSelectorProperty() : base("lsel")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.layer_id);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.layer_id);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // layer_id
            return boxSize;
        }
    }


    /*
    aligned(8) class OperatingPointsInformationProperty
    extends ItemFullProperty('oinf', version = 0, flags = 0){
        OperatingPointsRecord op_info; // specified in ISO/IEC 14496-15
    }
    */
    public class OperatingPointsInformationProperty : ItemFullProperty
    {
        public const string FourCC = "oinf";

        protected OperatingPointsRecord op_info;  //  specified in ISO/IEC 14496-15
        public OperatingPointsRecord OpInfo { get { return this.op_info; } set { this.op_info = value; } }

        public OperatingPointsInformationProperty() : base("oinf", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadClass(out this.op_info); // specified in ISO/IEC 14496-15
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteClass(this.op_info); // specified in ISO/IEC 14496-15
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateClassSize(op_info); // op_info
            return boxSize;
        }
    }


    /*
    aligned(8) class PixelInformationProperty
    extends ItemFullProperty('pixi', version = 0, flags = 0){
        unsigned int(8) num_channels;
        for (i=0; i<num_channels; i++) {
            unsigned int(8) bits_per_channel;
        }
    }
    */
    public class PixelInformationProperty : ItemFullProperty
    {
        public const string FourCC = "pixi";

        protected byte num_channels;
        public byte NumChannels { get { return this.num_channels; } set { this.num_channels = value; } }

        protected byte bits_per_channel;
        public byte BitsPerChannel { get { return this.bits_per_channel; } set { this.bits_per_channel = value; } }

        public PixelInformationProperty() : base("pixi", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.num_channels);

            for (int i = 0; i < num_channels; i++)
            {
                boxSize += stream.ReadUInt8(out this.bits_per_channel);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.num_channels);

            for (int i = 0; i < num_channels; i++)
            {
                boxSize += stream.WriteUInt8(this.bits_per_channel);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // num_channels

            for (int i = 0; i < num_channels; i++)
            {
                boxSize += 8; // bits_per_channel
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class RelativeLocationProperty
    extends ItemFullProperty('rloc', version = 0, flags = 0)
    {
        unsigned int(32) horizontal_offset;
        unsigned int(32) vertical_offset;
    }
    */
    public class RelativeLocationProperty : ItemFullProperty
    {
        public const string FourCC = "rloc";

        protected uint horizontal_offset;
        public uint HorizontalOffset { get { return this.horizontal_offset; } set { this.horizontal_offset = value; } }

        protected uint vertical_offset;
        public uint VerticalOffset { get { return this.vertical_offset; } set { this.vertical_offset = value; } }

        public RelativeLocationProperty() : base("rloc", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.horizontal_offset);
            boxSize += stream.ReadUInt32(out this.vertical_offset);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.horizontal_offset);
            boxSize += stream.WriteUInt32(this.vertical_offset);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // horizontal_offset
            boxSize += 32; // vertical_offset
            return boxSize;
        }
    }


    /*
    aligned(8) class TargetOlsProperty
    extends ItemFullProperty('tols', version = 0, flags = 0){
        unsigned int(16) target_ols_idx;
    }
    */
    public class TargetOlsProperty : ItemFullProperty
    {
        public const string FourCC = "tols";

        protected ushort target_ols_idx;
        public ushort TargetOlsIdx { get { return this.target_ols_idx; } set { this.target_ols_idx = value; } }

        public TargetOlsProperty() : base("tols", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.target_ols_idx);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.target_ols_idx);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // target_ols_idx
            return boxSize;
        }
    }


    /*
    aligned(8) class AutoExposureBracketingEntry
    extends VisualSampleGroupEntry('aebr') {
        int(8) exposure_step;
        int(8) exposure_numerator;
    }
    */
    public class AutoExposureBracketingEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "aebr";

        protected sbyte exposure_step;
        public sbyte ExposureStep { get { return this.exposure_step; } set { this.exposure_step = value; } }

        protected sbyte exposure_numerator;
        public sbyte ExposureNumerator { get { return this.exposure_numerator; } set { this.exposure_numerator = value; } }

        public AutoExposureBracketingEntry() : base("aebr")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadInt8(out this.exposure_step);
            boxSize += stream.ReadInt8(out this.exposure_numerator);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteInt8(this.exposure_step);
            boxSize += stream.WriteInt8(this.exposure_numerator);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // exposure_step
            boxSize += 8; // exposure_numerator
            return boxSize;
        }
    }


    /*
    aligned(8) class FlashExposureBracketingEntry
    extends VisualSampleGroupEntry('afbr') {
        int(8) flash_exposure_numerator;
        int(8) flash_exposure_denominator;
    }
    */
    public class FlashExposureBracketingEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "afbr";

        protected sbyte flash_exposure_numerator;
        public sbyte FlashExposureNumerator { get { return this.flash_exposure_numerator; } set { this.flash_exposure_numerator = value; } }

        protected sbyte flash_exposure_denominator;
        public sbyte FlashExposureDenominator { get { return this.flash_exposure_denominator; } set { this.flash_exposure_denominator = value; } }

        public FlashExposureBracketingEntry() : base("afbr")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadInt8(out this.flash_exposure_numerator);
            boxSize += stream.ReadInt8(out this.flash_exposure_denominator);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteInt8(this.flash_exposure_numerator);
            boxSize += stream.WriteInt8(this.flash_exposure_denominator);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // flash_exposure_numerator
            boxSize += 8; // flash_exposure_denominator
            return boxSize;
        }
    }


    /*
    aligned(8) class AccessibilityTextProperty
    extends ItemFullProperty('altt', version = 0, flags = 0) {
        utf8string alt_text;
        utf8string alt_lang;
    }

    */
    public class AccessibilityTextProperty : ItemFullProperty
    {
        public const string FourCC = "altt";

        protected string alt_text;
        public string AltText { get { return this.alt_text; } set { this.alt_text = value; } }

        protected string alt_lang;
        public string AltLang { get { return this.alt_lang; } set { this.alt_lang = value; } }

        public AccessibilityTextProperty() : base("altt", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadString(out this.alt_text);
            boxSize += stream.ReadString(out this.alt_lang);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteString(this.alt_text);
            boxSize += stream.WriteString(this.alt_lang);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)alt_text.Length * 8; // alt_text
            boxSize += (ulong)alt_lang.Length * 8; // alt_lang
            return boxSize;
        }
    }


    /*
    aligned(8) class CreationTimeProperty
    extends ItemFullProperty('crtt', version = 0, flags = 0) {
        unsigned int(64)  creation_time;
    }

    */
    public class CreationTimeProperty : ItemFullProperty
    {
        public const string FourCC = "crtt";

        protected ulong creation_time;
        public ulong CreationTime { get { return this.creation_time; } set { this.creation_time = value; } }

        public CreationTimeProperty() : base("crtt", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt64(out this.creation_time);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt64(this.creation_time);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // creation_time
            return boxSize;
        }
    }


    /*
    aligned(8) class DepthOfFieldBracketingEntry
    extends VisualSampleGroupEntry('dobr') {
        int(8) f_stop_numerator;
        int(8) f_stop_denominator;
    }
    */
    public class DepthOfFieldBracketingEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "dobr";

        protected sbyte f_stop_numerator;
        public sbyte fStopNumerator { get { return this.f_stop_numerator; } set { this.f_stop_numerator = value; } }

        protected sbyte f_stop_denominator;
        public sbyte fStopDenominator { get { return this.f_stop_denominator; } set { this.f_stop_denominator = value; } }

        public DepthOfFieldBracketingEntry() : base("dobr")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadInt8(out this.f_stop_numerator);
            boxSize += stream.ReadInt8(out this.f_stop_denominator);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteInt8(this.f_stop_numerator);
            boxSize += stream.WriteInt8(this.f_stop_denominator);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // f_stop_numerator
            boxSize += 8; // f_stop_denominator
            return boxSize;
        }
    }


    /*
    aligned(8) class FocusBracketingEntry
    extends VisualSampleGroupEntry('fobr') {
        unsigned int(16) focus_distance_numerator;
        unsigned int(16) focus_distance_denominator;
    }
    */
    public class FocusBracketingEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "fobr";

        protected ushort focus_distance_numerator;
        public ushort FocusDistanceNumerator { get { return this.focus_distance_numerator; } set { this.focus_distance_numerator = value; } }

        protected ushort focus_distance_denominator;
        public ushort FocusDistanceDenominator { get { return this.focus_distance_denominator; } set { this.focus_distance_denominator = value; } }

        public FocusBracketingEntry() : base("fobr")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.focus_distance_numerator);
            boxSize += stream.ReadUInt16(out this.focus_distance_denominator);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.focus_distance_numerator);
            boxSize += stream.WriteUInt16(this.focus_distance_denominator);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // focus_distance_numerator
            boxSize += 16; // focus_distance_denominator
            return boxSize;
        }
    }


    /*
    aligned(8) class ImageScaling
    extends ItemFullProperty('iscl', version = 0, flags = 0) {
        unsigned int(16) target_width_numerator;
        unsigned int(16) target_width_denominator;
        unsigned int(16) target_height_numerator;
        unsigned int(16) target_height_denominator;
    }
    */
    public class ImageScaling : ItemFullProperty
    {
        public const string FourCC = "iscl";

        protected ushort target_width_numerator;
        public ushort TargetWidthNumerator { get { return this.target_width_numerator; } set { this.target_width_numerator = value; } }

        protected ushort target_width_denominator;
        public ushort TargetWidthDenominator { get { return this.target_width_denominator; } set { this.target_width_denominator = value; } }

        protected ushort target_height_numerator;
        public ushort TargetHeightNumerator { get { return this.target_height_numerator; } set { this.target_height_numerator = value; } }

        protected ushort target_height_denominator;
        public ushort TargetHeightDenominator { get { return this.target_height_denominator; } set { this.target_height_denominator = value; } }

        public ImageScaling() : base("iscl", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.target_width_numerator);
            boxSize += stream.ReadUInt16(out this.target_width_denominator);
            boxSize += stream.ReadUInt16(out this.target_height_numerator);
            boxSize += stream.ReadUInt16(out this.target_height_denominator);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.target_width_numerator);
            boxSize += stream.WriteUInt16(this.target_width_denominator);
            boxSize += stream.WriteUInt16(this.target_height_numerator);
            boxSize += stream.WriteUInt16(this.target_height_denominator);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // target_width_numerator
            boxSize += 16; // target_width_denominator
            boxSize += 16; // target_height_numerator
            boxSize += 16; // target_height_denominator
            return boxSize;
        }
    }


    /*
    aligned(8) class ModificationTimeProperty
    extends ItemFullProperty('mdft', version = 0, flags = 0) {
        unsigned int(64)  modification_time;
    }

    */
    public class ModificationTimeProperty : ItemFullProperty
    {
        public const string FourCC = "mdft";

        protected ulong modification_time;
        public ulong ModificationTime { get { return this.modification_time; } set { this.modification_time = value; } }

        public ModificationTimeProperty() : base("mdft", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt64(out this.modification_time);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt64(this.modification_time);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 64; // modification_time
            return boxSize;
        }
    }


    /*
    aligned(8) class PanoramaEntry
    extends VisualSampleGroupEntry('pano') {
        unsigned int(16) frame_number;
    }

    */
    public class PanoramaEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "pano";

        protected ushort frame_number;
        public ushort FrameNumber { get { return this.frame_number; } set { this.frame_number = value; } }

        public PanoramaEntry() : base("pano")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.frame_number);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.frame_number);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // frame_number
            return boxSize;
        }
    }


    /*
    aligned(8) class RequiredReferenceTypesProperty
    extends ItemFullProperty('rref', version = 0, flags = 0){
        unsigned int(8) reference_type_count;
        for (i=0; i< reference_type_count; i++) {
            unsigned int(32) reference_type[i];
        }
    }
    */
    public class RequiredReferenceTypesProperty : ItemFullProperty
    {
        public const string FourCC = "rref";

        protected byte reference_type_count;
        public byte ReferenceTypeCount { get { return this.reference_type_count; } set { this.reference_type_count = value; } }

        protected uint[] reference_type;
        public uint[] ReferenceType { get { return this.reference_type; } set { this.reference_type = value; } }

        public RequiredReferenceTypesProperty() : base("rref", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.reference_type_count);

            for (int i = 0; i < reference_type_count; i++)
            {
                boxSize += stream.ReadUInt32(out this.reference_type[i]);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.reference_type_count);

            for (int i = 0; i < reference_type_count; i++)
            {
                boxSize += stream.WriteUInt32(this.reference_type[i]);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // reference_type_count

            for (int i = 0; i < reference_type_count; i++)
            {
                boxSize += 32; // reference_type
            }
            return boxSize;
        }
    }


    /*
    aligned(8) class UserDescriptionProperty
    extends ItemFullProperty('udes', version = 0, flags = 0){
        utf8string lang;
        utf8string name;
        utf8string description;
        utf8string tags;
    }

    */
    public class UserDescriptionProperty : ItemFullProperty
    {
        public const string FourCC = "udes";

        protected string lang;
        public string Lang { get { return this.lang; } set { this.lang = value; } }

        protected string name;
        public string Name { get { return this.name; } set { this.name = value; } }

        protected string description;
        public string Description { get { return this.description; } set { this.description = value; } }

        protected string tags;
        public string Tags { get { return this.tags; } set { this.tags = value; } }

        public UserDescriptionProperty() : base("udes", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadString(out this.lang);
            boxSize += stream.ReadString(out this.name);
            boxSize += stream.ReadString(out this.description);
            boxSize += stream.ReadString(out this.tags);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteString(this.lang);
            boxSize += stream.WriteString(this.name);
            boxSize += stream.WriteString(this.description);
            boxSize += stream.WriteString(this.tags);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += (ulong)lang.Length * 8; // lang
            boxSize += (ulong)name.Length * 8; // name
            boxSize += (ulong)description.Length * 8; // description
            boxSize += (ulong)tags.Length * 8; // tags
            return boxSize;
        }
    }


    /*
    aligned(8) class WhiteBalanceBracketingEntry
    extends VisualSampleGroupEntry('wbbr') {
        unsigned int(16) blue_amber;
        int(8) green_magenta;
    }
    */
    public class WhiteBalanceBracketingEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "wbbr";

        protected ushort blue_amber;
        public ushort BlueAmber { get { return this.blue_amber; } set { this.blue_amber = value; } }

        protected sbyte green_magenta;
        public sbyte GreenMagenta { get { return this.green_magenta; } set { this.green_magenta = value; } }

        public WhiteBalanceBracketingEntry() : base("wbbr")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.blue_amber);
            boxSize += stream.ReadInt8(out this.green_magenta);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.blue_amber);
            boxSize += stream.WriteInt8(this.green_magenta);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // blue_amber
            boxSize += 8; // green_magenta
            return boxSize;
        }
    }


    /*
    class WipeTransitionEffectProperty
    extends ItemFullProperty('wipe', version=0, flags=0) {
        unsigned int(8) transition_direction;
    }
    */
    public class WipeTransitionEffectProperty : ItemFullProperty
    {
        public const string FourCC = "wipe";

        protected byte transition_direction;
        public byte TransitionDirection { get { return this.transition_direction; } set { this.transition_direction = value; } }

        public WipeTransitionEffectProperty() : base("wipe", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.transition_direction);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.transition_direction);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // transition_direction
            return boxSize;
        }
    }


    /*
    class ZoomTransitionEffectProperty
    extends ItemFullProperty('zoom', version=0, flags=0) {
        unsigned int(1) transition_direction; 
        unsigned int(7) transition_shape;
    }
    */
    public class ZoomTransitionEffectProperty : ItemFullProperty
    {
        public const string FourCC = "zoom";

        protected bool transition_direction;
        public bool TransitionDirection { get { return this.transition_direction; } set { this.transition_direction = value; } }

        protected byte transition_shape;
        public byte TransitionShape { get { return this.transition_shape; } set { this.transition_shape = value; } }

        public ZoomTransitionEffectProperty() : base("zoom", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBit(out this.transition_direction);
            boxSize += stream.ReadBits(7, out this.transition_shape);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBit(this.transition_direction);
            boxSize += stream.WriteBits(7, this.transition_shape);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 1; // transition_direction
            boxSize += 7; // transition_shape
            return boxSize;
        }
    }


    /*
    class FadeTransitionEffectProperty
    extends ItemFullProperty('fade', version=0, flags=0) {
        unsigned int(8) transition_direction;
    }
    */
    public class FadeTransitionEffectProperty : ItemFullProperty
    {
        public const string FourCC = "fade";

        protected byte transition_direction;
        public byte TransitionDirection { get { return this.transition_direction; } set { this.transition_direction = value; } }

        public FadeTransitionEffectProperty() : base("fade", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.transition_direction);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.transition_direction);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // transition_direction
            return boxSize;
        }
    }


    /*
    class SplitTransitionEffectProperty
    extends ItemFullProperty('splt', version=0, flags=0) {
        unsigned int(8) transition_direction;
    }
    */
    public class SplitTransitionEffectProperty : ItemFullProperty
    {
        public const string FourCC = "splt";

        protected byte transition_direction;
        public byte TransitionDirection { get { return this.transition_direction; } set { this.transition_direction = value; } }

        public SplitTransitionEffectProperty() : base("splt", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.transition_direction);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.transition_direction);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // transition_direction
            return boxSize;
        }
    }


    /*
    class SuggestedTransitionPeriodProperty
    extends ItemFullProperty('stpe', version=0, flags=0) {
        unsigned int(8) transition_period;
    }
    */
    public class SuggestedTransitionPeriodProperty : ItemFullProperty
    {
        public const string FourCC = "stpe";

        protected byte transition_period;
        public byte TransitionPeriod { get { return this.transition_period; } set { this.transition_period = value; } }

        public SuggestedTransitionPeriodProperty() : base("stpe", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.transition_period);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.transition_period);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // transition_period
            return boxSize;
        }
    }


    /*
    class SuggestedTimeDisplayDurationProperty
    extends ItemFullProperty('ssld', version=0, flags=0) {
        unsigned int(16) duration;
    }
    */
    public class SuggestedTimeDisplayDurationProperty : ItemFullProperty
    {
        public const string FourCC = "ssld";

        protected ushort duration;
        public ushort Duration { get { return this.duration; } set { this.duration = value; } }

        public SuggestedTimeDisplayDurationProperty() : base("ssld", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.duration);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.duration);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // duration
            return boxSize;
        }
    }


    /*
    class MaskConfigurationProperty
    extends ItemFullProperty('mskC', version = 0, flags = 0){
        unsigned int(8) bits_per_pixel;
    }
    */
    public class MaskConfigurationProperty : ItemFullProperty
    {
        public const string FourCC = "mskC";

        protected byte bits_per_pixel;
        public byte BitsPerPixel { get { return this.bits_per_pixel; } set { this.bits_per_pixel = value; } }

        public MaskConfigurationProperty() : base("mskC", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.bits_per_pixel);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.bits_per_pixel);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // bits_per_pixel
            return boxSize;
        }
    }


    /*
    class VvcSubpicIDProperty
    extends ItemFullProperty('spid', version = 0, flags = 0){
        VvcSubpicIDEntry sid_info; // specified in ISO/IEC 14496-15
    }
    */
    public class VvcSubpicIDProperty : ItemFullProperty
    {
        public const string FourCC = "spid";

        protected VvcSubpicIDEntry sid_info;  //  specified in ISO/IEC 14496-15
        public VvcSubpicIDEntry SidInfo { get { return this.sid_info; } set { this.sid_info = value; } }

        public VvcSubpicIDProperty() : base("spid", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.sid_info); // specified in ISO/IEC 14496-15
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.sid_info); // specified in ISO/IEC 14496-15
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(sid_info); // sid_info
            return boxSize;
        }
    }


    /*
    class VvcSubpicOrderProperty
    extends ItemFullProperty('spor', version = 0, flags = 0){
        VvcSubpicOrderEntry sor_info; // specified in ISO/IEC 14496-15
    }
    */
    public class VvcSubpicOrderProperty : ItemFullProperty
    {
        public const string FourCC = "spor";

        protected VvcSubpicOrderEntry sor_info;  //  specified in ISO/IEC 14496-15
        public VvcSubpicOrderEntry SorInfo { get { return this.sor_info; } set { this.sor_info = value; } }

        public VvcSubpicOrderProperty() : base("spor", 0, 0)
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.sor_info); // specified in ISO/IEC 14496-15
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.sor_info); // specified in ISO/IEC 14496-15
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(sor_info); // sor_info
            return boxSize;
        }
    }


    /*
    class VisualEquivalenceEntry() extends VisualSampleGroupEntry ('eqiv')
    {
        signed int(16)   time_offset;
        unsigned int(16) timescale_multiplier;
    }
    */
    public class VisualEquivalenceEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "eqiv";

        protected short time_offset;
        public short TimeOffset { get { return this.time_offset; } set { this.time_offset = value; } }

        protected ushort timescale_multiplier;
        public ushort TimescaleMultiplier { get { return this.timescale_multiplier; } set { this.timescale_multiplier = value; } }

        public VisualEquivalenceEntry() : base("eqiv")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadInt16(out this.time_offset);
            boxSize += stream.ReadUInt16(out this.timescale_multiplier);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteInt16(this.time_offset);
            boxSize += stream.WriteUInt16(this.timescale_multiplier);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // time_offset
            boxSize += 16; // timescale_multiplier
            return boxSize;
        }
    }


    /*
    class DirectReferenceSamplesList()
    extends VisualSampleGroupEntry ('refs') {
        unsigned int(32) sample_id;
        unsigned int(8) num_direct_reference_samples;
        for(i = 0; i < num_direct_reference_samples; i++) {
            unsigned int(32)direct_reference_sample_id;
        }
    }
    */
    public class DirectReferenceSamplesList : VisualSampleGroupEntry
    {
        public const string FourCC = "refs";

        protected uint sample_id;
        public uint SampleId { get { return this.sample_id; } set { this.sample_id = value; } }

        protected byte num_direct_reference_samples;
        public byte NumDirectReferenceSamples { get { return this.num_direct_reference_samples; } set { this.num_direct_reference_samples = value; } }

        protected uint direct_reference_sample_id;
        public uint DirectReferenceSampleId { get { return this.direct_reference_sample_id; } set { this.direct_reference_sample_id = value; } }

        public DirectReferenceSamplesList() : base("refs")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.sample_id);
            boxSize += stream.ReadUInt8(out this.num_direct_reference_samples);

            for (int i = 0; i < num_direct_reference_samples; i++)
            {
                boxSize += stream.ReadUInt32(out this.direct_reference_sample_id);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.sample_id);
            boxSize += stream.WriteUInt8(this.num_direct_reference_samples);

            for (int i = 0; i < num_direct_reference_samples; i++)
            {
                boxSize += stream.WriteUInt32(this.direct_reference_sample_id);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // sample_id
            boxSize += 8; // num_direct_reference_samples

            for (int i = 0; i < num_direct_reference_samples; i++)
            {
                boxSize += 32; // direct_reference_sample_id
            }
            return boxSize;
        }
    }


    /*
    abstract aligned(8) expandable(228-1) class BaseDescriptor : bit(8) tag=0 {
     // empty. To be filled by classes extending this class.
     int sizeOfInstance = 0;
     bit(1) nextByte;
     bit(7) sizeOfInstance;
     while(nextByte) {
     bit(1) nextByte;
     bit(7) sizeByte;
     sizeOfInstance = sizeOfInstance<<7 | sizeByte;
     }
    }
    */
    public class BaseDescriptor
    {
        public byte Tag { get; set; } = 0;

        protected bool nextByte;
        public bool NextByte { get { return this.nextByte; } set { this.nextByte = value; } }

        protected byte sizeOfInstance;
        public byte SizeOfInstance { get { return this.sizeOfInstance; } set { this.sizeOfInstance = value; } }

        protected bool nextByte0;
        public bool NextByte0 { get { return this.nextByte0; } set { this.nextByte0 = value; } }

        protected byte sizeByte;
        public byte SizeByte { get { return this.sizeByte; } set { this.sizeByte = value; } }

        public BaseDescriptor() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            /*  empty. To be filled by classes extending this class. */
            int sizeOfInstance = 0;
            boxSize += stream.ReadBit(out this.nextByte);
            boxSize += stream.ReadBits(7, out this.sizeOfInstance);

            while (nextByte)
            {
                boxSize += stream.ReadBit(out this.nextByte0);
                boxSize += stream.ReadBits(7, out this.sizeByte);
                sizeOfInstance = sizeOfInstance << 7 | sizeByte;
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            /*  empty. To be filled by classes extending this class. */
            int sizeOfInstance = 0;
            boxSize += stream.WriteBit(this.nextByte);
            boxSize += stream.WriteBits(7, this.sizeOfInstance);

            while (nextByte)
            {
                boxSize += stream.WriteBit(this.nextByte0);
                boxSize += stream.WriteBits(7, this.sizeByte);
                sizeOfInstance = sizeOfInstance << 7 | sizeByte;
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            /*  empty. To be filled by classes extending this class. */
            int sizeOfInstance = 0;
            boxSize += 1; // nextByte
            boxSize += 7; // sizeOfInstance

            while (nextByte)
            {
                boxSize += 1; // nextByte0
                boxSize += 7; // sizeByte
                sizeOfInstance = sizeOfInstance << 7 | sizeByte;
            }
            return boxSize;
        }
    }


    /*
    abstract class DecoderSpecificInfo extends BaseDescriptor : bit(8) tag=DecSpecificInfoTag
     {
     // empty. To be filled by classes extending this class.
     }
    */
    public class DecoderSpecificInfo : BaseDescriptor
    {
        public byte Tag { get; set; } = DescriptorTags.DecSpecificInfoTag;

        public DecoderSpecificInfo() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            /*  empty. To be filled by classes extending this class. */
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            /*  empty. To be filled by classes extending this class. */
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            /*  empty. To be filled by classes extending this class. */
            return boxSize;
        }
    }


    /*
    class ES_Descriptor extends BaseDescriptor : bit(8) tag=ES_DescrTag {
     bit(16) ES_ID;
     bit(1) streamDependenceFlag;
     bit(1) URL_Flag;
     bit(1) OCRstreamFlag;
     bit(5) streamPriority;
     if (streamDependenceFlag)
     bit(16) dependsOn_ES_ID;
     if (URL_Flag) {
     bit(8) URLlength;
     bit(8) URLstring[URLlength];
     }
     if (OCRstreamFlag)
     bit(16) OCR_ES_Id;
     DecoderConfigDescriptor decConfigDescr;
     SLConfigDescriptor slConfigDescr;
     IPI_DescrPointer ipiPtr[0 .. 1];
     IP_IdentificationDataSet ipIDS[0 .. 255];
     IPMP_DescriptorPointer ipmpDescrPtr[0 .. 255];
     LanguageDescriptor langDescr[0 .. 255];
     QoS_Descriptor qosDescr[0 .. 1];
     RegistrationDescriptor regDescr[0 .. 1];
     ExtensionDescriptor extDescr[0 .. 255];
     }
    */
    public class ES_Descriptor : BaseDescriptor
    {
        public byte Tag { get; set; } = DescriptorTags.ES_DescrTag;

        protected ushort ES_ID;
        public ushort ESID { get { return this.ES_ID; } set { this.ES_ID = value; } }

        protected bool streamDependenceFlag;
        public bool StreamDependenceFlag { get { return this.streamDependenceFlag; } set { this.streamDependenceFlag = value; } }

        protected bool URL_Flag;
        public bool URLFlag { get { return this.URL_Flag; } set { this.URL_Flag = value; } }

        protected bool OCRstreamFlag;
        public bool _OCRstreamFlag { get { return this.OCRstreamFlag; } set { this.OCRstreamFlag = value; } }

        protected byte streamPriority;
        public byte StreamPriority { get { return this.streamPriority; } set { this.streamPriority = value; } }

        protected ushort dependsOn_ES_ID;
        public ushort DependsOnESID { get { return this.dependsOn_ES_ID; } set { this.dependsOn_ES_ID = value; } }

        protected byte URLlength;
        public byte _URLlength { get { return this.URLlength; } set { this.URLlength = value; } }

        protected byte[] URLstring;
        public byte[] _URLstring { get { return this.URLstring; } set { this.URLstring = value; } }

        protected ushort OCR_ES_Id;
        public ushort OCRESId { get { return this.OCR_ES_Id; } set { this.OCR_ES_Id = value; } }

        protected DecoderConfigDescriptor decConfigDescr;
        public DecoderConfigDescriptor DecConfigDescr { get { return this.decConfigDescr; } set { this.decConfigDescr = value; } }

        protected SLConfigDescriptor slConfigDescr;
        public SLConfigDescriptor SlConfigDescr { get { return this.slConfigDescr; } set { this.slConfigDescr = value; } }

        protected IPI_DescrPointer ipiPtr;
        public IPI_DescrPointer IpiPtr { get { return this.ipiPtr; } set { this.ipiPtr = value; } }

        protected IP_IdentificationDataSet[] ipIDS;
        public IP_IdentificationDataSet[] IpIDS { get { return this.ipIDS; } set { this.ipIDS = value; } }

        protected IPMP_DescriptorPointer[] ipmpDescrPtr;
        public IPMP_DescriptorPointer[] IpmpDescrPtr { get { return this.ipmpDescrPtr; } set { this.ipmpDescrPtr = value; } }

        protected LanguageDescriptor langDescr;
        public LanguageDescriptor LangDescr { get { return this.langDescr; } set { this.langDescr = value; } }

        protected QoS_Descriptor qosDescr;
        public QoS_Descriptor QosDescr { get { return this.qosDescr; } set { this.qosDescr = value; } }

        protected RegistrationDescriptor regDescr;
        public RegistrationDescriptor RegDescr { get { return this.regDescr; } set { this.regDescr = value; } }

        protected ExtensionDescriptor[] extDescr;
        public ExtensionDescriptor[] ExtDescr { get { return this.extDescr; } set { this.extDescr = value; } }

        public ES_Descriptor() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.ES_ID);
            boxSize += stream.ReadBit(out this.streamDependenceFlag);
            boxSize += stream.ReadBit(out this.URL_Flag);
            boxSize += stream.ReadBit(out this.OCRstreamFlag);
            boxSize += stream.ReadBits(5, out this.streamPriority);

            if (streamDependenceFlag)
            {
                boxSize += stream.ReadUInt16(out this.dependsOn_ES_ID);
            }

            if (URL_Flag)
            {
                boxSize += stream.ReadUInt8(out this.URLlength);
                boxSize += stream.ReadBytes(URLlength, out this.URLstring);
            }

            if (OCRstreamFlag)
            {
                boxSize += stream.ReadUInt16(out this.OCR_ES_Id);
            }
            boxSize += stream.ReadClass(out this.decConfigDescr);
            boxSize += stream.ReadClass(out this.slConfigDescr);
            boxSize += stream.ReadClass(out this.ipiPtr);
            boxSize += stream.ReadClass(out this.ipIDS);
            boxSize += stream.ReadClass(out this.ipmpDescrPtr);
            boxSize += stream.ReadClass(out this.langDescr);
            boxSize += stream.ReadClass(out this.qosDescr);
            boxSize += stream.ReadClass(out this.regDescr);
            boxSize += stream.ReadClass(out this.extDescr);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.ES_ID);
            boxSize += stream.WriteBit(this.streamDependenceFlag);
            boxSize += stream.WriteBit(this.URL_Flag);
            boxSize += stream.WriteBit(this.OCRstreamFlag);
            boxSize += stream.WriteBits(5, this.streamPriority);

            if (streamDependenceFlag)
            {
                boxSize += stream.WriteUInt16(this.dependsOn_ES_ID);
            }

            if (URL_Flag)
            {
                boxSize += stream.WriteUInt8(this.URLlength);
                boxSize += stream.WriteBytes(URLlength, this.URLstring);
            }

            if (OCRstreamFlag)
            {
                boxSize += stream.WriteUInt16(this.OCR_ES_Id);
            }
            boxSize += stream.WriteClass(this.decConfigDescr);
            boxSize += stream.WriteClass(this.slConfigDescr);
            boxSize += stream.WriteClass(this.ipiPtr);
            boxSize += stream.WriteClass(this.ipIDS);
            boxSize += stream.WriteClass(this.ipmpDescrPtr);
            boxSize += stream.WriteClass(this.langDescr);
            boxSize += stream.WriteClass(this.qosDescr);
            boxSize += stream.WriteClass(this.regDescr);
            boxSize += stream.WriteClass(this.extDescr);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // ES_ID
            boxSize += 1; // streamDependenceFlag
            boxSize += 1; // URL_Flag
            boxSize += 1; // OCRstreamFlag
            boxSize += 5; // streamPriority

            if (streamDependenceFlag)
            {
                boxSize += 16; // dependsOn_ES_ID
            }

            if (URL_Flag)
            {
                boxSize += 8; // URLlength
                boxSize += (ulong)(URLlength * 8); // URLstring
            }

            if (OCRstreamFlag)
            {
                boxSize += 16; // OCR_ES_Id
            }
            boxSize += IsoStream.CalculateClassSize(decConfigDescr); // decConfigDescr
            boxSize += IsoStream.CalculateClassSize(slConfigDescr); // slConfigDescr
            boxSize += IsoStream.CalculateClassSize(ipiPtr); // ipiPtr
            boxSize += IsoStream.CalculateClassSize(ipIDS); // ipIDS
            boxSize += IsoStream.CalculateClassSize(ipmpDescrPtr); // ipmpDescrPtr
            boxSize += IsoStream.CalculateClassSize(langDescr); // langDescr
            boxSize += IsoStream.CalculateClassSize(qosDescr); // qosDescr
            boxSize += IsoStream.CalculateClassSize(regDescr); // regDescr
            boxSize += IsoStream.CalculateClassSize(extDescr); // extDescr
            return boxSize;
        }
    }


    /*
    class SLConfigDescriptor extends BaseDescriptor : bit(8) tag=SLConfigDescrTag {
     bit(8) predefined;
     if (predefined==0) {
     bit(1) useAccessUnitStartFlag;
     bit(1) useAccessUnitEndFlag;
     bit(1) useRandomAccessPointFlag;
     bit(1) hasRandomAccessUnitsOnlyFlag;
     bit(1) usePaddingFlag;
     bit(1) useTimeStampsFlag;
     bit(1) useIdleFlag;
     bit(1) durationFlag;
     bit(32) timeStampResolution;
     bit(32) OCRResolution;
     bit(8) timeStampLength; // must be <= 64
     bit(8) OCRLength; // must be <= 64
     bit(8) AU_Length; // must be <= 32
     bit(8) instantBitrateLength;
     bit(4) degradationPriorityLength;
     bit(5) AU_seqNumLength; // must be <= 16
     bit(5) packetSeqNumLength; // must be <= 16
     bit(2) reserved=0b11;
     }
     if (durationFlag) {
     bit(32) timeScale;
     bit(16) accessUnitDuration;
     bit(16) compositionUnitDuration;
     }
     if (!useTimeStampsFlag) {
     bit(timeStampLength) startDecodingTimeStamp;
     bit(timeStampLength) startCompositionTimeStamp;
     }
     }
    */
    public class SLConfigDescriptor : BaseDescriptor
    {
        public byte Tag { get; set; } = DescriptorTags.SLConfigDescrTag;

        protected byte predefined;
        public byte Predefined { get { return this.predefined; } set { this.predefined = value; } }

        protected bool useAccessUnitStartFlag;
        public bool UseAccessUnitStartFlag { get { return this.useAccessUnitStartFlag; } set { this.useAccessUnitStartFlag = value; } }

        protected bool useAccessUnitEndFlag;
        public bool UseAccessUnitEndFlag { get { return this.useAccessUnitEndFlag; } set { this.useAccessUnitEndFlag = value; } }

        protected bool useRandomAccessPointFlag;
        public bool UseRandomAccessPointFlag { get { return this.useRandomAccessPointFlag; } set { this.useRandomAccessPointFlag = value; } }

        protected bool hasRandomAccessUnitsOnlyFlag;
        public bool HasRandomAccessUnitsOnlyFlag { get { return this.hasRandomAccessUnitsOnlyFlag; } set { this.hasRandomAccessUnitsOnlyFlag = value; } }

        protected bool usePaddingFlag;
        public bool UsePaddingFlag { get { return this.usePaddingFlag; } set { this.usePaddingFlag = value; } }

        protected bool useTimeStampsFlag;
        public bool UseTimeStampsFlag { get { return this.useTimeStampsFlag; } set { this.useTimeStampsFlag = value; } }

        protected bool useIdleFlag;
        public bool UseIdleFlag { get { return this.useIdleFlag; } set { this.useIdleFlag = value; } }

        protected bool durationFlag;
        public bool DurationFlag { get { return this.durationFlag; } set { this.durationFlag = value; } }

        protected uint timeStampResolution;
        public uint TimeStampResolution { get { return this.timeStampResolution; } set { this.timeStampResolution = value; } }

        protected uint OCRResolution;
        public uint _OCRResolution { get { return this.OCRResolution; } set { this.OCRResolution = value; } }

        protected byte timeStampLength;  //  must be <= 64
        public byte TimeStampLength { get { return this.timeStampLength; } set { this.timeStampLength = value; } }

        protected byte OCRLength;  //  must be <= 64
        public byte _OCRLength { get { return this.OCRLength; } set { this.OCRLength = value; } }

        protected byte AU_Length;  //  must be <= 32
        public byte AULength { get { return this.AU_Length; } set { this.AU_Length = value; } }

        protected byte instantBitrateLength;
        public byte InstantBitrateLength { get { return this.instantBitrateLength; } set { this.instantBitrateLength = value; } }

        protected byte degradationPriorityLength;
        public byte DegradationPriorityLength { get { return this.degradationPriorityLength; } set { this.degradationPriorityLength = value; } }

        protected byte AU_seqNumLength;  //  must be <= 16
        public byte AUSeqNumLength { get { return this.AU_seqNumLength; } set { this.AU_seqNumLength = value; } }

        protected byte packetSeqNumLength;  //  must be <= 16
        public byte PacketSeqNumLength { get { return this.packetSeqNumLength; } set { this.packetSeqNumLength = value; } }

        protected byte reserved = 0b11;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected uint timeScale;
        public uint TimeScale { get { return this.timeScale; } set { this.timeScale = value; } }

        protected ushort accessUnitDuration;
        public ushort AccessUnitDuration { get { return this.accessUnitDuration; } set { this.accessUnitDuration = value; } }

        protected ushort compositionUnitDuration;
        public ushort CompositionUnitDuration { get { return this.compositionUnitDuration; } set { this.compositionUnitDuration = value; } }

        protected byte[] startDecodingTimeStamp;
        public byte[] StartDecodingTimeStamp { get { return this.startDecodingTimeStamp; } set { this.startDecodingTimeStamp = value; } }

        protected byte[] startCompositionTimeStamp;
        public byte[] StartCompositionTimeStamp { get { return this.startCompositionTimeStamp; } set { this.startCompositionTimeStamp = value; } }

        public SLConfigDescriptor() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.predefined);

            if (predefined == 0)
            {
                boxSize += stream.ReadBit(out this.useAccessUnitStartFlag);
                boxSize += stream.ReadBit(out this.useAccessUnitEndFlag);
                boxSize += stream.ReadBit(out this.useRandomAccessPointFlag);
                boxSize += stream.ReadBit(out this.hasRandomAccessUnitsOnlyFlag);
                boxSize += stream.ReadBit(out this.usePaddingFlag);
                boxSize += stream.ReadBit(out this.useTimeStampsFlag);
                boxSize += stream.ReadBit(out this.useIdleFlag);
                boxSize += stream.ReadBit(out this.durationFlag);
                boxSize += stream.ReadUInt32(out this.timeStampResolution);
                boxSize += stream.ReadUInt32(out this.OCRResolution);
                boxSize += stream.ReadUInt8(out this.timeStampLength); // must be <= 64
                boxSize += stream.ReadUInt8(out this.OCRLength); // must be <= 64
                boxSize += stream.ReadUInt8(out this.AU_Length); // must be <= 32
                boxSize += stream.ReadUInt8(out this.instantBitrateLength);
                boxSize += stream.ReadBits(4, out this.degradationPriorityLength);
                boxSize += stream.ReadBits(5, out this.AU_seqNumLength); // must be <= 16
                boxSize += stream.ReadBits(5, out this.packetSeqNumLength); // must be <= 16
                boxSize += stream.ReadBits(2, out this.reserved);
            }

            if (durationFlag)
            {
                boxSize += stream.ReadUInt32(out this.timeScale);
                boxSize += stream.ReadUInt16(out this.accessUnitDuration);
                boxSize += stream.ReadUInt16(out this.compositionUnitDuration);
            }

            if (!useTimeStampsFlag)
            {
                boxSize += stream.ReadBytes(timeStampLength, out this.startDecodingTimeStamp);
                boxSize += stream.ReadBytes(timeStampLength, out this.startCompositionTimeStamp);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.predefined);

            if (predefined == 0)
            {
                boxSize += stream.WriteBit(this.useAccessUnitStartFlag);
                boxSize += stream.WriteBit(this.useAccessUnitEndFlag);
                boxSize += stream.WriteBit(this.useRandomAccessPointFlag);
                boxSize += stream.WriteBit(this.hasRandomAccessUnitsOnlyFlag);
                boxSize += stream.WriteBit(this.usePaddingFlag);
                boxSize += stream.WriteBit(this.useTimeStampsFlag);
                boxSize += stream.WriteBit(this.useIdleFlag);
                boxSize += stream.WriteBit(this.durationFlag);
                boxSize += stream.WriteUInt32(this.timeStampResolution);
                boxSize += stream.WriteUInt32(this.OCRResolution);
                boxSize += stream.WriteUInt8(this.timeStampLength); // must be <= 64
                boxSize += stream.WriteUInt8(this.OCRLength); // must be <= 64
                boxSize += stream.WriteUInt8(this.AU_Length); // must be <= 32
                boxSize += stream.WriteUInt8(this.instantBitrateLength);
                boxSize += stream.WriteBits(4, this.degradationPriorityLength);
                boxSize += stream.WriteBits(5, this.AU_seqNumLength); // must be <= 16
                boxSize += stream.WriteBits(5, this.packetSeqNumLength); // must be <= 16
                boxSize += stream.WriteBits(2, this.reserved);
            }

            if (durationFlag)
            {
                boxSize += stream.WriteUInt32(this.timeScale);
                boxSize += stream.WriteUInt16(this.accessUnitDuration);
                boxSize += stream.WriteUInt16(this.compositionUnitDuration);
            }

            if (!useTimeStampsFlag)
            {
                boxSize += stream.WriteBytes(timeStampLength, this.startDecodingTimeStamp);
                boxSize += stream.WriteBytes(timeStampLength, this.startCompositionTimeStamp);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // predefined

            if (predefined == 0)
            {
                boxSize += 1; // useAccessUnitStartFlag
                boxSize += 1; // useAccessUnitEndFlag
                boxSize += 1; // useRandomAccessPointFlag
                boxSize += 1; // hasRandomAccessUnitsOnlyFlag
                boxSize += 1; // usePaddingFlag
                boxSize += 1; // useTimeStampsFlag
                boxSize += 1; // useIdleFlag
                boxSize += 1; // durationFlag
                boxSize += 32; // timeStampResolution
                boxSize += 32; // OCRResolution
                boxSize += 8; // timeStampLength
                boxSize += 8; // OCRLength
                boxSize += 8; // AU_Length
                boxSize += 8; // instantBitrateLength
                boxSize += 4; // degradationPriorityLength
                boxSize += 5; // AU_seqNumLength
                boxSize += 5; // packetSeqNumLength
                boxSize += 2; // reserved
            }

            if (durationFlag)
            {
                boxSize += 32; // timeScale
                boxSize += 16; // accessUnitDuration
                boxSize += 16; // compositionUnitDuration
            }

            if (!useTimeStampsFlag)
            {
                boxSize += (ulong)timeStampLength; // startDecodingTimeStamp
                boxSize += (ulong)timeStampLength; // startCompositionTimeStamp
            }
            return boxSize;
        }
    }


    /*
    class DecoderConfigDescriptor extends BaseDescriptor : bit(8) tag=DecoderConfigDescrTag {
     bit(8) objectTypeIndication;
     bit(6) streamType;
     bit(1) upStream;
     const bit(1) reserved=1;
     bit(24) bufferSizeDB;
     bit(32) maxBitrate;
     bit(32) avgBitrate;
     DecoderSpecificInfo decSpecificInfo[0 .. 1];
     ProfileLevelIndicationIndexDescriptor profileLevelIndicationIndexDescr [0..255];
     }
    */
    public class DecoderConfigDescriptor : BaseDescriptor
    {
        public byte Tag { get; set; } = DescriptorTags.DecoderConfigDescrTag;

        protected byte objectTypeIndication;
        public byte ObjectTypeIndication { get { return this.objectTypeIndication; } set { this.objectTypeIndication = value; } }

        protected byte streamType;
        public byte StreamType { get { return this.streamType; } set { this.streamType = value; } }

        protected bool upStream;
        public bool UpStream { get { return this.upStream; } set { this.upStream = value; } }

        protected bool reserved = true;
        public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected uint bufferSizeDB;
        public uint BufferSizeDB { get { return this.bufferSizeDB; } set { this.bufferSizeDB = value; } }

        protected uint maxBitrate;
        public uint MaxBitrate { get { return this.maxBitrate; } set { this.maxBitrate = value; } }

        protected uint avgBitrate;
        public uint AvgBitrate { get { return this.avgBitrate; } set { this.avgBitrate = value; } }

        protected DecoderSpecificInfo[] decSpecificInfo;
        public DecoderSpecificInfo[] DecSpecificInfo { get { return this.decSpecificInfo; } set { this.decSpecificInfo = value; } }

        protected ProfileLevelIndicationIndexDescriptor[] profileLevelIndicationIndexDescr;
        public ProfileLevelIndicationIndexDescriptor[] ProfileLevelIndicationIndexDescr { get { return this.profileLevelIndicationIndexDescr; } set { this.profileLevelIndicationIndexDescr = value; } }

        public DecoderConfigDescriptor() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.objectTypeIndication);
            boxSize += stream.ReadBits(6, out this.streamType);
            boxSize += stream.ReadBit(out this.upStream);
            boxSize += stream.ReadBit(out this.reserved);
            boxSize += stream.ReadBits(24, out this.bufferSizeDB);
            boxSize += stream.ReadUInt32(out this.maxBitrate);
            boxSize += stream.ReadUInt32(out this.avgBitrate);
            boxSize += stream.ReadClass(out this.decSpecificInfo);
            boxSize += stream.ReadClass(out this.profileLevelIndicationIndexDescr);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.objectTypeIndication);
            boxSize += stream.WriteBits(6, this.streamType);
            boxSize += stream.WriteBit(this.upStream);
            boxSize += stream.WriteBit(this.reserved);
            boxSize += stream.WriteBits(24, this.bufferSizeDB);
            boxSize += stream.WriteUInt32(this.maxBitrate);
            boxSize += stream.WriteUInt32(this.avgBitrate);
            boxSize += stream.WriteClass(this.decSpecificInfo);
            boxSize += stream.WriteClass(this.profileLevelIndicationIndexDescr);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // objectTypeIndication
            boxSize += 6; // streamType
            boxSize += 1; // upStream
            boxSize += 1; // reserved
            boxSize += 24; // bufferSizeDB
            boxSize += 32; // maxBitrate
            boxSize += 32; // avgBitrate
            boxSize += IsoStream.CalculateClassSize(decSpecificInfo); // decSpecificInfo
            boxSize += IsoStream.CalculateClassSize(profileLevelIndicationIndexDescr); // profileLevelIndicationIndexDescr
            return boxSize;
        }
    }


    /*
    class ProfileLevelIndicationIndexDescriptor () extends BaseDescriptor
     : bit(8) ProfileLevelIndicationIndexDescrTag {
     bit(8) profileLevelIndicationIndex;
     }
    */
    public class ProfileLevelIndicationIndexDescriptor : BaseDescriptor
    {
        public byte Tag { get; set; } = DescriptorTags.ProfileLevelIndicationIndexDescrTag;

        protected byte profileLevelIndicationIndex;
        public byte ProfileLevelIndicationIndex { get { return this.profileLevelIndicationIndex; } set { this.profileLevelIndicationIndex = value; } }

        public ProfileLevelIndicationIndexDescriptor() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.profileLevelIndicationIndex);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.profileLevelIndicationIndex);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // profileLevelIndicationIndex
            return boxSize;
        }
    }


    /*
    class IPI_DescrPointer extends BaseDescriptor : bit(8) tag=IPI_DescrPointerTag {
     bit(16) IPI_ES_Id;
     }
    */
    public class IPI_DescrPointer : BaseDescriptor
    {
        public byte Tag { get; set; } = DescriptorTags.IPI_DescrPointerTag;

        protected ushort IPI_ES_Id;
        public ushort IPIESId { get { return this.IPI_ES_Id; } set { this.IPI_ES_Id = value; } }

        public IPI_DescrPointer() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt16(out this.IPI_ES_Id);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt16(this.IPI_ES_Id);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 16; // IPI_ES_Id
            return boxSize;
        }
    }


    /*
    abstract class IP_IdentificationDataSet extends BaseDescriptor
     : bit(8) tag=ContentIdentDescrTag..SupplContentIdentDescrTag
     {
     // empty. To be filled by classes extending this class.
     }
    */
    public class IP_IdentificationDataSet : BaseDescriptor
    {
        public byte TagMin { get; set; } = DescriptorTags.ContentIdentDescrTag;
        public byte TagMax { get; set; } = DescriptorTags.SupplContentIdentDescrTag;

        public IP_IdentificationDataSet() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            /*  empty. To be filled by classes extending this class. */
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            /*  empty. To be filled by classes extending this class. */
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            /*  empty. To be filled by classes extending this class. */
            return boxSize;
        }
    }


    /*
    class IPMP_DescriptorPointer extends BaseDescriptor : bit(8) tag=IPMP_DescrPointerTag {
     bit(8) IPMP_DescriptorID;
     }
    */
    public class IPMP_DescriptorPointer : BaseDescriptor
    {
        public byte Tag { get; set; } = DescriptorTags.IPMP_DescrPointerTag;

        protected byte IPMP_DescriptorID;
        public byte IPMPDescriptorID { get { return this.IPMP_DescriptorID; } set { this.IPMP_DescriptorID = value; } }

        public IPMP_DescriptorPointer() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.IPMP_DescriptorID);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.IPMP_DescriptorID);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // IPMP_DescriptorID
            return boxSize;
        }
    }


    /*
    abstract class OCI_Descriptor extends BaseDescriptor : bit(8) tag=OCIDescrTagStartRange..OCIDescrTagEndRange
    {
     // empty. To be filled by classes extending this class.
    }
    */
    public class OCI_Descriptor : BaseDescriptor
    {
        public byte TagMin { get; set; } = DescriptorTags.OCIDescrTagStartRange;
        public byte TagMax { get; set; } = DescriptorTags.OCIDescrTagEndRange;

        public OCI_Descriptor() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            /*  empty. To be filled by classes extending this class. */
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            /*  empty. To be filled by classes extending this class. */
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            /*  empty. To be filled by classes extending this class. */
            return boxSize;
        }
    }


    /*
    class LanguageDescriptor extends OCI_Descriptor : bit(8) tag=LanguageDescrTag {
     bit(24) languageCode;
     }
    */
    public class LanguageDescriptor : OCI_Descriptor
    {
        public byte Tag { get; set; } = DescriptorTags.LanguageDescrTag;

        protected uint languageCode;
        public uint LanguageCode { get { return this.languageCode; } set { this.languageCode = value; } }

        public LanguageDescriptor() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(24, out this.languageCode);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(24, this.languageCode);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 24; // languageCode
            return boxSize;
        }
    }


    /*
    class QoS_Descriptor extends BaseDescriptor : bit(8) tag=QoS_DescrTag {
     bit(8) predefined;
     if (predefined==0) {
     QoS_Qualifier qualifiers[];
     }
     }
    */
    public class QoS_Descriptor : BaseDescriptor
    {
        public byte Tag { get; set; } = DescriptorTags.QoS_DescrTag;

        protected byte predefined;
        public byte Predefined { get { return this.predefined; } set { this.predefined = value; } }

        protected QoS_Qualifier[] qualifiers;
        public QoS_Qualifier[] Qualifiers { get { return this.qualifiers; } set { this.qualifiers = value; } }

        public QoS_Descriptor() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.predefined);

            if (predefined == 0)
            {
                boxSize += stream.ReadClass(out this.qualifiers);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.predefined);

            if (predefined == 0)
            {
                boxSize += stream.WriteClass(this.qualifiers);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // predefined

            if (predefined == 0)
            {
                boxSize += IsoStream.CalculateClassSize(qualifiers); // qualifiers
            }
            return boxSize;
        }
    }


    /*
    abstract aligned(8) expandable(228-1) class QoS_Qualifier : bit(8) tag=0x01..0xff {
     // empty. To be filled by classes extending this class.
     }

    */
    public class QoS_Qualifier
    {
        public byte TagMin { get; set; } = 0x01;
        public byte TagMax { get; set; } = 0xff;

        public QoS_Qualifier() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            /*  empty. To be filled by classes extending this class. */
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            /*  empty. To be filled by classes extending this class. */
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            /*  empty. To be filled by classes extending this class. */
            return boxSize;
        }
    }


    /*
    class QoS_Qualifier_MAX_DELAY extends QoS_Qualifier : bit(8) tag=0x01 {
     unsigned int(32) MAX_DELAY;
     }

    */
    public class QoS_Qualifier_MAX_DELAY : QoS_Qualifier
    {
        public byte Tag { get; set; } = 0x01;

        protected uint MAX_DELAY;
        public uint MAXDELAY { get { return this.MAX_DELAY; } set { this.MAX_DELAY = value; } }

        public QoS_Qualifier_MAX_DELAY() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.MAX_DELAY);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.MAX_DELAY);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // MAX_DELAY
            return boxSize;
        }
    }


    /*
    class QoS_Qualifier_PREF_MAX_DELAY extends QoS_Qualifier : bit(8) tag=0x02 {
     unsigned int(32) PREF_MAX_DELAY;
     }

    */
    public class QoS_Qualifier_PREF_MAX_DELAY : QoS_Qualifier
    {
        public byte Tag { get; set; } = 0x02;

        protected uint PREF_MAX_DELAY;
        public uint PREFMAXDELAY { get { return this.PREF_MAX_DELAY; } set { this.PREF_MAX_DELAY = value; } }

        public QoS_Qualifier_PREF_MAX_DELAY() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.PREF_MAX_DELAY);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.PREF_MAX_DELAY);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // PREF_MAX_DELAY
            return boxSize;
        }
    }


    /*
    class QoS_Qualifier_LOSS_PROB extends QoS_Qualifier : bit(8) tag=0x03 {
     double(32) LOSS_PROB;
     }

    */
    public class QoS_Qualifier_LOSS_PROB : QoS_Qualifier
    {
        public byte Tag { get; set; } = 0x03;

        protected double LOSS_PROB;
        public double LOSSPROB { get { return this.LOSS_PROB; } set { this.LOSS_PROB = value; } }

        public QoS_Qualifier_LOSS_PROB() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadDouble32(out this.LOSS_PROB);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteDouble32(this.LOSS_PROB);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // LOSS_PROB
            return boxSize;
        }
    }


    /*
    class QoS_Qualifier_MAX_GAP_LOSS extends QoS_Qualifier : bit(8) tag=0x04 {
     unsigned int(32) MAX_GAP_LOSS;
     }

    */
    public class QoS_Qualifier_MAX_GAP_LOSS : QoS_Qualifier
    {
        public byte Tag { get; set; } = 0x04;

        protected uint MAX_GAP_LOSS;
        public uint MAXGAPLOSS { get { return this.MAX_GAP_LOSS; } set { this.MAX_GAP_LOSS = value; } }

        public QoS_Qualifier_MAX_GAP_LOSS() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.MAX_GAP_LOSS);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.MAX_GAP_LOSS);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // MAX_GAP_LOSS
            return boxSize;
        }
    }


    /*
    class QoS_Qualifier_MAX_AU_SIZE extends QoS_Qualifier : bit(8) tag=0x41 {
     unsigned int(32) MAX_AU_SIZE;
     }

    */
    public class QoS_Qualifier_MAX_AU_SIZE : QoS_Qualifier
    {
        public byte Tag { get; set; } = 0x41;

        protected uint MAX_AU_SIZE;
        public uint MAXAUSIZE { get { return this.MAX_AU_SIZE; } set { this.MAX_AU_SIZE = value; } }

        public QoS_Qualifier_MAX_AU_SIZE() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.MAX_AU_SIZE);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.MAX_AU_SIZE);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // MAX_AU_SIZE
            return boxSize;
        }
    }


    /*
    class QoS_Qualifier_AVG_AU_SIZE extends QoS_Qualifier : bit(8) tag=0x42 {
     unsigned int(32) AVG_AU_SIZE;
     }

    */
    public class QoS_Qualifier_AVG_AU_SIZE : QoS_Qualifier
    {
        public byte Tag { get; set; } = 0x42;

        protected uint AVG_AU_SIZE;
        public uint AVGAUSIZE { get { return this.AVG_AU_SIZE; } set { this.AVG_AU_SIZE = value; } }

        public QoS_Qualifier_AVG_AU_SIZE() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.AVG_AU_SIZE);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.AVG_AU_SIZE);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // AVG_AU_SIZE
            return boxSize;
        }
    }


    /*
    class QoS_Qualifier_MAX_AU_RATE extends QoS_Qualifier : bit(8) tag=0x43 {
     unsigned int(32) MAX_AU_RATE;
     }
    */
    public class QoS_Qualifier_MAX_AU_RATE : QoS_Qualifier
    {
        public byte Tag { get; set; } = 0x43;

        protected uint MAX_AU_RATE;
        public uint MAXAURATE { get { return this.MAX_AU_RATE; } set { this.MAX_AU_RATE = value; } }

        public QoS_Qualifier_MAX_AU_RATE() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.MAX_AU_RATE);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.MAX_AU_RATE);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // MAX_AU_RATE
            return boxSize;
        }
    }


    /*
    class RegistrationDescriptor extends BaseDescriptor : bit(8) tag=RegistrationDescrTag {
     bit(32) formatIdentifier;
     bit(8) additionalIdentificationInfo[sizeOfInstance-4];
     }
    */
    public class RegistrationDescriptor : BaseDescriptor
    {
        public byte Tag { get; set; } = DescriptorTags.RegistrationDescrTag;

        protected uint formatIdentifier;
        public uint FormatIdentifier { get { return this.formatIdentifier; } set { this.formatIdentifier = value; } }

        protected byte[] additionalIdentificationInfo;
        public byte[] AdditionalIdentificationInfo { get { return this.additionalIdentificationInfo; } set { this.additionalIdentificationInfo = value; } }

        public RegistrationDescriptor() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt32(out this.formatIdentifier);
            boxSize += stream.ReadBytes((ulong)(sizeOfInstance - 4), out this.additionalIdentificationInfo);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt32(this.formatIdentifier);
            boxSize += stream.WriteBytes((ulong)(sizeOfInstance - 4), this.additionalIdentificationInfo);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 32; // formatIdentifier
            boxSize += (ulong)(sizeOfInstance - 4); // additionalIdentificationInfo
            return boxSize;
        }
    }


    /*
    abstract class ExtensionDescriptor extends BaseDescriptor : bit(8) tag=ExtDescrTagStartRange..ExtDescrTagEndRange {
     // empty. To be filled by classes extending this class.
     }
    */
    public class ExtensionDescriptor : BaseDescriptor
    {
        public byte TagMin { get; set; } = DescriptorTags.ExtDescrTagStartRange;
        public byte TagMax { get; set; } = DescriptorTags.ExtDescrTagEndRange;

        public ExtensionDescriptor() : base()
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            /*  empty. To be filled by classes extending this class. */
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            /*  empty. To be filled by classes extending this class. */
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            /*  empty. To be filled by classes extending this class. */
            return boxSize;
        }
    }


    /*
    class AudioSpecificConfig() {
      GetAudioObjectType() audioObjectType;
      bslbf(4) samplingFrequencyIndex;
      if(samplingFrequencyIndex == 0xf ) {
        uimsbf(24) samplingFrequency;
      }
      bslbf(4) channelConfiguration;
      sbrPresentFlag = -1;
      psPresentFlag = -1;

      if (audioObjectType == 5 || audioObjectType == 29) {
        extensionAudioObjectType = 5;
        sbrPresentFlag = 1;
        if (audioObjectType == 29) {
          psPresentFlag = 1;
        }
        uimsbf(4) extensionSamplingFrequencyIndex;
        if (extensionSamplingFrequencyIndex == 0xf)
          uimsbf(24) extensionSamplingFrequency;
        GetAudioObjectType() audioObjectType;
        if (audioObjectType == 22)
          uimsbf(4) extensionChannelConfiguration;
      }
      else {
        extensionAudioObjectType = 0;
      }
      switch (audioObjectType) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 6:
        case 7:
        case 17:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
          GASpecificConfig();
          break;
        case 8:
          CelpSpecificConfig();
          break;
        case 9:
          HvxcSpecificConfig();
          break;
        case 12:
          TTSSpecificConfig();
          break;
        case 13:
        case 14:
        case 15:
        case 16:
          StructuredAudioSpecificConfig();
          break;
        case 24:
          ErrorResilientCelpSpecificConfig();
          break;
        case 25:
          ErrorResilientHvxcSpecificConfig();
          break;
        case 26:
        case 27:
          ParametricSpecificConfig();
          break;
        case 28:
          SSCSpecificConfig();
          break;
        case 30:
          uimsbf(1) sacPayloadEmbedding;
          SpatialSpecificConfig();
          break;
        case 32:
        case 33:
        case 34:
          MPEG_1_2_SpecificConfig();
          break;
        case 35:
          DSTSpecificConfig();
          break;
        case 36:
          bslbf(5) fillBits;
          ALSSpecificConfig();
          break;
        case 37:
        case 38:
          SLSSpecificConfig();
          break;
        case 39:
          ELDSpecificConfig(channelConfiguration);
          break;
        case 40:
        case 41:
          SymbolicMusicSpecificConfig();
          break;
        default:
          /* reserved *//*
          break;
      }
      switch (audioObjectType) {
        case 17:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 39:
          bslbf(2) epConfig;
          if (epConfig == 2 || epConfig == 3) {
            ErrorProtectionSpecificConfig();
          }
          if (epConfig == 3) {
            bslbf(1) directMapping;
            if (!directMapping) {
              /* tbd *//*
            }
          }
          break;
      }
      if (extensionAudioObjectType != 5 && bits_to_decode() >= 16) {
        bslbf(11) syncExtensionType;
        if (syncExtensionType == 0x2b7) {
          GetAudioObjectType() extensionAudioObjectType;
          if (extensionAudioObjectType == 5) {
            uimsbf(1) sbrPresentFlag;
            if (sbrPresentFlag == 1) {
              uimsbf(4) extensionSamplingFrequencyIndex;
              if (extensionSamplingFrequencyIndex == 0xf) {
                uimsbf(24) extensionSamplingFrequency;
              }
              if (bits_to_decode() >= 12) {
                bslbf(11) syncExtensionType;
                if (syncExtensionType == 0x548) {
                  uimsbf(1) psPresentFlag;
                }
              }
            }
          }
          if (extensionAudioObjectType == 22) {
            uimsbf(1) sbrPresentFlag;
            if (sbrPresentFlag == 1) {
              uimsbf(4) extensionSamplingFrequencyIndex;
              if (extensionSamplingFrequencyIndex == 0xf) {
                uimsbf(24) extensionSamplingFrequency;
              }
            }
            uimsbf(4) extensionChannelConfiguration;
          }
        }
      }   
    }


    */
    public class AudioSpecificConfig
    {


        protected GetAudioObjectType audioObjectType;
        public GetAudioObjectType AudioObjectType { get { return this.audioObjectType; } set { this.audioObjectType = value; } }

        protected byte samplingFrequencyIndex;
        public byte SamplingFrequencyIndex { get { return this.samplingFrequencyIndex; } set { this.samplingFrequencyIndex = value; } }

        protected uint samplingFrequency;
        public uint SamplingFrequency { get { return this.samplingFrequency; } set { this.samplingFrequency = value; } }

        protected byte channelConfiguration;
        public byte ChannelConfiguration { get { return this.channelConfiguration; } set { this.channelConfiguration = value; } }

        protected byte extensionSamplingFrequencyIndex;
        public byte ExtensionSamplingFrequencyIndex { get { return this.extensionSamplingFrequencyIndex; } set { this.extensionSamplingFrequencyIndex = value; } }

        protected uint extensionSamplingFrequency;
        public uint ExtensionSamplingFrequency { get { return this.extensionSamplingFrequency; } set { this.extensionSamplingFrequency = value; } }

        protected GetAudioObjectType audioObjectType0;
        public GetAudioObjectType AudioObjectType0 { get { return this.audioObjectType0; } set { this.audioObjectType0 = value; } }

        protected byte extensionChannelConfiguration;
        public byte ExtensionChannelConfiguration { get { return this.extensionChannelConfiguration; } set { this.extensionChannelConfiguration = value; } }

        protected GASpecificConfig GASpecificConfig;
        public GASpecificConfig _GASpecificConfig { get { return this.GASpecificConfig; } set { this.GASpecificConfig = value; } }

        protected CelpSpecificConfig CelpSpecificConfig;
        public CelpSpecificConfig _CelpSpecificConfig { get { return this.CelpSpecificConfig; } set { this.CelpSpecificConfig = value; } }

        protected HvxcSpecificConfig HvxcSpecificConfig;
        public HvxcSpecificConfig _HvxcSpecificConfig { get { return this.HvxcSpecificConfig; } set { this.HvxcSpecificConfig = value; } }

        protected TTSSpecificConfig TTSSpecificConfig;
        public TTSSpecificConfig _TTSSpecificConfig { get { return this.TTSSpecificConfig; } set { this.TTSSpecificConfig = value; } }

        protected StructuredAudioSpecificConfig StructuredAudioSpecificConfig;
        public StructuredAudioSpecificConfig _StructuredAudioSpecificConfig { get { return this.StructuredAudioSpecificConfig; } set { this.StructuredAudioSpecificConfig = value; } }

        protected ErrorResilientCelpSpecificConfig ErrorResilientCelpSpecificConfig;
        public ErrorResilientCelpSpecificConfig _ErrorResilientCelpSpecificConfig { get { return this.ErrorResilientCelpSpecificConfig; } set { this.ErrorResilientCelpSpecificConfig = value; } }

        protected ErrorResilientHvxcSpecificConfig ErrorResilientHvxcSpecificConfig;
        public ErrorResilientHvxcSpecificConfig _ErrorResilientHvxcSpecificConfig { get { return this.ErrorResilientHvxcSpecificConfig; } set { this.ErrorResilientHvxcSpecificConfig = value; } }

        protected ParametricSpecificConfig ParametricSpecificConfig;
        public ParametricSpecificConfig _ParametricSpecificConfig { get { return this.ParametricSpecificConfig; } set { this.ParametricSpecificConfig = value; } }

        protected SSCSpecificConfig SSCSpecificConfig;
        public SSCSpecificConfig _SSCSpecificConfig { get { return this.SSCSpecificConfig; } set { this.SSCSpecificConfig = value; } }

        protected bool sacPayloadEmbedding;
        public bool SacPayloadEmbedding { get { return this.sacPayloadEmbedding; } set { this.sacPayloadEmbedding = value; } }

        protected SpatialSpecificConfig SpatialSpecificConfig;
        public SpatialSpecificConfig _SpatialSpecificConfig { get { return this.SpatialSpecificConfig; } set { this.SpatialSpecificConfig = value; } }

        protected MPEG_1_2_SpecificConfig MPEG_1_2_SpecificConfig;
        public MPEG_1_2_SpecificConfig MPEG12SpecificConfig { get { return this.MPEG_1_2_SpecificConfig; } set { this.MPEG_1_2_SpecificConfig = value; } }

        protected DSTSpecificConfig DSTSpecificConfig;
        public DSTSpecificConfig _DSTSpecificConfig { get { return this.DSTSpecificConfig; } set { this.DSTSpecificConfig = value; } }

        protected byte fillBits;
        public byte FillBits { get { return this.fillBits; } set { this.fillBits = value; } }

        protected ALSSpecificConfig ALSSpecificConfig;
        public ALSSpecificConfig _ALSSpecificConfig { get { return this.ALSSpecificConfig; } set { this.ALSSpecificConfig = value; } }

        protected SLSSpecificConfig SLSSpecificConfig;
        public SLSSpecificConfig _SLSSpecificConfig { get { return this.SLSSpecificConfig; } set { this.SLSSpecificConfig = value; } }

        protected ELDSpecificConfig ELDSpecificConfig;
        public ELDSpecificConfig _ELDSpecificConfig { get { return this.ELDSpecificConfig; } set { this.ELDSpecificConfig = value; } }

        protected SymbolicMusicSpecificConfig SymbolicMusicSpecificConfig;
        public SymbolicMusicSpecificConfig _SymbolicMusicSpecificConfig { get { return this.SymbolicMusicSpecificConfig; } set { this.SymbolicMusicSpecificConfig = value; } }

        protected byte epConfig;
        public byte EpConfig { get { return this.epConfig; } set { this.epConfig = value; } }

        protected ErrorProtectionSpecificConfig ErrorProtectionSpecificConfig;
        public ErrorProtectionSpecificConfig _ErrorProtectionSpecificConfig { get { return this.ErrorProtectionSpecificConfig; } set { this.ErrorProtectionSpecificConfig = value; } }

        protected bool directMapping;
        public bool DirectMapping { get { return this.directMapping; } set { this.directMapping = value; } }

        protected ushort syncExtensionType;
        public ushort SyncExtensionType { get { return this.syncExtensionType; } set { this.syncExtensionType = value; } }

        protected GetAudioObjectType extensionAudioObjectType;
        public GetAudioObjectType ExtensionAudioObjectType { get { return this.extensionAudioObjectType; } set { this.extensionAudioObjectType = value; } }

        protected bool sbrPresentFlag;
        public bool SbrPresentFlag { get { return this.sbrPresentFlag; } set { this.sbrPresentFlag = value; } }

        protected byte extensionSamplingFrequencyIndex0;
        public byte ExtensionSamplingFrequencyIndex0 { get { return this.extensionSamplingFrequencyIndex0; } set { this.extensionSamplingFrequencyIndex0 = value; } }

        protected uint extensionSamplingFrequency0;
        public uint ExtensionSamplingFrequency0 { get { return this.extensionSamplingFrequency0; } set { this.extensionSamplingFrequency0 = value; } }

        protected ushort syncExtensionType0;
        public ushort SyncExtensionType0 { get { return this.syncExtensionType0; } set { this.syncExtensionType0 = value; } }

        protected bool psPresentFlag;
        public bool PsPresentFlag { get { return this.psPresentFlag; } set { this.psPresentFlag = value; } }

        protected bool sbrPresentFlag0;
        public bool SbrPresentFlag0 { get { return this.sbrPresentFlag0; } set { this.sbrPresentFlag0 = value; } }

        protected byte extensionSamplingFrequencyIndex00;
        public byte ExtensionSamplingFrequencyIndex00 { get { return this.extensionSamplingFrequencyIndex00; } set { this.extensionSamplingFrequencyIndex00 = value; } }

        protected uint extensionSamplingFrequency00;
        public uint ExtensionSamplingFrequency00 { get { return this.extensionSamplingFrequency00; } set { this.extensionSamplingFrequency00 = value; } }

        protected byte extensionChannelConfiguration0;
        public byte ExtensionChannelConfiguration0 { get { return this.extensionChannelConfiguration0; } set { this.extensionChannelConfiguration0 = value; } }

        public AudioSpecificConfig() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadClass(out this.audioObjectType);
            boxSize += stream.ReadBslbf(4, out this.samplingFrequencyIndex);

            if (samplingFrequencyIndex == 0xf)
            {
                boxSize += stream.ReadUimsbf(24, out this.samplingFrequency);
            }
            boxSize += stream.ReadBslbf(4, out this.channelConfiguration);
            sbrPresentFlag = false;
            psPresentFlag = false;

            if (audioObjectType.AudioObjectType == 5 || audioObjectType.AudioObjectType == 29)
            {
                extensionAudioObjectType.AudioObjectType = 5;
                sbrPresentFlag = true;

                if (audioObjectType.AudioObjectType == 29)
                {
                    psPresentFlag = true;
                }
                boxSize += stream.ReadUimsbf(4, out this.extensionSamplingFrequencyIndex);

                if (extensionSamplingFrequencyIndex == 0xf)
                {
                    boxSize += stream.ReadUimsbf(24, out this.extensionSamplingFrequency);
                }
                boxSize += stream.ReadClass(out this.audioObjectType0);

                if (audioObjectType.AudioObjectType == 22)
                {
                    boxSize += stream.ReadUimsbf(4, out this.extensionChannelConfiguration);
                }
            }

            else
            {
                extensionAudioObjectType.AudioObjectType = 0;
            }

            switch (audioObjectType.AudioObjectType)
            {
                case 1:
                case 2:
                case 3:
                case 4:
                case 6:
                case 7:
                case 17:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                    boxSize += stream.ReadClass(out this.GASpecificConfig);
                    break;
                case 8:
                    boxSize += stream.ReadClass(out this.CelpSpecificConfig);
                    break;
                case 9:
                    boxSize += stream.ReadClass(out this.HvxcSpecificConfig);
                    break;
                case 12:
                    boxSize += stream.ReadClass(out this.TTSSpecificConfig);
                    break;
                case 13:
                case 14:
                case 15:
                case 16:
                    boxSize += stream.ReadClass(out this.StructuredAudioSpecificConfig);
                    break;
                case 24:
                    boxSize += stream.ReadClass(out this.ErrorResilientCelpSpecificConfig);
                    break;
                case 25:
                    boxSize += stream.ReadClass(out this.ErrorResilientHvxcSpecificConfig);
                    break;
                case 26:
                case 27:
                    boxSize += stream.ReadClass(out this.ParametricSpecificConfig);
                    break;
                case 28:
                    boxSize += stream.ReadClass(out this.SSCSpecificConfig);
                    break;
                case 30:
                    boxSize += stream.ReadUimsbf(out this.sacPayloadEmbedding);
                    boxSize += stream.ReadClass(out this.SpatialSpecificConfig);
                    break;
                case 32:
                case 33:
                case 34:
                    boxSize += stream.ReadClass(out this.MPEG_1_2_SpecificConfig);
                    break;
                case 35:
                    boxSize += stream.ReadClass(out this.DSTSpecificConfig);
                    break;
                case 36:
                    boxSize += stream.ReadBslbf(5, out this.fillBits);
                    boxSize += stream.ReadClass(out this.ALSSpecificConfig);
                    break;
                case 37:
                case 38:
                    boxSize += stream.ReadClass(out this.SLSSpecificConfig);
                    break;
                case 39:
                    boxSize += stream.ReadClass(out this.ELDSpecificConfig);
                    break;
                case 40:
                case 41:
                    boxSize += stream.ReadClass(out this.SymbolicMusicSpecificConfig);
                    break;
                default:
                    /* reserved */
                    break;
            }

            switch (audioObjectType.AudioObjectType)
            {
                case 17:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 39:
                    boxSize += stream.ReadBslbf(2, out this.epConfig);

                    if (epConfig == 2 || epConfig == 3)
                    {
                        boxSize += stream.ReadClass(out this.ErrorProtectionSpecificConfig);
                    }

                    if (epConfig == 3)
                    {
                        boxSize += stream.ReadBslbf(out this.directMapping);

                        if (!directMapping)
                        {
                            /*  tbd  */
                        }
                    }
                    break;
            }

            if (extensionAudioObjectType.AudioObjectType != 5 && IsoStream.BitsToDecode() >= 16)
            {
                boxSize += stream.ReadBslbf(11, out this.syncExtensionType);

                if (syncExtensionType == 0x2b7)
                {
                    boxSize += stream.ReadClass(out this.extensionAudioObjectType);

                    if (extensionAudioObjectType.AudioObjectType == 5)
                    {
                        boxSize += stream.ReadUimsbf(out this.sbrPresentFlag);

                        if (sbrPresentFlag == true)
                        {
                            boxSize += stream.ReadUimsbf(4, out this.extensionSamplingFrequencyIndex0);

                            if (extensionSamplingFrequencyIndex == 0xf)
                            {
                                boxSize += stream.ReadUimsbf(24, out this.extensionSamplingFrequency0);
                            }

                            if (IsoStream.BitsToDecode() >= 12)
                            {
                                boxSize += stream.ReadBslbf(11, out this.syncExtensionType0);

                                if (syncExtensionType == 0x548)
                                {
                                    boxSize += stream.ReadUimsbf(out this.psPresentFlag);
                                }
                            }
                        }
                    }

                    if (extensionAudioObjectType.AudioObjectType == 22)
                    {
                        boxSize += stream.ReadUimsbf(out this.sbrPresentFlag0);

                        if (sbrPresentFlag == true)
                        {
                            boxSize += stream.ReadUimsbf(4, out this.extensionSamplingFrequencyIndex00);

                            if (extensionSamplingFrequencyIndex == 0xf)
                            {
                                boxSize += stream.ReadUimsbf(24, out this.extensionSamplingFrequency00);
                            }
                        }
                        boxSize += stream.ReadUimsbf(4, out this.extensionChannelConfiguration0);
                    }
                }
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteClass(this.audioObjectType);
            boxSize += stream.WriteBslbf(4, this.samplingFrequencyIndex);

            if (samplingFrequencyIndex == 0xf)
            {
                boxSize += stream.WriteUimsbf(24, this.samplingFrequency);
            }
            boxSize += stream.WriteBslbf(4, this.channelConfiguration);
            sbrPresentFlag = false;
            psPresentFlag = false;

            if (audioObjectType.AudioObjectType == 5 || audioObjectType.AudioObjectType == 29)
            {
                extensionAudioObjectType.AudioObjectType = 5;
                sbrPresentFlag = true;

                if (audioObjectType.AudioObjectType == 29)
                {
                    psPresentFlag = true;
                }
                boxSize += stream.WriteUimsbf(4, this.extensionSamplingFrequencyIndex);

                if (extensionSamplingFrequencyIndex == 0xf)
                {
                    boxSize += stream.WriteUimsbf(24, this.extensionSamplingFrequency);
                }
                boxSize += stream.WriteClass(this.audioObjectType0);

                if (audioObjectType.AudioObjectType == 22)
                {
                    boxSize += stream.WriteUimsbf(4, this.extensionChannelConfiguration);
                }
            }

            else
            {
                extensionAudioObjectType.AudioObjectType = 0;
            }

            switch (audioObjectType.AudioObjectType)
            {
                case 1:
                case 2:
                case 3:
                case 4:
                case 6:
                case 7:
                case 17:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                    boxSize += stream.WriteClass(this.GASpecificConfig);
                    break;
                case 8:
                    boxSize += stream.WriteClass(this.CelpSpecificConfig);
                    break;
                case 9:
                    boxSize += stream.WriteClass(this.HvxcSpecificConfig);
                    break;
                case 12:
                    boxSize += stream.WriteClass(this.TTSSpecificConfig);
                    break;
                case 13:
                case 14:
                case 15:
                case 16:
                    boxSize += stream.WriteClass(this.StructuredAudioSpecificConfig);
                    break;
                case 24:
                    boxSize += stream.WriteClass(this.ErrorResilientCelpSpecificConfig);
                    break;
                case 25:
                    boxSize += stream.WriteClass(this.ErrorResilientHvxcSpecificConfig);
                    break;
                case 26:
                case 27:
                    boxSize += stream.WriteClass(this.ParametricSpecificConfig);
                    break;
                case 28:
                    boxSize += stream.WriteClass(this.SSCSpecificConfig);
                    break;
                case 30:
                    boxSize += stream.WriteUimsbf(this.sacPayloadEmbedding);
                    boxSize += stream.WriteClass(this.SpatialSpecificConfig);
                    break;
                case 32:
                case 33:
                case 34:
                    boxSize += stream.WriteClass(this.MPEG_1_2_SpecificConfig);
                    break;
                case 35:
                    boxSize += stream.WriteClass(this.DSTSpecificConfig);
                    break;
                case 36:
                    boxSize += stream.WriteBslbf(5, this.fillBits);
                    boxSize += stream.WriteClass(this.ALSSpecificConfig);
                    break;
                case 37:
                case 38:
                    boxSize += stream.WriteClass(this.SLSSpecificConfig);
                    break;
                case 39:
                    boxSize += stream.WriteClass(this.ELDSpecificConfig);
                    break;
                case 40:
                case 41:
                    boxSize += stream.WriteClass(this.SymbolicMusicSpecificConfig);
                    break;
                default:
                    /* reserved */
                    break;
            }

            switch (audioObjectType.AudioObjectType)
            {
                case 17:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 39:
                    boxSize += stream.WriteBslbf(2, this.epConfig);

                    if (epConfig == 2 || epConfig == 3)
                    {
                        boxSize += stream.WriteClass(this.ErrorProtectionSpecificConfig);
                    }

                    if (epConfig == 3)
                    {
                        boxSize += stream.WriteBslbf(this.directMapping);

                        if (!directMapping)
                        {
                            /*  tbd  */
                        }
                    }
                    break;
            }

            if (extensionAudioObjectType.AudioObjectType != 5 && IsoStream.BitsToDecode() >= 16)
            {
                boxSize += stream.WriteBslbf(11, this.syncExtensionType);

                if (syncExtensionType == 0x2b7)
                {
                    boxSize += stream.WriteClass(this.extensionAudioObjectType);

                    if (extensionAudioObjectType.AudioObjectType == 5)
                    {
                        boxSize += stream.WriteUimsbf(this.sbrPresentFlag);

                        if (sbrPresentFlag == true)
                        {
                            boxSize += stream.WriteUimsbf(4, this.extensionSamplingFrequencyIndex0);

                            if (extensionSamplingFrequencyIndex == 0xf)
                            {
                                boxSize += stream.WriteUimsbf(24, this.extensionSamplingFrequency0);
                            }

                            if (IsoStream.BitsToDecode() >= 12)
                            {
                                boxSize += stream.WriteBslbf(11, this.syncExtensionType0);

                                if (syncExtensionType == 0x548)
                                {
                                    boxSize += stream.WriteUimsbf(this.psPresentFlag);
                                }
                            }
                        }
                    }

                    if (extensionAudioObjectType.AudioObjectType == 22)
                    {
                        boxSize += stream.WriteUimsbf(this.sbrPresentFlag0);

                        if (sbrPresentFlag == true)
                        {
                            boxSize += stream.WriteUimsbf(4, this.extensionSamplingFrequencyIndex00);

                            if (extensionSamplingFrequencyIndex == 0xf)
                            {
                                boxSize += stream.WriteUimsbf(24, this.extensionSamplingFrequency00);
                            }
                        }
                        boxSize += stream.WriteUimsbf(4, this.extensionChannelConfiguration0);
                    }
                }
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += IsoStream.CalculateClassSize(audioObjectType); // audioObjectType
            boxSize += 4; // samplingFrequencyIndex

            if (samplingFrequencyIndex == 0xf)
            {
                boxSize += 24; // samplingFrequency
            }
            boxSize += 4; // channelConfiguration
            sbrPresentFlag = false;
            psPresentFlag = false;

            if (audioObjectType.AudioObjectType == 5 || audioObjectType.AudioObjectType == 29)
            {
                extensionAudioObjectType.AudioObjectType = 5;
                sbrPresentFlag = true;

                if (audioObjectType.AudioObjectType == 29)
                {
                    psPresentFlag = true;
                }
                boxSize += 4; // extensionSamplingFrequencyIndex

                if (extensionSamplingFrequencyIndex == 0xf)
                {
                    boxSize += 24; // extensionSamplingFrequency
                }
                boxSize += IsoStream.CalculateClassSize(audioObjectType0); // audioObjectType0

                if (audioObjectType.AudioObjectType == 22)
                {
                    boxSize += 4; // extensionChannelConfiguration
                }
            }

            else
            {
                extensionAudioObjectType.AudioObjectType = 0;
            }

            switch (audioObjectType.AudioObjectType)
            {
                case 1:
                case 2:
                case 3:
                case 4:
                case 6:
                case 7:
                case 17:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                    boxSize += IsoStream.CalculateClassSize(GASpecificConfig); // GASpecificConfig
                    break;
                case 8:
                    boxSize += IsoStream.CalculateClassSize(CelpSpecificConfig); // CelpSpecificConfig
                    break;
                case 9:
                    boxSize += IsoStream.CalculateClassSize(HvxcSpecificConfig); // HvxcSpecificConfig
                    break;
                case 12:
                    boxSize += IsoStream.CalculateClassSize(TTSSpecificConfig); // TTSSpecificConfig
                    break;
                case 13:
                case 14:
                case 15:
                case 16:
                    boxSize += IsoStream.CalculateClassSize(StructuredAudioSpecificConfig); // StructuredAudioSpecificConfig
                    break;
                case 24:
                    boxSize += IsoStream.CalculateClassSize(ErrorResilientCelpSpecificConfig); // ErrorResilientCelpSpecificConfig
                    break;
                case 25:
                    boxSize += IsoStream.CalculateClassSize(ErrorResilientHvxcSpecificConfig); // ErrorResilientHvxcSpecificConfig
                    break;
                case 26:
                case 27:
                    boxSize += IsoStream.CalculateClassSize(ParametricSpecificConfig); // ParametricSpecificConfig
                    break;
                case 28:
                    boxSize += IsoStream.CalculateClassSize(SSCSpecificConfig); // SSCSpecificConfig
                    break;
                    boxSize += boxSize += 1; // sacPayloadEmbedding
                    boxSize += IsoStream.CalculateClassSize(SpatialSpecificConfig); // SpatialSpecificConfig
                    break;
                case 32:
                case 33:
                case 34:
                    boxSize += IsoStream.CalculateClassSize(MPEG_1_2_SpecificConfig); // MPEG_1_2_SpecificConfig
                    break;
                case 35:
                    boxSize += IsoStream.CalculateClassSize(DSTSpecificConfig); // DSTSpecificConfig
                    break;
                    boxSize += boxSize += 5; // fillBits
                    boxSize += IsoStream.CalculateClassSize(ALSSpecificConfig); // ALSSpecificConfig
                    break;
                case 37:
                case 38:
                    boxSize += IsoStream.CalculateClassSize(SLSSpecificConfig); // SLSSpecificConfig
                    break;
                case 39:
                    boxSize += IsoStream.CalculateClassSize(ELDSpecificConfig); // ELDSpecificConfig
                    break;
                case 40:
                case 41:
                    boxSize += IsoStream.CalculateClassSize(SymbolicMusicSpecificConfig); // SymbolicMusicSpecificConfig
                    break;
                default:
                    /* reserved */
                    break;
            }

            switch (audioObjectType.AudioObjectType)
            {
                case 17:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 39:
                    boxSize += 2; // epConfig

                    if (epConfig == 2 || epConfig == 3)
                    {
                        boxSize += IsoStream.CalculateClassSize(ErrorProtectionSpecificConfig); // ErrorProtectionSpecificConfig
                    }

                    if (epConfig == 3)
                    {
                        boxSize += 1; // directMapping

                        if (!directMapping)
                        {
                            /*  tbd  */
                        }
                    }
                    break;
            }

            if (extensionAudioObjectType.AudioObjectType != 5 && IsoStream.BitsToDecode() >= 16)
            {
                boxSize += 11; // syncExtensionType

                if (syncExtensionType == 0x2b7)
                {
                    boxSize += IsoStream.CalculateClassSize(extensionAudioObjectType); // extensionAudioObjectType

                    if (extensionAudioObjectType.AudioObjectType == 5)
                    {
                        boxSize += 1; // sbrPresentFlag

                        if (sbrPresentFlag == true)
                        {
                            boxSize += 4; // extensionSamplingFrequencyIndex0

                            if (extensionSamplingFrequencyIndex == 0xf)
                            {
                                boxSize += 24; // extensionSamplingFrequency0
                            }

                            if (IsoStream.BitsToDecode() >= 12)
                            {
                                boxSize += 11; // syncExtensionType0

                                if (syncExtensionType == 0x548)
                                {
                                    boxSize += 1; // psPresentFlag
                                }
                            }
                        }
                    }

                    if (extensionAudioObjectType.AudioObjectType == 22)
                    {
                        boxSize += 1; // sbrPresentFlag0

                        if (sbrPresentFlag == true)
                        {
                            boxSize += 4; // extensionSamplingFrequencyIndex00

                            if (extensionSamplingFrequencyIndex == 0xf)
                            {
                                boxSize += 24; // extensionSamplingFrequency00
                            }
                        }
                        boxSize += 4; // extensionChannelConfiguration0
                    }
                }
            }
            return boxSize;
        }
    }


    /*
    class GetAudioObjectType()
    {
      uimsbf(5) audioObjectType;
      if (audioObjectType == 31) {
        uimsbf(6) audioObjectTypeExt;
        audioObjectType = 32 + audioObjectTypeExt;
      }
      return audioObjectType;
    }


    */
    public class GetAudioObjectType
    {


        protected byte audioObjectType;
        public byte AudioObjectType { get { return this.audioObjectType; } set { this.audioObjectType = value; } }

        protected byte audioObjectTypeExt;
        public byte AudioObjectTypeExt { get { return this.audioObjectTypeExt; } set { this.audioObjectTypeExt = value; } }

        public GetAudioObjectType() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUimsbf(5, out this.audioObjectType);

            if (audioObjectType == 31)
            {
                boxSize += stream.ReadUimsbf(6, out this.audioObjectTypeExt);
                audioObjectType = (byte)(32 + audioObjectTypeExt);
            }
            return audioObjectType;
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUimsbf(5, this.audioObjectType);

            if (audioObjectType == 31)
            {
                boxSize += stream.WriteUimsbf(6, this.audioObjectTypeExt);
                audioObjectType = (byte)(32 + audioObjectTypeExt);
            }
            return audioObjectType;
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 5; // audioObjectType

            if (audioObjectType == 31)
            {
                boxSize += 6; // audioObjectTypeExt
                audioObjectType = (byte)(32 + audioObjectTypeExt);
            }
            return audioObjectType;
            return boxSize;
        }
    }


    /*
    class GASpecificConfig(samplingFrequencyIndex, channelConfiguration, audioObjectType)
    {
      bslbf(1) frameLengthFlag;
      bslbf(1) dependsOnCoreCoder;
      if (dependsOnCoreCoder) {
        uimsbf(14) coreCoderDelay;
      }
      bslbf(1) extensionFlag;
      if (!channelConfiguration) {
        program_config_element();
      }
      if ((audioObjectType == 6) || (audioObjectType == 20)) {
        uimsbf(3) layerNr;
      }
      if (extensionFlag) {
        if (audioObjectType == 22) {
          bslbf(5) numOfSubFrame;
          bslbf(11) layer_length;
        }
        if (audioObjectType == 17 || audioObjectType == 19 ||
          audioObjectType == 20 || audioObjectType == 23) {

          bslbf(1) aacSectionDataResilienceFlag;
          bslbf(1) aacScalefactorDataResilienceFlag;
          bslbf(1) aacSpectralDataResilienceFlag;
        }
        bslbf(1) extensionFlag3;
        if (extensionFlag3) {
          /* tbd in version 3 *//*
        }
      }
    }


    */
    public class GASpecificConfig
    {


        protected bool frameLengthFlag;
        public bool FrameLengthFlag { get { return this.frameLengthFlag; } set { this.frameLengthFlag = value; } }

        protected bool dependsOnCoreCoder;
        public bool DependsOnCoreCoder { get { return this.dependsOnCoreCoder; } set { this.dependsOnCoreCoder = value; } }

        protected ushort coreCoderDelay;
        public ushort CoreCoderDelay { get { return this.coreCoderDelay; } set { this.coreCoderDelay = value; } }

        protected bool extensionFlag;
        public bool ExtensionFlag { get { return this.extensionFlag; } set { this.extensionFlag = value; } }

        protected program_config_element program_config_element;
        public program_config_element ProgramConfigElement { get { return this.program_config_element; } set { this.program_config_element = value; } }

        protected byte layerNr;
        public byte LayerNr { get { return this.layerNr; } set { this.layerNr = value; } }

        protected byte numOfSubFrame;
        public byte NumOfSubFrame { get { return this.numOfSubFrame; } set { this.numOfSubFrame = value; } }

        protected ushort layer_length;
        public ushort LayerLength { get { return this.layer_length; } set { this.layer_length = value; } }

        protected bool aacSectionDataResilienceFlag;
        public bool AacSectionDataResilienceFlag { get { return this.aacSectionDataResilienceFlag; } set { this.aacSectionDataResilienceFlag = value; } }

        protected bool aacScalefactorDataResilienceFlag;
        public bool AacScalefactorDataResilienceFlag { get { return this.aacScalefactorDataResilienceFlag; } set { this.aacScalefactorDataResilienceFlag = value; } }

        protected bool aacSpectralDataResilienceFlag;
        public bool AacSpectralDataResilienceFlag { get { return this.aacSpectralDataResilienceFlag; } set { this.aacSpectralDataResilienceFlag = value; } }

        protected bool extensionFlag3;
        public bool ExtensionFlag3 { get { return this.extensionFlag3; } set { this.extensionFlag3 = value; } }

        public GASpecificConfig(int samplingFrequencyIndex, int channelConfiguration, int audioObjectType) : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            GetAudioObjectType audioObjectType = null; // TODO: pass through ctor

            byte channelConfiguration = 0; // TODO: pass through ctor

            boxSize += stream.ReadBslbf(out this.frameLengthFlag);
            boxSize += stream.ReadBslbf(out this.dependsOnCoreCoder);

            if (dependsOnCoreCoder)
            {
                boxSize += stream.ReadUimsbf(14, out this.coreCoderDelay);
            }
            boxSize += stream.ReadBslbf(out this.extensionFlag);

            if (channelConfiguration == 0)
            {
                boxSize += stream.ReadClass(out this.program_config_element);
            }

            if ((audioObjectType.AudioObjectType == 6) || (audioObjectType.AudioObjectType == 20))
            {
                boxSize += stream.ReadUimsbf(3, out this.layerNr);
            }

            if (extensionFlag)
            {

                if (audioObjectType.AudioObjectType == 22)
                {
                    boxSize += stream.ReadBslbf(5, out this.numOfSubFrame);
                    boxSize += stream.ReadBslbf(11, out this.layer_length);
                }

                if (audioObjectType.AudioObjectType == 17 || audioObjectType.AudioObjectType == 19 ||
          audioObjectType.AudioObjectType == 20 || audioObjectType.AudioObjectType == 23)
                {
                    boxSize += stream.ReadBslbf(out this.aacSectionDataResilienceFlag);
                    boxSize += stream.ReadBslbf(out this.aacScalefactorDataResilienceFlag);
                    boxSize += stream.ReadBslbf(out this.aacSpectralDataResilienceFlag);
                }
                boxSize += stream.ReadBslbf(out this.extensionFlag3);

                if (extensionFlag3)
                {
                    /*  tbd in version 3  */
                }
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            GetAudioObjectType audioObjectType = null; // TODO: pass through ctor

            byte channelConfiguration = 0; // TODO: pass through ctor

            boxSize += stream.WriteBslbf(this.frameLengthFlag);
            boxSize += stream.WriteBslbf(this.dependsOnCoreCoder);

            if (dependsOnCoreCoder)
            {
                boxSize += stream.WriteUimsbf(14, this.coreCoderDelay);
            }
            boxSize += stream.WriteBslbf(this.extensionFlag);

            if (channelConfiguration == 0)
            {
                boxSize += stream.WriteClass(this.program_config_element);
            }

            if ((audioObjectType.AudioObjectType == 6) || (audioObjectType.AudioObjectType == 20))
            {
                boxSize += stream.WriteUimsbf(3, this.layerNr);
            }

            if (extensionFlag)
            {

                if (audioObjectType.AudioObjectType == 22)
                {
                    boxSize += stream.WriteBslbf(5, this.numOfSubFrame);
                    boxSize += stream.WriteBslbf(11, this.layer_length);
                }

                if (audioObjectType.AudioObjectType == 17 || audioObjectType.AudioObjectType == 19 ||
          audioObjectType.AudioObjectType == 20 || audioObjectType.AudioObjectType == 23)
                {
                    boxSize += stream.WriteBslbf(this.aacSectionDataResilienceFlag);
                    boxSize += stream.WriteBslbf(this.aacScalefactorDataResilienceFlag);
                    boxSize += stream.WriteBslbf(this.aacSpectralDataResilienceFlag);
                }
                boxSize += stream.WriteBslbf(this.extensionFlag3);

                if (extensionFlag3)
                {
                    /*  tbd in version 3  */
                }
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            GetAudioObjectType audioObjectType = null; // TODO: pass through ctor

            byte channelConfiguration = 0; // TODO: pass through ctor

            boxSize += 1; // frameLengthFlag
            boxSize += 1; // dependsOnCoreCoder

            if (dependsOnCoreCoder)
            {
                boxSize += 14; // coreCoderDelay
            }
            boxSize += 1; // extensionFlag

            if (channelConfiguration == 0)
            {
                boxSize += IsoStream.CalculateClassSize(program_config_element); // program_config_element
            }

            if ((audioObjectType.AudioObjectType == 6) || (audioObjectType.AudioObjectType == 20))
            {
                boxSize += 3; // layerNr
            }

            if (extensionFlag)
            {

                if (audioObjectType.AudioObjectType == 22)
                {
                    boxSize += 5; // numOfSubFrame
                    boxSize += 11; // layer_length
                }

                if (audioObjectType.AudioObjectType == 17 || audioObjectType.AudioObjectType == 19 ||
          audioObjectType.AudioObjectType == 20 || audioObjectType.AudioObjectType == 23)
                {
                    boxSize += 1; // aacSectionDataResilienceFlag
                    boxSize += 1; // aacScalefactorDataResilienceFlag
                    boxSize += 1; // aacSpectralDataResilienceFlag
                }
                boxSize += 1; // extensionFlag3

                if (extensionFlag3)
                {
                    /*  tbd in version 3  */
                }
            }
            return boxSize;
        }
    }


    /*
    class program_config_element()
    {
      uimsbf(4) element_instance_tag;
      uimsbf(2) object_type;
      uimsbf(4) sampling_frequency_index;
      uimsbf(4) num_front_channel_elements;
      uimsbf(4) num_side_channel_elements;
      uimsbf(4) num_back_channel_elements;
      uimsbf(2) num_lfe_channel_elements;
      uimsbf(3) num_assoc_data_elements;
      uimsbf(4) num_valid_cc_elements;
      uimsbf(1) mono_mixdown_present;
      if (mono_mixdown_present == 1)
        uimsbf(4) mono_mixdown_element_number;
      uimsbf(1) stereo_mixdown_present;
      if (stereo_mixdown_present == 1)
        uimsbf(4) stereo_mixdown_element_number;
      uimsbf(1) matrix_mixdown_idx_present;
      if (matrix_mixdown_idx_present == 1) {
        uimsbf(2) matrix_mixdown_idx;
        uimsbf(1) pseudo_surround_enable;
      }
      for (i = 0; i < num_front_channel_elements; i++) {
        bslbf(1) front_element_is_cpe[i];
        uimsbf(4) front_element_tag_select[i];
      }
      for (i = 0; i < num_side_channel_elements; i++) {
        bslbf(1) side_element_is_cpe[i];
        uimsbf(4) side_element_tag_select[i];
      }
      for (i = 0; i < num_back_channel_elements; i++) {
        bslbf(1) back_element_is_cpe[i];
        uimsbf(4) back_element_tag_select[i];
      }
      for (i = 0; i < num_lfe_channel_elements; i++)
        uimsbf(4) lfe_element_tag_select[i];
      for (i = 0; i < num_assoc_data_elements; i++)
        uimsbf(4) assoc_data_element_tag_select[i];
      for (i = 0; i < num_valid_cc_elements; i++) {
        uimsbf(1) cc_element_is_ind_sw[i];
        uimsbf(4) valid_cc_element_tag_select[i];
      }
      byte_alignment();  // Note 1 
      uimsbf(8) comment_field_bytes;
      for (i = 0; i < comment_field_bytes; i++)
        uimsbf(8) comment_field_data[i];
    }


    */
    public class program_config_element
    {


        protected byte element_instance_tag;
        public byte ElementInstanceTag { get { return this.element_instance_tag; } set { this.element_instance_tag = value; } }

        protected byte object_type;
        public byte ObjectType { get { return this.object_type; } set { this.object_type = value; } }

        protected byte sampling_frequency_index;
        public byte SamplingFrequencyIndex { get { return this.sampling_frequency_index; } set { this.sampling_frequency_index = value; } }

        protected byte num_front_channel_elements;
        public byte NumFrontChannelElements { get { return this.num_front_channel_elements; } set { this.num_front_channel_elements = value; } }

        protected byte num_side_channel_elements;
        public byte NumSideChannelElements { get { return this.num_side_channel_elements; } set { this.num_side_channel_elements = value; } }

        protected byte num_back_channel_elements;
        public byte NumBackChannelElements { get { return this.num_back_channel_elements; } set { this.num_back_channel_elements = value; } }

        protected byte num_lfe_channel_elements;
        public byte NumLfeChannelElements { get { return this.num_lfe_channel_elements; } set { this.num_lfe_channel_elements = value; } }

        protected byte num_assoc_data_elements;
        public byte NumAssocDataElements { get { return this.num_assoc_data_elements; } set { this.num_assoc_data_elements = value; } }

        protected byte num_valid_cc_elements;
        public byte NumValidCcElements { get { return this.num_valid_cc_elements; } set { this.num_valid_cc_elements = value; } }

        protected bool mono_mixdown_present;
        public bool MonoMixdownPresent { get { return this.mono_mixdown_present; } set { this.mono_mixdown_present = value; } }

        protected byte mono_mixdown_element_number;
        public byte MonoMixdownElementNumber { get { return this.mono_mixdown_element_number; } set { this.mono_mixdown_element_number = value; } }

        protected bool stereo_mixdown_present;
        public bool StereoMixdownPresent { get { return this.stereo_mixdown_present; } set { this.stereo_mixdown_present = value; } }

        protected byte stereo_mixdown_element_number;
        public byte StereoMixdownElementNumber { get { return this.stereo_mixdown_element_number; } set { this.stereo_mixdown_element_number = value; } }

        protected bool matrix_mixdown_idx_present;
        public bool MatrixMixdownIdxPresent { get { return this.matrix_mixdown_idx_present; } set { this.matrix_mixdown_idx_present = value; } }

        protected byte matrix_mixdown_idx;
        public byte MatrixMixdownIdx { get { return this.matrix_mixdown_idx; } set { this.matrix_mixdown_idx = value; } }

        protected bool pseudo_surround_enable;
        public bool PseudoSurroundEnable { get { return this.pseudo_surround_enable; } set { this.pseudo_surround_enable = value; } }

        protected byte[] front_element_is_cpe;
        public byte[] FrontElementIsCpe { get { return this.front_element_is_cpe; } set { this.front_element_is_cpe = value; } }

        protected byte[] front_element_tag_select;
        public byte[] FrontElementTagSelect { get { return this.front_element_tag_select; } set { this.front_element_tag_select = value; } }

        protected byte[] side_element_is_cpe;
        public byte[] SideElementIsCpe { get { return this.side_element_is_cpe; } set { this.side_element_is_cpe = value; } }

        protected byte[] side_element_tag_select;
        public byte[] SideElementTagSelect { get { return this.side_element_tag_select; } set { this.side_element_tag_select = value; } }

        protected byte[] back_element_is_cpe;
        public byte[] BackElementIsCpe { get { return this.back_element_is_cpe; } set { this.back_element_is_cpe = value; } }

        protected byte[] back_element_tag_select;
        public byte[] BackElementTagSelect { get { return this.back_element_tag_select; } set { this.back_element_tag_select = value; } }

        protected byte[] lfe_element_tag_select;
        public byte[] LfeElementTagSelect { get { return this.lfe_element_tag_select; } set { this.lfe_element_tag_select = value; } }

        protected byte[] assoc_data_element_tag_select;
        public byte[] AssocDataElementTagSelect { get { return this.assoc_data_element_tag_select; } set { this.assoc_data_element_tag_select = value; } }

        protected bool[] cc_element_is_ind_sw;
        public bool[] CcElementIsIndSw { get { return this.cc_element_is_ind_sw; } set { this.cc_element_is_ind_sw = value; } }

        protected byte[] valid_cc_element_tag_select;
        public byte[] ValidCcElementTagSelect { get { return this.valid_cc_element_tag_select; } set { this.valid_cc_element_tag_select = value; } }

        protected byte byte_alignment;  //  Note 1 
        public byte ByteAlignment { get { return this.byte_alignment; } set { this.byte_alignment = value; } }

        protected byte comment_field_bytes;
        public byte CommentFieldBytes { get { return this.comment_field_bytes; } set { this.comment_field_bytes = value; } }

        protected byte[] comment_field_data;
        public byte[] CommentFieldData { get { return this.comment_field_data; } set { this.comment_field_data = value; } }

        public program_config_element() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUimsbf(4, out this.element_instance_tag);
            boxSize += stream.ReadUimsbf(2, out this.object_type);
            boxSize += stream.ReadUimsbf(4, out this.sampling_frequency_index);
            boxSize += stream.ReadUimsbf(4, out this.num_front_channel_elements);
            boxSize += stream.ReadUimsbf(4, out this.num_side_channel_elements);
            boxSize += stream.ReadUimsbf(4, out this.num_back_channel_elements);
            boxSize += stream.ReadUimsbf(2, out this.num_lfe_channel_elements);
            boxSize += stream.ReadUimsbf(3, out this.num_assoc_data_elements);
            boxSize += stream.ReadUimsbf(4, out this.num_valid_cc_elements);
            boxSize += stream.ReadUimsbf(out this.mono_mixdown_present);

            if (mono_mixdown_present == true)
            {
                boxSize += stream.ReadUimsbf(4, out this.mono_mixdown_element_number);
            }
            boxSize += stream.ReadUimsbf(out this.stereo_mixdown_present);

            if (stereo_mixdown_present == true)
            {
                boxSize += stream.ReadUimsbf(4, out this.stereo_mixdown_element_number);
            }
            boxSize += stream.ReadUimsbf(out this.matrix_mixdown_idx_present);

            if (matrix_mixdown_idx_present == true)
            {
                boxSize += stream.ReadUimsbf(2, out this.matrix_mixdown_idx);
                boxSize += stream.ReadUimsbf(out this.pseudo_surround_enable);
            }

            for (int i = 0; i < num_front_channel_elements; i++)
            {
                boxSize += stream.ReadBslbf(1, out this.front_element_is_cpe[i]);
                boxSize += stream.ReadUimsbf(4, out this.front_element_tag_select[i]);
            }

            for (int i = 0; i < num_side_channel_elements; i++)
            {
                boxSize += stream.ReadBslbf(1, out this.side_element_is_cpe[i]);
                boxSize += stream.ReadUimsbf(4, out this.side_element_tag_select[i]);
            }

            for (int i = 0; i < num_back_channel_elements; i++)
            {
                boxSize += stream.ReadBslbf(1, out this.back_element_is_cpe[i]);
                boxSize += stream.ReadUimsbf(4, out this.back_element_tag_select[i]);
            }

            for (int i = 0; i < num_lfe_channel_elements; i++)
            {
                boxSize += stream.ReadUimsbf(4, out this.lfe_element_tag_select[i]);
            }

            for (int i = 0; i < num_assoc_data_elements; i++)
            {
                boxSize += stream.ReadUimsbf(4, out this.assoc_data_element_tag_select[i]);
            }

            for (int i = 0; i < num_valid_cc_elements; i++)
            {
                boxSize += stream.ReadUimsbf(out this.cc_element_is_ind_sw[i]);
                boxSize += stream.ReadUimsbf(4, out this.valid_cc_element_tag_select[i]);
            }
            boxSize += stream.ReadByteAlignment(out this.byte_alignment); // Note 1 
            boxSize += stream.ReadUimsbf(8, out this.comment_field_bytes);

            for (int i = 0; i < comment_field_bytes; i++)
            {
                boxSize += stream.ReadUimsbf(8, out this.comment_field_data[i]);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUimsbf(4, this.element_instance_tag);
            boxSize += stream.WriteUimsbf(2, this.object_type);
            boxSize += stream.WriteUimsbf(4, this.sampling_frequency_index);
            boxSize += stream.WriteUimsbf(4, this.num_front_channel_elements);
            boxSize += stream.WriteUimsbf(4, this.num_side_channel_elements);
            boxSize += stream.WriteUimsbf(4, this.num_back_channel_elements);
            boxSize += stream.WriteUimsbf(2, this.num_lfe_channel_elements);
            boxSize += stream.WriteUimsbf(3, this.num_assoc_data_elements);
            boxSize += stream.WriteUimsbf(4, this.num_valid_cc_elements);
            boxSize += stream.WriteUimsbf(this.mono_mixdown_present);

            if (mono_mixdown_present == true)
            {
                boxSize += stream.WriteUimsbf(4, this.mono_mixdown_element_number);
            }
            boxSize += stream.WriteUimsbf(this.stereo_mixdown_present);

            if (stereo_mixdown_present == true)
            {
                boxSize += stream.WriteUimsbf(4, this.stereo_mixdown_element_number);
            }
            boxSize += stream.WriteUimsbf(this.matrix_mixdown_idx_present);

            if (matrix_mixdown_idx_present == true)
            {
                boxSize += stream.WriteUimsbf(2, this.matrix_mixdown_idx);
                boxSize += stream.WriteUimsbf(this.pseudo_surround_enable);
            }

            for (int i = 0; i < num_front_channel_elements; i++)
            {
                boxSize += stream.WriteBslbf(1, this.front_element_is_cpe[i]);
                boxSize += stream.WriteUimsbf(4, this.front_element_tag_select[i]);
            }

            for (int i = 0; i < num_side_channel_elements; i++)
            {
                boxSize += stream.WriteBslbf(1, this.side_element_is_cpe[i]);
                boxSize += stream.WriteUimsbf(4, this.side_element_tag_select[i]);
            }

            for (int i = 0; i < num_back_channel_elements; i++)
            {
                boxSize += stream.WriteBslbf(1, this.back_element_is_cpe[i]);
                boxSize += stream.WriteUimsbf(4, this.back_element_tag_select[i]);
            }

            for (int i = 0; i < num_lfe_channel_elements; i++)
            {
                boxSize += stream.WriteUimsbf(4, this.lfe_element_tag_select[i]);
            }

            for (int i = 0; i < num_assoc_data_elements; i++)
            {
                boxSize += stream.WriteUimsbf(4, this.assoc_data_element_tag_select[i]);
            }

            for (int i = 0; i < num_valid_cc_elements; i++)
            {
                boxSize += stream.WriteUimsbf(this.cc_element_is_ind_sw[i]);
                boxSize += stream.WriteUimsbf(4, this.valid_cc_element_tag_select[i]);
            }
            boxSize += stream.WriteByteAlignment(this.byte_alignment); // Note 1 
            boxSize += stream.WriteUimsbf(8, this.comment_field_bytes);

            for (int i = 0; i < comment_field_bytes; i++)
            {
                boxSize += stream.WriteUimsbf(8, this.comment_field_data[i]);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 4; // element_instance_tag
            boxSize += 2; // object_type
            boxSize += 4; // sampling_frequency_index
            boxSize += 4; // num_front_channel_elements
            boxSize += 4; // num_side_channel_elements
            boxSize += 4; // num_back_channel_elements
            boxSize += 2; // num_lfe_channel_elements
            boxSize += 3; // num_assoc_data_elements
            boxSize += 4; // num_valid_cc_elements
            boxSize += 1; // mono_mixdown_present

            if (mono_mixdown_present == true)
            {
                boxSize += 4; // mono_mixdown_element_number
            }
            boxSize += 1; // stereo_mixdown_present

            if (stereo_mixdown_present == true)
            {
                boxSize += 4; // stereo_mixdown_element_number
            }
            boxSize += 1; // matrix_mixdown_idx_present

            if (matrix_mixdown_idx_present == true)
            {
                boxSize += 2; // matrix_mixdown_idx
                boxSize += 1; // pseudo_surround_enable
            }

            for (int i = 0; i < num_front_channel_elements; i++)
            {
                boxSize += 1; // front_element_is_cpe
                boxSize += 4; // front_element_tag_select
            }

            for (int i = 0; i < num_side_channel_elements; i++)
            {
                boxSize += 1; // side_element_is_cpe
                boxSize += 4; // side_element_tag_select
            }

            for (int i = 0; i < num_back_channel_elements; i++)
            {
                boxSize += 1; // back_element_is_cpe
                boxSize += 4; // back_element_tag_select
            }

            for (int i = 0; i < num_lfe_channel_elements; i++)
            {
                boxSize += 4; // lfe_element_tag_select
            }

            for (int i = 0; i < num_assoc_data_elements; i++)
            {
                boxSize += 4; // assoc_data_element_tag_select
            }

            for (int i = 0; i < num_valid_cc_elements; i++)
            {
                boxSize += 1; // cc_element_is_ind_sw
                boxSize += 4; // valid_cc_element_tag_select
            }
            boxSize += IsoStream.CalculateByteAlignmentSize(byte_alignment); // byte_alignment
            boxSize += 8; // comment_field_bytes

            for (int i = 0; i < comment_field_bytes; i++)
            {
                boxSize += 8; // comment_field_data
            }
            return boxSize;
        }
    }


    /*
    class CelpSpecificConfig(samplingFrequencyIndex)
    {
      uimsbf(1) isBaseLayer;
      if (isBaseLayer) {
        CelpHeader(samplingFrequencyIndex);
      }
      else {
        uimsbf(1) isBWSLayer;
        if (isBWSLayer) {
          CelpBWSenhHeader();
        }
        else {
          uimsbf(2) CELPBRSid;
        }
      }
    }


    */
    public class CelpSpecificConfig
    {


        protected bool isBaseLayer;
        public bool IsBaseLayer { get { return this.isBaseLayer; } set { this.isBaseLayer = value; } }

        protected CelpHeader CelpHeader;
        public CelpHeader _CelpHeader { get { return this.CelpHeader; } set { this.CelpHeader = value; } }

        protected bool isBWSLayer;
        public bool IsBWSLayer { get { return this.isBWSLayer; } set { this.isBWSLayer = value; } }

        protected CelpBWSenhHeader CelpBWSenhHeader;
        public CelpBWSenhHeader _CelpBWSenhHeader { get { return this.CelpBWSenhHeader; } set { this.CelpBWSenhHeader = value; } }

        protected byte CELPBRSid;
        public byte _CELPBRSid { get { return this.CELPBRSid; } set { this.CELPBRSid = value; } }

        public CelpSpecificConfig(int samplingFrequencyIndex) : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUimsbf(out this.isBaseLayer);

            if (isBaseLayer)
            {
                boxSize += stream.ReadClass(out this.CelpHeader);
            }

            else
            {
                boxSize += stream.ReadUimsbf(out this.isBWSLayer);

                if (isBWSLayer)
                {
                    boxSize += stream.ReadClass(out this.CelpBWSenhHeader);
                }

                else
                {
                    boxSize += stream.ReadUimsbf(2, out this.CELPBRSid);
                }
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUimsbf(this.isBaseLayer);

            if (isBaseLayer)
            {
                boxSize += stream.WriteClass(this.CelpHeader);
            }

            else
            {
                boxSize += stream.WriteUimsbf(this.isBWSLayer);

                if (isBWSLayer)
                {
                    boxSize += stream.WriteClass(this.CelpBWSenhHeader);
                }

                else
                {
                    boxSize += stream.WriteUimsbf(2, this.CELPBRSid);
                }
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 1; // isBaseLayer

            if (isBaseLayer)
            {
                boxSize += IsoStream.CalculateClassSize(CelpHeader); // CelpHeader
            }

            else
            {
                boxSize += 1; // isBWSLayer

                if (isBWSLayer)
                {
                    boxSize += IsoStream.CalculateClassSize(CelpBWSenhHeader); // CelpBWSenhHeader
                }

                else
                {
                    boxSize += 2; // CELPBRSid
                }
            }
            return boxSize;
        }
    }


    /*
    class CelpHeader(samplingFrequencyIndex)
    {
      uimsbf(1) ExcitationMode;
      uimsbf(1) SampleRateMode;
      uimsbf(1) FineRateControl;
      if (ExcitationMode == RPE) {
        uimsbf(3) RPE_Configuration;
      }
      if (ExcitationMode == MPE) {
        uimsbf(5) MPE_Configuration;
        uimsbf(2) NumEnhLayers;
        uimsbf(1) BandwidthScalabilityMode;
      }
    }


    */
    public class CelpHeader
    {


        protected bool ExcitationMode;
        public bool _ExcitationMode { get { return this.ExcitationMode; } set { this.ExcitationMode = value; } }

        protected bool SampleRateMode;
        public bool _SampleRateMode { get { return this.SampleRateMode; } set { this.SampleRateMode = value; } }

        protected bool FineRateControl;
        public bool _FineRateControl { get { return this.FineRateControl; } set { this.FineRateControl = value; } }

        protected byte RPE_Configuration;
        public byte RPEConfiguration { get { return this.RPE_Configuration; } set { this.RPE_Configuration = value; } }

        protected byte MPE_Configuration;
        public byte MPEConfiguration { get { return this.MPE_Configuration; } set { this.MPE_Configuration = value; } }

        protected byte NumEnhLayers;
        public byte _NumEnhLayers { get { return this.NumEnhLayers; } set { this.NumEnhLayers = value; } }

        protected bool BandwidthScalabilityMode;
        public bool _BandwidthScalabilityMode { get { return this.BandwidthScalabilityMode; } set { this.BandwidthScalabilityMode = value; } }

        public CelpHeader(int samplingFrequencyIndex) : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            const bool RPE = true;

            const bool MPE = false;

            boxSize += stream.ReadUimsbf(out this.ExcitationMode);
            boxSize += stream.ReadUimsbf(out this.SampleRateMode);
            boxSize += stream.ReadUimsbf(out this.FineRateControl);

            if (ExcitationMode == RPE)
            {
                boxSize += stream.ReadUimsbf(3, out this.RPE_Configuration);
            }

            if (ExcitationMode == MPE)
            {
                boxSize += stream.ReadUimsbf(5, out this.MPE_Configuration);
                boxSize += stream.ReadUimsbf(2, out this.NumEnhLayers);
                boxSize += stream.ReadUimsbf(out this.BandwidthScalabilityMode);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            const bool RPE = true;

            const bool MPE = false;

            boxSize += stream.WriteUimsbf(this.ExcitationMode);
            boxSize += stream.WriteUimsbf(this.SampleRateMode);
            boxSize += stream.WriteUimsbf(this.FineRateControl);

            if (ExcitationMode == RPE)
            {
                boxSize += stream.WriteUimsbf(3, this.RPE_Configuration);
            }

            if (ExcitationMode == MPE)
            {
                boxSize += stream.WriteUimsbf(5, this.MPE_Configuration);
                boxSize += stream.WriteUimsbf(2, this.NumEnhLayers);
                boxSize += stream.WriteUimsbf(this.BandwidthScalabilityMode);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            const bool RPE = true;

            const bool MPE = false;

            boxSize += 1; // ExcitationMode
            boxSize += 1; // SampleRateMode
            boxSize += 1; // FineRateControl

            if (ExcitationMode == RPE)
            {
                boxSize += 3; // RPE_Configuration
            }

            if (ExcitationMode == MPE)
            {
                boxSize += 5; // MPE_Configuration
                boxSize += 2; // NumEnhLayers
                boxSize += 1; // BandwidthScalabilityMode
            }
            return boxSize;
        }
    }


    /*
    class CelpBWSenhHeader()
    {
      uimsbf(2) BWS_configuration;
    }


    */
    public class CelpBWSenhHeader
    {


        protected byte BWS_configuration;
        public byte BWSConfiguration { get { return this.BWS_configuration; } set { this.BWS_configuration = value; } }

        public CelpBWSenhHeader() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUimsbf(2, out this.BWS_configuration);
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUimsbf(2, this.BWS_configuration);
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 2; // BWS_configuration
            return boxSize;
        }
    }


    /*
    class HvxcSpecificConfig() {
      uimsbf(1) isBaseLayer;
      if (isBaseLayer) {
        HVXCconfig();
      }
    }


    */
    public class HvxcSpecificConfig
    {


        protected bool isBaseLayer;
        public bool IsBaseLayer { get { return this.isBaseLayer; } set { this.isBaseLayer = value; } }

        protected HVXCconfig HVXCconfig;
        public HVXCconfig _HVXCconfig { get { return this.HVXCconfig; } set { this.HVXCconfig = value; } }

        public HvxcSpecificConfig() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUimsbf(out this.isBaseLayer);

            if (isBaseLayer)
            {
                boxSize += stream.ReadClass(out this.HVXCconfig);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUimsbf(this.isBaseLayer);

            if (isBaseLayer)
            {
                boxSize += stream.WriteClass(this.HVXCconfig);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 1; // isBaseLayer

            if (isBaseLayer)
            {
                boxSize += IsoStream.CalculateClassSize(HVXCconfig); // HVXCconfig
            }
            return boxSize;
        }
    }


    /*
    class HVXCconfig()
    {
      uimsbf(1) HVXCvarMode;
      uimsbf(2) HVXCrateMode;
      uimsbf(1) extensionFlag;
      if (extensionFlag) {
        // to be defined in MPEG-4 Version 2
      }
    }


    */
    public class HVXCconfig
    {


        protected bool HVXCvarMode;
        public bool _HVXCvarMode { get { return this.HVXCvarMode; } set { this.HVXCvarMode = value; } }

        protected byte HVXCrateMode;
        public byte _HVXCrateMode { get { return this.HVXCrateMode; } set { this.HVXCrateMode = value; } }

        protected bool extensionFlag;
        public bool ExtensionFlag { get { return this.extensionFlag; } set { this.extensionFlag = value; } }

        public HVXCconfig() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUimsbf(out this.HVXCvarMode);
            boxSize += stream.ReadUimsbf(2, out this.HVXCrateMode);
            boxSize += stream.ReadUimsbf(out this.extensionFlag);

            if (extensionFlag)
            {
                /*  to be defined in MPEG-4 Version 2 */
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUimsbf(this.HVXCvarMode);
            boxSize += stream.WriteUimsbf(2, this.HVXCrateMode);
            boxSize += stream.WriteUimsbf(this.extensionFlag);

            if (extensionFlag)
            {
                /*  to be defined in MPEG-4 Version 2 */
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 1; // HVXCvarMode
            boxSize += 2; // HVXCrateMode
            boxSize += 1; // extensionFlag

            if (extensionFlag)
            {
                /*  to be defined in MPEG-4 Version 2 */
            }
            return boxSize;
        }
    }


    /*
    class TTSSpecificConfig() {
        TTS_Sequence();
    }


    */
    public class TTSSpecificConfig
    {


        protected TTS_Sequence TTS_Sequence;
        public TTS_Sequence TTSSequence { get { return this.TTS_Sequence; } set { this.TTS_Sequence = value; } }

        public TTSSpecificConfig() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadClass(out this.TTS_Sequence);
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteClass(this.TTS_Sequence);
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += IsoStream.CalculateClassSize(TTS_Sequence); // TTS_Sequence
            return boxSize;
        }
    }


    /*
    class TTS_Sequence()
    {
      uimsbf(5) TTS_Sequence_ID;
      uimsbf(18) Language_Code;
      bslbf(1) Gender_Enable;
      bslbf(1) Age_Enable;
      bslbf(1) Speech_Rate_Enable;
      bslbf(1) Prosody_Enable;
      bslbf(1) Video_Enable;
      bslbf(1) Lip_Shape_Enable;
      bslbf(1) Trick_Mode_Enable;
    }


    */
    public class TTS_Sequence
    {


        protected byte TTS_Sequence_ID;
        public byte TTSSequenceID { get { return this.TTS_Sequence_ID; } set { this.TTS_Sequence_ID = value; } }

        protected uint Language_Code;
        public uint LanguageCode { get { return this.Language_Code; } set { this.Language_Code = value; } }

        protected bool Gender_Enable;
        public bool GenderEnable { get { return this.Gender_Enable; } set { this.Gender_Enable = value; } }

        protected bool Age_Enable;
        public bool AgeEnable { get { return this.Age_Enable; } set { this.Age_Enable = value; } }

        protected bool Speech_Rate_Enable;
        public bool SpeechRateEnable { get { return this.Speech_Rate_Enable; } set { this.Speech_Rate_Enable = value; } }

        protected bool Prosody_Enable;
        public bool ProsodyEnable { get { return this.Prosody_Enable; } set { this.Prosody_Enable = value; } }

        protected bool Video_Enable;
        public bool VideoEnable { get { return this.Video_Enable; } set { this.Video_Enable = value; } }

        protected bool Lip_Shape_Enable;
        public bool LipShapeEnable { get { return this.Lip_Shape_Enable; } set { this.Lip_Shape_Enable = value; } }

        protected bool Trick_Mode_Enable;
        public bool TrickModeEnable { get { return this.Trick_Mode_Enable; } set { this.Trick_Mode_Enable = value; } }

        public TTS_Sequence() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUimsbf(5, out this.TTS_Sequence_ID);
            boxSize += stream.ReadUimsbf(18, out this.Language_Code);
            boxSize += stream.ReadBslbf(out this.Gender_Enable);
            boxSize += stream.ReadBslbf(out this.Age_Enable);
            boxSize += stream.ReadBslbf(out this.Speech_Rate_Enable);
            boxSize += stream.ReadBslbf(out this.Prosody_Enable);
            boxSize += stream.ReadBslbf(out this.Video_Enable);
            boxSize += stream.ReadBslbf(out this.Lip_Shape_Enable);
            boxSize += stream.ReadBslbf(out this.Trick_Mode_Enable);
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUimsbf(5, this.TTS_Sequence_ID);
            boxSize += stream.WriteUimsbf(18, this.Language_Code);
            boxSize += stream.WriteBslbf(this.Gender_Enable);
            boxSize += stream.WriteBslbf(this.Age_Enable);
            boxSize += stream.WriteBslbf(this.Speech_Rate_Enable);
            boxSize += stream.WriteBslbf(this.Prosody_Enable);
            boxSize += stream.WriteBslbf(this.Video_Enable);
            boxSize += stream.WriteBslbf(this.Lip_Shape_Enable);
            boxSize += stream.WriteBslbf(this.Trick_Mode_Enable);
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 5; // TTS_Sequence_ID
            boxSize += 18; // Language_Code
            boxSize += 1; // Gender_Enable
            boxSize += 1; // Age_Enable
            boxSize += 1; // Speech_Rate_Enable
            boxSize += 1; // Prosody_Enable
            boxSize += 1; // Video_Enable
            boxSize += 1; // Lip_Shape_Enable
            boxSize += 1; // Trick_Mode_Enable
            return boxSize;
        }
    }


    /*
    class ErrorResilientCelpSpecificConfig(samplingFrequencyIndex)
    {
      uimsbf(1) isBaseLayer;
      if (isBaseLayer) {
        ER_SC_CelpHeader(samplingFrequencyIndex);
      }
      else {
        uimsbf(1) isBWSLayer;
        if (isBWSLayer) {
          CelpBWSenhHeader();
        }
        else {
          uimsbf(2) CELPBRSid;
        }
      }
    }


    */
    public class ErrorResilientCelpSpecificConfig
    {


        protected bool isBaseLayer;
        public bool IsBaseLayer { get { return this.isBaseLayer; } set { this.isBaseLayer = value; } }

        protected ER_SC_CelpHeader ER_SC_CelpHeader;
        public ER_SC_CelpHeader ERSCCelpHeader { get { return this.ER_SC_CelpHeader; } set { this.ER_SC_CelpHeader = value; } }

        protected bool isBWSLayer;
        public bool IsBWSLayer { get { return this.isBWSLayer; } set { this.isBWSLayer = value; } }

        protected CelpBWSenhHeader CelpBWSenhHeader;
        public CelpBWSenhHeader _CelpBWSenhHeader { get { return this.CelpBWSenhHeader; } set { this.CelpBWSenhHeader = value; } }

        protected byte CELPBRSid;
        public byte _CELPBRSid { get { return this.CELPBRSid; } set { this.CELPBRSid = value; } }

        public ErrorResilientCelpSpecificConfig(int samplingFrequencyIndex) : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUimsbf(out this.isBaseLayer);

            if (isBaseLayer)
            {
                boxSize += stream.ReadClass(out this.ER_SC_CelpHeader);
            }

            else
            {
                boxSize += stream.ReadUimsbf(out this.isBWSLayer);

                if (isBWSLayer)
                {
                    boxSize += stream.ReadClass(out this.CelpBWSenhHeader);
                }

                else
                {
                    boxSize += stream.ReadUimsbf(2, out this.CELPBRSid);
                }
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUimsbf(this.isBaseLayer);

            if (isBaseLayer)
            {
                boxSize += stream.WriteClass(this.ER_SC_CelpHeader);
            }

            else
            {
                boxSize += stream.WriteUimsbf(this.isBWSLayer);

                if (isBWSLayer)
                {
                    boxSize += stream.WriteClass(this.CelpBWSenhHeader);
                }

                else
                {
                    boxSize += stream.WriteUimsbf(2, this.CELPBRSid);
                }
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 1; // isBaseLayer

            if (isBaseLayer)
            {
                boxSize += IsoStream.CalculateClassSize(ER_SC_CelpHeader); // ER_SC_CelpHeader
            }

            else
            {
                boxSize += 1; // isBWSLayer

                if (isBWSLayer)
                {
                    boxSize += IsoStream.CalculateClassSize(CelpBWSenhHeader); // CelpBWSenhHeader
                }

                else
                {
                    boxSize += 2; // CELPBRSid
                }
            }
            return boxSize;
        }
    }


    /*
    class ER_SC_CelpHeader(samplingFrequencyIndex)
    {
      uimsbf(1) ExcitationMode;
      uimsbf(1) SampleRateMode;
      uimsbf(1) FineRateControl;
      uimsbf(1) SilenceCompression;
      if (ExcitationMode == RPE) {
        uimsbf(3) RPE_Configuration;
      }
      if (ExcitationMode == MPE) {
        uimsbf(5) MPE_Configuration;
        uimsbf(2) NumEnhLayers;
        uimsbf(1) BandwidthScalabilityMode;
      }
    }


    */
    public class ER_SC_CelpHeader
    {


        protected bool ExcitationMode;
        public bool _ExcitationMode { get { return this.ExcitationMode; } set { this.ExcitationMode = value; } }

        protected bool SampleRateMode;
        public bool _SampleRateMode { get { return this.SampleRateMode; } set { this.SampleRateMode = value; } }

        protected bool FineRateControl;
        public bool _FineRateControl { get { return this.FineRateControl; } set { this.FineRateControl = value; } }

        protected bool SilenceCompression;
        public bool _SilenceCompression { get { return this.SilenceCompression; } set { this.SilenceCompression = value; } }

        protected byte RPE_Configuration;
        public byte RPEConfiguration { get { return this.RPE_Configuration; } set { this.RPE_Configuration = value; } }

        protected byte MPE_Configuration;
        public byte MPEConfiguration { get { return this.MPE_Configuration; } set { this.MPE_Configuration = value; } }

        protected byte NumEnhLayers;
        public byte _NumEnhLayers { get { return this.NumEnhLayers; } set { this.NumEnhLayers = value; } }

        protected bool BandwidthScalabilityMode;
        public bool _BandwidthScalabilityMode { get { return this.BandwidthScalabilityMode; } set { this.BandwidthScalabilityMode = value; } }

        public ER_SC_CelpHeader(int samplingFrequencyIndex) : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            const bool RPE = true;

            const bool MPE = false;

            boxSize += stream.ReadUimsbf(out this.ExcitationMode);
            boxSize += stream.ReadUimsbf(out this.SampleRateMode);
            boxSize += stream.ReadUimsbf(out this.FineRateControl);
            boxSize += stream.ReadUimsbf(out this.SilenceCompression);

            if (ExcitationMode == RPE)
            {
                boxSize += stream.ReadUimsbf(3, out this.RPE_Configuration);
            }

            if (ExcitationMode == MPE)
            {
                boxSize += stream.ReadUimsbf(5, out this.MPE_Configuration);
                boxSize += stream.ReadUimsbf(2, out this.NumEnhLayers);
                boxSize += stream.ReadUimsbf(out this.BandwidthScalabilityMode);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            const bool RPE = true;

            const bool MPE = false;

            boxSize += stream.WriteUimsbf(this.ExcitationMode);
            boxSize += stream.WriteUimsbf(this.SampleRateMode);
            boxSize += stream.WriteUimsbf(this.FineRateControl);
            boxSize += stream.WriteUimsbf(this.SilenceCompression);

            if (ExcitationMode == RPE)
            {
                boxSize += stream.WriteUimsbf(3, this.RPE_Configuration);
            }

            if (ExcitationMode == MPE)
            {
                boxSize += stream.WriteUimsbf(5, this.MPE_Configuration);
                boxSize += stream.WriteUimsbf(2, this.NumEnhLayers);
                boxSize += stream.WriteUimsbf(this.BandwidthScalabilityMode);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            const bool RPE = true;

            const bool MPE = false;

            boxSize += 1; // ExcitationMode
            boxSize += 1; // SampleRateMode
            boxSize += 1; // FineRateControl
            boxSize += 1; // SilenceCompression

            if (ExcitationMode == RPE)
            {
                boxSize += 3; // RPE_Configuration
            }

            if (ExcitationMode == MPE)
            {
                boxSize += 5; // MPE_Configuration
                boxSize += 2; // NumEnhLayers
                boxSize += 1; // BandwidthScalabilityMode
            }
            return boxSize;
        }
    }


    /*
    class ErrorResilientHvxcSpecificConfig() {
      uimsbf(1) isBaseLayer;
      if (isBaseLayer) {
        ErHVXCconfig();
      }
    }


    */
    public class ErrorResilientHvxcSpecificConfig
    {


        protected bool isBaseLayer;
        public bool IsBaseLayer { get { return this.isBaseLayer; } set { this.isBaseLayer = value; } }

        protected ErHVXCconfig ErHVXCconfig;
        public ErHVXCconfig _ErHVXCconfig { get { return this.ErHVXCconfig; } set { this.ErHVXCconfig = value; } }

        public ErrorResilientHvxcSpecificConfig() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUimsbf(out this.isBaseLayer);

            if (isBaseLayer)
            {
                boxSize += stream.ReadClass(out this.ErHVXCconfig);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUimsbf(this.isBaseLayer);

            if (isBaseLayer)
            {
                boxSize += stream.WriteClass(this.ErHVXCconfig);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 1; // isBaseLayer

            if (isBaseLayer)
            {
                boxSize += IsoStream.CalculateClassSize(ErHVXCconfig); // ErHVXCconfig
            }
            return boxSize;
        }
    }


    /*
    class ErHVXCconfig()
    {
      uimsbf(1) HVXCvarMode;
      uimsbf(2) HVXCrateMode;
      uimsbf(1) extensionFlag;
      if (extensionFlag) {
        uimsbf(1) var_ScalableFlag;
      }
    }


    */
    public class ErHVXCconfig
    {


        protected bool HVXCvarMode;
        public bool _HVXCvarMode { get { return this.HVXCvarMode; } set { this.HVXCvarMode = value; } }

        protected byte HVXCrateMode;
        public byte _HVXCrateMode { get { return this.HVXCrateMode; } set { this.HVXCrateMode = value; } }

        protected bool extensionFlag;
        public bool ExtensionFlag { get { return this.extensionFlag; } set { this.extensionFlag = value; } }

        protected bool var_ScalableFlag;
        public bool VarScalableFlag { get { return this.var_ScalableFlag; } set { this.var_ScalableFlag = value; } }

        public ErHVXCconfig() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUimsbf(out this.HVXCvarMode);
            boxSize += stream.ReadUimsbf(2, out this.HVXCrateMode);
            boxSize += stream.ReadUimsbf(out this.extensionFlag);

            if (extensionFlag)
            {
                boxSize += stream.ReadUimsbf(out this.var_ScalableFlag);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUimsbf(this.HVXCvarMode);
            boxSize += stream.WriteUimsbf(2, this.HVXCrateMode);
            boxSize += stream.WriteUimsbf(this.extensionFlag);

            if (extensionFlag)
            {
                boxSize += stream.WriteUimsbf(this.var_ScalableFlag);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 1; // HVXCvarMode
            boxSize += 2; // HVXCrateMode
            boxSize += 1; // extensionFlag

            if (extensionFlag)
            {
                boxSize += 1; // var_ScalableFlag
            }
            return boxSize;
        }
    }


    /*
    class ParametricSpecificConfig()
    {
      uimsbf(1) isBaseLayer;
      if (isBaseLayer) {
        PARAconfig();
      }
      else {
        HILNenexConfig();
      }
    }


    */
    public class ParametricSpecificConfig
    {


        protected bool isBaseLayer;
        public bool IsBaseLayer { get { return this.isBaseLayer; } set { this.isBaseLayer = value; } }

        protected PARAconfig PARAconfig;
        public PARAconfig _PARAconfig { get { return this.PARAconfig; } set { this.PARAconfig = value; } }

        protected HILNenexConfig HILNenexConfig;
        public HILNenexConfig _HILNenexConfig { get { return this.HILNenexConfig; } set { this.HILNenexConfig = value; } }

        public ParametricSpecificConfig() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUimsbf(out this.isBaseLayer);

            if (isBaseLayer)
            {
                boxSize += stream.ReadClass(out this.PARAconfig);
            }

            else
            {
                boxSize += stream.ReadClass(out this.HILNenexConfig);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUimsbf(this.isBaseLayer);

            if (isBaseLayer)
            {
                boxSize += stream.WriteClass(this.PARAconfig);
            }

            else
            {
                boxSize += stream.WriteClass(this.HILNenexConfig);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 1; // isBaseLayer

            if (isBaseLayer)
            {
                boxSize += IsoStream.CalculateClassSize(PARAconfig); // PARAconfig
            }

            else
            {
                boxSize += IsoStream.CalculateClassSize(HILNenexConfig); // HILNenexConfig
            }
            return boxSize;
        }
    }


    /*
    class PARAconfig()
    {
      uimsbf(2) PARAmode;
      if (PARAmode != 1) {
        ErHVXCconfig();
      }
      if (PARAmode != 0) {
        HILNconfig();
      }
      uimsbf(1) PARAextensionFlag;
      if (PARAextensionFlag) {
        /* to be defined in MPEG-4 Phase 3 *//*
      }
    }


    */
    public class PARAconfig
    {


        protected byte PARAmode;
        public byte _PARAmode { get { return this.PARAmode; } set { this.PARAmode = value; } }

        protected ErHVXCconfig ErHVXCconfig;
        public ErHVXCconfig _ErHVXCconfig { get { return this.ErHVXCconfig; } set { this.ErHVXCconfig = value; } }

        protected HILNconfig HILNconfig;
        public HILNconfig _HILNconfig { get { return this.HILNconfig; } set { this.HILNconfig = value; } }

        protected bool PARAextensionFlag;
        public bool _PARAextensionFlag { get { return this.PARAextensionFlag; } set { this.PARAextensionFlag = value; } }

        public PARAconfig() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUimsbf(2, out this.PARAmode);

            if (PARAmode != 1)
            {
                boxSize += stream.ReadClass(out this.ErHVXCconfig);
            }

            if (PARAmode != 0)
            {
                boxSize += stream.ReadClass(out this.HILNconfig);
            }
            boxSize += stream.ReadUimsbf(out this.PARAextensionFlag);

            if (PARAextensionFlag)
            {
                /*  to be defined in MPEG-4 Phase 3  */
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUimsbf(2, this.PARAmode);

            if (PARAmode != 1)
            {
                boxSize += stream.WriteClass(this.ErHVXCconfig);
            }

            if (PARAmode != 0)
            {
                boxSize += stream.WriteClass(this.HILNconfig);
            }
            boxSize += stream.WriteUimsbf(this.PARAextensionFlag);

            if (PARAextensionFlag)
            {
                /*  to be defined in MPEG-4 Phase 3  */
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 2; // PARAmode

            if (PARAmode != 1)
            {
                boxSize += IsoStream.CalculateClassSize(ErHVXCconfig); // ErHVXCconfig
            }

            if (PARAmode != 0)
            {
                boxSize += IsoStream.CalculateClassSize(HILNconfig); // HILNconfig
            }
            boxSize += 1; // PARAextensionFlag

            if (PARAextensionFlag)
            {
                /*  to be defined in MPEG-4 Phase 3  */
            }
            return boxSize;
        }
    }


    /*
    class HILNconfig()
    {
      uimsbf(1) HILNquantMode;
      uimsbf(8) HILNmaxNumLine;
      uimsbf(4) HILNsampleRateCode;
      uimsbf(12) HILNframeLength;
      uimsbf(2) HILNcontMode;
    }


    */
    public class HILNconfig
    {


        protected bool HILNquantMode;
        public bool _HILNquantMode { get { return this.HILNquantMode; } set { this.HILNquantMode = value; } }

        protected byte HILNmaxNumLine;
        public byte _HILNmaxNumLine { get { return this.HILNmaxNumLine; } set { this.HILNmaxNumLine = value; } }

        protected byte HILNsampleRateCode;
        public byte _HILNsampleRateCode { get { return this.HILNsampleRateCode; } set { this.HILNsampleRateCode = value; } }

        protected ushort HILNframeLength;
        public ushort _HILNframeLength { get { return this.HILNframeLength; } set { this.HILNframeLength = value; } }

        protected byte HILNcontMode;
        public byte _HILNcontMode { get { return this.HILNcontMode; } set { this.HILNcontMode = value; } }

        public HILNconfig() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUimsbf(out this.HILNquantMode);
            boxSize += stream.ReadUimsbf(8, out this.HILNmaxNumLine);
            boxSize += stream.ReadUimsbf(4, out this.HILNsampleRateCode);
            boxSize += stream.ReadUimsbf(12, out this.HILNframeLength);
            boxSize += stream.ReadUimsbf(2, out this.HILNcontMode);
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUimsbf(this.HILNquantMode);
            boxSize += stream.WriteUimsbf(8, this.HILNmaxNumLine);
            boxSize += stream.WriteUimsbf(4, this.HILNsampleRateCode);
            boxSize += stream.WriteUimsbf(12, this.HILNframeLength);
            boxSize += stream.WriteUimsbf(2, this.HILNcontMode);
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 1; // HILNquantMode
            boxSize += 8; // HILNmaxNumLine
            boxSize += 4; // HILNsampleRateCode
            boxSize += 12; // HILNframeLength
            boxSize += 2; // HILNcontMode
            return boxSize;
        }
    }


    /*
    class HILNenexConfig()
    {
      uimsbf(1) HILNenhaLayer;
      if (HILNenhaLayer) {
        uimsbf(2) HILNenhaQuantMode;
      }
    }


    */
    public class HILNenexConfig
    {


        protected bool HILNenhaLayer;
        public bool _HILNenhaLayer { get { return this.HILNenhaLayer; } set { this.HILNenhaLayer = value; } }

        protected byte HILNenhaQuantMode;
        public byte _HILNenhaQuantMode { get { return this.HILNenhaQuantMode; } set { this.HILNenhaQuantMode = value; } }

        public HILNenexConfig() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUimsbf(out this.HILNenhaLayer);

            if (HILNenhaLayer)
            {
                boxSize += stream.ReadUimsbf(2, out this.HILNenhaQuantMode);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUimsbf(this.HILNenhaLayer);

            if (HILNenhaLayer)
            {
                boxSize += stream.WriteUimsbf(2, this.HILNenhaQuantMode);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 1; // HILNenhaLayer

            if (HILNenhaLayer)
            {
                boxSize += 2; // HILNenhaQuantMode
            }
            return boxSize;
        }
    }


    /*
    class SSCSpecificConfig(channelConfiguration)
    {
      uimsbf(2) decoder_level;
      uimsbf(4) update_rate;
      uimsbf(2) synthesis_method;
      if (channelConfiguration != 1) {
        uimsbf(2) mode_ext;
        if ((channelConfiguration == 2) && (mode_ext == 1)) {
          uimsbf(2) reserved;
        }
      }
    }


    */
    public class SSCSpecificConfig
    {


        protected byte decoder_level;
        public byte DecoderLevel { get { return this.decoder_level; } set { this.decoder_level = value; } }

        protected byte update_rate;
        public byte UpdateRate { get { return this.update_rate; } set { this.update_rate = value; } }

        protected byte synthesis_method;
        public byte SynthesisMethod { get { return this.synthesis_method; } set { this.synthesis_method = value; } }

        protected byte mode_ext;
        public byte ModeExt { get { return this.mode_ext; } set { this.mode_ext = value; } }

        protected byte reserved;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        public SSCSpecificConfig(int channelConfiguration) : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            int channelConfiguration = 0; // TODO: pass through ctor

            boxSize += stream.ReadUimsbf(2, out this.decoder_level);
            boxSize += stream.ReadUimsbf(4, out this.update_rate);
            boxSize += stream.ReadUimsbf(2, out this.synthesis_method);

            if (channelConfiguration != 1)
            {
                boxSize += stream.ReadUimsbf(2, out this.mode_ext);

                if ((channelConfiguration == 2) && (mode_ext == 1))
                {
                    boxSize += stream.ReadUimsbf(2, out this.reserved);
                }
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            int channelConfiguration = 0; // TODO: pass through ctor

            boxSize += stream.WriteUimsbf(2, this.decoder_level);
            boxSize += stream.WriteUimsbf(4, this.update_rate);
            boxSize += stream.WriteUimsbf(2, this.synthesis_method);

            if (channelConfiguration != 1)
            {
                boxSize += stream.WriteUimsbf(2, this.mode_ext);

                if ((channelConfiguration == 2) && (mode_ext == 1))
                {
                    boxSize += stream.WriteUimsbf(2, this.reserved);
                }
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            int channelConfiguration = 0; // TODO: pass through ctor

            boxSize += 2; // decoder_level
            boxSize += 4; // update_rate
            boxSize += 2; // synthesis_method

            if (channelConfiguration != 1)
            {
                boxSize += 2; // mode_ext

                if ((channelConfiguration == 2) && (mode_ext == 1))
                {
                    boxSize += 2; // reserved
                }
            }
            return boxSize;
        }
    }


    /*
    class MPEG_1_2_SpecificConfig()
    {
      bslbf(1) extension;
    }


    */
    public class MPEG_1_2_SpecificConfig
    {


        protected bool extension;
        public bool Extension { get { return this.extension; } set { this.extension = value; } }

        public MPEG_1_2_SpecificConfig() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadBslbf(out this.extension);
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteBslbf(this.extension);
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 1; // extension
            return boxSize;
        }
    }


    /*
    class DSTSpecificConfig(channelConfiguration) {
      uimsbf(1) DSDDST_Coded;
      uimsbf(14) N_Channels;
      uimsbf(1) reserved;
    }


    */
    public class DSTSpecificConfig
    {


        protected bool DSDDST_Coded;
        public bool DSDDSTCoded { get { return this.DSDDST_Coded; } set { this.DSDDST_Coded = value; } }

        protected ushort N_Channels;
        public ushort NChannels { get { return this.N_Channels; } set { this.N_Channels = value; } }

        protected bool reserved;
        public bool Reserved { get { return this.reserved; } set { this.reserved = value; } }

        public DSTSpecificConfig(int channelConfiguration) : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUimsbf(out this.DSDDST_Coded);
            boxSize += stream.ReadUimsbf(14, out this.N_Channels);
            boxSize += stream.ReadUimsbf(out this.reserved);
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUimsbf(this.DSDDST_Coded);
            boxSize += stream.WriteUimsbf(14, this.N_Channels);
            boxSize += stream.WriteUimsbf(this.reserved);
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 1; // DSDDST_Coded
            boxSize += 14; // N_Channels
            boxSize += 1; // reserved
            return boxSize;
        }
    }


    /*
    class ALSSpecificConfig()
    {
      uimsbf(32) als_id;
      uimsbf(32) samp_freq;
      uimsbf(32) samples;
      uimsbf(16) channels;
      uimsbf(3) file_type;
      uimsbf(3) resolution;
      uimsbf(1) floating;
      uimsbf(1) msb_first;
      uimsbf(16) frame_length;
      uimsbf(8) random_access;
      uimsbf(2) ra_flag;
      uimsbf(1) adapt_order;
      uimsbf(2) coef_table;
      uimsbf(1) long_term_prediction;
      uimsbf(10) max_order;
      uimsbf(2) block_switching;
      uimsbf(1) bgmc_mode;
      uimsbf(1) sb_part;
      uimsbf(1) joint_stereo;
      uimsbf(1) mc_coding;
      uimsbf(1) chan_config;
      uimsbf(1) chan_sort;
      uimsbf(1) crc_enabled;
      uimsbf(1) RLSLMS;
      uimsbf(5) reserved;
      uimsbf(1) aux_data_enabled;
      if (chan_config) {
        uimsbf(16) chan_config_info;
      }
      if (chan_sort) {
        for (c = 0; c <= channels; c++)
          uimsbf(1) chan_pos[c]; // 1..16 uimsbf 
      }
      bslbf(1) byte_align; // TODO: 0..7 bslbf 
      uimsbf(32) header_size;
      uimsbf(32) trailer_size;
      bslbf(header_size * 8) orig_header[];
      bslbf(trailer_size * 8) orig_trailer[];
      if (crc_enabled) {
        uimsbf(32) crc;
      }
      if ((ra_flag == 2) && (random_access > 0)) {
        for (f = 0; f < ((samples - 1) / (frame_length + 1)) + 1; f++) {
          uimsbf(32) ra_unit_size[f];
        }
      }
      if (aux_data_enabled) {
        uimsbf(32) aux_size;
        bslbf(aux_size * 8) aux_data[];
      }
    }


    */
    public class ALSSpecificConfig
    {


        protected uint als_id;
        public uint AlsId { get { return this.als_id; } set { this.als_id = value; } }

        protected uint samp_freq;
        public uint SampFreq { get { return this.samp_freq; } set { this.samp_freq = value; } }

        protected uint samples;
        public uint Samples { get { return this.samples; } set { this.samples = value; } }

        protected ushort channels;
        public ushort Channels { get { return this.channels; } set { this.channels = value; } }

        protected byte file_type;
        public byte FileType { get { return this.file_type; } set { this.file_type = value; } }

        protected byte resolution;
        public byte Resolution { get { return this.resolution; } set { this.resolution = value; } }

        protected bool floating;
        public bool Floating { get { return this.floating; } set { this.floating = value; } }

        protected bool msb_first;
        public bool MsbFirst { get { return this.msb_first; } set { this.msb_first = value; } }

        protected ushort frame_length;
        public ushort FrameLength { get { return this.frame_length; } set { this.frame_length = value; } }

        protected byte random_access;
        public byte RandomAccess { get { return this.random_access; } set { this.random_access = value; } }

        protected byte ra_flag;
        public byte RaFlag { get { return this.ra_flag; } set { this.ra_flag = value; } }

        protected bool adapt_order;
        public bool AdaptOrder { get { return this.adapt_order; } set { this.adapt_order = value; } }

        protected byte coef_table;
        public byte CoefTable { get { return this.coef_table; } set { this.coef_table = value; } }

        protected bool long_term_prediction;
        public bool LongTermPrediction { get { return this.long_term_prediction; } set { this.long_term_prediction = value; } }

        protected ushort max_order;
        public ushort MaxOrder { get { return this.max_order; } set { this.max_order = value; } }

        protected byte block_switching;
        public byte BlockSwitching { get { return this.block_switching; } set { this.block_switching = value; } }

        protected bool bgmc_mode;
        public bool BgmcMode { get { return this.bgmc_mode; } set { this.bgmc_mode = value; } }

        protected bool sb_part;
        public bool SbPart { get { return this.sb_part; } set { this.sb_part = value; } }

        protected bool joint_stereo;
        public bool JointStereo { get { return this.joint_stereo; } set { this.joint_stereo = value; } }

        protected bool mc_coding;
        public bool McCoding { get { return this.mc_coding; } set { this.mc_coding = value; } }

        protected bool chan_config;
        public bool ChanConfig { get { return this.chan_config; } set { this.chan_config = value; } }

        protected bool chan_sort;
        public bool ChanSort { get { return this.chan_sort; } set { this.chan_sort = value; } }

        protected bool crc_enabled;
        public bool CrcEnabled { get { return this.crc_enabled; } set { this.crc_enabled = value; } }

        protected bool RLSLMS;
        public bool _RLSLMS { get { return this.RLSLMS; } set { this.RLSLMS = value; } }

        protected byte reserved;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected bool aux_data_enabled;
        public bool AuxDataEnabled { get { return this.aux_data_enabled; } set { this.aux_data_enabled = value; } }

        protected ushort chan_config_info;
        public ushort ChanConfigInfo { get { return this.chan_config_info; } set { this.chan_config_info = value; } }

        protected bool[] chan_pos;  //  1..16 uimsbf 
        public bool[] ChanPos { get { return this.chan_pos; } set { this.chan_pos = value; } }

        protected bool byte_align;  //  TODO: 0..7 bslbf 
        public bool ByteAlign { get { return this.byte_align; } set { this.byte_align = value; } }

        protected uint header_size;
        public uint HeaderSize { get { return this.header_size; } set { this.header_size = value; } }

        protected uint trailer_size;
        public uint TrailerSize { get { return this.trailer_size; } set { this.trailer_size = value; } }

        protected byte[] orig_header;
        public byte[] OrigHeader { get { return this.orig_header; } set { this.orig_header = value; } }

        protected byte[] orig_trailer;
        public byte[] OrigTrailer { get { return this.orig_trailer; } set { this.orig_trailer = value; } }

        protected uint crc;
        public uint Crc { get { return this.crc; } set { this.crc = value; } }

        protected uint[] ra_unit_size;
        public uint[] RaUnitSize { get { return this.ra_unit_size; } set { this.ra_unit_size = value; } }

        protected uint aux_size;
        public uint AuxSize { get { return this.aux_size; } set { this.aux_size = value; } }

        protected byte[] aux_data;
        public byte[] AuxData { get { return this.aux_data; } set { this.aux_data = value; } }

        public ALSSpecificConfig() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUimsbf(32, out this.als_id);
            boxSize += stream.ReadUimsbf(32, out this.samp_freq);
            boxSize += stream.ReadUimsbf(32, out this.samples);
            boxSize += stream.ReadUimsbf(16, out this.channels);
            boxSize += stream.ReadUimsbf(3, out this.file_type);
            boxSize += stream.ReadUimsbf(3, out this.resolution);
            boxSize += stream.ReadUimsbf(out this.floating);
            boxSize += stream.ReadUimsbf(out this.msb_first);
            boxSize += stream.ReadUimsbf(16, out this.frame_length);
            boxSize += stream.ReadUimsbf(8, out this.random_access);
            boxSize += stream.ReadUimsbf(2, out this.ra_flag);
            boxSize += stream.ReadUimsbf(out this.adapt_order);
            boxSize += stream.ReadUimsbf(2, out this.coef_table);
            boxSize += stream.ReadUimsbf(out this.long_term_prediction);
            boxSize += stream.ReadUimsbf(10, out this.max_order);
            boxSize += stream.ReadUimsbf(2, out this.block_switching);
            boxSize += stream.ReadUimsbf(out this.bgmc_mode);
            boxSize += stream.ReadUimsbf(out this.sb_part);
            boxSize += stream.ReadUimsbf(out this.joint_stereo);
            boxSize += stream.ReadUimsbf(out this.mc_coding);
            boxSize += stream.ReadUimsbf(out this.chan_config);
            boxSize += stream.ReadUimsbf(out this.chan_sort);
            boxSize += stream.ReadUimsbf(out this.crc_enabled);
            boxSize += stream.ReadUimsbf(out this.RLSLMS);
            boxSize += stream.ReadUimsbf(5, out this.reserved);
            boxSize += stream.ReadUimsbf(out this.aux_data_enabled);

            if (chan_config)
            {
                boxSize += stream.ReadUimsbf(16, out this.chan_config_info);
            }

            if (chan_sort)
            {

                for (int c = 0; c <= channels; c++)
                {
                    boxSize += stream.ReadUimsbf(out this.chan_pos[c]); // 1..16 uimsbf 
                }
            }
            boxSize += stream.ReadBslbf(out this.byte_align); // TODO: 0..7 bslbf 
            boxSize += stream.ReadUimsbf(32, out this.header_size);
            boxSize += stream.ReadUimsbf(32, out this.trailer_size);
            boxSize += stream.ReadBslbf(header_size * 8, out this.orig_header);
            boxSize += stream.ReadBslbf(trailer_size * 8, out this.orig_trailer);

            if (crc_enabled)
            {
                boxSize += stream.ReadUimsbf(32, out this.crc);
            }

            if ((ra_flag == 2) && (random_access > 0))
            {

                for (int f = 0; f < ((samples - 1) / (frame_length + 1)) + 1; f++)
                {
                    boxSize += stream.ReadUimsbf(32, out this.ra_unit_size[f]);
                }
            }

            if (aux_data_enabled)
            {
                boxSize += stream.ReadUimsbf(32, out this.aux_size);
                boxSize += stream.ReadBslbf(aux_size * 8, out this.aux_data);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUimsbf(32, this.als_id);
            boxSize += stream.WriteUimsbf(32, this.samp_freq);
            boxSize += stream.WriteUimsbf(32, this.samples);
            boxSize += stream.WriteUimsbf(16, this.channels);
            boxSize += stream.WriteUimsbf(3, this.file_type);
            boxSize += stream.WriteUimsbf(3, this.resolution);
            boxSize += stream.WriteUimsbf(this.floating);
            boxSize += stream.WriteUimsbf(this.msb_first);
            boxSize += stream.WriteUimsbf(16, this.frame_length);
            boxSize += stream.WriteUimsbf(8, this.random_access);
            boxSize += stream.WriteUimsbf(2, this.ra_flag);
            boxSize += stream.WriteUimsbf(this.adapt_order);
            boxSize += stream.WriteUimsbf(2, this.coef_table);
            boxSize += stream.WriteUimsbf(this.long_term_prediction);
            boxSize += stream.WriteUimsbf(10, this.max_order);
            boxSize += stream.WriteUimsbf(2, this.block_switching);
            boxSize += stream.WriteUimsbf(this.bgmc_mode);
            boxSize += stream.WriteUimsbf(this.sb_part);
            boxSize += stream.WriteUimsbf(this.joint_stereo);
            boxSize += stream.WriteUimsbf(this.mc_coding);
            boxSize += stream.WriteUimsbf(this.chan_config);
            boxSize += stream.WriteUimsbf(this.chan_sort);
            boxSize += stream.WriteUimsbf(this.crc_enabled);
            boxSize += stream.WriteUimsbf(this.RLSLMS);
            boxSize += stream.WriteUimsbf(5, this.reserved);
            boxSize += stream.WriteUimsbf(this.aux_data_enabled);

            if (chan_config)
            {
                boxSize += stream.WriteUimsbf(16, this.chan_config_info);
            }

            if (chan_sort)
            {

                for (int c = 0; c <= channels; c++)
                {
                    boxSize += stream.WriteUimsbf(this.chan_pos[c]); // 1..16 uimsbf 
                }
            }
            boxSize += stream.WriteBslbf(this.byte_align); // TODO: 0..7 bslbf 
            boxSize += stream.WriteUimsbf(32, this.header_size);
            boxSize += stream.WriteUimsbf(32, this.trailer_size);
            boxSize += stream.WriteBslbf(header_size * 8, this.orig_header);
            boxSize += stream.WriteBslbf(trailer_size * 8, this.orig_trailer);

            if (crc_enabled)
            {
                boxSize += stream.WriteUimsbf(32, this.crc);
            }

            if ((ra_flag == 2) && (random_access > 0))
            {

                for (int f = 0; f < ((samples - 1) / (frame_length + 1)) + 1; f++)
                {
                    boxSize += stream.WriteUimsbf(32, this.ra_unit_size[f]);
                }
            }

            if (aux_data_enabled)
            {
                boxSize += stream.WriteUimsbf(32, this.aux_size);
                boxSize += stream.WriteBslbf(aux_size * 8, this.aux_data);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 32; // als_id
            boxSize += 32; // samp_freq
            boxSize += 32; // samples
            boxSize += 16; // channels
            boxSize += 3; // file_type
            boxSize += 3; // resolution
            boxSize += 1; // floating
            boxSize += 1; // msb_first
            boxSize += 16; // frame_length
            boxSize += 8; // random_access
            boxSize += 2; // ra_flag
            boxSize += 1; // adapt_order
            boxSize += 2; // coef_table
            boxSize += 1; // long_term_prediction
            boxSize += 10; // max_order
            boxSize += 2; // block_switching
            boxSize += 1; // bgmc_mode
            boxSize += 1; // sb_part
            boxSize += 1; // joint_stereo
            boxSize += 1; // mc_coding
            boxSize += 1; // chan_config
            boxSize += 1; // chan_sort
            boxSize += 1; // crc_enabled
            boxSize += 1; // RLSLMS
            boxSize += 5; // reserved
            boxSize += 1; // aux_data_enabled

            if (chan_config)
            {
                boxSize += 16; // chan_config_info
            }

            if (chan_sort)
            {

                for (int c = 0; c <= channels; c++)
                {
                    boxSize += 1; // chan_pos
                }
            }
            boxSize += 1; // byte_align
            boxSize += 32; // header_size
            boxSize += 32; // trailer_size
            boxSize += header_size * 8; // orig_header
            boxSize += trailer_size * 8; // orig_trailer

            if (crc_enabled)
            {
                boxSize += 32; // crc
            }

            if ((ra_flag == 2) && (random_access > 0))
            {

                for (int f = 0; f < ((samples - 1) / (frame_length + 1)) + 1; f++)
                {
                    boxSize += 32; // ra_unit_size
                }
            }

            if (aux_data_enabled)
            {
                boxSize += 32; // aux_size
                boxSize += aux_size * 8; // aux_data
            }
            return boxSize;
        }
    }


    /*
    class SLSSpecificConfig(samplingFrequencyIndex,
      channelConfiguration,
      audioObjectType)
    {
      uimsbf(3) pcmWordLength;
      uimsbf(1) aac_core_present;
      uimsbf(1) lle_main_stream;
      uimsbf(1) reserved_bit;
      uimsbf(3) frameLength;
      if (!channelConfiguration) {
        program_config_element();
      }
    }


    */
    public class SLSSpecificConfig
    {


        protected byte pcmWordLength;
        public byte PcmWordLength { get { return this.pcmWordLength; } set { this.pcmWordLength = value; } }

        protected bool aac_core_present;
        public bool AacCorePresent { get { return this.aac_core_present; } set { this.aac_core_present = value; } }

        protected bool lle_main_stream;
        public bool LleMainStream { get { return this.lle_main_stream; } set { this.lle_main_stream = value; } }

        protected bool reserved_bit;
        public bool ReservedBit { get { return this.reserved_bit; } set { this.reserved_bit = value; } }

        protected byte frameLength;
        public byte FrameLength { get { return this.frameLength; } set { this.frameLength = value; } }

        protected program_config_element program_config_element;
        public program_config_element ProgramConfigElement { get { return this.program_config_element; } set { this.program_config_element = value; } }

        public SLSSpecificConfig(int samplingFrequencyIndex, int channelConfiguration, int audioObjectType) : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            byte channelConfiguration = 0; // TODO: pass through ctor

            boxSize += stream.ReadUimsbf(3, out this.pcmWordLength);
            boxSize += stream.ReadUimsbf(out this.aac_core_present);
            boxSize += stream.ReadUimsbf(out this.lle_main_stream);
            boxSize += stream.ReadUimsbf(out this.reserved_bit);
            boxSize += stream.ReadUimsbf(3, out this.frameLength);

            if (channelConfiguration == 0)
            {
                boxSize += stream.ReadClass(out this.program_config_element);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            byte channelConfiguration = 0; // TODO: pass through ctor

            boxSize += stream.WriteUimsbf(3, this.pcmWordLength);
            boxSize += stream.WriteUimsbf(this.aac_core_present);
            boxSize += stream.WriteUimsbf(this.lle_main_stream);
            boxSize += stream.WriteUimsbf(this.reserved_bit);
            boxSize += stream.WriteUimsbf(3, this.frameLength);

            if (channelConfiguration == 0)
            {
                boxSize += stream.WriteClass(this.program_config_element);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            byte channelConfiguration = 0; // TODO: pass through ctor

            boxSize += 3; // pcmWordLength
            boxSize += 1; // aac_core_present
            boxSize += 1; // lle_main_stream
            boxSize += 1; // reserved_bit
            boxSize += 3; // frameLength

            if (channelConfiguration == 0)
            {
                boxSize += IsoStream.CalculateClassSize(program_config_element); // program_config_element
            }
            return boxSize;
        }
    }


    /*
    class ELDSpecificConfig(channelConfiguration)
    {
      bslbf(1) frameLengthFlag;
      bslbf(1) aacSectionDataResilienceFlag;
      bslbf(1) aacScalefactorDataResilienceFlag;
      bslbf(1) aacSpectralDataResilienceFlag;

      bslbf(1) ldSbrPresentFlag;
      if (ldSbrPresentFlag) {
        bslbf(1) ldSbrSamplingRate;
        bslbf(1) ldSbrCrcFlag;
        ld_sbr_header(channelConfiguration);
      }

      bslbf(4) eldExtType;
    while (eldExtType != ELDEXT_TERM) {
        uimsbf(4) eldExtLen;
        len = eldExtLen;
        if (eldExtLen == 15) {
          uimsbf(8) eldExtLenAdd;
          len += eldExtLenAdd;
        }
        if (eldExtLenAdd == 255) {
          uimsbf(16) eldExtLenAddAdd;
          len += eldExtLenAddAdd;
        }
        switch (eldExtType) {
          /* add future eld extension configs here *//*
          default:
            int cntt;
            for (cnt = 0; cnt < len; cnt++) {
               uimsbf(8) other_byte;
            }
            break;
        }
    bslbf(4) eldExtType;
      }
    }


    */
    public class ELDSpecificConfig
    {


        protected bool frameLengthFlag;
        public bool FrameLengthFlag { get { return this.frameLengthFlag; } set { this.frameLengthFlag = value; } }

        protected bool aacSectionDataResilienceFlag;
        public bool AacSectionDataResilienceFlag { get { return this.aacSectionDataResilienceFlag; } set { this.aacSectionDataResilienceFlag = value; } }

        protected bool aacScalefactorDataResilienceFlag;
        public bool AacScalefactorDataResilienceFlag { get { return this.aacScalefactorDataResilienceFlag; } set { this.aacScalefactorDataResilienceFlag = value; } }

        protected bool aacSpectralDataResilienceFlag;
        public bool AacSpectralDataResilienceFlag { get { return this.aacSpectralDataResilienceFlag; } set { this.aacSpectralDataResilienceFlag = value; } }

        protected bool ldSbrPresentFlag;
        public bool LdSbrPresentFlag { get { return this.ldSbrPresentFlag; } set { this.ldSbrPresentFlag = value; } }

        protected bool ldSbrSamplingRate;
        public bool LdSbrSamplingRate { get { return this.ldSbrSamplingRate; } set { this.ldSbrSamplingRate = value; } }

        protected bool ldSbrCrcFlag;
        public bool LdSbrCrcFlag { get { return this.ldSbrCrcFlag; } set { this.ldSbrCrcFlag = value; } }

        protected ld_sbr_header ld_sbr_header;
        public ld_sbr_header LdSbrHeader { get { return this.ld_sbr_header; } set { this.ld_sbr_header = value; } }

        protected byte eldExtType;
        public byte EldExtType { get { return this.eldExtType; } set { this.eldExtType = value; } }

        protected byte eldExtLen;
        public byte EldExtLen { get { return this.eldExtLen; } set { this.eldExtLen = value; } }

        protected byte eldExtLenAdd;
        public byte EldExtLenAdd { get { return this.eldExtLenAdd; } set { this.eldExtLenAdd = value; } }

        protected ushort eldExtLenAddAdd;
        public ushort EldExtLenAddAdd { get { return this.eldExtLenAddAdd; } set { this.eldExtLenAddAdd = value; } }

        protected byte other_byte;
        public byte OtherByte { get { return this.other_byte; } set { this.other_byte = value; } }

        protected byte eldExtType0;
        public byte EldExtType0 { get { return this.eldExtType0; } set { this.eldExtType0 = value; } }

        public ELDSpecificConfig(int channelConfiguration) : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            int len = 0;

            const byte ELDEXT_TERM = 0;

            boxSize += stream.ReadBslbf(out this.frameLengthFlag);
            boxSize += stream.ReadBslbf(out this.aacSectionDataResilienceFlag);
            boxSize += stream.ReadBslbf(out this.aacScalefactorDataResilienceFlag);
            boxSize += stream.ReadBslbf(out this.aacSpectralDataResilienceFlag);
            boxSize += stream.ReadBslbf(out this.ldSbrPresentFlag);

            if (ldSbrPresentFlag)
            {
                boxSize += stream.ReadBslbf(out this.ldSbrSamplingRate);
                boxSize += stream.ReadBslbf(out this.ldSbrCrcFlag);
                boxSize += stream.ReadClass(out this.ld_sbr_header);
            }
            boxSize += stream.ReadBslbf(4, out this.eldExtType);

            while (eldExtType != ELDEXT_TERM)
            {
                boxSize += stream.ReadUimsbf(4, out this.eldExtLen);
                len = eldExtLen;

                if (eldExtLen == 15)
                {
                    boxSize += stream.ReadUimsbf(8, out this.eldExtLenAdd);
                    len += eldExtLenAdd;
                }

                if (eldExtLenAdd == 255)
                {
                    boxSize += stream.ReadUimsbf(16, out this.eldExtLenAddAdd);
                    len += eldExtLenAddAdd;
                }

                switch (eldExtType)
                {
                    /*  add future eld extension configs here  */
                    default:
                        int cntt;

                        for (int cnt = 0; cnt < len; cnt++)
                        {
                            boxSize += stream.ReadUimsbf(8, out this.other_byte);
                        }
                        break;
                }
                boxSize += stream.ReadBslbf(4, out this.eldExtType0);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            int len = 0;

            const byte ELDEXT_TERM = 0;

            boxSize += stream.WriteBslbf(this.frameLengthFlag);
            boxSize += stream.WriteBslbf(this.aacSectionDataResilienceFlag);
            boxSize += stream.WriteBslbf(this.aacScalefactorDataResilienceFlag);
            boxSize += stream.WriteBslbf(this.aacSpectralDataResilienceFlag);
            boxSize += stream.WriteBslbf(this.ldSbrPresentFlag);

            if (ldSbrPresentFlag)
            {
                boxSize += stream.WriteBslbf(this.ldSbrSamplingRate);
                boxSize += stream.WriteBslbf(this.ldSbrCrcFlag);
                boxSize += stream.WriteClass(this.ld_sbr_header);
            }
            boxSize += stream.WriteBslbf(4, this.eldExtType);

            while (eldExtType != ELDEXT_TERM)
            {
                boxSize += stream.WriteUimsbf(4, this.eldExtLen);
                len = eldExtLen;

                if (eldExtLen == 15)
                {
                    boxSize += stream.WriteUimsbf(8, this.eldExtLenAdd);
                    len += eldExtLenAdd;
                }

                if (eldExtLenAdd == 255)
                {
                    boxSize += stream.WriteUimsbf(16, this.eldExtLenAddAdd);
                    len += eldExtLenAddAdd;
                }

                switch (eldExtType)
                {
                    /*  add future eld extension configs here  */
                    default:
                        int cntt;

                        for (int cnt = 0; cnt < len; cnt++)
                        {
                            boxSize += stream.WriteUimsbf(8, this.other_byte);
                        }
                        break;
                }
                boxSize += stream.WriteBslbf(4, this.eldExtType0);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            int len = 0;

            const byte ELDEXT_TERM = 0;

            boxSize += 1; // frameLengthFlag
            boxSize += 1; // aacSectionDataResilienceFlag
            boxSize += 1; // aacScalefactorDataResilienceFlag
            boxSize += 1; // aacSpectralDataResilienceFlag
            boxSize += 1; // ldSbrPresentFlag

            if (ldSbrPresentFlag)
            {
                boxSize += 1; // ldSbrSamplingRate
                boxSize += 1; // ldSbrCrcFlag
                boxSize += IsoStream.CalculateClassSize(ld_sbr_header); // ld_sbr_header
            }
            boxSize += 4; // eldExtType

            while (eldExtType != ELDEXT_TERM)
            {
                boxSize += 4; // eldExtLen
                len = eldExtLen;

                if (eldExtLen == 15)
                {
                    boxSize += 8; // eldExtLenAdd
                    len += eldExtLenAdd;
                }

                if (eldExtLenAdd == 255)
                {
                    boxSize += 16; // eldExtLenAddAdd
                    len += eldExtLenAddAdd;
                }

                switch (eldExtType)
                {
                    /*  add future eld extension configs here  */
                    default:
                        int cntt;

                        for (int cnt = 0; cnt < len; cnt++)
                        {
                            boxSize += 8; // other_byte
                        }
                        break;
                }
                boxSize += 4; // eldExtType0
            }
            return boxSize;
        }
    }


    /*
    class ld_sbr_header(channelConfiguration)
    {
      switch (channelConfiguration) {
        case 1:
        case 2:
          numSbrHeader = 1;
          break;
        case 3:
          numSbrHeader = 2;
          break;
        case 4:
        case 5:
        case 6:
          numSbrHeader = 3;
          break;
        case 7:
          numSbrHeader = 4;
          break;
        default:
          numSbrHeader = 0;
          break;
      }
      for (el = 0; el < numSbrHeader; el++) {
        sbr_header();
      }
    }


    */
    public class ld_sbr_header
    {


        protected sbr_header sbr_header;
        public sbr_header SbrHeader { get { return this.sbr_header; } set { this.sbr_header = value; } }

        public ld_sbr_header(int channelConfiguration) : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            int numSbrHeader = 0;

            int channelConfiguration = 0; // TODO: pass through ctor


            switch (channelConfiguration)
            {
                case 1:
                case 2:
                    numSbrHeader = 1;
                    break;
                case 3:
                    numSbrHeader = 2;
                    break;
                case 4:
                case 5:
                case 6:
                    numSbrHeader = 3;
                    break;
                case 7:
                    numSbrHeader = 4;
                    break;
                default:
                    numSbrHeader = 0;
                    break;
            }

            for (int el = 0; el < numSbrHeader; el++)
            {
                boxSize += stream.ReadClass(out this.sbr_header);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            int numSbrHeader = 0;

            int channelConfiguration = 0; // TODO: pass through ctor


            switch (channelConfiguration)
            {
                case 1:
                case 2:
                    numSbrHeader = 1;
                    break;
                case 3:
                    numSbrHeader = 2;
                    break;
                case 4:
                case 5:
                case 6:
                    numSbrHeader = 3;
                    break;
                case 7:
                    numSbrHeader = 4;
                    break;
                default:
                    numSbrHeader = 0;
                    break;
            }

            for (int el = 0; el < numSbrHeader; el++)
            {
                boxSize += stream.WriteClass(this.sbr_header);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            int numSbrHeader = 0;

            int channelConfiguration = 0; // TODO: pass through ctor


            switch (channelConfiguration)
            {
                case 1:
                case 2:
                    numSbrHeader = 1;
                    break;
                case 3:
                    numSbrHeader = 2;
                    break;
                case 4:
                case 5:
                case 6:
                    numSbrHeader = 3;
                    break;
                case 7:
                    numSbrHeader = 4;
                    break;
                default:
                    numSbrHeader = 0;
                    break;
            }

            for (int el = 0; el < numSbrHeader; el++)
            {
                boxSize += IsoStream.CalculateClassSize(sbr_header); // sbr_header
            }
            return boxSize;
        }
    }


    /*
    class sbr_header()
    {
      uimsbf(1) bs_amp_res;
      uimsbf(4) bs_start_freq;
      uimsbf(4) bs_stop_freq;
      uimsbf(3) bs_xover_band;
      uimsbf(2) bs_reserved;
      uimsbf(1) bs_header_extra_1;
      uimsbf(1) bs_header_extra_2;

      if (bs_header_extra_1) {
        uimsbf(2) bs_freq_scale;
        uimsbf(1) bs_alter_scale;
        uimsbf(2) bs_noise_bands;
      }

      if (bs_header_extra_2) {
        uimsbf(2) bs_limiter_bands;
        uimsbf(2) bs_limiter_gains;
        uimsbf(1) bs_interpol_freq;
        uimsbf(1) bs_smoothing_mode;
      }
    }


    */
    public class sbr_header
    {


        protected bool bs_amp_res;
        public bool BsAmpRes { get { return this.bs_amp_res; } set { this.bs_amp_res = value; } }

        protected byte bs_start_freq;
        public byte BsStartFreq { get { return this.bs_start_freq; } set { this.bs_start_freq = value; } }

        protected byte bs_stop_freq;
        public byte BsStopFreq { get { return this.bs_stop_freq; } set { this.bs_stop_freq = value; } }

        protected byte bs_xover_band;
        public byte BsXoverBand { get { return this.bs_xover_band; } set { this.bs_xover_band = value; } }

        protected byte bs_reserved;
        public byte BsReserved { get { return this.bs_reserved; } set { this.bs_reserved = value; } }

        protected bool bs_header_extra_1;
        public bool BsHeaderExtra1 { get { return this.bs_header_extra_1; } set { this.bs_header_extra_1 = value; } }

        protected bool bs_header_extra_2;
        public bool BsHeaderExtra2 { get { return this.bs_header_extra_2; } set { this.bs_header_extra_2 = value; } }

        protected byte bs_freq_scale;
        public byte BsFreqScale { get { return this.bs_freq_scale; } set { this.bs_freq_scale = value; } }

        protected bool bs_alter_scale;
        public bool BsAlterScale { get { return this.bs_alter_scale; } set { this.bs_alter_scale = value; } }

        protected byte bs_noise_bands;
        public byte BsNoiseBands { get { return this.bs_noise_bands; } set { this.bs_noise_bands = value; } }

        protected byte bs_limiter_bands;
        public byte BsLimiterBands { get { return this.bs_limiter_bands; } set { this.bs_limiter_bands = value; } }

        protected byte bs_limiter_gains;
        public byte BsLimiterGains { get { return this.bs_limiter_gains; } set { this.bs_limiter_gains = value; } }

        protected bool bs_interpol_freq;
        public bool BsInterpolFreq { get { return this.bs_interpol_freq; } set { this.bs_interpol_freq = value; } }

        protected bool bs_smoothing_mode;
        public bool BsSmoothingMode { get { return this.bs_smoothing_mode; } set { this.bs_smoothing_mode = value; } }

        public sbr_header() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUimsbf(out this.bs_amp_res);
            boxSize += stream.ReadUimsbf(4, out this.bs_start_freq);
            boxSize += stream.ReadUimsbf(4, out this.bs_stop_freq);
            boxSize += stream.ReadUimsbf(3, out this.bs_xover_band);
            boxSize += stream.ReadUimsbf(2, out this.bs_reserved);
            boxSize += stream.ReadUimsbf(out this.bs_header_extra_1);
            boxSize += stream.ReadUimsbf(out this.bs_header_extra_2);

            if (bs_header_extra_1)
            {
                boxSize += stream.ReadUimsbf(2, out this.bs_freq_scale);
                boxSize += stream.ReadUimsbf(out this.bs_alter_scale);
                boxSize += stream.ReadUimsbf(2, out this.bs_noise_bands);
            }

            if (bs_header_extra_2)
            {
                boxSize += stream.ReadUimsbf(2, out this.bs_limiter_bands);
                boxSize += stream.ReadUimsbf(2, out this.bs_limiter_gains);
                boxSize += stream.ReadUimsbf(out this.bs_interpol_freq);
                boxSize += stream.ReadUimsbf(out this.bs_smoothing_mode);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUimsbf(this.bs_amp_res);
            boxSize += stream.WriteUimsbf(4, this.bs_start_freq);
            boxSize += stream.WriteUimsbf(4, this.bs_stop_freq);
            boxSize += stream.WriteUimsbf(3, this.bs_xover_band);
            boxSize += stream.WriteUimsbf(2, this.bs_reserved);
            boxSize += stream.WriteUimsbf(this.bs_header_extra_1);
            boxSize += stream.WriteUimsbf(this.bs_header_extra_2);

            if (bs_header_extra_1)
            {
                boxSize += stream.WriteUimsbf(2, this.bs_freq_scale);
                boxSize += stream.WriteUimsbf(this.bs_alter_scale);
                boxSize += stream.WriteUimsbf(2, this.bs_noise_bands);
            }

            if (bs_header_extra_2)
            {
                boxSize += stream.WriteUimsbf(2, this.bs_limiter_bands);
                boxSize += stream.WriteUimsbf(2, this.bs_limiter_gains);
                boxSize += stream.WriteUimsbf(this.bs_interpol_freq);
                boxSize += stream.WriteUimsbf(this.bs_smoothing_mode);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 1; // bs_amp_res
            boxSize += 4; // bs_start_freq
            boxSize += 4; // bs_stop_freq
            boxSize += 3; // bs_xover_band
            boxSize += 2; // bs_reserved
            boxSize += 1; // bs_header_extra_1
            boxSize += 1; // bs_header_extra_2

            if (bs_header_extra_1)
            {
                boxSize += 2; // bs_freq_scale
                boxSize += 1; // bs_alter_scale
                boxSize += 2; // bs_noise_bands
            }

            if (bs_header_extra_2)
            {
                boxSize += 2; // bs_limiter_bands
                boxSize += 2; // bs_limiter_gains
                boxSize += 1; // bs_interpol_freq
                boxSize += 1; // bs_smoothing_mode
            }
            return boxSize;
        }
    }


    /*
    class ErrorProtectionSpecificConfig()
    {
      uimsbf(8) number_of_predefined_set;
      uimsbf(2) interleave_type;
      uimsbf(3) bit_stuffing;
      uimsbf(3) number_of_concatenated_frame;
      for (i = 0; i < number_of_predefined_set; i++) {
        uimsbf(6) number_of_class[i];
        for (j = 0; j < number_of_class[i]; j++) {
          uimsbf(1) length_escape[i][j];
          uimsbf(1) rate_escape[i][j];
          uimsbf(1) crclen_escape[i][j];
          if (number_of_concatenated_frame != 1) {
            uimsbf(1) concatenate_flag[i][j];
          }
          uimsbf(2) fec_type[i][j];
          if (fec_type[i][j] == 0) {
            uimsbf(1) termination_switch[i][j];
          }
          if (interleave_type == 2) {
            uimsbf(2) interleave_switch[i][j];
          }
          uimsbf(1) class_optional;
          if (length_escape[i][j] == 1) { /* ESC *//*
            uimsbf(4) number_of_bits_for_length[i][j];
          }
          else {
            uimsbf(16) class_length[i][j];
          }
          if (rate_escape[i][j] != 1) { /* not ESC *//*
            if (fec_type[i][j] != 0) {
              uimsbf(7) class_rate[i][j];
            } else {
              uimsbf(5) class_rate[i][j];
            }
          }
          if (crclen_escape[i][j] != 1) {  /* not ESC *//*
            uimsbf(5) class_crclen[i][j];
          }
        }
        uimsbf(1) class_reordered_output;
        if (class_reordered_output == 1) {
          for (j = 0; j < number_of_class[i]; j++) {
            uimsbf(6) class_output_order[i][j];
          }
        }
      }
      uimsbf(1) header_protection;
      if (header_protection == 1) {
        uimsbf(5) header_rate;
        uimsbf(5) header_crclen;
      }
    }

    */
    public class ErrorProtectionSpecificConfig
    {


        protected byte number_of_predefined_set;
        public byte NumberOfPredefinedSet { get { return this.number_of_predefined_set; } set { this.number_of_predefined_set = value; } }

        protected byte interleave_type;
        public byte InterleaveType { get { return this.interleave_type; } set { this.interleave_type = value; } }

        protected byte bit_stuffing;
        public byte BitStuffing { get { return this.bit_stuffing; } set { this.bit_stuffing = value; } }

        protected byte number_of_concatenated_frame;
        public byte NumberOfConcatenatedFrame { get { return this.number_of_concatenated_frame; } set { this.number_of_concatenated_frame = value; } }

        protected byte[] number_of_class;
        public byte[] NumberOfClass { get { return this.number_of_class; } set { this.number_of_class = value; } }

        protected bool[][] length_escape;
        public bool[][] LengthEscape { get { return this.length_escape; } set { this.length_escape = value; } }

        protected bool[][] rate_escape;
        public bool[][] RateEscape { get { return this.rate_escape; } set { this.rate_escape = value; } }

        protected bool[][] crclen_escape;
        public bool[][] CrclenEscape { get { return this.crclen_escape; } set { this.crclen_escape = value; } }

        protected bool[][] concatenate_flag;
        public bool[][] ConcatenateFlag { get { return this.concatenate_flag; } set { this.concatenate_flag = value; } }

        protected byte[][] fec_type;
        public byte[][] FecType { get { return this.fec_type; } set { this.fec_type = value; } }

        protected bool[][] termination_switch;
        public bool[][] TerminationSwitch { get { return this.termination_switch; } set { this.termination_switch = value; } }

        protected byte[][] interleave_switch;
        public byte[][] InterleaveSwitch { get { return this.interleave_switch; } set { this.interleave_switch = value; } }

        protected bool class_optional;
        public bool ClassOptional { get { return this.class_optional; } set { this.class_optional = value; } }

        protected byte[][] number_of_bits_for_length;
        public byte[][] NumberOfBitsForLength { get { return this.number_of_bits_for_length; } set { this.number_of_bits_for_length = value; } }

        protected ushort[][] class_length;
        public ushort[][] ClassLength { get { return this.class_length; } set { this.class_length = value; } }

        protected byte[][] class_rate;
        public byte[][] ClassRate { get { return this.class_rate; } set { this.class_rate = value; } }

        protected byte[][] class_rate0;
        public byte[][] ClassRate0 { get { return this.class_rate0; } set { this.class_rate0 = value; } }

        protected byte[][] class_crclen;
        public byte[][] ClassCrclen { get { return this.class_crclen; } set { this.class_crclen = value; } }

        protected bool class_reordered_output;
        public bool ClassReorderedOutput { get { return this.class_reordered_output; } set { this.class_reordered_output = value; } }

        protected byte[][] class_output_order;
        public byte[][] ClassOutputOrder { get { return this.class_output_order; } set { this.class_output_order = value; } }

        protected bool header_protection;
        public bool HeaderProtection { get { return this.header_protection; } set { this.header_protection = value; } }

        protected byte header_rate;
        public byte HeaderRate { get { return this.header_rate; } set { this.header_rate = value; } }

        protected byte header_crclen;
        public byte HeaderCrclen { get { return this.header_crclen; } set { this.header_crclen = value; } }

        public ErrorProtectionSpecificConfig() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadUimsbf(8, out this.number_of_predefined_set);
            boxSize += stream.ReadUimsbf(2, out this.interleave_type);
            boxSize += stream.ReadUimsbf(3, out this.bit_stuffing);
            boxSize += stream.ReadUimsbf(3, out this.number_of_concatenated_frame);

            for (int i = 0; i < number_of_predefined_set; i++)
            {
                boxSize += stream.ReadUimsbf(6, out this.number_of_class[i]);

                for (int j = 0; j < number_of_class[i]; j++)
                {
                    boxSize += stream.ReadUimsbf(out this.length_escape[i][j]);
                    boxSize += stream.ReadUimsbf(out this.rate_escape[i][j]);
                    boxSize += stream.ReadUimsbf(out this.crclen_escape[i][j]);

                    if (number_of_concatenated_frame != 1)
                    {
                        boxSize += stream.ReadUimsbf(out this.concatenate_flag[i][j]);
                    }
                    boxSize += stream.ReadUimsbf(2, out this.fec_type[i][j]);

                    if (fec_type[i][j] == 0)
                    {
                        boxSize += stream.ReadUimsbf(out this.termination_switch[i][j]);
                    }

                    if (interleave_type == 2)
                    {
                        boxSize += stream.ReadUimsbf(2, out this.interleave_switch[i][j]);
                    }
                    boxSize += stream.ReadUimsbf(out this.class_optional);

                    if (length_escape[i][j] == true)
                    {
                        /*  ESC  */
                        boxSize += stream.ReadUimsbf(4, out this.number_of_bits_for_length[i][j]);
                    }

                    else
                    {
                        boxSize += stream.ReadUimsbf(16, out this.class_length[i][j]);
                    }

                    if (rate_escape[i][j] != true)
                    {
                        /*  not ESC  */

                        if (fec_type[i][j] != 0)
                        {
                            boxSize += stream.ReadUimsbf(7, out this.class_rate[i][j]);
                        }

                        else
                        {
                            boxSize += stream.ReadUimsbf(5, out this.class_rate0[i][j]);
                        }
                    }

                    if (crclen_escape[i][j] != true)
                    {
                        /*  not ESC  */
                        boxSize += stream.ReadUimsbf(5, out this.class_crclen[i][j]);
                    }
                }
                boxSize += stream.ReadUimsbf(out this.class_reordered_output);

                if (class_reordered_output == true)
                {

                    for (int j = 0; j < number_of_class[i]; j++)
                    {
                        boxSize += stream.ReadUimsbf(6, out this.class_output_order[i][j]);
                    }
                }
            }
            boxSize += stream.ReadUimsbf(out this.header_protection);

            if (header_protection == true)
            {
                boxSize += stream.ReadUimsbf(5, out this.header_rate);
                boxSize += stream.ReadUimsbf(5, out this.header_crclen);
            }
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteUimsbf(8, this.number_of_predefined_set);
            boxSize += stream.WriteUimsbf(2, this.interleave_type);
            boxSize += stream.WriteUimsbf(3, this.bit_stuffing);
            boxSize += stream.WriteUimsbf(3, this.number_of_concatenated_frame);

            for (int i = 0; i < number_of_predefined_set; i++)
            {
                boxSize += stream.WriteUimsbf(6, this.number_of_class[i]);

                for (int j = 0; j < number_of_class[i]; j++)
                {
                    boxSize += stream.WriteUimsbf(this.length_escape[i][j]);
                    boxSize += stream.WriteUimsbf(this.rate_escape[i][j]);
                    boxSize += stream.WriteUimsbf(this.crclen_escape[i][j]);

                    if (number_of_concatenated_frame != 1)
                    {
                        boxSize += stream.WriteUimsbf(this.concatenate_flag[i][j]);
                    }
                    boxSize += stream.WriteUimsbf(2, this.fec_type[i][j]);

                    if (fec_type[i][j] == 0)
                    {
                        boxSize += stream.WriteUimsbf(this.termination_switch[i][j]);
                    }

                    if (interleave_type == 2)
                    {
                        boxSize += stream.WriteUimsbf(2, this.interleave_switch[i][j]);
                    }
                    boxSize += stream.WriteUimsbf(this.class_optional);

                    if (length_escape[i][j] == true)
                    {
                        /*  ESC  */
                        boxSize += stream.WriteUimsbf(4, this.number_of_bits_for_length[i][j]);
                    }

                    else
                    {
                        boxSize += stream.WriteUimsbf(16, this.class_length[i][j]);
                    }

                    if (rate_escape[i][j] != true)
                    {
                        /*  not ESC  */

                        if (fec_type[i][j] != 0)
                        {
                            boxSize += stream.WriteUimsbf(7, this.class_rate[i][j]);
                        }

                        else
                        {
                            boxSize += stream.WriteUimsbf(5, this.class_rate0[i][j]);
                        }
                    }

                    if (crclen_escape[i][j] != true)
                    {
                        /*  not ESC  */
                        boxSize += stream.WriteUimsbf(5, this.class_crclen[i][j]);
                    }
                }
                boxSize += stream.WriteUimsbf(this.class_reordered_output);

                if (class_reordered_output == true)
                {

                    for (int j = 0; j < number_of_class[i]; j++)
                    {
                        boxSize += stream.WriteUimsbf(6, this.class_output_order[i][j]);
                    }
                }
            }
            boxSize += stream.WriteUimsbf(this.header_protection);

            if (header_protection == true)
            {
                boxSize += stream.WriteUimsbf(5, this.header_rate);
                boxSize += stream.WriteUimsbf(5, this.header_crclen);
            }
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 8; // number_of_predefined_set
            boxSize += 2; // interleave_type
            boxSize += 3; // bit_stuffing
            boxSize += 3; // number_of_concatenated_frame

            for (int i = 0; i < number_of_predefined_set; i++)
            {
                boxSize += 6; // number_of_class

                for (int j = 0; j < number_of_class[i]; j++)
                {
                    boxSize += 1; // length_escape
                    boxSize += 1; // rate_escape
                    boxSize += 1; // crclen_escape

                    if (number_of_concatenated_frame != 1)
                    {
                        boxSize += 1; // concatenate_flag
                    }
                    boxSize += 2; // fec_type

                    if (fec_type[i][j] == 0)
                    {
                        boxSize += 1; // termination_switch
                    }

                    if (interleave_type == 2)
                    {
                        boxSize += 2; // interleave_switch
                    }
                    boxSize += 1; // class_optional

                    if (length_escape[i][j] == true)
                    {
                        /*  ESC  */
                        boxSize += 4; // number_of_bits_for_length
                    }

                    else
                    {
                        boxSize += 16; // class_length
                    }

                    if (rate_escape[i][j] != true)
                    {
                        /*  not ESC  */

                        if (fec_type[i][j] != 0)
                        {
                            boxSize += 7; // class_rate
                        }

                        else
                        {
                            boxSize += 5; // class_rate0
                        }
                    }

                    if (crclen_escape[i][j] != true)
                    {
                        /*  not ESC  */
                        boxSize += 5; // class_crclen
                    }
                }
                boxSize += 1; // class_reordered_output

                if (class_reordered_output == true)
                {

                    for (int j = 0; j < number_of_class[i]; j++)
                    {
                        boxSize += 6; // class_output_order
                    }
                }
            }
            boxSize += 1; // header_protection

            if (header_protection == true)
            {
                boxSize += 5; // header_rate
                boxSize += 5; // header_crclen
            }
            return boxSize;
        }
    }


    /*
    class OpusSampleEntry() extends AudioSampleEntry ('Opus'){
     OpusSpecificBox();
     }
    */
    public class OpusSampleEntry : AudioSampleEntry
    {
        public const string FourCC = "Opus";

        protected OpusSpecificBox OpusSpecificBox;
        public OpusSpecificBox _OpusSpecificBox { get { return this.OpusSpecificBox; } set { this.OpusSpecificBox = value; } }

        public OpusSampleEntry() : base("Opus")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.OpusSpecificBox);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.OpusSpecificBox);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(OpusSpecificBox); // OpusSpecificBox
            return boxSize;
        }
    }


    /*
    class ChannelMappingTable (unsigned int(8) OutputChannelCount){
     unsigned int(8) StreamCount;
     unsigned int(8) CoupledCount;
     unsigned int(8 * OutputChannelCount) ChannelMapping;
     }


    */
    public class ChannelMappingTable
    {


        protected byte StreamCount;
        public byte _StreamCount { get { return this.StreamCount; } set { this.StreamCount = value; } }

        protected byte CoupledCount;
        public byte _CoupledCount { get { return this.CoupledCount; } set { this.CoupledCount = value; } }

        protected byte[] ChannelMapping;
        public byte[] _ChannelMapping { get { return this.ChannelMapping; } set { this.ChannelMapping = value; } }

        public ChannelMappingTable(byte OutputChannelCount) : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            ulong OutputChannelCount = 0; // TODO: pass through ctor

            boxSize += stream.ReadUInt8(out this.StreamCount);
            boxSize += stream.ReadUInt8(out this.CoupledCount);
            boxSize += stream.ReadBytes(OutputChannelCount, out this.ChannelMapping);
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            ulong OutputChannelCount = 0; // TODO: pass through ctor

            boxSize += stream.WriteUInt8(this.StreamCount);
            boxSize += stream.WriteUInt8(this.CoupledCount);
            boxSize += stream.WriteBytes(OutputChannelCount, this.ChannelMapping);
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            ulong OutputChannelCount = 0; // TODO: pass through ctor

            boxSize += 8; // StreamCount
            boxSize += 8; // CoupledCount
            boxSize += (ulong)(OutputChannelCount * 8); // ChannelMapping
            return boxSize;
        }
    }


    /*
    aligned(8) class OpusSpecificBox extends Box('dOps'){
     unsigned int(8) Version;
     unsigned int(8) OutputChannelCount;
     unsigned int(16) PreSkip;
     unsigned int(32) InputSampleRate;
     signed int(16) OutputGain;
     unsigned int(8) ChannelMappingFamily;
     if (ChannelMappingFamily != 0) {
     ChannelMappingTable(OutputChannelCount);
     }
     }
    */
    public class OpusSpecificBox : Box
    {
        public const string FourCC = "dOps";

        protected byte Version;
        public byte _Version { get { return this.Version; } set { this.Version = value; } }

        protected byte OutputChannelCount;
        public byte _OutputChannelCount { get { return this.OutputChannelCount; } set { this.OutputChannelCount = value; } }

        protected ushort PreSkip;
        public ushort _PreSkip { get { return this.PreSkip; } set { this.PreSkip = value; } }

        protected uint InputSampleRate;
        public uint _InputSampleRate { get { return this.InputSampleRate; } set { this.InputSampleRate = value; } }

        protected short OutputGain;
        public short _OutputGain { get { return this.OutputGain; } set { this.OutputGain = value; } }

        protected byte ChannelMappingFamily;
        public byte _ChannelMappingFamily { get { return this.ChannelMappingFamily; } set { this.ChannelMappingFamily = value; } }

        protected ChannelMappingTable ChannelMappingTable;
        public ChannelMappingTable _ChannelMappingTable { get { return this.ChannelMappingTable; } set { this.ChannelMappingTable = value; } }

        public OpusSpecificBox() : base("dOps")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.Version);
            boxSize += stream.ReadUInt8(out this.OutputChannelCount);
            boxSize += stream.ReadUInt16(out this.PreSkip);
            boxSize += stream.ReadUInt32(out this.InputSampleRate);
            boxSize += stream.ReadInt16(out this.OutputGain);
            boxSize += stream.ReadUInt8(out this.ChannelMappingFamily);

            if (ChannelMappingFamily != 0)
            {
                boxSize += stream.ReadClass(out this.ChannelMappingTable);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.Version);
            boxSize += stream.WriteUInt8(this.OutputChannelCount);
            boxSize += stream.WriteUInt16(this.PreSkip);
            boxSize += stream.WriteUInt32(this.InputSampleRate);
            boxSize += stream.WriteInt16(this.OutputGain);
            boxSize += stream.WriteUInt8(this.ChannelMappingFamily);

            if (ChannelMappingFamily != 0)
            {
                boxSize += stream.WriteClass(this.ChannelMappingTable);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // Version
            boxSize += 8; // OutputChannelCount
            boxSize += 16; // PreSkip
            boxSize += 32; // InputSampleRate
            boxSize += 16; // OutputGain
            boxSize += 8; // ChannelMappingFamily

            if (ChannelMappingFamily != 0)
            {
                boxSize += IsoStream.CalculateClassSize(ChannelMappingTable); // ChannelMappingTable
            }
            return boxSize;
        }
    }


    /*
    class AV1SampleEntry
    extends VisualSampleEntry('av01')
    {
      AV1CodecConfigurationBox config;
    }

    */
    public class AV1SampleEntry : VisualSampleEntry
    {
        public const string FourCC = "av01";

        protected AV1CodecConfigurationBox config;
        public AV1CodecConfigurationBox Config { get { return this.config; } set { this.config = value; } }

        public AV1SampleEntry() : base("av01")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBox(out this.config);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBox(this.config);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateSize(config); // config
            return boxSize;
        }
    }


    /*
    class AV1CodecConfigurationBox
    extends Box('av1C')
    {
      AV1CodecConfigurationRecord av1Config;
    }

    */
    public class AV1CodecConfigurationBox : Box
    {
        public const string FourCC = "av1C";

        protected AV1CodecConfigurationRecord av1Config;
        public AV1CodecConfigurationRecord Av1Config { get { return this.av1Config; } set { this.av1Config = value; } }

        public AV1CodecConfigurationBox() : base("av1C")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadClass(out this.av1Config);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteClass(this.av1Config);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += IsoStream.CalculateClassSize(av1Config); // av1Config
            return boxSize;
        }
    }


    /*
    aligned(8) class AV1CodecConfigurationRecord
    {
      unsigned int(1) marker = 1;
      unsigned int(7) version = 1;
      unsigned int(3) seq_profile;
      unsigned int(5) seq_level_idx_0;
      unsigned int(1) seq_tier_0;
      unsigned int(1) high_bitdepth;
      unsigned int(1) twelve_bit;
      unsigned int(1) monochrome;
      unsigned int(1) chroma_subsampling_x;
      unsigned int(1) chroma_subsampling_y;
      unsigned int(2) chroma_sample_position;
      unsigned int(3) reserved = 0;

      unsigned int(1) initial_presentation_delay_present;
      if(initial_presentation_delay_present) {
        unsigned int(4) initial_presentation_delay_minus_one;
      } else {
        unsigned int(4) reserved = 0;
      }

      unsigned int(8) configOBUs[];
    }

    */
    public class AV1CodecConfigurationRecord
    {


        protected bool marker = true;
        public bool Marker { get { return this.marker; } set { this.marker = value; } }

        protected byte version = 1;
        public byte Version { get { return this.version; } set { this.version = value; } }

        protected byte seq_profile;
        public byte SeqProfile { get { return this.seq_profile; } set { this.seq_profile = value; } }

        protected byte seq_level_idx_0;
        public byte SeqLevelIdx0 { get { return this.seq_level_idx_0; } set { this.seq_level_idx_0 = value; } }

        protected bool seq_tier_0;
        public bool SeqTier0 { get { return this.seq_tier_0; } set { this.seq_tier_0 = value; } }

        protected bool high_bitdepth;
        public bool HighBitdepth { get { return this.high_bitdepth; } set { this.high_bitdepth = value; } }

        protected bool twelve_bit;
        public bool TwelveBit { get { return this.twelve_bit; } set { this.twelve_bit = value; } }

        protected bool monochrome;
        public bool Monochrome { get { return this.monochrome; } set { this.monochrome = value; } }

        protected bool chroma_subsampling_x;
        public bool ChromaSubsamplingx { get { return this.chroma_subsampling_x; } set { this.chroma_subsampling_x = value; } }

        protected bool chroma_subsampling_y;
        public bool ChromaSubsamplingy { get { return this.chroma_subsampling_y; } set { this.chroma_subsampling_y = value; } }

        protected byte chroma_sample_position;
        public byte ChromaSamplePosition { get { return this.chroma_sample_position; } set { this.chroma_sample_position = value; } }

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected bool initial_presentation_delay_present;
        public bool InitialPresentationDelayPresent { get { return this.initial_presentation_delay_present; } set { this.initial_presentation_delay_present = value; } }

        protected byte initial_presentation_delay_minus_one;
        public byte InitialPresentationDelayMinusOne { get { return this.initial_presentation_delay_minus_one; } set { this.initial_presentation_delay_minus_one = value; } }

        protected byte reserved0 = 0;
        public byte Reserved0 { get { return this.reserved0; } set { this.reserved0 = value; } }

        protected byte[] configOBUs;
        public byte[] ConfigOBUs { get { return this.configOBUs; } set { this.configOBUs = value; } }

        public AV1CodecConfigurationRecord() : base()
        { }

        public async virtual Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.ReadBit(out this.marker);
            boxSize += stream.ReadBits(7, out this.version);
            boxSize += stream.ReadBits(3, out this.seq_profile);
            boxSize += stream.ReadBits(5, out this.seq_level_idx_0);
            boxSize += stream.ReadBit(out this.seq_tier_0);
            boxSize += stream.ReadBit(out this.high_bitdepth);
            boxSize += stream.ReadBit(out this.twelve_bit);
            boxSize += stream.ReadBit(out this.monochrome);
            boxSize += stream.ReadBit(out this.chroma_subsampling_x);
            boxSize += stream.ReadBit(out this.chroma_subsampling_y);
            boxSize += stream.ReadBits(2, out this.chroma_sample_position);
            boxSize += stream.ReadBits(3, out this.reserved);
            boxSize += stream.ReadBit(out this.initial_presentation_delay_present);

            if (initial_presentation_delay_present)
            {
                boxSize += stream.ReadBits(4, out this.initial_presentation_delay_minus_one);
            }

            else
            {
                boxSize += stream.ReadBits(4, out this.reserved0);
            }
            boxSize += stream.ReadUInt8Array(out this.configOBUs);
            return boxSize;
        }

        public async virtual Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += stream.WriteBit(this.marker);
            boxSize += stream.WriteBits(7, this.version);
            boxSize += stream.WriteBits(3, this.seq_profile);
            boxSize += stream.WriteBits(5, this.seq_level_idx_0);
            boxSize += stream.WriteBit(this.seq_tier_0);
            boxSize += stream.WriteBit(this.high_bitdepth);
            boxSize += stream.WriteBit(this.twelve_bit);
            boxSize += stream.WriteBit(this.monochrome);
            boxSize += stream.WriteBit(this.chroma_subsampling_x);
            boxSize += stream.WriteBit(this.chroma_subsampling_y);
            boxSize += stream.WriteBits(2, this.chroma_sample_position);
            boxSize += stream.WriteBits(3, this.reserved);
            boxSize += stream.WriteBit(this.initial_presentation_delay_present);

            if (initial_presentation_delay_present)
            {
                boxSize += stream.WriteBits(4, this.initial_presentation_delay_minus_one);
            }

            else
            {
                boxSize += stream.WriteBits(4, this.reserved0);
            }
            boxSize += stream.WriteUInt8Array(this.configOBUs);
            return boxSize;
        }

        public virtual ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += 1; // marker
            boxSize += 7; // version
            boxSize += 3; // seq_profile
            boxSize += 5; // seq_level_idx_0
            boxSize += 1; // seq_tier_0
            boxSize += 1; // high_bitdepth
            boxSize += 1; // twelve_bit
            boxSize += 1; // monochrome
            boxSize += 1; // chroma_subsampling_x
            boxSize += 1; // chroma_subsampling_y
            boxSize += 2; // chroma_sample_position
            boxSize += 3; // reserved
            boxSize += 1; // initial_presentation_delay_present

            if (initial_presentation_delay_present)
            {
                boxSize += 4; // initial_presentation_delay_minus_one
            }

            else
            {
                boxSize += 4; // reserved0
            }
            boxSize += (ulong)configOBUs.Length * 8; // configOBUs
            return boxSize;
        }
    }


    /*
    class AV1ForwardKeyFrameSampleGroupEntry
    extends VisualSampleGroupEntry('av1f')
    {
      unsigned int(8) fwd_distance;
    }

    */
    public class AV1ForwardKeyFrameSampleGroupEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "av1f";

        protected byte fwd_distance;
        public byte FwdDistance { get { return this.fwd_distance; } set { this.fwd_distance = value; } }

        public AV1ForwardKeyFrameSampleGroupEntry() : base("av1f")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.fwd_distance);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.fwd_distance);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // fwd_distance
            return boxSize;
        }
    }


    /*
    class AV1SwitchFrameSampleGroupEntry
    extends VisualSampleGroupEntry('av1s')
    {
    }

    */
    public class AV1SwitchFrameSampleGroupEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "av1s";

        public AV1SwitchFrameSampleGroupEntry() : base("av1s")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    class AV1MetadataSampleGroupEntry
    extends VisualSampleGroupEntry('av1M')
    {
    }

    */
    public class AV1MetadataSampleGroupEntry : VisualSampleGroupEntry
    {
        public const string FourCC = "av1M";

        public AV1MetadataSampleGroupEntry() : base("av1M")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            return boxSize;
        }
    }


    /*
    class OperatingPointSelectorProperty extends ItemProperty('a1op') {
        unsigned int(8) op_index;
    }

    */
    public class OperatingPointSelectorProperty : ItemProperty
    {
        public const string FourCC = "a1op";

        protected byte op_index;
        public byte OpIndex { get { return this.op_index; } set { this.op_index = value; } }

        public OperatingPointSelectorProperty() : base("a1op")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadUInt8(out this.op_index);
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteUInt8(this.op_index);
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 8; // op_index
            return boxSize;
        }
    }


    /*
    class AV1LayeredImageIndexingProperty extends ItemProperty('a1lx') {
        unsigned int(7) reserved = 0;
        unsigned int(1) large_size;
        if(large_size) {
           unsigned int(32) layer_size[3];
        }
        else {
           unsigned int(16) layer_size[3];
        }
    }
    */
    public class AV1LayeredImageIndexingProperty : ItemProperty
    {
        public const string FourCC = "a1lx";

        protected byte reserved = 0;
        public byte Reserved { get { return this.reserved; } set { this.reserved = value; } }

        protected bool large_size;
        public bool LargeSize { get { return this.large_size; } set { this.large_size = value; } }

        protected uint[] layer_size;
        public uint[] LayerSize { get { return this.layer_size; } set { this.layer_size = value; } }

        protected ushort[] layer_size0;
        public ushort[] LayerSize0 { get { return this.layer_size0; } set { this.layer_size0 = value; } }

        public AV1LayeredImageIndexingProperty() : base("a1lx")
        { }

        public async override Task<ulong> ReadAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.ReadAsync(stream);
            boxSize += stream.ReadBits(7, out this.reserved);
            boxSize += stream.ReadBit(out this.large_size);

            if (large_size)
            {
                boxSize += stream.ReadUInt32Array(3, out this.layer_size);
            }

            else
            {
                boxSize += stream.ReadUInt16Array(3, out this.layer_size0);
            }
            return boxSize;
        }

        public async override Task<ulong> WriteAsync(IsoStream stream)
        {
            ulong boxSize = 0;
            boxSize += await base.WriteAsync(stream);
            boxSize += stream.WriteBits(7, this.reserved);
            boxSize += stream.WriteBit(this.large_size);

            if (large_size)
            {
                boxSize += stream.WriteUInt32Array(3, this.layer_size);
            }

            else
            {
                boxSize += stream.WriteUInt16Array(3, this.layer_size0);
            }
            return boxSize;
        }

        public override ulong CalculateSize()
        {
            ulong boxSize = 0;
            boxSize += base.CalculateSize();
            boxSize += 7; // reserved
            boxSize += 1; // large_size

            if (large_size)
            {
                boxSize += 3 * 32; // layer_size
            }

            else
            {
                boxSize += 3 * 16; // layer_size0
            }
            return boxSize;
        }
    }



}
