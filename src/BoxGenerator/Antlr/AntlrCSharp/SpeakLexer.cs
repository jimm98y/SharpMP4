//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Git/SharpMP4BoxGenerator/src/BoxGenerator/Antlr/AntlrCSharp/Speak.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SpeakLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SAYS=1, WORD=2, TEXT=3, WHITESPACE=4, NEWLINE=5;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"A", "S", "Y", "LOWERCASE", "UPPERCASE", "SAYS", "WORD", "TEXT", "WHITESPACE", 
		"NEWLINE"
	};


	public SpeakLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SpeakLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "SAYS", "WORD", "TEXT", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Speak.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SpeakLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,5,67,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
		5,1,5,1,5,1,5,1,6,1,6,4,6,39,8,6,11,6,12,6,40,1,7,1,7,5,7,45,8,7,10,7,
		12,7,48,9,7,1,7,1,7,1,8,4,8,53,8,8,11,8,12,8,54,1,8,1,8,1,9,3,9,60,8,9,
		1,9,1,9,4,9,64,8,9,11,9,12,9,65,1,46,0,10,1,0,3,0,5,0,7,0,9,0,11,1,13,
		2,15,3,17,4,19,5,1,0,6,2,0,65,65,97,97,2,0,83,83,115,115,2,0,89,89,121,
		121,1,0,97,122,1,0,65,90,2,0,9,9,32,32,68,0,11,1,0,0,0,0,13,1,0,0,0,0,
		15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,1,21,1,0,0,0,3,23,1,0,0,0,5,25,1,
		0,0,0,7,27,1,0,0,0,9,29,1,0,0,0,11,31,1,0,0,0,13,38,1,0,0,0,15,42,1,0,
		0,0,17,52,1,0,0,0,19,63,1,0,0,0,21,22,7,0,0,0,22,2,1,0,0,0,23,24,7,1,0,
		0,24,4,1,0,0,0,25,26,7,2,0,0,26,6,1,0,0,0,27,28,7,3,0,0,28,8,1,0,0,0,29,
		30,7,4,0,0,30,10,1,0,0,0,31,32,3,3,1,0,32,33,3,1,0,0,33,34,3,5,2,0,34,
		35,3,3,1,0,35,12,1,0,0,0,36,39,3,7,3,0,37,39,3,9,4,0,38,36,1,0,0,0,38,
		37,1,0,0,0,39,40,1,0,0,0,40,38,1,0,0,0,40,41,1,0,0,0,41,14,1,0,0,0,42,
		46,5,34,0,0,43,45,9,0,0,0,44,43,1,0,0,0,45,48,1,0,0,0,46,47,1,0,0,0,46,
		44,1,0,0,0,47,49,1,0,0,0,48,46,1,0,0,0,49,50,5,34,0,0,50,16,1,0,0,0,51,
		53,7,5,0,0,52,51,1,0,0,0,53,54,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,
		56,1,0,0,0,56,57,6,8,0,0,57,18,1,0,0,0,58,60,5,13,0,0,59,58,1,0,0,0,59,
		60,1,0,0,0,60,61,1,0,0,0,61,64,5,10,0,0,62,64,5,13,0,0,63,59,1,0,0,0,63,
		62,1,0,0,0,64,65,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,20,1,0,0,0,8,0,
		38,40,46,54,59,63,65,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
