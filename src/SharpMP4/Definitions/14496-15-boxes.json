{
  "name": "Boxes",
  "description": "Boxes (also called atoms)",
  "entries": [
    {
      "fourcc": "iroi",
      "description": "SVC region of interest box",
      "containers": ["scif"],
      "type": "Box",
      "syntax": "class IroiInfoBox extends Box('iroi'){\r\n\tunsigned int(2) iroi_type;\r\n\tbit(6) reserved = 0;\r\n\tif(iroi_type == 0) { \r\n\t\tunsigned int(8) grid_roi_mb_width;\r\n\t\tunsigned int(8) grid_roi_mb_height;\r\n\t}\r\n\telse if(iroi_type == 1){\r\n\t\tunsigned int(24) num_roi;\r\n\t\tfor(i=1; i<= num_roi; i++) {\r\n\t\t\tunsigned int(32) top_left_mb;\r\n\t\t\tunsigned int(8) roi_mb_width;\r\n\t\t\tunsigned int(8) roi_mb_height;\r\n\t\t}\r\n\t}\r\n}"
    },
    {
      "fourcc": "ldep",
      "description": "Tier dependency box",
      "containers": ["scif", "mvif"],
      "type": "Box",
      "syntax": "class TierDependencyBox extends Box('ldep'){\r\n\tunsigned int(16) entry_count; \r\n\tfor (i=0; i < entry_count; i++)\r\n\t\tunsigned int(16) dependencyTierId;\r\n}"
    },
    {
      "fourcc": "svdr",
      "description": "SVC dependency range",
      "containers": ["scif"],
      "type": "Box",
      "syntax": "class SVCDependencyRangeBox extends Box('svdr') {\r\n\tunsigned int(3) min_dependency_id;\r\n\tunsigned int(3) min_temporal_id;\r\n\tbit(6) reserved = 0;\r\n\tunsigned int(4) min_quality_id;\r\n\tunsigned int(3) max_dependency_id;\r\n\tunsigned int(3) max_temporal_id;\r\n\tbit(6) reserved = 0;\r\n\tunsigned int(4) max_quality_id;\r\n}"
    },
    {
      "fourcc": "svip",
      "description": "Initial parameter sets box for tiers",
      "containers": ["scif", "mvif"],
      "type": "Box",
      "syntax": "class InitialParameterSetBox extends Box ('svip') {\r\n\tunsigned int(8) sps_id_count;\r\n\tfor (i=0; i< sps_id_count; i++)\r\n\t\tunsigned int(8) SPS_index;\r\n\tunsigned int(8) pps_id_count;\r\n\tfor (i=0; i< pps_id_count; i++)\r\n\t\tunsigned int(8) PPS_index;\r\n}"
    },
    {
      "fourcc": "svpr",
      "description": "Priority range",
      "containers": ["scif", "mvif"],
      "type": "Box",
      "syntax": "class PriorityRangeBox extends Box('svpr') {\r\n\tbit(2) reserved1 = 0;\r\n\tunsigned int(6) min_priorityId;\r\n\tbit(2) reserved2 = 0;\r\n\tunsigned int(6) max_priorityId;\r\n}"
    },
    {
      "fourcc": "tran",
      "description": "SVC lightweight transcoding",
      "containers": ["scif"],
      "type": "Box",
      "syntax": "class TranscodingInfoBox extends Box('tran'){\r\n\tbit(4) reserved = 0;\r\n\tunsigned int(2) conversion_idc;\r\n\tunsigned int(1) cavlc_info_present_flag;\r\n\tunsigned int(1) cabac_info_present_flag;\r\n\tif(cavlc_info_present_flag){\r\n\t\tunsigned int(24) cavlc_profile_level_idc;\r\n\t\tunsigned int(32) cavlc_max_bitrate;\r\n\t\tunsigned int(32) cavlc_avg_bitrate;\r\n\t}\r\n\tif(cabac_info_present_flag){\r\n\t\tunsigned int(24) cabac_profile_level_idc;\r\n\t\tunsigned int(32) cabac_max_bitrate;\r\n\t\tunsigned int(32) cabac_avg_bitrate;\r\n\t}\r\n}"
    },
    {
      "fourcc": "rrgn",
      "description": "SVC rect region box",
      "containers": ["scif"],
      "type": "Box",
      "syntax": "class RectRegionBox extends Box('rrgn'){\r\n\tunsigned int(16) base_region_tierID;\r\n\tunsigned int(1) dynamic_rect;\r\n\tbit(7) reserved = 0;\r\n\tif(dynamic_rect == 0) { \r\n\t\tunsigned int(16) horizontal_offset;\r\n\t\tunsigned int(16) vertical_offset;\r\n\t\tunsigned int(16) region_width;\r\n\t\tunsigned int(16) region_height;\r\n\t}\r\n}"
    },
    {
      "fourcc": "buff",
      "description": "Buffering information",
      "containers": ["scif", "mvif", "mvcg"],
      "type": "Box",
      "syntax": "class BufferingBox extends Box('buff'){\r\n\tunsigned int(16) \t\toperating_point_count\r\n;\tfor (i = 0; i < operating_point_count; i++){\r\n\t\tunsigned int (32) \tbyte_rate;\r\n\t\tunsigned int (32) \tcpb_size;\r\n\t\tunsigned int (32) \tdpb_size;\r\n\t\tunsigned int (32)\t\tinit_cpb_delay;\r\n\t\tunsigned int (32) \tinit_dpb_delay;\r\n\t}\r\n}"
    },
    {
      "fourcc": "mstv",
      "description": "MVC sub track view box",
      "containers": ["strd"],
      "type": "FullBox",
      "versions": [0],
      "flags": [],
      "syntax": "aligned(8) class MVCSubTrackViewBox\r\n\textends FullBox('mstv', 0, 0) {\r\n\tunsigned int(16) item_count;\r\n\tfor(i = 0; i< item_count; i++) {\r\n\t\tunsigned int(10)\tview_id;\r\n\t\tunsigned int(4)\ttemporal_id;\r\n\t\tunsigned int(2)\treserved;\r\n\t}\r\n}"
    },
    {
      "fourcc": "mvcg",
      "description": "Multiview group",
      "containers": ["mvci"],
      "type": "FullBox",
      "versions": [0],
      "flags": [],
      "syntax": "aligned(8) class MultiviewGroupBox extends FullBox('mvcg', version = 0, flags) {\r\n\tunsigned int(32) multiview_group_id;\r\n\tunsigned int(16) num_entries;\r\n\tbit(8) reserved = 0;\r\n\tfor(i=0; i<num_entries; i++) {\r\n\t\tunsigned int(8) entry_type;\r\n\t\tif (entry_type == 0)\r\n\t\t\tunsigned int(32) track_id;\r\n\t\telse if (entry_type == 1) {\r\n\t\t\tunsigned int(32) track_id;\r\n\t\t\tunsigned int(16) tier_id;\r\n\t\t}\r\n\t\telse if (entry_type == 2) {\r\n\t\t\tbit(6) reserved1 = 0;\r\n\t\t\tunsigned int(10) output_view_id;\r\n\t\t}\r\n\t\telse if (entry_type == 3) {\r\n\t\t\tbit(6) reserved2 = 0;\r\n\t\t\tunsigned int(10) start_view_id;\r\n\t\t\tunsigned int(16) view_count;\r\n\t\t}\r\n\t}\r\n\tTierInfoBox subset_stream_info; \t\t\t// optional\r\n\tMultiviewRelationAttributeBox relation_attributes; // optional\r\n\tTierBitRateBox subset_stream_bit_rate; // optional\r\n\tBufferingBox subset_stream_buffering; \t// optional\r\n\tMultiviewSceneInfoBox multiview_scene_info; \t\t\t// optional\r\n}"
    },
    {
      "fourcc": "mvci",
      "description": "Multiview Information",
      "containers": ["minf"],
      "type": "FullBox",
      "versions": [0],
      "flags": [],
      "syntax": "aligned(8) class MultiviewInformationBox\r\n\textends FullBox('mvci', version = 0, flags) {\r\n}"
    },
    {
      "fourcc": "3dpr",
      "description": "MVDDepthResolutionBox",
      "containers": ["mvdC", "a3dC"],
      "type": "Box",
      "syntax": "class MVDDepthResolutionBox extends Box('3dpr')\r\n{\r\n\tunsigned int(16) depth_width;\r\n\tunsigned int(16) depth_height;\r\n/* The following 5 fields are collectively optional; they are either all present or all absent. When grid_pos_num_views is not present, the for loop is not present, equivalent to grid_pos_num_views equal to 0. These fields may be present or absent whenever the box is present (e.g., in MVCDConfigurationBox or A3DConfigurationBox). */\r\n\tunsigned int(16) depth_hor_mult_minus1; // optional\r\n\tunsigned int(16) depth_ver_mult_minus1; // optional\r\n\tunsigned int(4) depth_hor_rsh; // optional\r\n\tunsigned int(4) depth_ver_rsh; // optional\r\n\tunsigned int(16) grid_pos_num_views; // optional\r\n\tfor(i = 0; i < grid_pos_num_views; i++) {\r\n\t\tbit(6) reserved=0;\r\n\t\tunsigned int(10) grid_pos_view_id[i];\r\n\t\tsigned int(16) grid_pos_x[grid_pos_view_id[i]];\r\n\t\tsigned int(16) grid_pos_y[grid_pos_view_id[i]];\r\n\t}\r\n}"
    },
    {
      "fourcc": "mvra",
      "description": "Multiview Relation Attribute",
      "containers": ["mvcg", "swtc"],
      "type": "FullBox",
      "versions": [0],
      "flags": [],
      "syntax": "aligned(8) class MultiviewRelationAttributeBox\r\n\textends FullBox('mvra', version = 0, flags) {\r\n\tbit(16) reserved1 = 0;\r\n\tunsigned int(16) num_common_attributes;\r\n\tfor (i=0; i<num_common_attributes; i++) {\r\n\t\tunsigned int(32) common_attribute; \r\n\t\tunsigned int(32) common_value;\r\n\t}\r\n\tbit(16) reserved2 = 0;\r\n\tunsigned int(16) num_differentiating_attributes;\r\n\tfor (i=0; i<num_differentiating_attributes; i++)\r\n\t\tunsigned int(32) differentiating_attribute;\r\n}"
    },
    {
      "fourcc": "sdep",
      "description": "Sample dependency",
      "containers": ["stbl"],
      "type": "FullBox",
      "versions": [0],
      "flags": [],
      "syntax": "aligned(8) class SampleDependencyBox \r\n\textends FullBox('sdep', version = 0, 0) {\r\n\tfor (i=0; i < sample_count; i++){\r\n\t\tunsigned int(16) dependency_count;\r\n\t\tfor (k=0; k < dependency_count; k++) {\r\n\t\t\tsigned int(16) relative_sample_number;\r\n\t\t}\r\n\t}\r\n}"
    },
    {
      "fourcc": "seii",
      "description": "SEI information box",
      "containers": ["schi", "VisualSampleEntry"],
      "type": "Box",
      "syntax": "aligned(8) class SeiInformationBox extends Box('seii') {\r\n\tunsigned int(16) numRequiredSEIs;\r\n\tfor (i\u00a0=\u00a00; i\u00a0<\u00a0numRequiredSEIs; i++) {\r\n\tunsigned int(16) requiredSEI_ID;\r\n\t}\r\n\tunsigned int(16) numNotRequiredSEIs;\r\n\tfor (i\u00a0=\u00a00; i\u00a0<\u00a0numNotRequiredSEIs; i++) {\r\n\tunsigned int(16) notrequiredSEI_ID;\r\n\t}\r\n}"
    },
    {
      "fourcc": "sstl",
      "description": "SVC sub track layer box",
      "containers": ["strd"],
      "type": "FullBox",
      "versions": [0],
      "flags": [],
      "syntax": "aligned(8) class SVCSubTrackLayerBox\r\n\textends FullBox('sstl', 0, 0) {\r\n\tunsigned int(16) item_count;\r\n\tfor(i = 0; i< item_count; i++) {\r\n\t\tunsigned int(3)\tdependency_id;\r\n\t\tunsigned int(4)\tquality_id;\r\n\t\tunsigned int(3)\ttemporal_id;\r\n\t\tunsigned int(6)\tpriority_id;\r\n\t\tunsigned int(2)\tdependency_id_range;\r\n\t\tunsigned int(2) \tquality_id_range;\r\n\t\tunsigned int(2)\ttemporal_id_range;\r\n\t\tunsigned int(2)\tpriority_id_range;\r\n\t}\r\n}"
    },
    {
      "fourcc": "stmg",
      "description": "MVC sub track multiview group box",
      "containers": ["strd"],
      "type": "FullBox",
      "versions": [0],
      "flags": [],
      "syntax": "aligned(8) class MVCSubTrackMultiviewGroupBox\r\n\textends FullBox('stmg', 0, 0) {\r\n\tunsigned int(16) item_count;\r\n\tfor(i = 0; i< item_count; i++) {\r\n\t\tunsigned int(32)\tMultiviewGroupId;\r\n\t}\r\n}"
    },
    {
      "fourcc": "stti",
      "description": "Sub track tier box",
      "containers": ["strd"],
      "type": "FullBox",
      "versions": [0],
      "flags": [],
      "syntax": "aligned(8) class SubTrackTierBox\r\n\textends FullBox('stti', 0, 0) {\r\n\tunsigned int(16) item_count;\r\n\tfor(i = 0; i< item_count; i++) {\r\n\t\tunsigned int(16)\ttierID;\r\n\t}\r\n}"
    },
    {
      "fourcc": "swtc",
      "description": "Multiview Group Relation",
      "containers": ["mvci"],
      "type": "FullBox",
      "versions": [0],
      "flags": [],
      "syntax": "aligned(8) class MultiviewGroupRelationBox() extends FullBox('swtc', version = 0, flags) {\r\n\tunsigned int(32) num_entries;\r\n\tfor (i=0; i<num_entries; i++)\r\n\t\tunsigned int(32) multiview_group_id;\r\n\tMultiviewRelationAttributeBox relation_attributes;\r\n}"
    },
    {
      "fourcc": "tibr",
      "description": "Tier Bit rate",
      "containers": ["scif", "mvif", "mvcg"],
      "type": "Box",
      "syntax": "class TierBitRateBox extends Box('tibr'){ \r\n\tunsigned int(32) baseBitRate;\r\n\tunsigned int(32) maxBitRate;\r\n\tunsigned int(32) avgBitRate;\r\n\r\n\tunsigned int(32) tierBaseBitRate;\r\n\tunsigned int(32) tierMaxBitRate;\r\n\tunsigned int(32) tierAvgBitRate;\r\n}"
    },
    {
      "fourcc": "tiri",
      "description": "Tier Information",
      "containers": ["scif", "mvif", "mvcg"],
      "type": "Box",
      "syntax": "class TierInfoBox extends Box('tiri'){ //Mandatory Box\r\n\tunsigned int(16) tierID;\r\n\tunsigned int(8) profileIndication;\r\n\tunsigned int(8) profile_compatibility;\r\n\tunsigned int(8) levelIndication;\r\n\tbit(8) reserved = 0;\r\n\r\n\tunsigned int(16) visualWidth;\r\n\tunsigned int(16) visualHeight;\r\n\r\n\tunsigned int(2) discardable;\r\n\tunsigned int(2) constantFrameRate;\r\n\tbit(4) reserved = 0;\r\n\tunsigned int(16) frameRate;\r\n}"
    },
    {
      "fourcc": "tstb",
      "description": "TileSubTrackGroupBox",
      "containers": ["strd"],
      "type": "FullBox",
      "versions": [0],
      "flags": [],
      "syntax": "aligned(8) class TileSubTrackGroupBox extends FullBox('tstb', 0, 0) {\r\n\tunsigned int(16) item_count;\r\n\tfor(i = 0; i< item_count; i++) {\r\n\t\tunsigned int(16) tileGroupID;\r\n\t}\r\n}"
    },
    {
      "fourcc": "vwdi",
      "description": "Multiview Scene Information",
      "containers": ["mvcg"],
      "type": "Box",
      "syntax": "class MultiviewSceneInfoBox extends Box ('vwdi') \r\n{\r\n\tunsigned int(8) \tmax_disparity;\r\n}"
    },
    {
      "fourcc": "mvdC",
      "description": "MVCD configuration",
      "type": "Box",
      "containers": [
        {
          "AVCSampleEntry": ["avc1", "avc3"]
        },
        {
          "MVCSampleEntry": ["mvc1", "mvc2", "mvc3", "mvc4"]
        },
        {
          "MVCDSampleEntry": ["mvd1", "mvd2", "mvd3", "mvd4"]
        }
      ],
      "syntax": "class MVCDConfigurationBox extends Box('mvdC') {\r\n\tMVDDecoderConfigurationRecord MVDConfig;\r\n\tMVDDepthResolutionBox mvdDepthRes;\t//Optional\r\n}"
    },
    {
      "fourcc": "a3dC",
      "description": "A3D configuration",
      "type": "Box",
      "containers": [
        {
          "AVCSampleEntry": ["avc1", "avc3"]
        },
        {
          "MVCSampleEntry": ["mvc1", "mvc2", "mvc3", "mvc4"]
        },
        {
          "MVCDSampleEntry": ["mvd1", "mvd2", "mvd3", "mvd4"]
        },
        {
          "A3DSampleEntry": ["a3d1", "a3d2", "a3d3", "a3d4"]
        }
      ],
      "syntax": "class A3DConfigurationBox extends Box('a3dC') {\r\n\tMVDDecoderConfigurationRecord MVDConfig;\r\n\tMVDDepthResolutionBox mvdDepthRes;\t//Optional\r\n}"
    },
    {
      "fourcc": "vwid",
      "description": "View identifier",
      "containers": [
        "mvif",
        {
          "AVCSampleEntry": ["avc1", "avc3"]
        },
        {
          "AVC2SampleEntry": ["avc2", "avc4"]
        },
        {
          "MVCSampleEntry": ["mvc1", "mvc2", "mvc3", "mvc4"]
        },
        {
          "MVCDSampleEntry": ["mvd1", "mvd2", "mvd3", "mvd4"]
        },
        {
          "A3DSampleEntry": ["a3d1", "a3d2", "a3d3", "a3d4"]
        }
      ],
      "type": "FullBox",
      "versions": [0],
      "flags": [],
      "syntax": "class ViewIdentifierBox extends FullBox ('vwid', version=0, flags) \r\n{\r\n\tunsigned int(2) \treserved6 = 0;\r\n\tunsigned int(3) \tmin_temporal_id;\r\n\tunsigned int(3) \tmax_temporal_id;\r\n\tunsigned int(16)\tnum_views;\r\n\tfor (i=0; i<num_views; i++) {\r\n\t\tunsigned int(6) \treserved1 = 0;\r\n\t\tunsigned int(10) \tview_id[i];\r\n\t\tunsigned int(6) \treserved2 = 0;\r\n\t\tunsigned int(10) \tview_order_index;\r\n\t\tunsigned int(1)\ttexture_in_stream[i];\r\n\t\tunsigned int(1)\ttexture_in_track[i];\r\n\t\tunsigned int(1)\tdepth_in_stream[i];\r\n\t\tunsigned int(1)\tdepth_in_track[i];\r\n\t\tunsigned int(2) \tbase_view_type;\r\n\t\tunsigned int(10) \tnum_ref_views;\r\n\t\tfor (j = 0; j < num_ref_views; j++) {\r\n\t\t\tunsigned int(4) \treserved5 = 0;\r\n\t\t\tunsigned int(2) \tdependent_component_idc[i][j];\r\n\t\t\tunsigned int(10) \tref_view_id[i][j];\r\n\t\t}\r\n\t}\r\n}"
    },
    {
      "fourcc": "mvcC",
      "description": "MVC configuration",
      "type": "Box",
      "containers": [
        {
          "AVCMVCSampleEntry": ["avc1", "avc3"]
        },
        {
          "AVC2MVCSampleEntry": ["avc2", "avc4"]
        },
        {
          "MVCSampleEntry": ["mvc1", "mvc2", "mvc3", "mvc4"]
        }
      ],
      "syntax": "class MVCConfigurationBox extends Box('mvcC') {\r\n\tMVCDecoderConfigurationRecord() MVCConfig;\r\n}"
    },
    {
      "fourcc": "avcC",
      "description": "AVC Configuration",
      "containers": [
        "ipco",
        {
          "RestrictedSampleEntry": ["resv"]
        },
        {
          "AVCSampleEntry": ["avc1", "avc3"]
        },
        {
          "AVC2SampleEntry": ["avc2", "avc4"]
        },
        {
          "VisualSampleEntry": ["encv"]
        },
        {
          "AVCParameterSampleEntry": ["avcp"]
        }
      ],
      "type": "Box",
      "syntax": "class AVCConfigurationBox extends Box('avcC') {\r\n\tAVCDecoderConfigurationRecord() AVCConfig;\r\n}"
    },
    {
      "fourcc": "hvcC",
      "description": "HEVC Configuration",
      "containers": [
        "ipco",
        {
          "HEVCSampleEntry": ["hvc1", "hvc2", "hev1", "hev2", "hvc3", "hev3"]
        },
        {
          "HEVCLHVCSampleEntry": [
            "hvc1",
            "hvc2",
            "hev1",
            "hev2",
            "hvc3",
            "hev3"
          ]
        },
        {
          "RestrictedSampleEntry": ["resv"]
        },
        {
          "VisualSampleEntry": ["encv"]
        }
      ],
      "type": "Box",
      "syntax": "class HEVCConfigurationBox extends Box('hvcC') {\r\n\tHEVCDecoderConfigurationRecord() HEVCConfig;\r\n}"
    },
    {
      "fourcc": "lhvC",
      "description": "Layered HEVC Configuration",
      "containers": [
        "ipco",
        {
          "RestrictedSampleEntry": ["resv"]
        },
        {
          "VisualSampleEntry": ["encv"]
        },
        {
          "LHEVCSampleEntry": ["lhv1", "lhe1"]
        },
        {
          "HEVCSampleEntry": ["hvc1", "hvc2", "hev1", "hev2", "hvc3", "hev3"]
        },
        {
          "HEVCLHVCSampleEntry": [
            "hvc1",
            "hvc2",
            "hev1",
            "hev2",
            "hvc3",
            "hev3"
          ]
        }
      ],
      "type": "Box",
      "syntax": "class LHEVCConfigurationBox extends Box('lhvC') {\r\n\tLHEVCDecoderConfigurationRecord() LHEVCConfig;\r\n}"
    },
    {
      "fourcc": "m4ds",
      "description": "MPEG-4 descriptors",
      "containers": [
        {
          "AVCSampleEntry": ["avc1", "avc3"]
        },
        {
          "AVC2SampleEntry": ["avc2", "avc4"]
        },
        {
          "SVCSampleEntry": ["svc1", "svc2"]
        },
        {
          "MVCSampleEntry": ["mvc1", "mvc2", "mvc3", "mvc4"]
        },
        {
          "MVCDSampleEntry": ["mvd1", "mvd2", "mvd3", "mvd4"]
        },
        {
          "A3DSampleEntry": ["a3d1", "a3d2", "a3d3", "a3d4"]
        },
        {
          "HEVCSampleEntry": ["hvc1", "hev1"]
        },
        {
          "LHEVCSampleEntry": ["lhv1", "lhe1"]
        },
        {
          "VvcSampleEntry": ["vvc1", "vvi1"]
        },
        {
          "EVCSampleEntry": ["evc1"]
        }
      ],
      "type": "Box",
      "syntax": "class MPEG4ExtensionDescriptorsBox extends Box('m4ds') {\r\n\tDescriptor Descr[0 .. 255];\r\n}"
    },
    {
      "fourcc": "svcC",
      "description": "SVC configuration",
      "containers": [
        {
          "AVCSVCSampleEntry": ["avc1", "avc3"]
        },
        {
          "AVC2SVCSampleEntry": ["avc2", "avc4"]
        },
        {
          "SVCSampleEntry": ["svc1", "svc2"]
        }
      ],
      "type": "Box",
      "syntax": "class SVCConfigurationBox extends Box('svcC') {\r\n\tSVCDecoderConfigurationRecord() SVCConfig;\r\n}"
    },
    {
      "fourcc": "seib",
      "description": "Scalability information",
      "containers": [
        {
          "AVCSVCSampleEntry": ["avc1", "avc3"]
        },
        {
          "AVC2SVCSampleEntry": ["avc2", "avc4"]
        },
        {
          "SVCSampleEntry": ["svc1", "svc2"]
        }
      ],
      "type": "Box",
      "syntax": "class ScalabilityInformationSEIBox extends Box('seib', size)\r\n{\r\n\tunsigned int(8*size-64)\tscalinfosei; \r\n}"
    },
    {
      "fourcc": "svcP",
      "description": "SVC priority assignments",
      "containers": [
        {
          "AVCSVCSampleEntry": ["avc1", "avc3"]
        },
        {
          "AVC2SVCSampleEntry": ["avc2", "avc4"]
        },
        {
          "SVCSampleEntry": ["svc1", "svc2"]
        },
        {
          "SVCMetaDataSampleEntry": ["svcM"]
        }
      ],
      "type": "Box",
      "syntax": "class SVCPriorityAssignmentBox extends Box('svcP')\r\n{\r\n\tunsigned int(8)\tmethod_count;\r\n\tstring PriorityAssignmentURI[method_count]; \r\n}"
    },
    {
      "fourcc": "vsib",
      "description": "View scalability information",
      "containers": [
        {
          "AVCMVCSampleEntry": ["avc1", "avc3"]
        },
        {
          "AVC2MVCSampleEntry": ["avc2", "avc4"]
        },
        {
          "MVCSampleEntry": ["mvc1", "mvc2", "mvc3", "mvc4"]
        }
      ],
      "type": "Box",
      "syntax": "class ViewScalabilityInformationSEIBox extends Box('vsib', size)\r\n{\r\n\tunsigned int(8*size-64)\tmvcscalinfosei; \r\n}"
    },
    {
      "fourcc": "3sib",
      "description": "MVD Scalability Information SEI Message Box",
      "containers": [
        {
          "AVCMVCSampleEntry": ["avc1", "avc3"]
        },
        {
          "AVC2MVCSampleEntry": ["avc2", "avc4"]
        },
        {
          "MVCSampleEntry": ["mvc1", "mvc2", "mvc3", "mvc4"]
        },
        {
          "MVCDSampleEntry": ["mvd1", "mvd2", "mvd3", "mvd4"]
        },
        {
          "A3DSampleEntry": ["a3d1", "a3d2", "a3d3", "a3d4"]
        }
      ],
      "type": "Box",
      "syntax": "class MVDScalabilityInformationSEIBox extends Box('3sib', size)\r\n{\r\n\tunsigned int(8*size-64)\tmvdscalinfosei;\r\n}"
    },
    {
      "fourcc": "mvcP",
      "description": "MVC priority assignment",
      "containers": [
        {
          "AVCMVCSampleEntry": ["avc1", "avc3"]
        },
        {
          "AVC2MVCSampleEntry": ["avc2", "avc4"]
        },
        {
          "MVCSampleEntry": ["mvc1", "mvc2", "mvc3", "mvc4"]
        }
      ],
      "type": "Box",
      "syntax": "class MVCViewPriorityAssignmentBox extends Box('mvcP')\r\n{\r\n\tunsigned int(8)\tmethod_count;\r\n\tstring PriorityAssignmentURI[method_count]; \r\n}"
    },
    {
      "fourcc": "hvtC",
      "description": "HEVC Tile Configuration",
      "containers": [
        {
          "HEVCTileSampleEntry": ["hvt1"]
        },
        {
          "HEVCTileSSHInfoSampleEntry": ["hvt3"]
        },
        {
          "HEVCSliceSegmentDataSampleEntry": ["hvt2"]
        }
      ],
      "type": "Box",
      "syntax": "class HEVCTileConfigurationBox extends Box('hvtC') {\r\n\tHEVCTileTierLevelConfigurationRecord() HEVCTileTierLevelConfig;\r\n}"
    },
    {
      "fourcc": "evcC",
      "description": "EVC configuration",
      "containers": [
        {
          "EVCSampleEntry": ["evc1"]
        }
      ],
      "type": "Box",
      "syntax": "class EVCConfigurationBox extends Box('evcC') {\r\n\tEVCDecoderConfigurationRecord() EVCConfig;\r\n}"
    },
    {
      "fourcc": "qlif",
      "description": "Layer quality assignments",
      "containers": [
        {
          "SVCMetaDataSampleEntry": ["svcM"]
        }
      ],
      "type": "Box",
      "syntax": "class SVCPriorityLayerInfoBox extends Box('qlif'){\r\n\tunsigned int(8) pr_layer_num;\r\n\tfor(j=0; j< pr_layer_num; j++){\r\n\t\tunsigned int(8) pr_layer;\r\n\t\tunsigned int(24) profile_level_idc;\r\n\t\tunsigned int(32) max_bitrate;\r\n\t\tunsigned int(32) avg_bitrate;\r\n\t}\r\n}"
    },
    {
      "fourcc": "vvcC",
      "description": "VVC video configuration",
      "versions": [0],
      "flags": [],
      "containers": [
        {
          "VvcSampleEntry": ["vvc1", "vvi1"]
        }
      ],
      "type": "FullBox",
      "syntax": "class VvcConfigurationBox extends FullBox('vvcC',version=0,flags) {\r\n\tVvcDecoderConfigurationRecord() VvcConfig;\r\n}"
    },
    {
      "fourcc": "vvnC",
      "description": "VVC Network Abstraction Layer unit configuration",
      "versions": [0],
      "flags": [
        {
          "name": "no_display",
          "value": "0x000001",
          "description": "The samples referencing the sample entry do not contain content intended for displaying."
        }
      ],
      "containers": [
        {
          "VvcSubpicSampleEntry": ["vvs1"]
        },
        {
          "VvcNonVCLSampleEntry": ["vvcN"]
        }
      ],
      "type": "FullBox",
      "syntax": "class VvcNALUConfigBox extends FullBox('vvnC',version=0,flags) {\r\n\tunsigned int(6) reserved=0;\r\n\tunsigned int(2) LengthSizeMinusOne;\r\n}"
    },
    {
      "fourcc": "dhec",
      "description": "Default HEVC extractor constructor box",
      "versions": [0],
      "flags": [],
      "containers": [
        {
          "HEVCSampleEntry": ["hvc3", "hev3"]
        }
      ],
      "type": "FullBox",
      "originalSyntax": "class DefaultHevcExtractorConstructorBox extends FullBox('dhec'){\r\n\tunsigned int(32) num_entries;\r\n\tfor (i=1; i<= num_entries; i++) { \r\n\t\tunsigned int(8) constructor_type;\r\n\t\tunsigned int(8) flags; \r\n\t\tif( constructor_type == 0 ) \r\n\t\t\tSampleConstructor();\r\n\t\telse if( constructor_type == 2 ) \r\n\t\t\tInlineConstructor();\r\n\t\telse if( constructor_type == 3 ) \r\n\t\t\tSampleConstructorFromTrackGroup();\r\n\t\telse if( constructor_type == 6 ) \r\n\t\t\tNALUStartInlineConstructor ();\r\n\t}\r\n}",
      "syntax": "class DefaultHevcExtractorConstructorBox extends FullBox('dhec'){\r\n\tunsigned int(32) num_entries;\r\n\tfor (i=1; i<= num_entries; i++) { \r\n\t\tunsigned int(8) constructor_type;\r\n\t\tunsigned int(8) constructor_flags; \r\n\t\tif( constructor_type == 0 ) \r\n\t\t\tSampleConstructor();\r\n\t\telse if( constructor_type == 2 ) \r\n\t\t\tInlineConstructor();\r\n\t\telse if( constructor_type == 3 ) \r\n\t\t\tSampleConstructorFromTrackGroup();\r\n\t\telse if( constructor_type == 6 ) \r\n\t\t\tNALUStartInlineConstructor ();\r\n\t}\r\n}"
    },
    {
      "fourcc": "svmC",
      "description": "SVC information configuration",
      "versions": [0],
      "flags": [],
      "containers": [
        {
          "SVCMetaDataSampleEntry": ["svcM"]
        }
      ],
      "type": "FullBox",
      "syntax": "class SVCMetadataSampleConfigBox extends FullBox('svmC')\r\n{\r\n\tint i;\t\t// local variable, not a field\r\n\tunsigned int(8) sample_statement_type;\t/* normally group, or seq */\r\n\tunsigned int(8) default_statement_type;\r\n\tunsigned int(8) default_statement_length;\r\n\tunsigned int(8) entry_count;\r\n\tfor (i=1; i<=entry_count; i++) {\r\n\t\tunsigned int(8) statement_type;\t// from the user extension ranges\r\n\t\tstring statement_namespace;\r\n\t}\r\n}"
    },
    {
      "fourcc": "evsC",
      "description": "Configuration for EVC slice component track",
      "containers": [
        {
          "EVCSliceComponentTrackSampleEntry": ["evs1", "evs2"]
        }
      ],
      "type": "Box",
      "syntax": "class EVCSliceComponentTrackConfigurationBox extends Box('evsC') {\r\n\tEVCSliceComponentTrackConfigurationRecord() config;\r\n}"
    }
  ]
}